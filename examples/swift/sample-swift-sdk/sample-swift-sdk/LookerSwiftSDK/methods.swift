// 334 API methods

/// NOTE: Do not edit this source code file. It is generated by Looker SDK Codegen.

import Foundation

@available(OSX 10.15, *)
class LookerSDK: APIMethods {

    /**
     * POST /integration_hubs/{integration_hub_id}/accept_legal_agreement -> SDKResponse<IntegrationHub, SDKError>
     */
    func accept_integration_hub_legal_agreement(
        /**
         * @param {Int64} integration_hub_id Id of integration_hub
         */
        _ integration_hub_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<IntegrationHub, SDKError> {
        let result: SDKResponse<IntegrationHub, SDKError> = self.post("/integration_hubs/\(integration_hub_id)/accept_legal_agreement".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /themes/active -> SDKResponse<[Theme], SDKError>
     */
    func active_themes(
        /**
         * @param {String} name Name of theme
         */
        name: String? = nil,
        /**
         * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
         */
        ts: Date? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Theme], SDKError> {
        let result: SDKResponse<[Theme], SDKError> = self.get("/themes/active", 
            ["name": name, "ts": ts as Any?, "fields": fields], nil, options)
        return result
    }

    /**
     * POST /groups/{group_id}/groups -> SDKResponse<Group, SDKError>
     */
    func add_group_group(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {Partial<GroupIdForGroupInclusion>} body
         */
        body: Partial<GroupIdForGroupInclusion>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Group, SDKError> {
        let result: SDKResponse<Group, SDKError> = self.post("/groups/\(group_id)/groups".encodePath(), nil, body, options)
        return result
    }

    /**
     * POST /groups/{group_id}/users -> SDKResponse<User, SDKError>
     */
    func add_group_user(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {Partial<GroupIdForGroupUserInclusion>} body
         */
        body: Partial<GroupIdForGroupUserInclusion>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<User, SDKError> {
        let result: SDKResponse<User, SDKError> = self.post("/groups/\(group_id)/users".encodePath(), nil, body, options)
        return result
    }

    /**
     * GET /color_collections -> SDKResponse<[ColorCollection], SDKError>
     */
    func all_color_collections(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ColorCollection], SDKError> {
        let result: SDKResponse<[ColorCollection], SDKError> = self.get("/color_collections", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /connections -> SDKResponse<[DBConnection], SDKError>
     */
    func all_connections(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DBConnection], SDKError> {
        let result: SDKResponse<[DBConnection], SDKError> = self.get("/connections", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /content_metadata_access -> SDKResponse<[ContentMetaGroupUser], SDKError>
     */
    func all_content_metadata_accesses(
        /**
         * @param {Int64} content_metadata_id Id of content metadata
         */
        _ content_metadata_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ContentMetaGroupUser], SDKError> {
        let result: SDKResponse<[ContentMetaGroupUser], SDKError> = self.get("/content_metadata_access", 
            ["content_metadata_id": content_metadata_id, "fields": fields], nil, options)
        return result
    }

    /**
     * GET /content_metadata -> SDKResponse<[ContentMeta], SDKError>
     */
    func all_content_metadatas(
        /**
         * @param {Int64} parent_id Parent space of content.
         */
        _ parent_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ContentMeta], SDKError> {
        let result: SDKResponse<[ContentMeta], SDKError> = self.get("/content_metadata", 
            ["parent_id": parent_id, "fields": fields], nil, options)
        return result
    }

    /**
     * GET /dashboards -> SDKResponse<[DashboardBase], SDKError>
     */
    func all_dashboards(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DashboardBase], SDKError> {
        let result: SDKResponse<[DashboardBase], SDKError> = self.get("/dashboards", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /datagroups -> SDKResponse<[Datagroup], SDKError>
     */
    func all_datagroups(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Datagroup], SDKError> {
        let result: SDKResponse<[Datagroup], SDKError> = self.get("/datagroups", nil, nil, options)
        return result
    }

    /**
     * GET /dialect_info -> SDKResponse<[DialectInfo], SDKError>
     */
    func all_dialect_infos(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DialectInfo], SDKError> {
        let result: SDKResponse<[DialectInfo], SDKError> = self.get("/dialect_info", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /folders -> SDKResponse<[Folder], SDKError>
     */
    func all_folders(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Folder], SDKError> {
        let result: SDKResponse<[Folder], SDKError> = self.get("/folders", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /projects/{project_id}/git_branches -> SDKResponse<[GitBranch], SDKError>
     */
    func all_git_branches(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[GitBranch], SDKError> {
        let result: SDKResponse<[GitBranch], SDKError> = self.get("/projects/\(project_id)/git_branches".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /projects/{project_id}/git_connection_tests -> SDKResponse<[GitConnectionTest], SDKError>
     */
    func all_git_connection_tests(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
         */
        remote_url: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[GitConnectionTest], SDKError> {
        let result: SDKResponse<[GitConnectionTest], SDKError> = self.get("/projects/\(project_id)/git_connection_tests".encodePath(), 
            ["remote_url": remote_url], nil, options)
        return result
    }

    /**
     * GET /groups/{group_id}/groups -> SDKResponse<[Group], SDKError>
     */
    func all_group_groups(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Group], SDKError> {
        let result: SDKResponse<[Group], SDKError> = self.get("/groups/\(group_id)/groups".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /groups/{group_id}/users -> SDKResponse<[User], SDKError>
     */
    func all_group_users(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[User], SDKError> {
        let result: SDKResponse<[User], SDKError> = self.get("/groups/\(group_id)/users".encodePath(), 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts], nil, options)
        return result
    }

    /**
     * GET /groups -> SDKResponse<[Group], SDKError>
     */
    func all_groups(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {DelimArray<Int64>} ids Optional of ids to get specific groups.
         */
        ids: DelimArray<Int64>? = nil,
        /**
         * @param {Int64} content_metadata_id Id of content metadata to which groups must have access.
         */
        content_metadata_id: Int64? = nil,
        /**
         * @param {Bool} can_add_to_content_metadata Select only groups that either can/cannot be given access to content.
         */
        can_add_to_content_metadata: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Group], SDKError> {
        let result: SDKResponse<[Group], SDKError> = self.get("/groups", 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts, "ids": ids as Any?, "content_metadata_id": content_metadata_id, "can_add_to_content_metadata": can_add_to_content_metadata as Any?], nil, options)
        return result
    }

    /**
     * GET /homepage_items -> SDKResponse<[HomepageItem], SDKError>
     */
    func all_homepage_items(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} homepage_section_id Filter to a specific homepage section
         */
        homepage_section_id: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[HomepageItem], SDKError> {
        let result: SDKResponse<[HomepageItem], SDKError> = self.get("/homepage_items", 
            ["fields": fields, "sorts": sorts, "homepage_section_id": homepage_section_id], nil, options)
        return result
    }

    /**
     * GET /homepage_sections -> SDKResponse<[HomepageSection], SDKError>
     */
    func all_homepage_sections(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[HomepageSection], SDKError> {
        let result: SDKResponse<[HomepageSection], SDKError> = self.get("/homepage_sections", 
            ["fields": fields, "sorts": sorts], nil, options)
        return result
    }

    /**
     * GET /homepages -> SDKResponse<[Homepage], SDKError>
     */
    func all_homepages(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Homepage], SDKError> {
        let result: SDKResponse<[Homepage], SDKError> = self.get("/homepages", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /integration_hubs -> SDKResponse<[IntegrationHub], SDKError>
     */
    func all_integration_hubs(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[IntegrationHub], SDKError> {
        let result: SDKResponse<[IntegrationHub], SDKError> = self.get("/integration_hubs", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /integrations -> SDKResponse<[Integration], SDKError>
     */
    func all_integrations(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} integration_hub_id Filter to a specific provider
         */
        integration_hub_id: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Integration], SDKError> {
        let result: SDKResponse<[Integration], SDKError> = self.get("/integrations", 
            ["fields": fields, "integration_hub_id": integration_hub_id], nil, options)
        return result
    }

    /**
     * GET /legacy_features -> SDKResponse<[LegacyFeature], SDKError>
     */
    func all_legacy_features(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LegacyFeature], SDKError> {
        let result: SDKResponse<[LegacyFeature], SDKError> = self.get("/legacy_features", nil, nil, options)
        return result
    }

    /**
     * GET /locales -> SDKResponse<[Locale], SDKError>
     */
    func all_locales(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Locale], SDKError> {
        let result: SDKResponse<[Locale], SDKError> = self.get("/locales", nil, nil, options)
        return result
    }

    /**
     * GET /lookml_models -> SDKResponse<[LookmlModel], SDKError>
     */
    func all_lookml_models(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LookmlModel], SDKError> {
        let result: SDKResponse<[LookmlModel], SDKError> = self.get("/lookml_models", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /projects/{project_id}/lookml_tests -> SDKResponse<[LookmlTest], SDKError>
     */
    func all_lookml_tests(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} file_id File Id
         */
        file_id: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LookmlTest], SDKError> {
        let result: SDKResponse<[LookmlTest], SDKError> = self.get("/projects/\(project_id)/lookml_tests".encodePath(), 
            ["file_id": file_id], nil, options)
        return result
    }

    /**
     * GET /looks -> SDKResponse<[Look], SDKError>
     */
    func all_looks(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Look], SDKError> {
        let result: SDKResponse<[Look], SDKError> = self.get("/looks", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /model_sets -> SDKResponse<[ModelSet], SDKError>
     */
    func all_model_sets(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ModelSet], SDKError> {
        let result: SDKResponse<[ModelSet], SDKError> = self.get("/model_sets", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /permission_sets -> SDKResponse<[PermissionSet], SDKError>
     */
    func all_permission_sets(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[PermissionSet], SDKError> {
        let result: SDKResponse<[PermissionSet], SDKError> = self.get("/permission_sets", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /permissions -> SDKResponse<[Permission], SDKError>
     */
    func all_permissions(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Permission], SDKError> {
        let result: SDKResponse<[Permission], SDKError> = self.get("/permissions", nil, nil, options)
        return result
    }

    /**
     * GET /projects/{project_id}/files -> SDKResponse<[ProjectFile], SDKError>
     */
    func all_project_files(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ProjectFile], SDKError> {
        let result: SDKResponse<[ProjectFile], SDKError> = self.get("/projects/\(project_id)/files".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /projects -> SDKResponse<[Project], SDKError>
     */
    func all_projects(
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Project], SDKError> {
        let result: SDKResponse<[Project], SDKError> = self.get("/projects", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /roles -> SDKResponse<[Role], SDKError>
     */
    func all_roles(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {DelimArray<Int64>} ids Optional list of ids to get specific roles.
         */
        ids: DelimArray<Int64>? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Role], SDKError> {
        let result: SDKResponse<[Role], SDKError> = self.get("/roles", 
            ["fields": fields, "ids": ids as Any?], nil, options)
        return result
    }

    /**
     * GET /running_queries -> SDKResponse<[RunningQueries], SDKError>
     */
    func all_running_queries(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[RunningQueries], SDKError> {
        let result: SDKResponse<[RunningQueries], SDKError> = self.get("/running_queries", nil, nil, options)
        return result
    }

    /**
     * GET /scheduled_plans -> SDKResponse<[ScheduledPlan], SDKError>
     */
    func all_scheduled_plans(
        /**
         * @param {Int64} user_id Return scheduled plans belonging to this user_id. If not provided, returns scheduled plans owned by the caller.
         */
        user_id: Int64? = nil,
        /**
         * @param {String} fields Comma delimited list of field names. If provided, only the fields specified will be included in the response
         */
        fields: String? = nil,
        /**
         * @param {Bool} all_users Return scheduled plans belonging to all users (caller needs see_schedules permission)
         */
        all_users: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ScheduledPlan], SDKError> {
        let result: SDKResponse<[ScheduledPlan], SDKError> = self.get("/scheduled_plans", 
            ["user_id": user_id, "fields": fields, "all_users": all_users as Any?], nil, options)
        return result
    }

    /**
     * GET /spaces -> SDKResponse<[SpaceBase], SDKError>
     */
    func all_spaces(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[SpaceBase], SDKError> {
        let result: SDKResponse<[SpaceBase], SDKError> = self.get("/spaces", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /themes -> SDKResponse<[Theme], SDKError>
     */
    func all_themes(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Theme], SDKError> {
        let result: SDKResponse<[Theme], SDKError> = self.get("/themes", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /timezones -> SDKResponse<[Timezone], SDKError>
     */
    func all_timezones(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Timezone], SDKError> {
        let result: SDKResponse<[Timezone], SDKError> = self.get("/timezones", nil, nil, options)
        return result
    }

    /**
     * GET /user_attributes/{user_attribute_id}/group_values -> SDKResponse<[UserAttributeGroupValue], SDKError>
     */
    func all_user_attribute_group_values(
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[UserAttributeGroupValue], SDKError> {
        let result: SDKResponse<[UserAttributeGroupValue], SDKError> = self.get("/user_attributes/\(user_attribute_id)/group_values".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /user_attributes -> SDKResponse<[UserAttribute], SDKError>
     */
    func all_user_attributes(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} sorts Fields to order the results by. Sortable fields include: name, label
         */
        sorts: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[UserAttribute], SDKError> {
        let result: SDKResponse<[UserAttribute], SDKError> = self.get("/user_attributes", 
            ["fields": fields, "sorts": sorts], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/credentials_api3 -> SDKResponse<[CredentialsApi3], SDKError>
     */
    func all_user_credentials_api3s(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[CredentialsApi3], SDKError> {
        let result: SDKResponse<[CredentialsApi3], SDKError> = self.get("/users/\(user_id)/credentials_api3".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/credentials_embed -> SDKResponse<[CredentialsEmbed], SDKError>
     */
    func all_user_credentials_embeds(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[CredentialsEmbed], SDKError> {
        let result: SDKResponse<[CredentialsEmbed], SDKError> = self.get("/users/\(user_id)/credentials_embed".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /user_login_lockouts -> SDKResponse<[UserLoginLockout], SDKError>
     */
    func all_user_login_lockouts(
        /**
         * @param {String} fields Include only these fields in the response
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[UserLoginLockout], SDKError> {
        let result: SDKResponse<[UserLoginLockout], SDKError> = self.get("/user_login_lockouts", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/sessions -> SDKResponse<[Session], SDKError>
     */
    func all_user_sessions(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Session], SDKError> {
        let result: SDKResponse<[Session], SDKError> = self.get("/users/\(user_id)/sessions".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users -> SDKResponse<[User], SDKError>
     */
    func all_users(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {DelimArray<Int64>} ids Optional list of ids to get specific users.
         */
        ids: DelimArray<Int64>? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[User], SDKError> {
        let result: SDKResponse<[User], SDKError> = self.get("/users", 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts, "ids": ids as Any?], nil, options)
        return result
    }

    /**
     * GET /workspaces -> SDKResponse<[Workspace], SDKError>
     */
    func all_workspaces(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Workspace], SDKError> {
        let result: SDKResponse<[Workspace], SDKError> = self.get("/workspaces", nil, nil, options)
        return result
    }

    /**
     * GET /backup_configuration -> SDKResponse<BackupConfiguration, SDKError>
     */
    func backup_configuration(
        options: ITransportSettings? = nil
    ) -> SDKResponse<BackupConfiguration, SDKError> {
        let result: SDKResponse<BackupConfiguration, SDKError> = self.get("/backup_configuration", nil, nil, options)
        return result
    }

    /**
     * GET /color_collections/{collection_id} -> SDKResponse<ColorCollection, SDKError>
     */
    func color_collection(
        /**
         * @param {String} collection_id Id of Color Collection
         */
        _ collection_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ColorCollection, SDKError> {
        let result: SDKResponse<ColorCollection, SDKError> = self.get("/color_collections/\(collection_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /color_collections/custom -> SDKResponse<[ColorCollection], SDKError>
     */
    func color_collections_custom(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ColorCollection], SDKError> {
        let result: SDKResponse<[ColorCollection], SDKError> = self.get("/color_collections/custom", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /color_collections/standard -> SDKResponse<[ColorCollection], SDKError>
     */
    func color_collections_standard(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ColorCollection], SDKError> {
        let result: SDKResponse<[ColorCollection], SDKError> = self.get("/color_collections/standard", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /connections/{connection_name} -> SDKResponse<DBConnection, SDKError>
     */
    func connection(
        /**
         * @param {String} connection_name Name of connection
         */
        _ connection_name: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DBConnection, SDKError> {
        let result: SDKResponse<DBConnection, SDKError> = self.get("/connections/\(connection_name)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /content_favorite/{content_favorite_id} -> SDKResponse<ContentFavorite, SDKError>
     */
    func content_favorite(
        /**
         * @param {Int64} content_favorite_id Id of favorite content
         */
        _ content_favorite_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentFavorite, SDKError> {
        let result: SDKResponse<ContentFavorite, SDKError> = self.get("/content_favorite/\(content_favorite_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /content_metadata/{content_metadata_id} -> SDKResponse<ContentMeta, SDKError>
     */
    func content_metadata(
        /**
         * @param {Int64} content_metadata_id Id of content metadata
         */
        _ content_metadata_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentMeta, SDKError> {
        let result: SDKResponse<ContentMeta, SDKError> = self.get("/content_metadata/\(content_metadata_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /content_validation -> SDKResponse<ContentValidation, SDKError>
     */
    func content_validation(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentValidation, SDKError> {
        let result: SDKResponse<ContentValidation, SDKError> = self.get("/content_validation", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * POST /color_collections -> SDKResponse<ColorCollection, SDKError>
     */
    func create_color_collection(
        /**
         * @param {Partial<WriteColorCollection>} body
         */
        body: Partial<WriteColorCollection>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ColorCollection, SDKError> {
        let result: SDKResponse<ColorCollection, SDKError> = self.post("/color_collections", nil, body, options)
        return result
    }

    /**
     * POST /connections -> SDKResponse<DBConnection, SDKError>
     */
    func create_connection(
        /**
         * @param {Partial<WriteDBConnection>} body
         */
        body: Partial<WriteDBConnection>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DBConnection, SDKError> {
        let result: SDKResponse<DBConnection, SDKError> = self.post("/connections", nil, body, options)
        return result
    }

    /**
     * POST /content_favorite -> SDKResponse<ContentFavorite, SDKError>
     */
    func create_content_favorite(
        /**
         * @param {Partial<WriteContentFavorite>} body
         */
        body: Partial<WriteContentFavorite>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentFavorite, SDKError> {
        let result: SDKResponse<ContentFavorite, SDKError> = self.post("/content_favorite", nil, body, options)
        return result
    }

    /**
     * POST /content_metadata_access -> SDKResponse<ContentMetaGroupUser, SDKError>
     */
    func create_content_metadata_access(
        /**
         * @param {Partial<ContentMetaGroupUser>} body
         */
        body: Partial<ContentMetaGroupUser>?,
        /**
         * @param {Bool} send_boards_notification_email Optionally sends notification email when granting access to a board.
         */
        send_boards_notification_email: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentMetaGroupUser, SDKError> {
        let result: SDKResponse<ContentMetaGroupUser, SDKError> = self.post("/content_metadata_access", 
            ["send_boards_notification_email": send_boards_notification_email as Any?], body, options)
        return result
    }

    /**
     * POST /dashboards -> SDKResponse<Dashboard, SDKError>
     */
    func create_dashboard(
        /**
         * @param {Partial<WriteDashboard>} body
         */
        body: Partial<WriteDashboard>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Dashboard, SDKError> {
        let result: SDKResponse<Dashboard, SDKError> = self.post("/dashboards", nil, body, options)
        return result
    }

    /**
     * POST /dashboard_elements -> SDKResponse<DashboardElement, SDKError>
     */
    func create_dashboard_element(
        /**
         * @param {Partial<WriteDashboardElement>} body
         */
        body: Partial<WriteDashboardElement>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardElement, SDKError> {
        let result: SDKResponse<DashboardElement, SDKError> = self.post("/dashboard_elements", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /dashboard_filters -> SDKResponse<DashboardFilter, SDKError>
     */
    func create_dashboard_filter(
        /**
         * @param {Partial<WriteCreateDashboardFilter>} body
         */
        _ body: Partial<WriteCreateDashboardFilter>,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardFilter, SDKError> {
        let result: SDKResponse<DashboardFilter, SDKError> = self.post("/dashboard_filters", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /dashboard_layouts -> SDKResponse<DashboardLayout, SDKError>
     */
    func create_dashboard_layout(
        /**
         * @param {Partial<WriteDashboardLayout>} body
         */
        body: Partial<WriteDashboardLayout>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardLayout, SDKError> {
        let result: SDKResponse<DashboardLayout, SDKError> = self.post("/dashboard_layouts", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /render_tasks/dashboards/{dashboard_id}/{result_format} -> SDKResponse<RenderTask, SDKError>
     */
    func create_dashboard_render_task(
        /**
         * @param {Int64} dashboard_id Id of dashboard to render
         */
        _ dashboard_id: Int64,
        /**
         * @param {String} result_format Output type: pdf, png, or jpg
         */
        _ result_format: String,
        /**
         * @param {Partial<CreateDashboardRenderTask>} body
         */
        _ body: Partial<CreateDashboardRenderTask>,
        /**
         * @param {Int64} width Output width in pixels
         */
        _ width: Int64,
        /**
         * @param {Int64} height Output height in pixels
         */
        _ height: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} pdf_paper_size Paper size for pdf
         */
        pdf_paper_size: String? = nil,
        /**
         * @param {Bool} pdf_landscape Whether to render pdf in landscape
         */
        pdf_landscape: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<RenderTask, SDKError> {
        let result: SDKResponse<RenderTask, SDKError> = self.post("/render_tasks/dashboards/\(dashboard_id)/\(result_format)".encodePath(), 
            ["width": width, "height": height, "fields": fields, "pdf_paper_size": pdf_paper_size, "pdf_landscape": pdf_landscape as Any?], body, options)
        return result
    }

    /**
     * POST /folders -> SDKResponse<Folder, SDKError>
     */
    func create_folder(
        /**
         * @param {Partial<WriteFolder>} body
         */
        body: Partial<WriteFolder>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Folder, SDKError> {
        let result: SDKResponse<Folder, SDKError> = self.post("/folders", nil, body, options)
        return result
    }

    /**
     * POST /projects/{project_id}/git_branch -> SDKResponse<GitBranch, SDKError>
     */
    func create_git_branch(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {Partial<WriteGitBranch>} body
         */
        body: Partial<WriteGitBranch>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<GitBranch, SDKError> {
        let result: SDKResponse<GitBranch, SDKError> = self.post("/projects/\(project_id)/git_branch".encodePath(), nil, body, options)
        return result
    }

    /**
     * POST /projects/{project_id}/git/deploy_key -> SDKResponse<String, SDKError>
     */
    func create_git_deploy_key(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.post("/projects/\(project_id)/git/deploy_key".encodePath(), nil, nil, options)
        return result
    }

    /**
     * POST /groups -> SDKResponse<Group, SDKError>
     */
    func create_group(
        /**
         * @param {Partial<WriteGroup>} body
         */
        body: Partial<WriteGroup>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Group, SDKError> {
        let result: SDKResponse<Group, SDKError> = self.post("/groups", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /homepages -> SDKResponse<Homepage, SDKError>
     */
    func create_homepage(
        /**
         * @param {Partial<WriteHomepage>} body
         */
        body: Partial<WriteHomepage>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Homepage, SDKError> {
        let result: SDKResponse<Homepage, SDKError> = self.post("/homepages", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /homepage_items -> SDKResponse<HomepageItem, SDKError>
     */
    func create_homepage_item(
        /**
         * @param {Partial<WriteHomepageItem>} body
         */
        body: Partial<WriteHomepageItem>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<HomepageItem, SDKError> {
        let result: SDKResponse<HomepageItem, SDKError> = self.post("/homepage_items", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /homepage_sections -> SDKResponse<HomepageSection, SDKError>
     */
    func create_homepage_section(
        /**
         * @param {Partial<WriteHomepageSection>} body
         */
        body: Partial<WriteHomepageSection>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<HomepageSection, SDKError> {
        let result: SDKResponse<HomepageSection, SDKError> = self.post("/homepage_sections", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /integration_hubs -> SDKResponse<IntegrationHub, SDKError>
     */
    func create_integration_hub(
        /**
         * @param {Partial<WriteIntegrationHub>} body
         */
        body: Partial<WriteIntegrationHub>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<IntegrationHub, SDKError> {
        let result: SDKResponse<IntegrationHub, SDKError> = self.post("/integration_hubs", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /looks -> SDKResponse<LookWithQuery, SDKError>
     */
    func create_look(
        /**
         * @param {Partial<WriteLookWithQuery>} body
         */
        body: Partial<WriteLookWithQuery>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookWithQuery, SDKError> {
        let result: SDKResponse<LookWithQuery, SDKError> = self.post("/looks", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /render_tasks/looks/{look_id}/{result_format} -> SDKResponse<RenderTask, SDKError>
     */
    func create_look_render_task(
        /**
         * @param {Int64} look_id Id of look to render
         */
        _ look_id: Int64,
        /**
         * @param {String} result_format Output type: png, or jpg
         */
        _ result_format: String,
        /**
         * @param {Int64} width Output width in pixels
         */
        _ width: Int64,
        /**
         * @param {Int64} height Output height in pixels
         */
        _ height: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<RenderTask, SDKError> {
        let result: SDKResponse<RenderTask, SDKError> = self.post("/render_tasks/looks/\(look_id)/\(result_format)".encodePath(), 
            ["width": width, "height": height, "fields": fields], nil, options)
        return result
    }

    /**
     * POST /render_tasks/lookml_dashboards/{dashboard_id}/{result_format} -> SDKResponse<RenderTask, SDKError>
     */
    func create_lookml_dashboard_render_task(
        /**
         * @param {String} dashboard_id Id of lookml dashboard to render
         */
        _ dashboard_id: String,
        /**
         * @param {String} result_format Output type: pdf, png, or jpg
         */
        _ result_format: String,
        /**
         * @param {Partial<CreateDashboardRenderTask>} body
         */
        _ body: Partial<CreateDashboardRenderTask>,
        /**
         * @param {Int64} width Output width in pixels
         */
        _ width: Int64,
        /**
         * @param {Int64} height Output height in pixels
         */
        _ height: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} pdf_paper_size Paper size for pdf
         */
        pdf_paper_size: String? = nil,
        /**
         * @param {Bool} pdf_landscape Whether to render pdf in landscape
         */
        pdf_landscape: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<RenderTask, SDKError> {
        let result: SDKResponse<RenderTask, SDKError> = self.post("/render_tasks/lookml_dashboards/\(dashboard_id)/\(result_format)".encodePath(), 
            ["width": width, "height": height, "fields": fields, "pdf_paper_size": pdf_paper_size, "pdf_landscape": pdf_landscape as Any?], body, options)
        return result
    }

    /**
     * POST /lookml_models -> SDKResponse<LookmlModel, SDKError>
     */
    func create_lookml_model(
        /**
         * @param {Partial<WriteLookmlModel>} body
         */
        body: Partial<WriteLookmlModel>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookmlModel, SDKError> {
        let result: SDKResponse<LookmlModel, SDKError> = self.post("/lookml_models", nil, body, options)
        return result
    }

    /**
     * POST /merge_queries -> SDKResponse<MergeQuery, SDKError>
     */
    func create_merge_query(
        /**
         * @param {Partial<WriteMergeQuery>} body
         */
        body: Partial<WriteMergeQuery>?,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<MergeQuery, SDKError> {
        let result: SDKResponse<MergeQuery, SDKError> = self.post("/merge_queries", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /model_sets -> SDKResponse<ModelSet, SDKError>
     */
    func create_model_set(
        /**
         * @param {Partial<WriteModelSet>} body
         */
        body: Partial<WriteModelSet>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ModelSet, SDKError> {
        let result: SDKResponse<ModelSet, SDKError> = self.post("/model_sets", nil, body, options)
        return result
    }

    /**
     * POST /oidc_test_configs -> SDKResponse<OIDCConfig, SDKError>
     */
    func create_oidc_test_config(
        /**
         * @param {Partial<WriteOIDCConfig>} body
         */
        _ body: Partial<WriteOIDCConfig>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<OIDCConfig, SDKError> {
        let result: SDKResponse<OIDCConfig, SDKError> = self.post("/oidc_test_configs", nil, body, options)
        return result
    }

    /**
     * POST /permission_sets -> SDKResponse<PermissionSet, SDKError>
     */
    func create_permission_set(
        /**
         * @param {Partial<WritePermissionSet>} body
         */
        body: Partial<WritePermissionSet>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<PermissionSet, SDKError> {
        let result: SDKResponse<PermissionSet, SDKError> = self.post("/permission_sets", nil, body, options)
        return result
    }

    /**
     * POST /projects -> SDKResponse<Project, SDKError>
     */
    func create_project(
        /**
         * @param {Partial<WriteProject>} body
         */
        body: Partial<WriteProject>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Project, SDKError> {
        let result: SDKResponse<Project, SDKError> = self.post("/projects", nil, body, options)
        return result
    }

    /**
     * POST /queries -> SDKResponse<Query, SDKError>
     */
    func create_query(
        /**
         * @param {Partial<WriteQuery>} body
         */
        body: Partial<WriteQuery>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Query, SDKError> {
        let result: SDKResponse<Query, SDKError> = self.post("/queries", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /render_tasks/queries/{query_id}/{result_format} -> SDKResponse<RenderTask, SDKError>
     */
    func create_query_render_task(
        /**
         * @param {Int64} query_id Id of the query to render
         */
        _ query_id: Int64,
        /**
         * @param {String} result_format Output type: png or jpg
         */
        _ result_format: String,
        /**
         * @param {Int64} width Output width in pixels
         */
        _ width: Int64,
        /**
         * @param {Int64} height Output height in pixels
         */
        _ height: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<RenderTask, SDKError> {
        let result: SDKResponse<RenderTask, SDKError> = self.post("/render_tasks/queries/\(query_id)/\(result_format)".encodePath(), 
            ["width": width, "height": height, "fields": fields], nil, options)
        return result
    }

    /**
     * POST /query_tasks -> SDKResponse<QueryTask, SDKError>
     */
    func create_query_task(
        /**
         * @param {Partial<WriteCreateQueryTask>} body
         */
        _ body: Partial<WriteCreateQueryTask>,
        /**
         * @param {Int64} limit Row limit (may override the limit in the saved query).
         */
        limit: Int64? = nil,
        /**
         * @param {Bool} apply_formatting Apply model-specified formatting to each result.
         */
        apply_formatting: Bool? = nil,
        /**
         * @param {Bool} apply_vis Apply visualization options to results.
         */
        apply_vis: Bool? = nil,
        /**
         * @param {Bool} cache Get results from cache if available.
         */
        cache: Bool? = nil,
        /**
         * @param {Int64} image_width Render width for image formats.
         */
        image_width: Int64? = nil,
        /**
         * @param {Int64} image_height Render height for image formats.
         */
        image_height: Int64? = nil,
        /**
         * @param {Bool} generate_drill_links Generate drill links (only applicable to 'json_detail' format.
         */
        generate_drill_links: Bool? = nil,
        /**
         * @param {Bool} force_production Force use of production models even if the user is in development mode.
         */
        force_production: Bool? = nil,
        /**
         * @param {Bool} cache_only Retrieve any results from cache even if the results have expired.
         */
        cache_only: Bool? = nil,
        /**
         * @param {String} path_prefix Prefix to use for drill links (url encoded).
         */
        path_prefix: String? = nil,
        /**
         * @param {Bool} rebuild_pdts Rebuild PDTS used in query.
         */
        rebuild_pdts: Bool? = nil,
        /**
         * @param {Bool} server_table_calcs Perform table calculations on query results
         */
        server_table_calcs: Bool? = nil,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<QueryTask, SDKError> {
        let result: SDKResponse<QueryTask, SDKError> = self.post("/query_tasks", 
            ["limit": limit, "apply_formatting": apply_formatting as Any?, "apply_vis": apply_vis as Any?, "cache": cache as Any?, "image_width": image_width, "image_height": image_height, "generate_drill_links": generate_drill_links as Any?, "force_production": force_production as Any?, "cache_only": cache_only as Any?, "path_prefix": path_prefix, "rebuild_pdts": rebuild_pdts as Any?, "server_table_calcs": server_table_calcs as Any?, "fields": fields], body, options)
        return result
    }

    /**
     * POST /roles -> SDKResponse<Role, SDKError>
     */
    func create_role(
        /**
         * @param {Partial<WriteRole>} body
         */
        body: Partial<WriteRole>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Role, SDKError> {
        let result: SDKResponse<Role, SDKError> = self.post("/roles", nil, body, options)
        return result
    }

    /**
     * POST /saml_test_configs -> SDKResponse<SamlConfig, SDKError>
     */
    func create_saml_test_config(
        /**
         * @param {Partial<WriteSamlConfig>} body
         */
        _ body: Partial<WriteSamlConfig>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SamlConfig, SDKError> {
        let result: SDKResponse<SamlConfig, SDKError> = self.post("/saml_test_configs", nil, body, options)
        return result
    }

    /**
     * POST /scheduled_plans -> SDKResponse<ScheduledPlan, SDKError>
     */
    func create_scheduled_plan(
        /**
         * @param {Partial<WriteScheduledPlan>} body
         */
        body: Partial<WriteScheduledPlan>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ScheduledPlan, SDKError> {
        let result: SDKResponse<ScheduledPlan, SDKError> = self.post("/scheduled_plans", nil, body, options)
        return result
    }

    /**
     * POST /spaces -> SDKResponse<Space, SDKError>
     */
    func create_space(
        /**
         * @param {Partial<WriteSpace>} body
         */
        _ body: Partial<WriteSpace>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Space, SDKError> {
        let result: SDKResponse<Space, SDKError> = self.post("/spaces", nil, body, options)
        return result
    }

    /**
     * POST /sql_queries -> SDKResponse<SqlQuery, SDKError>
     */
    func create_sql_query(
        /**
         * @param {Partial<WriteSqlQueryCreate>} body
         */
        _ body: Partial<WriteSqlQueryCreate>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SqlQuery, SDKError> {
        let result: SDKResponse<SqlQuery, SDKError> = self.post("/sql_queries", nil, body, options)
        return result
    }

    /**
     * POST /embed/sso_url -> SDKResponse<EmbedSsoUrl, SDKError>
     */
    func create_sso_embed_url(
        /**
         * @param {Partial<WriteEmbedSsoUrlParams>} body
         */
        _ body: Partial<WriteEmbedSsoUrlParams>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<EmbedSsoUrl, SDKError> {
        let result: SDKResponse<EmbedSsoUrl, SDKError> = self.post("/embed/sso_url", nil, body, options)
        return result
    }

    /**
     * POST /themes -> SDKResponse<Theme, SDKError>
     */
    func create_theme(
        /**
         * @param {Partial<WriteTheme>} body
         */
        body: Partial<WriteTheme>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Theme, SDKError> {
        let result: SDKResponse<Theme, SDKError> = self.post("/themes", nil, body, options)
        return result
    }

    /**
     * POST /users -> SDKResponse<User, SDKError>
     */
    func create_user(
        /**
         * @param {Partial<WriteUser>} body
         */
        body: Partial<WriteUser>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<User, SDKError> {
        let result: SDKResponse<User, SDKError> = self.post("/users", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /user_attributes -> SDKResponse<UserAttribute, SDKError>
     */
    func create_user_attribute(
        /**
         * @param {Partial<WriteUserAttribute>} body
         */
        body: Partial<WriteUserAttribute>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<UserAttribute, SDKError> {
        let result: SDKResponse<UserAttribute, SDKError> = self.post("/user_attributes", 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /users/{user_id}/credentials_api3 -> SDKResponse<CredentialsApi3, SDKError>
     */
    func create_user_credentials_api3(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {Partial<CredentialsApi3>} body
         */
        body: Partial<CredentialsApi3>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsApi3, SDKError> {
        let result: SDKResponse<CredentialsApi3, SDKError> = self.post("/users/\(user_id)/credentials_api3".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /users/{user_id}/credentials_email -> SDKResponse<CredentialsEmail, SDKError>
     */
    func create_user_credentials_email(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {Partial<WriteCredentialsEmail>} body
         */
        body: Partial<WriteCredentialsEmail>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsEmail, SDKError> {
        let result: SDKResponse<CredentialsEmail, SDKError> = self.post("/users/\(user_id)/credentials_email".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * POST /users/{user_id}/credentials_email/password_reset -> SDKResponse<CredentialsEmail, SDKError>
     */
    func create_user_credentials_email_password_reset(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Bool} expires Expiring token.
         */
        expires: Bool? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsEmail, SDKError> {
        let result: SDKResponse<CredentialsEmail, SDKError> = self.post("/users/\(user_id)/credentials_email/password_reset".encodePath(), 
            ["expires": expires as Any?, "fields": fields], nil, options)
        return result
    }

    /**
     * POST /users/{user_id}/credentials_totp -> SDKResponse<CredentialsTotp, SDKError>
     */
    func create_user_credentials_totp(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {Partial<CredentialsTotp>} body
         */
        body: Partial<CredentialsTotp>?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsTotp, SDKError> {
        let result: SDKResponse<CredentialsTotp, SDKError> = self.post("/users/\(user_id)/credentials_totp".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * GET /custom_welcome_email -> SDKResponse<CustomWelcomeEmail, SDKError>
     */
    func custom_welcome_email(
        options: ITransportSettings? = nil
    ) -> SDKResponse<CustomWelcomeEmail, SDKError> {
        let result: SDKResponse<CustomWelcomeEmail, SDKError> = self.get("/custom_welcome_email", nil, nil, options)
        return result
    }

    /**
     * GET /dashboards/{dashboard_id} -> SDKResponse<Dashboard, SDKError>
     */
    func dashboard(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Dashboard, SDKError> {
        let result: SDKResponse<Dashboard, SDKError> = self.get("/dashboards/\(dashboard_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /dashboards/{dashboard_id}/dashboard_elements -> SDKResponse<[DashboardElement], SDKError>
     */
    func dashboard_dashboard_elements(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DashboardElement], SDKError> {
        let result: SDKResponse<[DashboardElement], SDKError> = self.get("/dashboards/\(dashboard_id)/dashboard_elements".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /dashboards/{dashboard_id}/dashboard_filters -> SDKResponse<[DashboardFilter], SDKError>
     */
    func dashboard_dashboard_filters(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DashboardFilter], SDKError> {
        let result: SDKResponse<[DashboardFilter], SDKError> = self.get("/dashboards/\(dashboard_id)/dashboard_filters".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /dashboards/{dashboard_id}/dashboard_layouts -> SDKResponse<[DashboardLayout], SDKError>
     */
    func dashboard_dashboard_layouts(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DashboardLayout], SDKError> {
        let result: SDKResponse<[DashboardLayout], SDKError> = self.get("/dashboards/\(dashboard_id)/dashboard_layouts".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /dashboard_elements/{dashboard_element_id} -> SDKResponse<DashboardElement, SDKError>
     */
    func dashboard_element(
        /**
         * @param {String} dashboard_element_id Id of dashboard element
         */
        _ dashboard_element_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardElement, SDKError> {
        let result: SDKResponse<DashboardElement, SDKError> = self.get("/dashboard_elements/\(dashboard_element_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /dashboard_filters/{dashboard_filter_id} -> SDKResponse<DashboardFilter, SDKError>
     */
    func dashboard_filter(
        /**
         * @param {String} dashboard_filter_id Id of dashboard filters
         */
        _ dashboard_filter_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardFilter, SDKError> {
        let result: SDKResponse<DashboardFilter, SDKError> = self.get("/dashboard_filters/\(dashboard_filter_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /dashboard_layouts/{dashboard_layout_id} -> SDKResponse<DashboardLayout, SDKError>
     */
    func dashboard_layout(
        /**
         * @param {String} dashboard_layout_id Id of dashboard layouts
         */
        _ dashboard_layout_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardLayout, SDKError> {
        let result: SDKResponse<DashboardLayout, SDKError> = self.get("/dashboard_layouts/\(dashboard_layout_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /dashboard_layout_components/{dashboard_layout_component_id} -> SDKResponse<DashboardLayoutComponent, SDKError>
     */
    func dashboard_layout_component(
        /**
         * @param {String} dashboard_layout_component_id Id of dashboard layout component
         */
        _ dashboard_layout_component_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardLayoutComponent, SDKError> {
        let result: SDKResponse<DashboardLayoutComponent, SDKError> = self.get("/dashboard_layout_components/\(dashboard_layout_component_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components -> SDKResponse<[DashboardLayoutComponent], SDKError>
     */
    func dashboard_layout_dashboard_layout_components(
        /**
         * @param {String} dashboard_layout_id Id of dashboard layout component
         */
        _ dashboard_layout_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DashboardLayoutComponent], SDKError> {
        let result: SDKResponse<[DashboardLayoutComponent], SDKError> = self.get("/dashboard_layouts/\(dashboard_layout_id)/dashboard_layout_components".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /datagroups/{datagroup_id} -> SDKResponse<Datagroup, SDKError>
     */
    func datagroup(
        /**
         * @param {String} datagroup_id ID of datagroup.
         */
        _ datagroup_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Datagroup, SDKError> {
        let result: SDKResponse<Datagroup, SDKError> = self.get("/datagroups/\(datagroup_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /color_collections/default -> SDKResponse<ColorCollection, SDKError>
     */
    func default_color_collection(
        options: ITransportSettings? = nil
    ) -> SDKResponse<ColorCollection, SDKError> {
        let result: SDKResponse<ColorCollection, SDKError> = self.get("/color_collections/default", nil, nil, options)
        return result
    }

    /**
     * GET /themes/default -> SDKResponse<Theme, SDKError>
     */
    func default_theme(
        /**
         * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
         */
        ts: Date? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Theme, SDKError> {
        let result: SDKResponse<Theme, SDKError> = self.get("/themes/default", 
            ["ts": ts as Any?], nil, options)
        return result
    }

    /**
     * DELETE /color_collections/{collection_id} -> SDKResponse<String, SDKError>
     */
    func delete_color_collection(
        /**
         * @param {String} collection_id Id of Color Collection
         */
        _ collection_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/color_collections/\(collection_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /connections/{connection_name} -> SDKResponse<String, SDKError>
     */
    func delete_connection(
        /**
         * @param {String} connection_name Name of connection
         */
        _ connection_name: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/connections/\(connection_name)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /connections/{connection_name}/connection_override/{override_context} -> SDKResponse<String, SDKError>
     */
    func delete_connection_override(
        /**
         * @param {String} connection_name Name of connection
         */
        _ connection_name: String,
        /**
         * @param {String} override_context Context of connection override
         */
        _ override_context: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/connections/\(connection_name)/connection_override/\(override_context)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /content_favorite/{content_favorite_id} -> SDKResponse<String, SDKError>
     */
    func delete_content_favorite(
        /**
         * @param {Int64} content_favorite_id Id of favorite content
         */
        _ content_favorite_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/content_favorite/\(content_favorite_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /content_metadata_access/{content_metadata_access_id} -> SDKResponse<String, SDKError>
     */
    func delete_content_metadata_access(
        /**
         * @param {Int64} content_metadata_access_id Id of content metadata access
         */
        _ content_metadata_access_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/content_metadata_access/\(content_metadata_access_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /dashboards/{dashboard_id} -> SDKResponse<String, SDKError>
     */
    func delete_dashboard(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/dashboards/\(dashboard_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /dashboard_elements/{dashboard_element_id} -> SDKResponse<String, SDKError>
     */
    func delete_dashboard_element(
        /**
         * @param {String} dashboard_element_id Id of dashboard element
         */
        _ dashboard_element_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/dashboard_elements/\(dashboard_element_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /dashboard_filters/{dashboard_filter_id} -> SDKResponse<String, SDKError>
     */
    func delete_dashboard_filter(
        /**
         * @param {String} dashboard_filter_id Id of dashboard filter
         */
        _ dashboard_filter_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/dashboard_filters/\(dashboard_filter_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /dashboard_layouts/{dashboard_layout_id} -> SDKResponse<String, SDKError>
     */
    func delete_dashboard_layout(
        /**
         * @param {String} dashboard_layout_id Id of dashboard layout
         */
        _ dashboard_layout_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/dashboard_layouts/\(dashboard_layout_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /folders/{folder_id} -> SDKResponse<String, SDKError>
     */
    func delete_folder(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/folders/\(folder_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /projects/{project_id}/git_branch/{branch_name} -> SDKResponse<String, SDKError>
     */
    func delete_git_branch(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} branch_name Branch Name
         */
        _ branch_name: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/projects/\(project_id)/git_branch/\(branch_name)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /groups/{group_id} -> SDKResponse<String, SDKError>
     */
    func delete_group(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/groups/\(group_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /groups/{group_id}/groups/{deleting_group_id} -> SDKResponse<Voidable, SDKError>
     */
    func delete_group_from_group(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {Int64} deleting_group_id Id of group to delete
         */
        _ deleting_group_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Voidable, SDKError> {
        let result: SDKResponse<Voidable, SDKError> = self.delete("/groups/\(group_id)/groups/\(deleting_group_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /groups/{group_id}/users/{user_id} -> SDKResponse<Voidable, SDKError>
     */
    func delete_group_user(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {Int64} user_id Id of user to remove from group
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Voidable, SDKError> {
        let result: SDKResponse<Voidable, SDKError> = self.delete("/groups/\(group_id)/users/\(user_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /homepages/{homepage_id} -> SDKResponse<String, SDKError>
     */
    func delete_homepage(
        /**
         * @param {Int64} homepage_id Id of homepage
         */
        _ homepage_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/homepages/\(homepage_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /homepage_items/{homepage_item_id} -> SDKResponse<String, SDKError>
     */
    func delete_homepage_item(
        /**
         * @param {Int64} homepage_item_id Id of homepage_item
         */
        _ homepage_item_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/homepage_items/\(homepage_item_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /homepage_sections/{homepage_section_id} -> SDKResponse<String, SDKError>
     */
    func delete_homepage_section(
        /**
         * @param {Int64} homepage_section_id Id of homepage_section
         */
        _ homepage_section_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/homepage_sections/\(homepage_section_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /integration_hubs/{integration_hub_id} -> SDKResponse<String, SDKError>
     */
    func delete_integration_hub(
        /**
         * @param {Int64} integration_hub_id Id of integration_hub
         */
        _ integration_hub_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/integration_hubs/\(integration_hub_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /looks/{look_id} -> SDKResponse<String, SDKError>
     */
    func delete_look(
        /**
         * @param {Int64} look_id Id of look
         */
        _ look_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/looks/\(look_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /lookml_models/{lookml_model_name} -> SDKResponse<String, SDKError>
     */
    func delete_lookml_model(
        /**
         * @param {String} lookml_model_name Name of lookml model.
         */
        _ lookml_model_name: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/lookml_models/\(lookml_model_name)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /model_sets/{model_set_id} -> SDKResponse<String, SDKError>
     */
    func delete_model_set(
        /**
         * @param {Int64} model_set_id id of model set
         */
        _ model_set_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/model_sets/\(model_set_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /oidc_test_configs/{test_slug} -> SDKResponse<String, SDKError>
     */
    func delete_oidc_test_config(
        /**
         * @param {String} test_slug Slug of test config
         */
        _ test_slug: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/oidc_test_configs/\(test_slug)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /permission_sets/{permission_set_id} -> SDKResponse<String, SDKError>
     */
    func delete_permission_set(
        /**
         * @param {Int64} permission_set_id Id of permission set
         */
        _ permission_set_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/permission_sets/\(permission_set_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /projects/{root_project_id}/credential/{credential_id} -> SDKResponse<String, SDKError>
     */
    func delete_repository_credential(
        /**
         * @param {String} root_project_id Root Project Id
         */
        _ root_project_id: String,
        /**
         * @param {String} credential_id Credential Id
         */
        _ credential_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/projects/\(root_project_id)/credential/\(credential_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /roles/{role_id} -> SDKResponse<String, SDKError>
     */
    func delete_role(
        /**
         * @param {Int64} role_id id of role
         */
        _ role_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/roles/\(role_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /saml_test_configs/{test_slug} -> SDKResponse<String, SDKError>
     */
    func delete_saml_test_config(
        /**
         * @param {String} test_slug Slug of test config
         */
        _ test_slug: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/saml_test_configs/\(test_slug)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /scheduled_plans/{scheduled_plan_id} -> SDKResponse<String, SDKError>
     */
    func delete_scheduled_plan(
        /**
         * @param {Int64} scheduled_plan_id Scheduled Plan Id
         */
        _ scheduled_plan_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/scheduled_plans/\(scheduled_plan_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /spaces/{space_id} -> SDKResponse<String, SDKError>
     */
    func delete_space(
        /**
         * @param {String} space_id Id of space
         */
        _ space_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/spaces/\(space_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /themes/{theme_id} -> SDKResponse<String, SDKError>
     */
    func delete_theme(
        /**
         * @param {String} theme_id Id of theme
         */
        _ theme_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/themes/\(theme_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /users/{user_id} -> SDKResponse<String, SDKError>
     */
    func delete_user(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(user_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /user_attributes/{user_attribute_id} -> SDKResponse<String, SDKError>
     */
    func delete_user_attribute(
        /**
         * @param {Int64} user_attribute_id Id of user_attribute
         */
        _ user_attribute_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/user_attributes/\(user_attribute_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /groups/{group_id}/attribute_values/{user_attribute_id} -> SDKResponse<Voidable, SDKError>
     */
    func delete_user_attribute_group_value(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Voidable, SDKError> {
        let result: SDKResponse<Voidable, SDKError> = self.delete("/groups/\(group_id)/attribute_values/\(user_attribute_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /users/{user_id}/attribute_values/{user_attribute_id} -> SDKResponse<Voidable, SDKError>
     */
    func delete_user_attribute_user_value(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Voidable, SDKError> {
        let result: SDKResponse<Voidable, SDKError> = self.delete("/users/\(user_id)/attribute_values/\(user_attribute_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /users/{user_id}/credentials_api3/{credentials_api3_id} -> SDKResponse<String, SDKError>
     */
    func delete_user_credentials_api3(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} credentials_api3_id id of API 3 Credential
         */
        _ credentials_api3_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(user_id)/credentials_api3/\(credentials_api3_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /users/{user_id}/credentials_email -> SDKResponse<String, SDKError>
     */
    func delete_user_credentials_email(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(user_id)/credentials_email".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /users/{user_id}/credentials_embed/{credentials_embed_id} -> SDKResponse<String, SDKError>
     */
    func delete_user_credentials_embed(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} credentials_embed_id id of Embedding Credential
         */
        _ credentials_embed_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(user_id)/credentials_embed/\(credentials_embed_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /users/{user_id}/credentials_google -> SDKResponse<String, SDKError>
     */
    func delete_user_credentials_google(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(user_id)/credentials_google".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /users/{user_id}/credentials_ldap -> SDKResponse<String, SDKError>
     */
    func delete_user_credentials_ldap(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(user_id)/credentials_ldap".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /users/{user_id}/credentials_looker_openid -> SDKResponse<String, SDKError>
     */
    func delete_user_credentials_looker_openid(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(user_id)/credentials_looker_openid".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /users/{user_id}/credentials_oidc -> SDKResponse<String, SDKError>
     */
    func delete_user_credentials_oidc(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(user_id)/credentials_oidc".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /users/{user_id}/credentials_saml -> SDKResponse<String, SDKError>
     */
    func delete_user_credentials_saml(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(user_id)/credentials_saml".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /users/{user_id}/credentials_totp -> SDKResponse<String, SDKError>
     */
    func delete_user_credentials_totp(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(user_id)/credentials_totp".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /user_login_lockout/{key} -> SDKResponse<String, SDKError>
     */
    func delete_user_login_lockout(
        /**
         * @param {String} key The key associated with the locked user
         */
        _ key: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/user_login_lockout/\(key)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /users/{user_id}/sessions/{session_id} -> SDKResponse<String, SDKError>
     */
    func delete_user_session(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} session_id id of Web Login Session
         */
        _ session_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(user_id)/sessions/\(session_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * POST /projects/{project_id}/deploy_to_production -> SDKResponse<String, SDKError>
     */
    func deploy_to_production(
        /**
         * @param {String} project_id Id of project
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.post("/projects/\(project_id)/deploy_to_production".encodePath(), nil, nil, options)
        return result
    }

    /**
     * POST /fetch_and_parse_saml_idp_metadata -> SDKResponse<SamlMetadataParseResult, SDKError>
     */
    func fetch_and_parse_saml_idp_metadata(
        /**
         * @param {Partial<String>} body
         */
        _ body: Partial<String>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SamlMetadataParseResult, SDKError> {
        let result: SDKResponse<SamlMetadataParseResult, SDKError> = self.post("/fetch_and_parse_saml_idp_metadata", nil, body, options)
        return result
    }

    /**
     * POST /integrations/{integration_id}/form -> SDKResponse<DataActionForm, SDKError>
     */
    func fetch_integration_form(
        /**
         * @param {Int64} integration_id Id of Integration
         */
        _ integration_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DataActionForm, SDKError> {
        let result: SDKResponse<DataActionForm, SDKError> = self.post("/integrations/\(integration_id)/form".encodePath(), nil, nil, options)
        return result
    }

    /**
     * POST /data_actions/form -> SDKResponse<DataActionForm, SDKError>
     */
    func fetch_remote_data_action_form(
        /**
         * @param {Partial<StringDictionary<Variant>>} body
         */
        _ body: Partial<StringDictionary<Variant>>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DataActionForm, SDKError> {
        let result: SDKResponse<DataActionForm, SDKError> = self.post("/data_actions/form", nil, body, options)
        return result
    }

    /**
     * GET /projects/{project_id}/git_branch/{branch_name} -> SDKResponse<GitBranch, SDKError>
     */
    func find_git_branch(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} branch_name Branch Name
         */
        _ branch_name: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<GitBranch, SDKError> {
        let result: SDKResponse<GitBranch, SDKError> = self.get("/projects/\(project_id)/git_branch/\(branch_name)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /folders/{folder_id} -> SDKResponse<Folder, SDKError>
     */
    func folder(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Folder, SDKError> {
        let result: SDKResponse<Folder, SDKError> = self.get("/folders/\(folder_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /folders/{folder_id}/ancestors -> SDKResponse<[Folder], SDKError>
     */
    func folder_ancestors(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Folder], SDKError> {
        let result: SDKResponse<[Folder], SDKError> = self.get("/folders/\(folder_id)/ancestors".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /folders/{folder_id}/children -> SDKResponse<[Space], SDKError>
     */
    func folder_children(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Space], SDKError> {
        let result: SDKResponse<[Space], SDKError> = self.get("/folders/\(folder_id)/children".encodePath(), 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts], nil, options)
        return result
    }

    /**
     * GET /folders/{folder_id}/children/search -> SDKResponse<[Folder], SDKError>
     */
    func folder_children_search(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} name Match folder name.
         */
        name: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Folder], SDKError> {
        let result: SDKResponse<[Folder], SDKError> = self.get("/folders/\(folder_id)/children/search".encodePath(), 
            ["fields": fields, "sorts": sorts, "name": name], nil, options)
        return result
    }

    /**
     * GET /folders/{folder_id}/dashboards -> SDKResponse<[Dashboard], SDKError>
     */
    func folder_dashboards(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Dashboard], SDKError> {
        let result: SDKResponse<[Dashboard], SDKError> = self.get("/folders/\(folder_id)/dashboards".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /folders/{folder_id}/looks -> SDKResponse<[LookWithQuery], SDKError>
     */
    func folder_looks(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LookWithQuery], SDKError> {
        let result: SDKResponse<[LookWithQuery], SDKError> = self.get("/folders/\(folder_id)/looks".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /folders/{folder_id}/parent -> SDKResponse<Folder, SDKError>
     */
    func folder_parent(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Folder, SDKError> {
        let result: SDKResponse<Folder, SDKError> = self.get("/folders/\(folder_id)/parent".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * PUT /password_config/force_password_reset_at_next_login_for_all_users -> SDKResponse<String, SDKError>
     */
    func force_password_reset_at_next_login_for_all_users(
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.put("/password_config/force_password_reset_at_next_login_for_all_users", nil, nil, options)
        return result
    }

    /**
     * GET /projects/{root_project_id}/credentials -> SDKResponse<[RepositoryCredential], SDKError>
     */
    func get_all_repository_credentials(
        /**
         * @param {String} root_project_id Root Project Id
         */
        _ root_project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[RepositoryCredential], SDKError> {
        let result: SDKResponse<[RepositoryCredential], SDKError> = self.get("/projects/\(root_project_id)/credentials".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /projects/{project_id}/git_branch -> SDKResponse<GitBranch, SDKError>
     */
    func git_branch(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<GitBranch, SDKError> {
        let result: SDKResponse<GitBranch, SDKError> = self.get("/projects/\(project_id)/git_branch".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /projects/{project_id}/git/deploy_key -> SDKResponse<String, SDKError>
     */
    func git_deploy_key(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.get("/projects/\(project_id)/git/deploy_key".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /groups/{group_id} -> SDKResponse<Group, SDKError>
     */
    func group(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Group, SDKError> {
        let result: SDKResponse<Group, SDKError> = self.get("/groups/\(group_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /homepages/{homepage_id} -> SDKResponse<Homepage, SDKError>
     */
    func homepage(
        /**
         * @param {Int64} homepage_id Id of homepage
         */
        _ homepage_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Homepage, SDKError> {
        let result: SDKResponse<Homepage, SDKError> = self.get("/homepages/\(homepage_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /homepage_items/{homepage_item_id} -> SDKResponse<HomepageItem, SDKError>
     */
    func homepage_item(
        /**
         * @param {Int64} homepage_item_id Id of homepage item
         */
        _ homepage_item_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<HomepageItem, SDKError> {
        let result: SDKResponse<HomepageItem, SDKError> = self.get("/homepage_items/\(homepage_item_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /homepage_sections/{homepage_section_id} -> SDKResponse<HomepageSection, SDKError>
     */
    func homepage_section(
        /**
         * @param {Int64} homepage_section_id Id of homepage section
         */
        _ homepage_section_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<HomepageSection, SDKError> {
        let result: SDKResponse<HomepageSection, SDKError> = self.get("/homepage_sections/\(homepage_section_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * POST /dashboards/{lookml_dashboard_id}/import/{space_id} -> SDKResponse<Dashboard, SDKError>
     */
    func import_lookml_dashboard(
        /**
         * @param {String} lookml_dashboard_id Id of LookML dashboard
         */
        _ lookml_dashboard_id: String,
        /**
         * @param {String} space_id Id of space to import the dashboard to
         */
        _ space_id: String,
        /**
         * @param {Partial<WriteDashboard>} body
         */
        body: Partial<WriteDashboard>?,
        /**
         * @param {Bool} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
         */
        raw_locale: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Dashboard, SDKError> {
        let result: SDKResponse<Dashboard, SDKError> = self.post("/dashboards/\(lookml_dashboard_id)/import/\(space_id)".encodePath(), 
            ["raw_locale": raw_locale as Any?], body, options)
        return result
    }

    /**
     * GET /integrations/{integration_id} -> SDKResponse<Integration, SDKError>
     */
    func integration(
        /**
         * @param {Int64} integration_id Id of Integration
         */
        _ integration_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Integration, SDKError> {
        let result: SDKResponse<Integration, SDKError> = self.get("/integrations/\(integration_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /integration_hubs/{integration_hub_id} -> SDKResponse<IntegrationHub, SDKError>
     */
    func integration_hub(
        /**
         * @param {Int64} integration_hub_id Id of Integration Hub
         */
        _ integration_hub_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<IntegrationHub, SDKError> {
        let result: SDKResponse<IntegrationHub, SDKError> = self.get("/integration_hubs/\(integration_hub_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /internal_help_resources_enabled -> SDKResponse<InternalHelpResources, SDKError>
     */
    func internal_help_resources(
        options: ITransportSettings? = nil
    ) -> SDKResponse<InternalHelpResources, SDKError> {
        let result: SDKResponse<InternalHelpResources, SDKError> = self.get("/internal_help_resources_enabled", nil, nil, options)
        return result
    }

    /**
     * GET /internal_help_resources_content -> SDKResponse<InternalHelpResourcesContent, SDKError>
     */
    func internal_help_resources_content(
        options: ITransportSettings? = nil
    ) -> SDKResponse<InternalHelpResourcesContent, SDKError> {
        let result: SDKResponse<InternalHelpResourcesContent, SDKError> = self.get("/internal_help_resources_content", nil, nil, options)
        return result
    }

    /**
     * DELETE /running_queries/{query_task_id} -> SDKResponse<String, SDKError>
     */
    func kill_query(
        /**
         * @param {String} query_task_id Query task id.
         */
        _ query_task_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/running_queries/\(query_task_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /ldap_config -> SDKResponse<LDAPConfig, SDKError>
     */
    func ldap_config(
        options: ITransportSettings? = nil
    ) -> SDKResponse<LDAPConfig, SDKError> {
        let result: SDKResponse<LDAPConfig, SDKError> = self.get("/ldap_config", nil, nil, options)
        return result
    }

    /**
     * GET /legacy_features/{legacy_feature_id} -> SDKResponse<LegacyFeature, SDKError>
     */
    func legacy_feature(
        /**
         * @param {Int64} legacy_feature_id id of legacy feature
         */
        _ legacy_feature_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LegacyFeature, SDKError> {
        let result: SDKResponse<LegacyFeature, SDKError> = self.get("/legacy_features/\(legacy_feature_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * POST /login -> SDKResponse<AccessToken, SDKError>
     */
    func login(
        /**
         * @param {String} client_id client_id part of API3 Key.
         */
        client_id: String? = nil,
        /**
         * @param {String} client_secret client_secret part of API3 Key.
         */
        client_secret: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<AccessToken, SDKError> {
        let result: SDKResponse<AccessToken, SDKError> = self.post("/login", 
            ["client_id": client_id, "client_secret": client_secret], nil, options)
        return result
    }

    /**
     * POST /login/{user_id} -> SDKResponse<AccessToken, SDKError>
     */
    func login_user(
        /**
         * @param {Int64} user_id Id of user.
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<AccessToken, SDKError> {
        let result: SDKResponse<AccessToken, SDKError> = self.post("/login/\(user_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * DELETE /logout -> SDKResponse<String, SDKError>
     */
    func logout(
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/logout", nil, nil, options)
        return result
    }

    /**
     * GET /looks/{look_id} -> SDKResponse<LookWithQuery, SDKError>
     */
    func look(
        /**
         * @param {Int64} look_id Id of look
         */
        _ look_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookWithQuery, SDKError> {
        let result: SDKResponse<LookWithQuery, SDKError> = self.get("/looks/\(look_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /lookml_models/{lookml_model_name} -> SDKResponse<LookmlModel, SDKError>
     */
    func lookml_model(
        /**
         * @param {String} lookml_model_name Name of lookml model.
         */
        _ lookml_model_name: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookmlModel, SDKError> {
        let result: SDKResponse<LookmlModel, SDKError> = self.get("/lookml_models/\(lookml_model_name)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /lookml_models/{lookml_model_name}/explores/{explore_name} -> SDKResponse<LookmlModelExplore, SDKError>
     */
    func lookml_model_explore(
        /**
         * @param {String} lookml_model_name Name of lookml model.
         */
        _ lookml_model_name: String,
        /**
         * @param {String} explore_name Name of explore.
         */
        _ explore_name: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookmlModelExplore, SDKError> {
        let result: SDKResponse<LookmlModelExplore, SDKError> = self.get("/lookml_models/\(lookml_model_name)/explores/\(explore_name)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /projects/{project_id}/manifest -> SDKResponse<Manifest, SDKError>
     */
    func manifest(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Manifest, SDKError> {
        let result: SDKResponse<Manifest, SDKError> = self.get("/projects/\(project_id)/manifest".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /user -> SDKResponse<User, SDKError>
     */
    func me(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<User, SDKError> {
        let result: SDKResponse<User, SDKError> = self.get("/user", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /merge_queries/{merge_query_id} -> SDKResponse<MergeQuery, SDKError>
     */
    func merge_query(
        /**
         * @param {String} merge_query_id Merge Query Id
         */
        _ merge_query_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<MergeQuery, SDKError> {
        let result: SDKResponse<MergeQuery, SDKError> = self.get("/merge_queries/\(merge_query_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /model_sets/{model_set_id} -> SDKResponse<ModelSet, SDKError>
     */
    func model_set(
        /**
         * @param {Int64} model_set_id Id of model set
         */
        _ model_set_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ModelSet, SDKError> {
        let result: SDKResponse<ModelSet, SDKError> = self.get("/model_sets/\(model_set_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /oidc_config -> SDKResponse<OIDCConfig, SDKError>
     */
    func oidc_config(
        options: ITransportSettings? = nil
    ) -> SDKResponse<OIDCConfig, SDKError> {
        let result: SDKResponse<OIDCConfig, SDKError> = self.get("/oidc_config", nil, nil, options)
        return result
    }

    /**
     * GET /oidc_test_configs/{test_slug} -> SDKResponse<OIDCConfig, SDKError>
     */
    func oidc_test_config(
        /**
         * @param {String} test_slug Slug of test config
         */
        _ test_slug: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<OIDCConfig, SDKError> {
        let result: SDKResponse<OIDCConfig, SDKError> = self.get("/oidc_test_configs/\(test_slug)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * POST /parse_saml_idp_metadata -> SDKResponse<SamlMetadataParseResult, SDKError>
     */
    func parse_saml_idp_metadata(
        /**
         * @param {Partial<String>} body
         */
        _ body: Partial<String>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SamlMetadataParseResult, SDKError> {
        let result: SDKResponse<SamlMetadataParseResult, SDKError> = self.post("/parse_saml_idp_metadata", nil, body, options)
        return result
    }

    /**
     * GET /password_config -> SDKResponse<PasswordConfig, SDKError>
     */
    func password_config(
        options: ITransportSettings? = nil
    ) -> SDKResponse<PasswordConfig, SDKError> {
        let result: SDKResponse<PasswordConfig, SDKError> = self.get("/password_config", nil, nil, options)
        return result
    }

    /**
     * POST /data_actions -> SDKResponse<DataActionResponse, SDKError>
     */
    func perform_data_action(
        /**
         * @param {Partial<WriteDataActionRequest>} body
         */
        _ body: Partial<WriteDataActionRequest>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DataActionResponse, SDKError> {
        let result: SDKResponse<DataActionResponse, SDKError> = self.post("/data_actions", nil, body, options)
        return result
    }

    /**
     * GET /permission_sets/{permission_set_id} -> SDKResponse<PermissionSet, SDKError>
     */
    func permission_set(
        /**
         * @param {Int64} permission_set_id Id of permission set
         */
        _ permission_set_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<PermissionSet, SDKError> {
        let result: SDKResponse<PermissionSet, SDKError> = self.get("/permission_sets/\(permission_set_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /projects/{project_id} -> SDKResponse<Project, SDKError>
     */
    func project(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Project, SDKError> {
        let result: SDKResponse<Project, SDKError> = self.get("/projects/\(project_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /projects/{project_id}/files/file -> SDKResponse<ProjectFile, SDKError>
     */
    func project_file(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} file_id File Id
         */
        _ file_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ProjectFile, SDKError> {
        let result: SDKResponse<ProjectFile, SDKError> = self.get("/projects/\(project_id)/files/file".encodePath(), 
            ["file_id": file_id, "fields": fields], nil, options)
        return result
    }

    /**
     * GET /projects/{project_id}/validate -> SDKResponse<ProjectValidationCache, SDKError>
     */
    func project_validation_results(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ProjectValidationCache, SDKError> {
        let result: SDKResponse<ProjectValidationCache, SDKError> = self.get("/projects/\(project_id)/validate".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /projects/{project_id}/current_workspace -> SDKResponse<ProjectWorkspace, SDKError>
     */
    func project_workspace(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ProjectWorkspace, SDKError> {
        let result: SDKResponse<ProjectWorkspace, SDKError> = self.get("/projects/\(project_id)/current_workspace".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /queries/{query_id} -> SDKResponse<Query, SDKError>
     */
    func query(
        /**
         * @param {Int64} query_id Id of query
         */
        _ query_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Query, SDKError> {
        let result: SDKResponse<Query, SDKError> = self.get("/queries/\(query_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /queries/slug/{slug} -> SDKResponse<Query, SDKError>
     */
    func query_for_slug(
        /**
         * @param {String} slug Slug of query
         */
        _ slug: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Query, SDKError> {
        let result: SDKResponse<Query, SDKError> = self.get("/queries/slug/\(slug)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /query_tasks/{query_task_id} -> SDKResponse<QueryTask, SDKError>
     */
    func query_task(
        /**
         * @param {String} query_task_id ID of the Query Task
         */
        _ query_task_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<QueryTask, SDKError> {
        let result: SDKResponse<QueryTask, SDKError> = self.get("/query_tasks/\(query_task_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /query_tasks/multi_results -> SDKResponse<StringDictionary<Variant>, SDKError>
     */
    func query_task_multi_results(
        /**
         * @param {DelimArray<String>} query_task_ids List of Query Task IDs
         */
        _ query_task_ids: DelimArray<String>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<StringDictionary<Variant>, SDKError> {
        let result: SDKResponse<StringDictionary<Variant>, SDKError> = self.get("/query_tasks/multi_results", 
            ["query_task_ids": query_task_ids as Any?], nil, options)
        return result
    }

    /**
     * GET /query_tasks/{query_task_id}/results -> SDKResponse<StringDictionary<Variant>, SDKError>
     */
    func query_task_results(
        /**
         * @param {String} query_task_id ID of the Query Task
         */
        _ query_task_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<StringDictionary<Variant>, SDKError> {
        let result: SDKResponse<StringDictionary<Variant>, SDKError> = self.get("/query_tasks/\(query_task_id)/results".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /render_tasks/{render_task_id} -> SDKResponse<RenderTask, SDKError>
     */
    func render_task(
        /**
         * @param {String} render_task_id Id of render task
         */
        _ render_task_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<RenderTask, SDKError> {
        let result: SDKResponse<RenderTask, SDKError> = self.get("/render_tasks/\(render_task_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /render_tasks/{render_task_id}/results -> SDKResponse<String, SDKError>
     * 
     * **Note**: Binary content is returned by this method.
     */
    func render_task_results(
        /**
         * @param {String} render_task_id Id of render task
         */
        _ render_task_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.get("/render_tasks/\(render_task_id)/results".encodePath(), nil, nil, options)
        return result
    }

    /**
     * POST /projects/{project_id}/reset_to_production -> SDKResponse<String, SDKError>
     */
    func reset_project_to_production(
        /**
         * @param {String} project_id Id of project
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.post("/projects/\(project_id)/reset_to_production".encodePath(), nil, nil, options)
        return result
    }

    /**
     * POST /projects/{project_id}/reset_to_remote -> SDKResponse<String, SDKError>
     */
    func reset_project_to_remote(
        /**
         * @param {String} project_id Id of project
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.post("/projects/\(project_id)/reset_to_remote".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /roles/{role_id} -> SDKResponse<Role, SDKError>
     */
    func role(
        /**
         * @param {Int64} role_id id of role
         */
        _ role_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Role, SDKError> {
        let result: SDKResponse<Role, SDKError> = self.get("/roles/\(role_id)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /roles/{role_id}/groups -> SDKResponse<[Group], SDKError>
     */
    func role_groups(
        /**
         * @param {Int64} role_id id of role
         */
        _ role_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Group], SDKError> {
        let result: SDKResponse<[Group], SDKError> = self.get("/roles/\(role_id)/groups".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /roles/{role_id}/users -> SDKResponse<[User], SDKError>
     */
    func role_users(
        /**
         * @param {Int64} role_id id of user
         */
        _ role_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} direct_association_only Get only users associated directly with the role: exclude those only associated through groups.
         */
        direct_association_only: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[User], SDKError> {
        let result: SDKResponse<[User], SDKError> = self.get("/roles/\(role_id)/users".encodePath(), 
            ["fields": fields, "direct_association_only": direct_association_only as Any?], nil, options)
        return result
    }

    /**
     * GET /projects/{project_id}/git_connection_tests/{test_id} -> SDKResponse<GitConnectionTestResult, SDKError>
     */
    func run_git_connection_test(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} test_id Test Id
         */
        _ test_id: String,
        /**
         * @param {String} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
         */
        remote_url: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<GitConnectionTestResult, SDKError> {
        let result: SDKResponse<GitConnectionTestResult, SDKError> = self.get("/projects/\(project_id)/git_connection_tests/\(test_id)".encodePath(), 
            ["remote_url": remote_url], nil, options)
        return result
    }

    /**
     * POST /queries/run/{result_format} -> SDKResponse<String, SDKError>
     * 
     * **Note**: Binary content may be returned by this method.
     */
    func run_inline_query(
        /**
         * @param {String} result_format Format of result
         */
        _ result_format: String,
        /**
         * @param {Partial<WriteQuery>} body
         */
        _ body: Partial<WriteQuery>,
        /**
         * @param {Int64} limit Row limit (may override the limit in the saved query).
         */
        limit: Int64? = nil,
        /**
         * @param {Bool} apply_formatting Apply model-specified formatting to each result.
         */
        apply_formatting: Bool? = nil,
        /**
         * @param {Bool} apply_vis Apply visualization options to results.
         */
        apply_vis: Bool? = nil,
        /**
         * @param {Bool} cache Get results from cache if available.
         */
        cache: Bool? = nil,
        /**
         * @param {Int64} image_width Render width for image formats.
         */
        image_width: Int64? = nil,
        /**
         * @param {Int64} image_height Render height for image formats.
         */
        image_height: Int64? = nil,
        /**
         * @param {Bool} generate_drill_links Generate drill links (only applicable to 'json_detail' format.
         */
        generate_drill_links: Bool? = nil,
        /**
         * @param {Bool} force_production Force use of production models even if the user is in development mode.
         */
        force_production: Bool? = nil,
        /**
         * @param {Bool} cache_only Retrieve any results from cache even if the results have expired.
         */
        cache_only: Bool? = nil,
        /**
         * @param {String} path_prefix Prefix to use for drill links (url encoded).
         */
        path_prefix: String? = nil,
        /**
         * @param {Bool} rebuild_pdts Rebuild PDTS used in query.
         */
        rebuild_pdts: Bool? = nil,
        /**
         * @param {Bool} server_table_calcs Perform table calculations on query results
         */
        server_table_calcs: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.post("/queries/run/\(result_format)".encodePath(), 
            ["limit": limit, "apply_formatting": apply_formatting as Any?, "apply_vis": apply_vis as Any?, "cache": cache as Any?, "image_width": image_width, "image_height": image_height, "generate_drill_links": generate_drill_links as Any?, "force_production": force_production as Any?, "cache_only": cache_only as Any?, "path_prefix": path_prefix, "rebuild_pdts": rebuild_pdts as Any?, "server_table_calcs": server_table_calcs as Any?], body, options)
        return result
    }

    /**
     * GET /looks/{look_id}/run/{result_format} -> SDKResponse<String, SDKError>
     * 
     * **Note**: Binary content may be returned by this method.
     */
    func run_look(
        /**
         * @param {Int64} look_id Id of look
         */
        _ look_id: Int64,
        /**
         * @param {String} result_format Format of result
         */
        _ result_format: String,
        /**
         * @param {Int64} limit Row limit (may override the limit in the saved query).
         */
        limit: Int64? = nil,
        /**
         * @param {Bool} apply_formatting Apply model-specified formatting to each result.
         */
        apply_formatting: Bool? = nil,
        /**
         * @param {Bool} apply_vis Apply visualization options to results.
         */
        apply_vis: Bool? = nil,
        /**
         * @param {Bool} cache Get results from cache if available.
         */
        cache: Bool? = nil,
        /**
         * @param {Int64} image_width Render width for image formats.
         */
        image_width: Int64? = nil,
        /**
         * @param {Int64} image_height Render height for image formats.
         */
        image_height: Int64? = nil,
        /**
         * @param {Bool} generate_drill_links Generate drill links (only applicable to 'json_detail' format.
         */
        generate_drill_links: Bool? = nil,
        /**
         * @param {Bool} force_production Force use of production models even if the user is in development mode.
         */
        force_production: Bool? = nil,
        /**
         * @param {Bool} cache_only Retrieve any results from cache even if the results have expired.
         */
        cache_only: Bool? = nil,
        /**
         * @param {String} path_prefix Prefix to use for drill links (url encoded).
         */
        path_prefix: String? = nil,
        /**
         * @param {Bool} rebuild_pdts Rebuild PDTS used in query.
         */
        rebuild_pdts: Bool? = nil,
        /**
         * @param {Bool} server_table_calcs Perform table calculations on query results
         */
        server_table_calcs: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.get("/looks/\(look_id)/run/\(result_format)".encodePath(), 
            ["limit": limit, "apply_formatting": apply_formatting as Any?, "apply_vis": apply_vis as Any?, "cache": cache as Any?, "image_width": image_width, "image_height": image_height, "generate_drill_links": generate_drill_links as Any?, "force_production": force_production as Any?, "cache_only": cache_only as Any?, "path_prefix": path_prefix, "rebuild_pdts": rebuild_pdts as Any?, "server_table_calcs": server_table_calcs as Any?], nil, options)
        return result
    }

    /**
     * GET /projects/{project_id}/lookml_tests/run -> SDKResponse<[LookmlTestResult], SDKError>
     */
    func run_lookml_test(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} file_id File Name
         */
        file_id: String? = nil,
        /**
         * @param {String} test Test Name
         */
        test: String? = nil,
        /**
         * @param {String} model Model Name
         */
        model: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LookmlTestResult], SDKError> {
        let result: SDKResponse<[LookmlTestResult], SDKError> = self.get("/projects/\(project_id)/lookml_tests/run".encodePath(), 
            ["file_id": file_id, "test": test, "model": model], nil, options)
        return result
    }

    /**
     * GET /queries/{query_id}/run/{result_format} -> SDKResponse<String, SDKError>
     * 
     * **Note**: Binary content may be returned by this method.
     */
    func run_query(
        /**
         * @param {Int64} query_id Id of query
         */
        _ query_id: Int64,
        /**
         * @param {String} result_format Format of result
         */
        _ result_format: String,
        /**
         * @param {Int64} limit Row limit (may override the limit in the saved query).
         */
        limit: Int64? = nil,
        /**
         * @param {Bool} apply_formatting Apply model-specified formatting to each result.
         */
        apply_formatting: Bool? = nil,
        /**
         * @param {Bool} apply_vis Apply visualization options to results.
         */
        apply_vis: Bool? = nil,
        /**
         * @param {Bool} cache Get results from cache if available.
         */
        cache: Bool? = nil,
        /**
         * @param {Int64} image_width Render width for image formats.
         */
        image_width: Int64? = nil,
        /**
         * @param {Int64} image_height Render height for image formats.
         */
        image_height: Int64? = nil,
        /**
         * @param {Bool} generate_drill_links Generate drill links (only applicable to 'json_detail' format.
         */
        generate_drill_links: Bool? = nil,
        /**
         * @param {Bool} force_production Force use of production models even if the user is in development mode.
         */
        force_production: Bool? = nil,
        /**
         * @param {Bool} cache_only Retrieve any results from cache even if the results have expired.
         */
        cache_only: Bool? = nil,
        /**
         * @param {String} path_prefix Prefix to use for drill links (url encoded).
         */
        path_prefix: String? = nil,
        /**
         * @param {Bool} rebuild_pdts Rebuild PDTS used in query.
         */
        rebuild_pdts: Bool? = nil,
        /**
         * @param {Bool} server_table_calcs Perform table calculations on query results
         */
        server_table_calcs: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.get("/queries/\(query_id)/run/\(result_format)".encodePath(), 
            ["limit": limit, "apply_formatting": apply_formatting as Any?, "apply_vis": apply_vis as Any?, "cache": cache as Any?, "image_width": image_width, "image_height": image_height, "generate_drill_links": generate_drill_links as Any?, "force_production": force_production as Any?, "cache_only": cache_only as Any?, "path_prefix": path_prefix, "rebuild_pdts": rebuild_pdts as Any?, "server_table_calcs": server_table_calcs as Any?], nil, options)
        return result
    }

    /**
     * POST /sql_queries/{slug}/run/{result_format} -> SDKResponse<String, SDKError>
     * 
     * **Note**: Binary content may be returned by this method.
     */
    func run_sql_query(
        /**
         * @param {String} slug slug of query
         */
        _ slug: String,
        /**
         * @param {String} result_format Format of result, options are: ["json", "json_label", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml"]
         */
        _ result_format: String,
        /**
         * @param {String} download Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.
         */
        download: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.post("/sql_queries/\(slug)/run/\(result_format)".encodePath(), 
            ["download": download], nil, options)
        return result
    }

    /**
     * GET /queries/models/{model_name}/views/{view_name}/run/{result_format} -> SDKResponse<String, SDKError>
     * 
     * **Note**: Binary content may be returned by this method.
     */
    func run_url_encoded_query(
        /**
         * @param {String} model_name Model name
         */
        _ model_name: String,
        /**
         * @param {String} view_name View name
         */
        _ view_name: String,
        /**
         * @param {String} result_format Format of result
         */
        _ result_format: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.get("/queries/models/\(model_name)/views/\(view_name)/run/\(result_format)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /saml_config -> SDKResponse<SamlConfig, SDKError>
     */
    func saml_config(
        options: ITransportSettings? = nil
    ) -> SDKResponse<SamlConfig, SDKError> {
        let result: SDKResponse<SamlConfig, SDKError> = self.get("/saml_config", nil, nil, options)
        return result
    }

    /**
     * GET /saml_test_configs/{test_slug} -> SDKResponse<SamlConfig, SDKError>
     */
    func saml_test_config(
        /**
         * @param {String} test_slug Slug of test config
         */
        _ test_slug: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SamlConfig, SDKError> {
        let result: SDKResponse<SamlConfig, SDKError> = self.get("/saml_test_configs/\(test_slug)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * GET /scheduled_plans/{scheduled_plan_id} -> SDKResponse<ScheduledPlan, SDKError>
     */
    func scheduled_plan(
        /**
         * @param {Int64} scheduled_plan_id Scheduled Plan Id
         */
        _ scheduled_plan_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ScheduledPlan, SDKError> {
        let result: SDKResponse<ScheduledPlan, SDKError> = self.get("/scheduled_plans/\(scheduled_plan_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * POST /scheduled_plans/run_once -> SDKResponse<ScheduledPlan, SDKError>
     */
    func scheduled_plan_run_once(
        /**
         * @param {Partial<WriteScheduledPlan>} body
         */
        body: Partial<WriteScheduledPlan>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ScheduledPlan, SDKError> {
        let result: SDKResponse<ScheduledPlan, SDKError> = self.post("/scheduled_plans/run_once", nil, body, options)
        return result
    }

    /**
     * POST /scheduled_plans/{scheduled_plan_id}/run_once -> SDKResponse<ScheduledPlan, SDKError>
     */
    func scheduled_plan_run_once_by_id(
        /**
         * @param {Int64} scheduled_plan_id Id of schedule plan to copy and run
         */
        _ scheduled_plan_id: Int64,
        /**
         * @param {Partial<WriteWriteScheduledPlan>} body
         */
        body: Partial<WriteWriteScheduledPlan>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ScheduledPlan, SDKError> {
        let result: SDKResponse<ScheduledPlan, SDKError> = self.post("/scheduled_plans/\(scheduled_plan_id)/run_once".encodePath(), nil, body, options)
        return result
    }

    /**
     * GET /scheduled_plans/dashboard/{dashboard_id} -> SDKResponse<[ScheduledPlan], SDKError>
     */
    func scheduled_plans_for_dashboard(
        /**
         * @param {Int64} dashboard_id Dashboard Id
         */
        _ dashboard_id: Int64,
        /**
         * @param {Int64} user_id User Id (default is requesting user if not specified)
         */
        user_id: Int64? = nil,
        /**
         * @param {Bool} all_users Return scheduled plans belonging to all users for the dashboard
         */
        all_users: Bool? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ScheduledPlan], SDKError> {
        let result: SDKResponse<[ScheduledPlan], SDKError> = self.get("/scheduled_plans/dashboard/\(dashboard_id)".encodePath(), 
            ["user_id": user_id, "all_users": all_users as Any?, "fields": fields], nil, options)
        return result
    }

    /**
     * GET /scheduled_plans/look/{look_id} -> SDKResponse<[ScheduledPlan], SDKError>
     */
    func scheduled_plans_for_look(
        /**
         * @param {Int64} look_id Look Id
         */
        _ look_id: Int64,
        /**
         * @param {Int64} user_id User Id (default is requesting user if not specified)
         */
        user_id: Int64? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} all_users Return scheduled plans belonging to all users for the look
         */
        all_users: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ScheduledPlan], SDKError> {
        let result: SDKResponse<[ScheduledPlan], SDKError> = self.get("/scheduled_plans/look/\(look_id)".encodePath(), 
            ["user_id": user_id, "fields": fields, "all_users": all_users as Any?], nil, options)
        return result
    }

    /**
     * GET /scheduled_plans/lookml_dashboard/{lookml_dashboard_id} -> SDKResponse<[ScheduledPlan], SDKError>
     */
    func scheduled_plans_for_lookml_dashboard(
        /**
         * @param {Int64} lookml_dashboard_id LookML Dashboard Id
         */
        _ lookml_dashboard_id: Int64,
        /**
         * @param {Int64} user_id User Id (default is requesting user if not specified)
         */
        user_id: Int64? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} all_users Return scheduled plans belonging to all users for the dashboard
         */
        all_users: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ScheduledPlan], SDKError> {
        let result: SDKResponse<[ScheduledPlan], SDKError> = self.get("/scheduled_plans/lookml_dashboard/\(lookml_dashboard_id)".encodePath(), 
            ["user_id": user_id, "fields": fields, "all_users": all_users as Any?], nil, options)
        return result
    }

    /**
     * GET /scheduled_plans/space/{space_id} -> SDKResponse<[ScheduledPlan], SDKError>
     */
    func scheduled_plans_for_space(
        /**
         * @param {Int64} space_id Space Id
         */
        _ space_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ScheduledPlan], SDKError> {
        let result: SDKResponse<[ScheduledPlan], SDKError> = self.get("/scheduled_plans/space/\(space_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /content_favorite/search -> SDKResponse<[ContentFavorite], SDKError>
     */
    func search_content_favorites(
        /**
         * @param {Int64} id Match content favorite id(s)
         */
        `id`: Int64? = nil,
        /**
         * @param {Int64} user_id Match user id(s)
         */
        user_id: Int64? = nil,
        /**
         * @param {Int64} content_metadata_id Match content metadata id(s)
         */
        content_metadata_id: Int64? = nil,
        /**
         * @param {Int64} dashboard_id Match dashboard id(s)
         */
        dashboard_id: Int64? = nil,
        /**
         * @param {Int64} look_id Match look id(s)
         */
        look_id: Int64? = nil,
        /**
         * @param {Int64} limit Number of results to return. (used with offset)
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any. (used with limit)
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ContentFavorite], SDKError> {
        let result: SDKResponse<[ContentFavorite], SDKError> = self.get("/content_favorite/search", 
            ["id": id, "user_id": user_id, "content_metadata_id": content_metadata_id, "dashboard_id": dashboard_id, "look_id": look_id, "limit": limit, "offset": offset, "sorts": sorts, "fields": fields, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * GET /content_view/search -> SDKResponse<[ContentView], SDKError>
     */
    func search_content_views(
        /**
         * @param {Int64} view_count Match view count
         */
        view_count: Int64? = nil,
        /**
         * @param {Int64} group_id Match Group Id
         */
        group_id: Int64? = nil,
        /**
         * @param {String} look_id Match look_id
         */
        look_id: String? = nil,
        /**
         * @param {String} dashboard_id Match dashboard_id
         */
        dashboard_id: String? = nil,
        /**
         * @param {Int64} content_metadata_id Match content metadata id
         */
        content_metadata_id: Int64? = nil,
        /**
         * @param {String} start_of_week_date Match start of week date
         */
        start_of_week_date: String? = nil,
        /**
         * @param {Bool} all_time True if only all time view records should be returned
         */
        all_time: Bool? = nil,
        /**
         * @param {Int64} user_id Match user id
         */
        user_id: Int64? = nil,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        /**
         * @param {Int64} limit Number of results to return. Use with `offset` to manage pagination of results
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning data
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by
         */
        sorts: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ContentView], SDKError> {
        let result: SDKResponse<[ContentView], SDKError> = self.get("/content_view/search", 
            ["view_count": view_count, "group_id": group_id, "look_id": look_id, "dashboard_id": dashboard_id, "content_metadata_id": content_metadata_id, "start_of_week_date": start_of_week_date, "all_time": all_time as Any?, "user_id": user_id, "fields": fields, "limit": limit, "offset": offset, "sorts": sorts, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * GET /dashboard_elements/search -> SDKResponse<[DashboardElement], SDKError>
     */
    func search_dashboard_elements(
        /**
         * @param {Int64} dashboard_id Select elements that refer to a given dashboard id
         */
        dashboard_id: Int64? = nil,
        /**
         * @param {Int64} look_id Select elements that refer to a given look id
         */
        look_id: Int64? = nil,
        /**
         * @param {String} title Match the title of element
         */
        title: String? = nil,
        /**
         * @param {Bool} deleted Select soft-deleted dashboard elements
         */
        deleted: Bool? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        /**
         * @param {String} sorts Fields to sort by. Sortable fields: [:look_id, :dashboard_id, :deleted, :title]
         */
        sorts: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DashboardElement], SDKError> {
        let result: SDKResponse<[DashboardElement], SDKError> = self.get("/dashboard_elements/search", 
            ["dashboard_id": dashboard_id, "look_id": look_id, "title": title, "deleted": deleted as Any?, "fields": fields, "filter_or": filter_or as Any?, "sorts": sorts], nil, options)
        return result
    }

    /**
     * GET /dashboards/search -> SDKResponse<[Dashboard], SDKError>
     */
    func search_dashboards(
        /**
         * @param {Int64} id Match dashboard id.
         */
        `id`: Int64? = nil,
        /**
         * @param {String} slug Match dashboard slug.
         */
        slug: String? = nil,
        /**
         * @param {String} title Match Dashboard title.
         */
        title: String? = nil,
        /**
         * @param {String} description Match Dashboard description.
         */
        description: String? = nil,
        /**
         * @param {Int64} content_favorite_id Filter on a content favorite id.
         */
        content_favorite_id: Int64? = nil,
        /**
         * @param {String} space_id Filter on a particular space.
         */
        space_id: String? = nil,
        /**
         * @param {String} deleted Filter on dashboards deleted status.
         */
        deleted: String? = nil,
        /**
         * @param {String} user_id Filter on dashboards created by a particular user.
         */
        user_id: String? = nil,
        /**
         * @param {String} view_count Filter on a particular value of view_count
         */
        view_count: String? = nil,
        /**
         * @param {Int64} content_metadata_id Filter on a content favorite id.
         */
        content_metadata_id: Int64? = nil,
        /**
         * @param {Bool} curate Exclude items that exist only in personal spaces other than the users
         */
        curate: Bool? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {Int64} limit Number of results to return. (used with offset and takes priority over page and per_page)
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts One or more fields to sort by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :description, :view_count, :favorite_count, :slug, :content_favorite_id, :content_metadata_id, :deleted, :deleted_at, :last_viewed_at]
         */
        sorts: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Dashboard], SDKError> {
        let result: SDKResponse<[Dashboard], SDKError> = self.get("/dashboards/search", 
            ["id": id, "slug": slug, "title": title, "description": description, "content_favorite_id": content_favorite_id, "space_id": space_id, "deleted": deleted, "user_id": user_id, "view_count": view_count, "content_metadata_id": content_metadata_id, "curate": curate as Any?, "fields": fields, "page": page, "per_page": per_page, "limit": limit, "offset": offset, "sorts": sorts, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * GET /folders/search -> SDKResponse<[Folder], SDKError>
     */
    func search_folders(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {Int64} limit Number of results to return. (used with offset and takes priority over page and per_page)
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} name Match Space title.
         */
        name: String? = nil,
        /**
         * @param {Int64} id Match Space id
         */
        `id`: Int64? = nil,
        /**
         * @param {String} parent_id Filter on a children of a particular folder.
         */
        parent_id: String? = nil,
        /**
         * @param {String} creator_id Filter on folder created by a particular user.
         */
        creator_id: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Folder], SDKError> {
        let result: SDKResponse<[Folder], SDKError> = self.get("/folders/search", 
            ["fields": fields, "page": page, "per_page": per_page, "limit": limit, "offset": offset, "sorts": sorts, "name": name, "id": id, "parent_id": parent_id, "creator_id": creator_id, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * GET /groups/search -> SDKResponse<[Group], SDKError>
     */
    func search_groups(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} limit Number of results to return (used with `offset`).
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any (used with `limit`).
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        /**
         * @param {Int64} id Match group id.
         */
        `id`: Int64? = nil,
        /**
         * @param {String} name Match group name.
         */
        name: String? = nil,
        /**
         * @param {Bool} external_group_id Match group external_group_id.
         */
        external_group_id: Bool? = nil,
        /**
         * @param {Bool} externally_managed Match group externally_managed.
         */
        externally_managed: Bool? = nil,
        /**
         * @param {Bool} externally_orphaned Match group externally_orphaned.
         */
        externally_orphaned: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Group], SDKError> {
        let result: SDKResponse<[Group], SDKError> = self.get("/groups/search", 
            ["fields": fields, "limit": limit, "offset": offset, "sorts": sorts, "filter_or": filter_or as Any?, "id": id, "name": name, "external_group_id": external_group_id as Any?, "externally_managed": externally_managed as Any?, "externally_orphaned": externally_orphaned as Any?], nil, options)
        return result
    }

    /**
     * GET /homepages/search -> SDKResponse<[Homepage], SDKError>
     */
    func search_homepages(
        /**
         * @param {String} title Matches homepage title.
         */
        title: String? = nil,
        /**
         * @param {String} created_at Matches the timestamp for when the homepage was created.
         */
        created_at: String? = nil,
        /**
         * @param {String} first_name The first name of the user who created this homepage.
         */
        first_name: String? = nil,
        /**
         * @param {String} last_name The last name of the user who created this homepage.
         */
        last_name: String? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} favorited Return favorited homepages when true.
         */
        favorited: Bool? = nil,
        /**
         * @param {String} creator_id Filter on homepages created by a particular user.
         */
        creator_id: String? = nil,
        /**
         * @param {String} sorts The fields to sort the results by
         */
        sorts: String? = nil,
        /**
         * @param {Int64} page The page to return.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page The number of items in the returned page.
         */
        per_page: Int64? = nil,
        /**
         * @param {Int64} offset The number of items to skip before returning any. (used with limit and takes priority over page and per_page)
         */
        offset: Int64? = nil,
        /**
         * @param {Int64} limit The maximum number of items to return. (used with offset and takes priority over page and per_page)
         */
        limit: Int64? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Homepage], SDKError> {
        let result: SDKResponse<[Homepage], SDKError> = self.get("/homepages/search", 
            ["title": title, "created_at": created_at, "first_name": first_name, "last_name": last_name, "fields": fields, "favorited": favorited as Any?, "creator_id": creator_id, "sorts": sorts, "page": page, "per_page": per_page, "offset": offset, "limit": limit, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * GET /looks/search -> SDKResponse<[Look], SDKError>
     */
    func search_looks(
        /**
         * @param {String} title Match Look title.
         */
        title: String? = nil,
        /**
         * @param {String} description Match Look description.
         */
        description: String? = nil,
        /**
         * @param {Int64} content_favorite_id Select looks with a particular content favorite id
         */
        content_favorite_id: Int64? = nil,
        /**
         * @param {String} space_id Select looks in a particular space.
         */
        space_id: String? = nil,
        /**
         * @param {String} user_id Select looks created by a particular user.
         */
        user_id: String? = nil,
        /**
         * @param {String} view_count Select looks with particular view_count value
         */
        view_count: String? = nil,
        /**
         * @param {Bool} deleted Select soft-deleted looks
         */
        deleted: Bool? = nil,
        /**
         * @param {Int64} query_id Select looks that reference a particular query by query_id
         */
        query_id: Int64? = nil,
        /**
         * @param {Bool} curate Exclude items that exist only in personal spaces other than the users
         */
        curate: Bool? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {Int64} limit Number of results to return. (used with offset and takes priority over page and per_page)
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts One or more fields to sort results by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :description, :updated_at, :last_updater_id, :view_count, :favorite_count, :content_favorite_id, :deleted, :deleted_at, :last_viewed_at, :query_id]
         */
        sorts: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Look], SDKError> {
        let result: SDKResponse<[Look], SDKError> = self.get("/looks/search", 
            ["title": title, "description": description, "content_favorite_id": content_favorite_id, "space_id": space_id, "user_id": user_id, "view_count": view_count, "deleted": deleted as Any?, "query_id": query_id, "curate": curate as Any?, "fields": fields, "page": page, "per_page": per_page, "limit": limit, "offset": offset, "sorts": sorts, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * GET /spaces/search -> SDKResponse<[Space], SDKError>
     */
    func search_spaces(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {Int64} limit Number of results to return. (used with offset and takes priority over page and per_page)
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} name Match Space title.
         */
        name: String? = nil,
        /**
         * @param {Int64} id Match Space id
         */
        `id`: Int64? = nil,
        /**
         * @param {String} parent_id Filter on a children of a particular space.
         */
        parent_id: String? = nil,
        /**
         * @param {String} creator_id Filter on spaces created by a particular user.
         */
        creator_id: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Space], SDKError> {
        let result: SDKResponse<[Space], SDKError> = self.get("/spaces/search", 
            ["fields": fields, "page": page, "per_page": per_page, "limit": limit, "offset": offset, "sorts": sorts, "name": name, "id": id, "parent_id": parent_id, "creator_id": creator_id, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * GET /themes/search -> SDKResponse<[Theme], SDKError>
     */
    func search_themes(
        /**
         * @param {Int64} id Match theme id.
         */
        `id`: Int64? = nil,
        /**
         * @param {String} name Match theme name.
         */
        name: String? = nil,
        /**
         * @param {Date} begin_at Timestamp for activation.
         */
        begin_at: Date? = nil,
        /**
         * @param {Date} end_at Timestamp for expiration.
         */
        end_at: Date? = nil,
        /**
         * @param {Int64} limit Number of results to return (used with `offset`).
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any (used with `limit`).
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Theme], SDKError> {
        let result: SDKResponse<[Theme], SDKError> = self.get("/themes/search", 
            ["id": id, "name": name, "begin_at": begin_at as Any?, "end_at": end_at as Any?, "limit": limit, "offset": offset, "sorts": sorts, "fields": fields, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * GET /user_login_lockouts/search -> SDKResponse<[UserLoginLockout], SDKError>
     */
    func search_user_login_lockouts(
        /**
         * @param {String} fields Include only these fields in the response
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Return only page N of paginated results
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Return N rows of data per page
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} auth_type Auth type user is locked out for (email, ldap, totp, api)
         */
        auth_type: String? = nil,
        /**
         * @param {String} full_name Match name
         */
        full_name: String? = nil,
        /**
         * @param {String} email Match email
         */
        email: String? = nil,
        /**
         * @param {String} remote_id Match remote LDAP ID
         */
        remote_id: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[UserLoginLockout], SDKError> {
        let result: SDKResponse<[UserLoginLockout], SDKError> = self.get("/user_login_lockouts/search", 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts, "auth_type": auth_type, "full_name": full_name, "email": email, "remote_id": remote_id, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * GET /users/search -> SDKResponse<[User], SDKError>
     */
    func search_users(
        /**
         * @param {String} fields Include only these fields in the response
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Return only page N of paginated results
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Return N rows of data per page
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {Int64} id Match User Id.
         */
        `id`: Int64? = nil,
        /**
         * @param {String} first_name Match First name.
         */
        first_name: String? = nil,
        /**
         * @param {String} last_name Match Last name.
         */
        last_name: String? = nil,
        /**
         * @param {Bool} verified_looker_employee Search for user accounts associated with Looker employees
         */
        verified_looker_employee: Bool? = nil,
        /**
         * @param {String} email Search for the user with this email address
         */
        email: String? = nil,
        /**
         * @param {Bool} is_disabled Search for disabled user accounts
         */
        is_disabled: Bool? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        /**
         * @param {Int64} content_metadata_id Search for users who have access to this content_metadata item
         */
        content_metadata_id: Int64? = nil,
        /**
         * @param {Int64} group_id Search for users who are direct members of this group
         */
        group_id: Int64? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[User], SDKError> {
        let result: SDKResponse<[User], SDKError> = self.get("/users/search", 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts, "id": id, "first_name": first_name, "last_name": last_name, "verified_looker_employee": verified_looker_employee as Any?, "email": email, "is_disabled": is_disabled as Any?, "filter_or": filter_or as Any?, "content_metadata_id": content_metadata_id, "group_id": group_id], nil, options)
        return result
    }

    /**
     * GET /users/search/names/{pattern} -> SDKResponse<[User], SDKError>
     */
    func search_users_names(
        /**
         * @param {String} pattern Pattern to match
         */
        _ pattern: String,
        /**
         * @param {String} fields Include only these fields in the response
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Return only page N of paginated results
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Return N rows of data per page
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by
         */
        sorts: String? = nil,
        /**
         * @param {Int64} id Match User Id
         */
        `id`: Int64? = nil,
        /**
         * @param {String} first_name Match First name
         */
        first_name: String? = nil,
        /**
         * @param {String} last_name Match Last name
         */
        last_name: String? = nil,
        /**
         * @param {Bool} verified_looker_employee Match Verified Looker employee
         */
        verified_looker_employee: Bool? = nil,
        /**
         * @param {String} email Match Email Address
         */
        email: String? = nil,
        /**
         * @param {Bool} is_disabled Include or exclude disabled accounts in the results
         */
        is_disabled: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[User], SDKError> {
        let result: SDKResponse<[User], SDKError> = self.get("/users/search/names/\(pattern)".encodePath(), 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts, "id": id, "first_name": first_name, "last_name": last_name, "verified_looker_employee": verified_looker_employee as Any?, "email": email, "is_disabled": is_disabled as Any?], nil, options)
        return result
    }

    /**
     * GET /session -> SDKResponse<ApiSession, SDKError>
     */
    func session(
        options: ITransportSettings? = nil
    ) -> SDKResponse<ApiSession, SDKError> {
        let result: SDKResponse<ApiSession, SDKError> = self.get("/session", nil, nil, options)
        return result
    }

    /**
     * GET /session_config -> SDKResponse<SessionConfig, SDKError>
     */
    func session_config(
        options: ITransportSettings? = nil
    ) -> SDKResponse<SessionConfig, SDKError> {
        let result: SDKResponse<SessionConfig, SDKError> = self.get("/session_config", nil, nil, options)
        return result
    }

    /**
     * PUT /color_collections/default -> SDKResponse<ColorCollection, SDKError>
     */
    func set_default_color_collection(
        /**
         * @param {String} collection_id ID of color collection to set as default
         */
        _ collection_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ColorCollection, SDKError> {
        let result: SDKResponse<ColorCollection, SDKError> = self.put("/color_collections/default", 
            ["collection_id": collection_id], nil, options)
        return result
    }

    /**
     * PUT /themes/default -> SDKResponse<Theme, SDKError>
     */
    func set_default_theme(
        /**
         * @param {String} name Name of theme to set as default
         */
        _ name: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Theme, SDKError> {
        let result: SDKResponse<Theme, SDKError> = self.put("/themes/default", 
            ["name": name], nil, options)
        return result
    }

    /**
     * PUT /roles/{role_id}/groups -> SDKResponse<[Group], SDKError>
     */
    func set_role_groups(
        /**
         * @param {Int64} role_id Id of Role
         */
        _ role_id: Int64,
        /**
         * @param {Partial<[Int64]>} body
         */
        _ body: Partial<[Int64]>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Group], SDKError> {
        let result: SDKResponse<[Group], SDKError> = self.put("/roles/\(role_id)/groups".encodePath(), nil, body, options)
        return result
    }

    /**
     * PUT /roles/{role_id}/users -> SDKResponse<[User], SDKError>
     */
    func set_role_users(
        /**
         * @param {Int64} role_id id of role
         */
        _ role_id: Int64,
        /**
         * @param {Partial<[Int64]>} body
         */
        _ body: Partial<[Int64]>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[User], SDKError> {
        let result: SDKResponse<[User], SDKError> = self.put("/roles/\(role_id)/users".encodePath(), nil, body, options)
        return result
    }

    /**
     * POST /user_attributes/{user_attribute_id}/group_values -> SDKResponse<[UserAttributeGroupValue], SDKError>
     */
    func set_user_attribute_group_values(
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        /**
         * @param {Partial<[UserAttributeGroupValue]>} body
         */
        _ body: Partial<[UserAttributeGroupValue]>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[UserAttributeGroupValue], SDKError> {
        let result: SDKResponse<[UserAttributeGroupValue], SDKError> = self.post("/user_attributes/\(user_attribute_id)/group_values".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /users/{user_id}/attribute_values/{user_attribute_id} -> SDKResponse<UserAttributeWithValue, SDKError>
     */
    func set_user_attribute_user_value(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        /**
         * @param {Partial<WriteUserAttributeWithValue>} body
         */
        _ body: Partial<WriteUserAttributeWithValue>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<UserAttributeWithValue, SDKError> {
        let result: SDKResponse<UserAttributeWithValue, SDKError> = self.patch("/users/\(user_id)/attribute_values/\(user_attribute_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PUT /users/{user_id}/roles -> SDKResponse<[Role], SDKError>
     */
    func set_user_roles(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {Partial<[Int64]>} body
         */
        _ body: Partial<[Int64]>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Role], SDKError> {
        let result: SDKResponse<[Role], SDKError> = self.put("/users/\(user_id)/roles".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * GET /spaces/{space_id} -> SDKResponse<Space, SDKError>
     */
    func space(
        /**
         * @param {String} space_id Id of space
         */
        _ space_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Space, SDKError> {
        let result: SDKResponse<Space, SDKError> = self.get("/spaces/\(space_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /spaces/{space_id}/ancestors -> SDKResponse<[Space], SDKError>
     */
    func space_ancestors(
        /**
         * @param {String} space_id Id of space
         */
        _ space_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Space], SDKError> {
        let result: SDKResponse<[Space], SDKError> = self.get("/spaces/\(space_id)/ancestors".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /spaces/{space_id}/children -> SDKResponse<[Space], SDKError>
     */
    func space_children(
        /**
         * @param {String} space_id Id of space
         */
        _ space_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Space], SDKError> {
        let result: SDKResponse<[Space], SDKError> = self.get("/spaces/\(space_id)/children".encodePath(), 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts], nil, options)
        return result
    }

    /**
     * GET /spaces/{space_id}/children/search -> SDKResponse<[Space], SDKError>
     */
    func space_children_search(
        /**
         * @param {String} space_id Id of space
         */
        _ space_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} name Match Space name.
         */
        name: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Space], SDKError> {
        let result: SDKResponse<[Space], SDKError> = self.get("/spaces/\(space_id)/children/search".encodePath(), 
            ["fields": fields, "sorts": sorts, "name": name], nil, options)
        return result
    }

    /**
     * GET /spaces/{space_id}/dashboards -> SDKResponse<[Dashboard], SDKError>
     */
    func space_dashboards(
        /**
         * @param {String} space_id Id of space
         */
        _ space_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Dashboard], SDKError> {
        let result: SDKResponse<[Dashboard], SDKError> = self.get("/spaces/\(space_id)/dashboards".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /spaces/{space_id}/looks -> SDKResponse<[LookWithQuery], SDKError>
     */
    func space_looks(
        /**
         * @param {String} space_id Id of space
         */
        _ space_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LookWithQuery], SDKError> {
        let result: SDKResponse<[LookWithQuery], SDKError> = self.get("/spaces/\(space_id)/looks".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /spaces/{space_id}/parent -> SDKResponse<Space, SDKError>
     */
    func space_parent(
        /**
         * @param {String} space_id Id of space
         */
        _ space_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Space, SDKError> {
        let result: SDKResponse<Space, SDKError> = self.get("/spaces/\(space_id)/parent".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /sql_queries/{slug} -> SDKResponse<SqlQuery, SDKError>
     */
    func sql_query(
        /**
         * @param {String} slug slug of query
         */
        _ slug: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SqlQuery, SDKError> {
        let result: SDKResponse<SqlQuery, SDKError> = self.get("/sql_queries/\(slug)".encodePath(), nil, nil, options)
        return result
    }

    /**
     * PATCH /dashboards/{lookml_dashboard_id}/sync -> SDKResponse<[Int64], SDKError>
     */
    func sync_lookml_dashboard(
        /**
         * @param {String} lookml_dashboard_id Id of LookML dashboard, in the form 'model::dashboardname'
         */
        _ lookml_dashboard_id: String,
        /**
         * @param {Partial<WriteDashboard>} body
         */
        _ body: Partial<WriteDashboard>,
        /**
         * @param {Bool} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
         */
        raw_locale: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Int64], SDKError> {
        let result: SDKResponse<[Int64], SDKError> = self.patch("/dashboards/\(lookml_dashboard_id)/sync".encodePath(), 
            ["raw_locale": raw_locale as Any?], body, options)
        return result
    }

    /**
     * PUT /connections/{connection_name}/test -> SDKResponse<[DBConnectionTestResult], SDKError>
     */
    func test_connection(
        /**
         * @param {String} connection_name Name of connection
         */
        _ connection_name: String,
        /**
         * @param {DelimArray<String>} tests Array of names of tests to run
         */
        tests: DelimArray<String>? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DBConnectionTestResult], SDKError> {
        let result: SDKResponse<[DBConnectionTestResult], SDKError> = self.put("/connections/\(connection_name)/test".encodePath(), 
            ["tests": tests as Any?], nil, options)
        return result
    }

    /**
     * PUT /connections/test -> SDKResponse<[DBConnectionTestResult], SDKError>
     */
    func test_connection_config(
        /**
         * @param {Partial<WriteDBConnection>} body
         */
        body: Partial<WriteDBConnection>?,
        /**
         * @param {DelimArray<String>} tests Array of names of tests to run
         */
        tests: DelimArray<String>? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DBConnectionTestResult], SDKError> {
        let result: SDKResponse<[DBConnectionTestResult], SDKError> = self.put("/connections/test", 
            ["tests": tests as Any?], body, options)
        return result
    }

    /**
     * POST /integrations/{integration_id}/test -> SDKResponse<IntegrationTestResult, SDKError>
     */
    func test_integration(
        /**
         * @param {Int64} integration_id Id of Integration
         */
        _ integration_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<IntegrationTestResult, SDKError> {
        let result: SDKResponse<IntegrationTestResult, SDKError> = self.post("/integrations/\(integration_id)/test".encodePath(), nil, nil, options)
        return result
    }

    /**
     * PUT /ldap_config/test_auth -> SDKResponse<LDAPConfigTestResult, SDKError>
     */
    func test_ldap_config_auth(
        /**
         * @param {Partial<WriteLDAPConfig>} body
         */
        _ body: Partial<WriteLDAPConfig>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LDAPConfigTestResult, SDKError> {
        let result: SDKResponse<LDAPConfigTestResult, SDKError> = self.put("/ldap_config/test_auth", nil, body, options)
        return result
    }

    /**
     * PUT /ldap_config/test_connection -> SDKResponse<LDAPConfigTestResult, SDKError>
     */
    func test_ldap_config_connection(
        /**
         * @param {Partial<WriteLDAPConfig>} body
         */
        _ body: Partial<WriteLDAPConfig>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LDAPConfigTestResult, SDKError> {
        let result: SDKResponse<LDAPConfigTestResult, SDKError> = self.put("/ldap_config/test_connection", nil, body, options)
        return result
    }

    /**
     * PUT /ldap_config/test_user_auth -> SDKResponse<LDAPConfigTestResult, SDKError>
     */
    func test_ldap_config_user_auth(
        /**
         * @param {Partial<WriteLDAPConfig>} body
         */
        _ body: Partial<WriteLDAPConfig>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LDAPConfigTestResult, SDKError> {
        let result: SDKResponse<LDAPConfigTestResult, SDKError> = self.put("/ldap_config/test_user_auth", nil, body, options)
        return result
    }

    /**
     * PUT /ldap_config/test_user_info -> SDKResponse<LDAPConfigTestResult, SDKError>
     */
    func test_ldap_config_user_info(
        /**
         * @param {Partial<WriteLDAPConfig>} body
         */
        _ body: Partial<WriteLDAPConfig>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LDAPConfigTestResult, SDKError> {
        let result: SDKResponse<LDAPConfigTestResult, SDKError> = self.put("/ldap_config/test_user_info", nil, body, options)
        return result
    }

    /**
     * GET /themes/{theme_id} -> SDKResponse<Theme, SDKError>
     */
    func theme(
        /**
         * @param {String} theme_id Id of theme
         */
        _ theme_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Theme, SDKError> {
        let result: SDKResponse<Theme, SDKError> = self.get("/themes/\(theme_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /themes/theme_or_default -> SDKResponse<Theme, SDKError>
     */
    func theme_or_default(
        /**
         * @param {String} name Name of theme
         */
        _ name: String,
        /**
         * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
         */
        ts: Date? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Theme, SDKError> {
        let result: SDKResponse<Theme, SDKError> = self.get("/themes/theme_or_default", 
            ["name": name, "ts": ts as Any?], nil, options)
        return result
    }

    /**
     * PATCH /backup_configuration -> SDKResponse<BackupConfiguration, SDKError>
     */
    func update_backup_configuration(
        /**
         * @param {Partial<WriteBackupConfiguration>} body
         */
        _ body: Partial<WriteBackupConfiguration>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<BackupConfiguration, SDKError> {
        let result: SDKResponse<BackupConfiguration, SDKError> = self.patch("/backup_configuration", nil, body, options)
        return result
    }

    /**
     * PATCH /color_collections/{collection_id} -> SDKResponse<ColorCollection, SDKError>
     */
    func update_color_collection(
        /**
         * @param {String} collection_id Id of Custom Color Collection
         */
        _ collection_id: String,
        /**
         * @param {Partial<WriteColorCollection>} body
         */
        _ body: Partial<WriteColorCollection>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ColorCollection, SDKError> {
        let result: SDKResponse<ColorCollection, SDKError> = self.patch("/color_collections/\(collection_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /connections/{connection_name} -> SDKResponse<DBConnection, SDKError>
     */
    func update_connection(
        /**
         * @param {String} connection_name Name of connection
         */
        _ connection_name: String,
        /**
         * @param {Partial<WriteDBConnection>} body
         */
        _ body: Partial<WriteDBConnection>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DBConnection, SDKError> {
        let result: SDKResponse<DBConnection, SDKError> = self.patch("/connections/\(connection_name)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /content_metadata/{content_metadata_id} -> SDKResponse<ContentMeta, SDKError>
     */
    func update_content_metadata(
        /**
         * @param {Int64} content_metadata_id Id of content metadata
         */
        _ content_metadata_id: Int64,
        /**
         * @param {Partial<WriteContentMeta>} body
         */
        _ body: Partial<WriteContentMeta>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentMeta, SDKError> {
        let result: SDKResponse<ContentMeta, SDKError> = self.patch("/content_metadata/\(content_metadata_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PUT /content_metadata_access/{content_metadata_access_id} -> SDKResponse<ContentMetaGroupUser, SDKError>
     */
    func update_content_metadata_access(
        /**
         * @param {Int64} content_metadata_access_id Id of content metadata access
         */
        _ content_metadata_access_id: Int64,
        /**
         * @param {Partial<ContentMetaGroupUser>} body
         */
        _ body: Partial<ContentMetaGroupUser>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentMetaGroupUser, SDKError> {
        let result: SDKResponse<ContentMetaGroupUser, SDKError> = self.put("/content_metadata_access/\(content_metadata_access_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /custom_welcome_email -> SDKResponse<CustomWelcomeEmail, SDKError>
     */
    func update_custom_welcome_email(
        /**
         * @param {Partial<WriteCustomWelcomeEmail>} body
         */
        _ body: Partial<WriteCustomWelcomeEmail>,
        /**
         * @param {Bool} send_test_welcome_email If true a test email with the content from the request will be sent to the current user after saving
         */
        send_test_welcome_email: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CustomWelcomeEmail, SDKError> {
        let result: SDKResponse<CustomWelcomeEmail, SDKError> = self.patch("/custom_welcome_email", 
            ["send_test_welcome_email": send_test_welcome_email as Any?], body, options)
        return result
    }

    /**
     * PUT /custom_welcome_email_test -> SDKResponse<WelcomeEmailTest, SDKError>
     */
    func update_custom_welcome_email_test(
        /**
         * @param {Partial<WriteWelcomeEmailTest>} body
         */
        _ body: Partial<WriteWelcomeEmailTest>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<WelcomeEmailTest, SDKError> {
        let result: SDKResponse<WelcomeEmailTest, SDKError> = self.put("/custom_welcome_email_test", nil, body, options)
        return result
    }

    /**
     * PATCH /dashboards/{dashboard_id} -> SDKResponse<Dashboard, SDKError>
     */
    func update_dashboard(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        /**
         * @param {Partial<WriteDashboard>} body
         */
        _ body: Partial<WriteDashboard>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Dashboard, SDKError> {
        let result: SDKResponse<Dashboard, SDKError> = self.patch("/dashboards/\(dashboard_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /dashboard_elements/{dashboard_element_id} -> SDKResponse<DashboardElement, SDKError>
     */
    func update_dashboard_element(
        /**
         * @param {String} dashboard_element_id Id of dashboard element
         */
        _ dashboard_element_id: String,
        /**
         * @param {Partial<WriteDashboardElement>} body
         */
        _ body: Partial<WriteDashboardElement>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardElement, SDKError> {
        let result: SDKResponse<DashboardElement, SDKError> = self.patch("/dashboard_elements/\(dashboard_element_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /dashboard_filters/{dashboard_filter_id} -> SDKResponse<DashboardFilter, SDKError>
     */
    func update_dashboard_filter(
        /**
         * @param {String} dashboard_filter_id Id of dashboard filter
         */
        _ dashboard_filter_id: String,
        /**
         * @param {Partial<WriteDashboardFilter>} body
         */
        _ body: Partial<WriteDashboardFilter>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardFilter, SDKError> {
        let result: SDKResponse<DashboardFilter, SDKError> = self.patch("/dashboard_filters/\(dashboard_filter_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /dashboard_layouts/{dashboard_layout_id} -> SDKResponse<DashboardLayout, SDKError>
     */
    func update_dashboard_layout(
        /**
         * @param {String} dashboard_layout_id Id of dashboard layout
         */
        _ dashboard_layout_id: String,
        /**
         * @param {Partial<WriteDashboardLayout>} body
         */
        _ body: Partial<WriteDashboardLayout>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardLayout, SDKError> {
        let result: SDKResponse<DashboardLayout, SDKError> = self.patch("/dashboard_layouts/\(dashboard_layout_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /dashboard_layout_components/{dashboard_layout_component_id} -> SDKResponse<DashboardLayoutComponent, SDKError>
     */
    func update_dashboard_layout_component(
        /**
         * @param {String} dashboard_layout_component_id Id of dashboard layout component
         */
        _ dashboard_layout_component_id: String,
        /**
         * @param {Partial<WriteDashboardLayoutComponent>} body
         */
        _ body: Partial<WriteDashboardLayoutComponent>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardLayoutComponent, SDKError> {
        let result: SDKResponse<DashboardLayoutComponent, SDKError> = self.patch("/dashboard_layout_components/\(dashboard_layout_component_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /datagroups/{datagroup_id} -> SDKResponse<Datagroup, SDKError>
     */
    func update_datagroup(
        /**
         * @param {String} datagroup_id ID of datagroup.
         */
        _ datagroup_id: String,
        /**
         * @param {Partial<WriteDatagroup>} body
         */
        _ body: Partial<WriteDatagroup>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Datagroup, SDKError> {
        let result: SDKResponse<Datagroup, SDKError> = self.patch("/datagroups/\(datagroup_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /folders/{folder_id} -> SDKResponse<Folder, SDKError>
     */
    func update_folder(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {Partial<WriteFolder>} body
         */
        _ body: Partial<WriteFolder>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Folder, SDKError> {
        let result: SDKResponse<Folder, SDKError> = self.patch("/folders/\(folder_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PUT /projects/{project_id}/git_branch -> SDKResponse<GitBranch, SDKError>
     */
    func update_git_branch(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {Partial<WriteGitBranch>} body
         */
        _ body: Partial<WriteGitBranch>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<GitBranch, SDKError> {
        let result: SDKResponse<GitBranch, SDKError> = self.put("/projects/\(project_id)/git_branch".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /groups/{group_id} -> SDKResponse<Group, SDKError>
     */
    func update_group(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {Partial<WriteGroup>} body
         */
        _ body: Partial<WriteGroup>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Group, SDKError> {
        let result: SDKResponse<Group, SDKError> = self.patch("/groups/\(group_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /homepages/{homepage_id} -> SDKResponse<Homepage, SDKError>
     */
    func update_homepage(
        /**
         * @param {Int64} homepage_id Id of homepage
         */
        _ homepage_id: Int64,
        /**
         * @param {Partial<WriteHomepage>} body
         */
        _ body: Partial<WriteHomepage>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Homepage, SDKError> {
        let result: SDKResponse<Homepage, SDKError> = self.patch("/homepages/\(homepage_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /homepage_items/{homepage_item_id} -> SDKResponse<HomepageItem, SDKError>
     */
    func update_homepage_item(
        /**
         * @param {Int64} homepage_item_id Id of homepage item
         */
        _ homepage_item_id: Int64,
        /**
         * @param {Partial<WriteHomepageItem>} body
         */
        _ body: Partial<WriteHomepageItem>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<HomepageItem, SDKError> {
        let result: SDKResponse<HomepageItem, SDKError> = self.patch("/homepage_items/\(homepage_item_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /homepage_sections/{homepage_section_id} -> SDKResponse<HomepageSection, SDKError>
     */
    func update_homepage_section(
        /**
         * @param {Int64} homepage_section_id Id of homepage section
         */
        _ homepage_section_id: Int64,
        /**
         * @param {Partial<WriteHomepageSection>} body
         */
        _ body: Partial<WriteHomepageSection>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<HomepageSection, SDKError> {
        let result: SDKResponse<HomepageSection, SDKError> = self.patch("/homepage_sections/\(homepage_section_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /integrations/{integration_id} -> SDKResponse<Integration, SDKError>
     */
    func update_integration(
        /**
         * @param {Int64} integration_id Id of Integration
         */
        _ integration_id: Int64,
        /**
         * @param {Partial<WriteIntegration>} body
         */
        _ body: Partial<WriteIntegration>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Integration, SDKError> {
        let result: SDKResponse<Integration, SDKError> = self.patch("/integrations/\(integration_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /integration_hubs/{integration_hub_id} -> SDKResponse<IntegrationHub, SDKError>
     */
    func update_integration_hub(
        /**
         * @param {Int64} integration_hub_id Id of Integration Hub
         */
        _ integration_hub_id: Int64,
        /**
         * @param {Partial<WriteIntegrationHub>} body
         */
        _ body: Partial<WriteIntegrationHub>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<IntegrationHub, SDKError> {
        let result: SDKResponse<IntegrationHub, SDKError> = self.patch("/integration_hubs/\(integration_hub_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /internal_help_resources -> SDKResponse<InternalHelpResources, SDKError>
     */
    func update_internal_help_resources(
        /**
         * @param {Partial<WriteInternalHelpResources>} body
         */
        _ body: Partial<WriteInternalHelpResources>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<InternalHelpResources, SDKError> {
        let result: SDKResponse<InternalHelpResources, SDKError> = self.patch("/internal_help_resources", nil, body, options)
        return result
    }

    /**
     * PATCH /internal_help_resources_content -> SDKResponse<InternalHelpResourcesContent, SDKError>
     */
    func update_internal_help_resources_content(
        /**
         * @param {Partial<WriteInternalHelpResourcesContent>} body
         */
        _ body: Partial<WriteInternalHelpResourcesContent>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<InternalHelpResourcesContent, SDKError> {
        let result: SDKResponse<InternalHelpResourcesContent, SDKError> = self.patch("/internal_help_resources_content", nil, body, options)
        return result
    }

    /**
     * PATCH /ldap_config -> SDKResponse<LDAPConfig, SDKError>
     */
    func update_ldap_config(
        /**
         * @param {Partial<WriteLDAPConfig>} body
         */
        _ body: Partial<WriteLDAPConfig>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LDAPConfig, SDKError> {
        let result: SDKResponse<LDAPConfig, SDKError> = self.patch("/ldap_config", nil, body, options)
        return result
    }

    /**
     * PATCH /legacy_features/{legacy_feature_id} -> SDKResponse<LegacyFeature, SDKError>
     */
    func update_legacy_feature(
        /**
         * @param {Int64} legacy_feature_id id of legacy feature
         */
        _ legacy_feature_id: Int64,
        /**
         * @param {Partial<WriteLegacyFeature>} body
         */
        _ body: Partial<WriteLegacyFeature>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LegacyFeature, SDKError> {
        let result: SDKResponse<LegacyFeature, SDKError> = self.patch("/legacy_features/\(legacy_feature_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /looks/{look_id} -> SDKResponse<LookWithQuery, SDKError>
     */
    func update_look(
        /**
         * @param {Int64} look_id Id of look
         */
        _ look_id: Int64,
        /**
         * @param {Partial<WriteLookWithQuery>} body
         */
        _ body: Partial<WriteLookWithQuery>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookWithQuery, SDKError> {
        let result: SDKResponse<LookWithQuery, SDKError> = self.patch("/looks/\(look_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /lookml_models/{lookml_model_name} -> SDKResponse<LookmlModel, SDKError>
     */
    func update_lookml_model(
        /**
         * @param {String} lookml_model_name Name of lookml model.
         */
        _ lookml_model_name: String,
        /**
         * @param {Partial<WriteLookmlModel>} body
         */
        _ body: Partial<WriteLookmlModel>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookmlModel, SDKError> {
        let result: SDKResponse<LookmlModel, SDKError> = self.patch("/lookml_models/\(lookml_model_name)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /model_sets/{model_set_id} -> SDKResponse<ModelSet, SDKError>
     */
    func update_model_set(
        /**
         * @param {Int64} model_set_id id of model set
         */
        _ model_set_id: Int64,
        /**
         * @param {Partial<WriteModelSet>} body
         */
        _ body: Partial<WriteModelSet>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ModelSet, SDKError> {
        let result: SDKResponse<ModelSet, SDKError> = self.patch("/model_sets/\(model_set_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /oidc_config -> SDKResponse<OIDCConfig, SDKError>
     */
    func update_oidc_config(
        /**
         * @param {Partial<WriteOIDCConfig>} body
         */
        _ body: Partial<WriteOIDCConfig>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<OIDCConfig, SDKError> {
        let result: SDKResponse<OIDCConfig, SDKError> = self.patch("/oidc_config", nil, body, options)
        return result
    }

    /**
     * PATCH /password_config -> SDKResponse<PasswordConfig, SDKError>
     */
    func update_password_config(
        /**
         * @param {Partial<WritePasswordConfig>} body
         */
        _ body: Partial<WritePasswordConfig>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<PasswordConfig, SDKError> {
        let result: SDKResponse<PasswordConfig, SDKError> = self.patch("/password_config", nil, body, options)
        return result
    }

    /**
     * PATCH /permission_sets/{permission_set_id} -> SDKResponse<PermissionSet, SDKError>
     */
    func update_permission_set(
        /**
         * @param {Int64} permission_set_id id of permission set
         */
        _ permission_set_id: Int64,
        /**
         * @param {Partial<WritePermissionSet>} body
         */
        _ body: Partial<WritePermissionSet>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<PermissionSet, SDKError> {
        let result: SDKResponse<PermissionSet, SDKError> = self.patch("/permission_sets/\(permission_set_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /projects/{project_id} -> SDKResponse<Project, SDKError>
     */
    func update_project(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {Partial<WriteProject>} body
         */
        _ body: Partial<WriteProject>,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Project, SDKError> {
        let result: SDKResponse<Project, SDKError> = self.patch("/projects/\(project_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PUT /projects/{root_project_id}/credential/{credential_id} -> SDKResponse<RepositoryCredential, SDKError>
     */
    func update_repository_credential(
        /**
         * @param {String} root_project_id Root Project Id
         */
        _ root_project_id: String,
        /**
         * @param {String} credential_id Credential Id
         */
        _ credential_id: String,
        /**
         * @param {Partial<WriteRepositoryCredential>} body
         */
        _ body: Partial<WriteRepositoryCredential>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<RepositoryCredential, SDKError> {
        let result: SDKResponse<RepositoryCredential, SDKError> = self.put("/projects/\(root_project_id)/credential/\(credential_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /roles/{role_id} -> SDKResponse<Role, SDKError>
     */
    func update_role(
        /**
         * @param {Int64} role_id id of role
         */
        _ role_id: Int64,
        /**
         * @param {Partial<WriteRole>} body
         */
        _ body: Partial<WriteRole>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Role, SDKError> {
        let result: SDKResponse<Role, SDKError> = self.patch("/roles/\(role_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /saml_config -> SDKResponse<SamlConfig, SDKError>
     */
    func update_saml_config(
        /**
         * @param {Partial<WriteSamlConfig>} body
         */
        _ body: Partial<WriteSamlConfig>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SamlConfig, SDKError> {
        let result: SDKResponse<SamlConfig, SDKError> = self.patch("/saml_config", nil, body, options)
        return result
    }

    /**
     * PATCH /scheduled_plans/{scheduled_plan_id} -> SDKResponse<ScheduledPlan, SDKError>
     */
    func update_scheduled_plan(
        /**
         * @param {Int64} scheduled_plan_id Scheduled Plan Id
         */
        _ scheduled_plan_id: Int64,
        /**
         * @param {Partial<WriteScheduledPlan>} body
         */
        _ body: Partial<WriteScheduledPlan>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ScheduledPlan, SDKError> {
        let result: SDKResponse<ScheduledPlan, SDKError> = self.patch("/scheduled_plans/\(scheduled_plan_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /session -> SDKResponse<ApiSession, SDKError>
     */
    func update_session(
        /**
         * @param {Partial<WriteApiSession>} body
         */
        _ body: Partial<WriteApiSession>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ApiSession, SDKError> {
        let result: SDKResponse<ApiSession, SDKError> = self.patch("/session", nil, body, options)
        return result
    }

    /**
     * PATCH /session_config -> SDKResponse<SessionConfig, SDKError>
     */
    func update_session_config(
        /**
         * @param {Partial<WriteSessionConfig>} body
         */
        _ body: Partial<WriteSessionConfig>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SessionConfig, SDKError> {
        let result: SDKResponse<SessionConfig, SDKError> = self.patch("/session_config", nil, body, options)
        return result
    }

    /**
     * PATCH /spaces/{space_id} -> SDKResponse<Space, SDKError>
     */
    func update_space(
        /**
         * @param {String} space_id Id of space
         */
        _ space_id: String,
        /**
         * @param {Partial<WriteSpace>} body
         */
        _ body: Partial<WriteSpace>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Space, SDKError> {
        let result: SDKResponse<Space, SDKError> = self.patch("/spaces/\(space_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /themes/{theme_id} -> SDKResponse<Theme, SDKError>
     */
    func update_theme(
        /**
         * @param {String} theme_id Id of theme
         */
        _ theme_id: String,
        /**
         * @param {Partial<WriteTheme>} body
         */
        _ body: Partial<WriteTheme>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Theme, SDKError> {
        let result: SDKResponse<Theme, SDKError> = self.patch("/themes/\(theme_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /users/{user_id} -> SDKResponse<User, SDKError>
     */
    func update_user(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Partial<WriteUser>} body
         */
        _ body: Partial<WriteUser>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<User, SDKError> {
        let result: SDKResponse<User, SDKError> = self.patch("/users/\(user_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /user_attributes/{user_attribute_id} -> SDKResponse<UserAttribute, SDKError>
     */
    func update_user_attribute(
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        /**
         * @param {Partial<WriteUserAttribute>} body
         */
        _ body: Partial<WriteUserAttribute>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<UserAttribute, SDKError> {
        let result: SDKResponse<UserAttribute, SDKError> = self.patch("/user_attributes/\(user_attribute_id)".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PATCH /groups/{group_id}/attribute_values/{user_attribute_id} -> SDKResponse<UserAttributeGroupValue, SDKError>
     */
    func update_user_attribute_group_value(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        /**
         * @param {Partial<UserAttributeGroupValue>} body
         */
        _ body: Partial<UserAttributeGroupValue>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<UserAttributeGroupValue, SDKError> {
        let result: SDKResponse<UserAttributeGroupValue, SDKError> = self.patch("/groups/\(group_id)/attribute_values/\(user_attribute_id)".encodePath(), nil, body, options)
        return result
    }

    /**
     * PATCH /users/{user_id}/credentials_email -> SDKResponse<CredentialsEmail, SDKError>
     */
    func update_user_credentials_email(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {Partial<WriteCredentialsEmail>} body
         */
        _ body: Partial<WriteCredentialsEmail>,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsEmail, SDKError> {
        let result: SDKResponse<CredentialsEmail, SDKError> = self.patch("/users/\(user_id)/credentials_email".encodePath(), 
            ["fields": fields], body, options)
        return result
    }

    /**
     * PUT /whitelabel_configuration -> SDKResponse<WhitelabelConfiguration, SDKError>
     */
    func update_whitelabel_configuration(
        /**
         * @param {Partial<WriteWhitelabelConfiguration>} body
         */
        _ body: Partial<WriteWhitelabelConfiguration>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<WhitelabelConfiguration, SDKError> {
        let result: SDKResponse<WhitelabelConfiguration, SDKError> = self.put("/whitelabel_configuration", nil, body, options)
        return result
    }

    /**
     * GET /users/{user_id} -> SDKResponse<User, SDKError>
     */
    func user(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<User, SDKError> {
        let result: SDKResponse<User, SDKError> = self.get("/users/\(user_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /user_attributes/{user_attribute_id} -> SDKResponse<UserAttribute, SDKError>
     */
    func user_attribute(
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<UserAttribute, SDKError> {
        let result: SDKResponse<UserAttribute, SDKError> = self.get("/user_attributes/\(user_attribute_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/attribute_values -> SDKResponse<[UserAttributeWithValue], SDKError>
     */
    func user_attribute_user_values(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {DelimArray<Int64>} user_attribute_ids Specific user attributes to request. Omit or leave blank to request all user attributes.
         */
        user_attribute_ids: DelimArray<Int64>? = nil,
        /**
         * @param {Bool} all_values If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence.
         */
        all_values: Bool? = nil,
        /**
         * @param {Bool} include_unset If true, returns an empty record for each requested attribute that has no user, group, or default value.
         */
        include_unset: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[UserAttributeWithValue], SDKError> {
        let result: SDKResponse<[UserAttributeWithValue], SDKError> = self.get("/users/\(user_id)/attribute_values".encodePath(), 
            ["fields": fields, "user_attribute_ids": user_attribute_ids as Any?, "all_values": all_values as Any?, "include_unset": include_unset as Any?], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/credentials_api3/{credentials_api3_id} -> SDKResponse<CredentialsApi3, SDKError>
     */
    func user_credentials_api3(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} credentials_api3_id Id of API 3 Credential
         */
        _ credentials_api3_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsApi3, SDKError> {
        let result: SDKResponse<CredentialsApi3, SDKError> = self.get("/users/\(user_id)/credentials_api3/\(credentials_api3_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/credentials_email -> SDKResponse<CredentialsEmail, SDKError>
     */
    func user_credentials_email(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsEmail, SDKError> {
        let result: SDKResponse<CredentialsEmail, SDKError> = self.get("/users/\(user_id)/credentials_email".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/credentials_embed/{credentials_embed_id} -> SDKResponse<CredentialsEmbed, SDKError>
     */
    func user_credentials_embed(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} credentials_embed_id Id of Embedding Credential
         */
        _ credentials_embed_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsEmbed, SDKError> {
        let result: SDKResponse<CredentialsEmbed, SDKError> = self.get("/users/\(user_id)/credentials_embed/\(credentials_embed_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/credentials_google -> SDKResponse<CredentialsGoogle, SDKError>
     */
    func user_credentials_google(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsGoogle, SDKError> {
        let result: SDKResponse<CredentialsGoogle, SDKError> = self.get("/users/\(user_id)/credentials_google".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/credentials_ldap -> SDKResponse<CredentialsLDAP, SDKError>
     */
    func user_credentials_ldap(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsLDAP, SDKError> {
        let result: SDKResponse<CredentialsLDAP, SDKError> = self.get("/users/\(user_id)/credentials_ldap".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/credentials_looker_openid -> SDKResponse<CredentialsLookerOpenid, SDKError>
     */
    func user_credentials_looker_openid(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsLookerOpenid, SDKError> {
        let result: SDKResponse<CredentialsLookerOpenid, SDKError> = self.get("/users/\(user_id)/credentials_looker_openid".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/credentials_oidc -> SDKResponse<CredentialsOIDC, SDKError>
     */
    func user_credentials_oidc(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsOIDC, SDKError> {
        let result: SDKResponse<CredentialsOIDC, SDKError> = self.get("/users/\(user_id)/credentials_oidc".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/credentials_saml -> SDKResponse<CredentialsSaml, SDKError>
     */
    func user_credentials_saml(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsSaml, SDKError> {
        let result: SDKResponse<CredentialsSaml, SDKError> = self.get("/users/\(user_id)/credentials_saml".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/credentials_totp -> SDKResponse<CredentialsTotp, SDKError>
     */
    func user_credentials_totp(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsTotp, SDKError> {
        let result: SDKResponse<CredentialsTotp, SDKError> = self.get("/users/\(user_id)/credentials_totp".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/credential/{credential_type}/{credential_id} -> SDKResponse<User, SDKError>
     */
    func user_for_credential(
        /**
         * @param {String} credential_type Type name of credential
         */
        _ credential_type: String,
        /**
         * @param {String} credential_id Id of credential
         */
        _ credential_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<User, SDKError> {
        let result: SDKResponse<User, SDKError> = self.get("/users/credential/\(credential_type)/\(credential_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/roles -> SDKResponse<[Role], SDKError>
     */
    func user_roles(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} direct_association_only Get only roles associated directly with the user: exclude those only associated through groups.
         */
        direct_association_only: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Role], SDKError> {
        let result: SDKResponse<[Role], SDKError> = self.get("/users/\(user_id)/roles".encodePath(), 
            ["fields": fields, "direct_association_only": direct_association_only as Any?], nil, options)
        return result
    }

    /**
     * GET /users/{user_id}/sessions/{session_id} -> SDKResponse<Session, SDKError>
     */
    func user_session(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} session_id Id of Web Login Session
         */
        _ session_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Session, SDKError> {
        let result: SDKResponse<Session, SDKError> = self.get("/users/\(user_id)/sessions/\(session_id)".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * POST /projects/{project_id}/validate -> SDKResponse<ProjectValidation, SDKError>
     */
    func validate_project(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ProjectValidation, SDKError> {
        let result: SDKResponse<ProjectValidation, SDKError> = self.post("/projects/\(project_id)/validate".encodePath(), 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * POST /themes/validate -> SDKResponse<ValidationError, SDKError>
     */
    func validate_theme(
        /**
         * @param {Partial<WriteTheme>} body
         */
        body: Partial<WriteTheme>?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ValidationError, SDKError> {
        let result: SDKResponse<ValidationError, SDKError> = self.post("/themes/validate", nil, body, options)
        return result
    }

    /**
     * GET /versions -> SDKResponse<ApiVersion, SDKError>
     */
    func versions(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ApiVersion, SDKError> {
        let result: SDKResponse<ApiVersion, SDKError> = self.get("/versions", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /whitelabel_configuration -> SDKResponse<WhitelabelConfiguration, SDKError>
     */
    func whitelabel_configuration(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<WhitelabelConfiguration, SDKError> {
        let result: SDKResponse<WhitelabelConfiguration, SDKError> = self.get("/whitelabel_configuration", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * GET /workspaces/{workspace_id} -> SDKResponse<Workspace, SDKError>
     */
    func workspace(
        /**
         * @param {String} workspace_id Id of the workspace
         */
        _ workspace_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Workspace, SDKError> {
        let result: SDKResponse<Workspace, SDKError> = self.get("/workspaces/\(workspace_id)".encodePath(), nil, nil, options)
        return result
    }

}