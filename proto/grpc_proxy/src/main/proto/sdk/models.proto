// MIT License
//
// Copyright (c) 2019 Looker Data Sciences, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// 203 API models: 203 Spec, 0 Request, 0 Write, 0 Enum


syntax = "proto3";

package looker;

option java_package = "com.google.looker.grpc.services";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
    

message AccessToken {
  // Access Token used for API calls
  string access_token = 484733480;
  // Type of Token
  string token_type = 101507520;
  // Number of seconds before the token expires
  int64 expires_in = 416905464;
  // Refresh token which can be used to obtain a new access token
  string refresh_token = 358008858;
}

// The appropriate horizontal text alignment the values of this field should be displayed in. Valid values are: "left", "right".
enum Align {
  _ALIGN_UNSET = 0;
  ALIGN_LEFT = 528533215;
  ALIGN_RIGHT = 400500241;
}


message ApiSession {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // The id of active workspace for this session
  string workspace_id = 394620993;
  // The id of the actual user in the case when this session represents one user sudo'ing as another
  int64 sudo_user_id = 287410032;
}


message ApiVersion {
  // Current Looker release version number
  string looker_release_version = 308761353;
  ApiVersionElement current_version = 301857801;
  // Array of versions supported by this Looker instance
  repeated ApiVersionElement supported_versions = 507588669;
}


message ApiVersionElement {
  // Version number as it appears in '/api/xxx/' urls
  string version = 351608024;
  // Full version number including minor version
  string full_version = 380320202;
  // Status of this version
  string status = 446240775;
  // Url for swagger.json for this version
  string swagger_url = 427126350;
}


message BackupConfiguration {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Type of backup: looker-s3 or custom-s3
  string type = 3575610;
  // Name of bucket for custom-s3 backups
  string custom_s3_bucket = 358719282;
  // Name of region where the bucket is located
  string custom_s3_bucket_region = 278083340;
  // (Write-Only) AWS S3 key used for custom-s3 backups
  string custom_s3_key = 277162771;
  // (Write-Only) AWS S3 secret used for custom-s3 backups
  string custom_s3_secret = 245512607;
  // Link to get this item
  string url = 116079;
}


message Board {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Id of associated content_metadata record
  int64 content_metadata_id = 293222822;
  // Date of board creation
  google.protobuf.Timestamp created_at = 342420026;
  // Date of board deletion
  google.protobuf.Timestamp deleted_at = 441264006;
  // Description of the board
  string description = 431136513;
  // Sections of the board
  repeated BoardSection board_sections = 499514956;
  // Unique Id
  int64 id = 3355;
  // ids of the board sections in the order they should be displayed
  repeated int64 section_order = 328304035;
  // Title of the board
  string title = 110371416;
  // Date of last board update
  google.protobuf.Timestamp updated_at = 295464393;
  // User id of board creator
  int64 user_id = 147132913;
  // Whether the board is the primary homepage or not
  bool primary_homepage = 522659170;
}


message BoardItem {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Name of user who created the content this item is based on
  string content_created_by = 310271269;
  // Content favorite id associated with the item this content is based on
  int64 content_favorite_id = 403544586;
  // Content metadata id associated with the item this content is based on
  int64 content_metadata_id = 293222822;
  // Last time the content that this item is based on was updated
  string content_updated_at = 424059459;
  // Dashboard to base this item on
  int64 dashboard_id = 496187565;
  // The actual description for display
  string description = 431136513;
  // Number of times content has been favorited, if present
  int64 favorite_count = 358762965;
  // Associated Board Section
  int64 board_section_id = 501228011;
  // Unique Id
  int64 id = 3355;
  // The container folder name of the content
  string location = 475260909;
  // Look to base this item on
  int64 look_id = 349778619;
  // LookML Dashboard to base this item on
  string lookml_dashboard_id = 339184839;
  // An arbitrary integer representing the sort order within the section
  int64 order = 106006350;
  // The actual title for display
  string title = 110371416;
  // Relative url for the associated content
  string url = 116079;
  // Number of times content has been viewed, if present
  int64 view_count = 383588418;
}


message BoardSection {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Time at which this section was created.
  google.protobuf.Timestamp created_at = 342420026;
  // Time at which this section was deleted.
  google.protobuf.Timestamp deleted_at = 441264006;
  // Description of the content found in this section.
  string description = 431136513;
  // Id reference to parent board
  int64 board_id = 402691141;
  // Items in the board section
  repeated BoardItem board_items = 345473718;
  // Unique Id
  int64 id = 3355;
  // ids of the board items in the order they should be displayed
  repeated int64 item_order = 488938807;
  // Name of row
  string title = 110371416;
  // Time at which this section was last updated.
  google.protobuf.Timestamp updated_at = 295464393;
}

// Field category Valid values are: "parameter", "filter", "measure", "dimension".
enum Category {
  _CATEGORY_UNSET = 0;
  CATEGORY_PARAMETER = 421572962;
  CATEGORY_FILTER = 428014217;
  CATEGORY_MEASURE = 258713341;
  CATEGORY_DIMENSION = 340795438;
}


message ColorCollection {
  // Unique Id
  string id = 3355;
  // Label of color collection
  string label = 102727412;
  // Array of categorical palette definitions
  repeated DiscretePalette categoricalPalettes = 181997160;
  // Array of discrete palette definitions
  repeated ContinuousPalette sequentialPalettes = 296477661;
  // Array of diverging palette definitions
  repeated ContinuousPalette divergingPalettes = 417697719;
}


message ColorStop {
  // CSS color string
  string color = 94842723;
  // Offset in continuous palette (0 to 100)
  int64 offset = 509889974;
}


message ColumnSearch {
  // Name of schema containing the table
  string schema_name = 505336523;
  // Name of table containing the column
  string table_name = 376157673;
  // Name of column
  string column_name = 417463574;
  // Column data type
  string data_type = 363359569;
}


message Command {
  // Id of the command record
  int64 id = 3355;
  // Id of the command author
  int64 author_id = 368900115;
  // Name of the command
  string name = 3373707;
  // Description of the command
  string description = 431136513;
  // Id of the content associated with the command
  string linked_content_id = 63843193;
  // Name of the command Valid values are: "dashboard", "lookml_dashboard".
  LinkedContentType linked_content_type = 305853718;
}


message ConnectionFeatures {
  // Name of the dialect for this connection
  string dialect_name = 453584193;
  // True for cost estimating support
  bool cost_estimate = 304953513;
  // True for multiple database support
  bool multiple_databases = 52008215;
  // True for cost estimating support
  bool column_search = 470196568;
  // True for secondary index support
  bool persistent_table_indexes = 409191033;
  // True for persistent derived table support
  bool persistent_derived_tables = 355959624;
  // True for turtles support
  bool turtles = 482650276;
  // True for percentile support
  bool percentile = 460912481;
  // True for distinct percentile support
  bool distinct_percentile = 338510432;
  // True for stable views support
  bool stable_views = 431662053;
  // True for millisecond support
  bool milliseconds = 85195282;
  // True for microsecond support
  bool microseconds = 366488014;
  // True for subtotal support
  bool subtotals = 277302775;
  // True for geographic location support
  bool location = 475260909;
  // True for timezone conversion in query support
  bool timezone = 519056897;
  // True for connection pooling support
  bool connection_pooling = 516929414;
}


message ContentFavorite {
  // Unique Id
  int64 id = 3355;
  // User Id which owns this ContentFavorite
  int64 user_id = 147132913;
  // Content Metadata Id associated with this ContentFavorite
  int64 content_metadata_id = 293222822;
  // Id of a look
  int64 look_id = 349778619;
  // Id of a dashboard
  int64 dashboard_id = 496187565;
  LookBasic look = 3327647;
  DashboardBase dashboard = 523930294;
  // Id of a board
  int64 board_id = 402691141;
}


message ContentMeta {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  int64 id = 3355;
  // Name or title of underlying content
  string name = 3373707;
  // Id of Parent Content
  int64 parent_id = 517581876;
  // Id of associated dashboard when content_type is "dashboard"
  string dashboard_id = 496187565;
  // Id of associated look when content_type is "look"
  int64 look_id = 349778619;
  // Id of associated folder when content_type is "space"
  string folder_id = 527488652;
  // Content Type ("dashboard", "look", or "folder")
  string content_type = 415923104;
  // Whether content inherits its access levels from parent
  bool inherits = 226856664;
  // Id of Inherited Content
  int64 inheriting_id = 350353364;
  // Content Slug
  string slug = 3533483;
}


message ContentMetaGroupUser {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  string id = 3355;
  // Id of associated Content Metadata
  string content_metadata_id = 293222822;
  // Type of permission: "view" or "edit" Valid values are: "view", "edit".
  PermissionType permission_type = 405376277;
  // ID of associated group
  int64 group_id = 506361563;
  // ID of associated user
  int64 user_id = 147132913;
}


message ContentValidation {
  // A list of content errors
  repeated ContentValidatorError content_with_errors = 415894303;
  // Duration of content validation in seconds
  float computation_time = 279797358;
  // The number of looks validated
  int64 total_looks_validated = 332982930;
  // The number of dashboard elements validated
  int64 total_dashboard_elements_validated = 231059308;
  // The number of dashboard filters validated
  int64 total_dashboard_filters_validated = 437898084;
  // The number of scheduled plans validated
  int64 total_scheduled_plans_validated = 504055445;
  // The number of alerts validated
  int64 total_alerts_validated = 392535167;
  // The number of explores used across all content validated
  int64 total_explores_validated = 481205653;
}


message ContentValidationAlert {
  // ID of the alert
  int64 id = 3355;
  // ID of the LookML dashboard associated with the alert
  string lookml_dashboard_id = 339184839;
  // ID of the LookML dashboard element associated with the alert
  string lookml_link_id = 458227247;
  // An optional, user-defined title for the alert
  string custom_title = 365526021;
}


message ContentValidationDashboard {
  // Description
  string description = 431136513;
  // Unique Id
  string id = 3355;
  ContentValidationFolder folder = 317241572;
  // Dashboard Title
  string title = 110371416;
}


message ContentValidationDashboardElement {
  // Text tile body text
  string body_text = 313253482;
  // Id of Dashboard
  string dashboard_id = 496187565;
  // Unique Id
  string id = 3355;
  // Id Of Look
  string look_id = 349778619;
  // Note Display
  string note_display = 33923723;
  // Note State
  string note_state = 312488702;
  // Note Text
  string note_text = 445242710;
  // Note Text as Html
  string note_text_as_html = 459711923;
  // Id Of Query
  int64 query_id = 291663619;
  // Text tile subtitle text
  string subtitle_text = 527614074;
  // Title of dashboard element
  string title = 110371416;
  // Whether title is hidden
  bool title_hidden = 278123192;
  // Text tile title
  string title_text = 443341651;
  // Type
  string type = 3575610;
}


message ContentValidationDashboardFilter {
  // Unique Id
  string id = 3355;
  // Id of Dashboard
  string dashboard_id = 496187565;
  // Name of filter
  string name = 3373707;
  // Title of filter
  string title = 110371416;
  // Type of filter: one of date, number, string, or field
  string type = 3575610;
  // Default value of filter
  string default_value = 329667964;
  // Model of filter (required if type = field)
  string model = 104069929;
  // Explore of filter (required if type = field)
  string explore = 327287131;
  // Dimension of filter (required if type = field)
  string dimension = 273753254;
}


message ContentValidationError {
  // Error message
  string message = 477462531;
  // Name of the field involved in the error
  string field_name = 288329560;
  // Name of the model involved in the error
  string model_name = 526217848;
  // Name of the explore involved in the error
  string explore_name = 485574866;
  // Whether this validation error is removable
  bool removable = 320564534;
}


message ContentValidationFolder {
  // Unique Name
  string name = 3373707;
  // Unique Id
  string id = 3355;
}


message ContentValidationLook {
  // Unique Id
  int64 id = 3355;
  // Look Title
  string title = 110371416;
  ContentValidationFolder folder = 317241572;
}


message ContentValidationLookMLDashboard {
  // ID of the LookML Dashboard
  string id = 3355;
  // Title of the LookML Dashboard
  string title = 110371416;
  // ID of Space
  string space_id = 511862461;
}


message ContentValidationLookMLDashboardElement {
  // Link ID of the LookML Dashboard Element
  string lookml_link_id = 458227247;
  // Title of the LookML Dashboard Element
  string title = 110371416;
}


message ContentValidationScheduledPlan {
  // Name of this scheduled plan
  string name = 3373707;
  // Id of a look
  int64 look_id = 349778619;
  // Unique Id
  int64 id = 3355;
}


message ContentValidatorError {
  ContentValidationLook look = 3327647;
  ContentValidationDashboard dashboard = 523930294;
  ContentValidationDashboardElement dashboard_element = 100916305;
  ContentValidationDashboardFilter dashboard_filter = 512220191;
  ContentValidationScheduledPlan scheduled_plan = 298382269;
  ContentValidationAlert alert = 92899676;
  ContentValidationLookMLDashboard lookml_dashboard = 532857865;
  ContentValidationLookMLDashboardElement lookml_dashboard_element = 469836468;
  // A list of errors found for this piece of content
  repeated ContentValidationError errors = 323658789;
  // An id unique to this piece of content for this validation run
  string id = 3355;
}


message ContentView {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  int64 id = 3355;
  // Id of viewed Look
  int64 look_id = 349778619;
  // Id of the viewed Dashboard
  int64 dashboard_id = 496187565;
  // Content metadata id of the Look or Dashboard
  int64 content_metadata_id = 293222822;
  // Id of user content was viewed by
  int64 user_id = 147132913;
  // Id of group content was viewed by
  int64 group_id = 506361563;
  // Number of times piece of content was viewed
  int64 view_count = 383588418;
  // Number of times piece of content was favorited
  int64 favorite_count = 358762965;
  // Date the piece of content was last viewed
  string last_viewed_at = 273134349;
  // Week start date for the view and favorite count during that given week
  string start_of_week_date = 75308398;
}


message ContinuousPalette {
  // Unique identity string
  string id = 3355;
  // Label for palette
  string label = 102727412;
  // Type of palette
  string type = 3575610;
  // Array of ColorStops in the palette
  repeated ColorStop stops = 109770929;
}


message CostEstimate {
  // Cost of SQL statement
  int64 cost = 3059661;
  // Does the result come from the cache?
  bool cache_hit = 276631381;
  // Cost measurement size
  string cost_unit = 269894986;
  // Human-friendly message
  string message = 477462531;
}


message CreateCostEstimate {
  // SQL statement to estimate
  string sql = 114126;
}


message CreateDashboardFilter {
  // Unique Id
  string id = 3355;
  // Id of Dashboard
  string dashboard_id = 496187565;
  // Name of filter
  string name = 3373707;
  // Title of filter
  string title = 110371416;
  // Type of filter: one of date, number, string, or field
  string type = 3575610;
  // Default value of filter
  string default_value = 329667964;
  // Model of filter (required if type = field)
  string model = 104069929;
  // Explore of filter (required if type = field)
  string explore = 327287131;
  // Dimension of filter (required if type = field)
  string dimension = 273753254;
  // Field information
  map<string, google.protobuf.Any> field = 97427706;
  // Display order of this filter relative to other filters
  int64 row = 113114;
  // Array of listeners for faceted filters
  repeated string listens_to_filters = 326256077;
  // Whether the filter allows multiple filter values
  bool allow_multiple_values = 444540061;
  // Whether the filter requires a value to run the dashboard
  bool required = 393139297;
  // The visual configuration for this filter. Used to set up how the UI for this filter should appear.
  map<string, google.protobuf.Any> ui_config = 338401068;
}


message CreateDashboardRenderTask {
  // Filter values to apply to the dashboard queries, in URL query format
  string dashboard_filters = 454602920;
  // Dashboard layout style: single_column or tiled
  string dashboard_style = 394441966;
}


message CreateFolder {
  // Unique Name
  string name = 3373707;
  // Id of Parent. If the parent id is null, this is a root-level entry
  string parent_id = 517581876;
}


message CreateQueryTask {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Id of query to run
  int64 query_id = 291663619;
  // Desired async query result format. Valid values are: "inline_json", "json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml".
  ResultFormat result_format = 283324265;
  // Source of query task
  string source = 448252914;
  // Create the task but defer execution
  bool deferred = 323945455;
  // Id of look associated with query.
  int64 look_id = 349778619;
  // Id of dashboard associated with query.
  string dashboard_id = 496187565;
}


message CredentialsApi3 {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  int64 id = 3355;
  // API key client_id
  string client_id = 476022396;
  // Timestamp for the creation of this credential
  string created_at = 342420026;
  // Has this credential been disabled?
  bool is_disabled = 464089615;
  // Short name for the type of this kind of credential
  string type = 3575610;
  // Link to get this item
  string url = 116079;
}


message CredentialsEmail {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Timestamp for the creation of this credential
  string created_at = 342420026;
  // EMail address used for user login
  string email = 96619420;
  // Force the user to change their password upon their next login
  bool forced_password_reset_at_next_login = 457930717;
  // Has this credential been disabled?
  bool is_disabled = 464089615;
  // Timestamp for most recent login using credential
  string logged_in_at = 219006096;
  // Url with one-time use secret token that the user can use to reset password
  string password_reset_url = 409079926;
  // Short name for the type of this kind of credential
  string type = 3575610;
  // Link to get this item
  string url = 116079;
  // Link to get this user
  string user_url = 266140933;
}


message CredentialsEmbed {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Timestamp for the creation of this credential
  string created_at = 342420026;
  // Embedder's id for a group to which this user was added during the most recent login
  string external_group_id = 515008972;
  // Embedder's unique id for the user
  string external_user_id = 438485145;
  // Unique Id
  int64 id = 3355;
  // Has this credential been disabled?
  bool is_disabled = 464089615;
  // Timestamp for most recent login using credential
  string logged_in_at = 219006096;
  // Short name for the type of this kind of credential
  string type = 3575610;
  // Link to get this item
  string url = 116079;
}


message CredentialsGoogle {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Timestamp for the creation of this credential
  string created_at = 342420026;
  // Google domain
  string domain = 331549391;
  // EMail address
  string email = 96619420;
  // Google's Unique ID for this user
  string google_user_id = 424203645;
  // Has this credential been disabled?
  bool is_disabled = 464089615;
  // Timestamp for most recent login using credential
  string logged_in_at = 219006096;
  // Short name for the type of this kind of credential
  string type = 3575610;
  // Link to get this item
  string url = 116079;
}


message CredentialsLDAP {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Timestamp for the creation of this credential
  string created_at = 342420026;
  // EMail address
  string email = 96619420;
  // Has this credential been disabled?
  bool is_disabled = 464089615;
  // LDAP Distinguished name for this user (as-of the last login)
  string ldap_dn = 22077474;
  // LDAP Unique ID for this user
  string ldap_id = 22077619;
  // Timestamp for most recent login using credential
  string logged_in_at = 219006096;
  // Short name for the type of this kind of credential
  string type = 3575610;
  // Link to get this item
  string url = 116079;
}


message CredentialsLookerOpenid {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Timestamp for the creation of this credential
  string created_at = 342420026;
  // EMail address used for user login
  string email = 96619420;
  // Has this credential been disabled?
  bool is_disabled = 464089615;
  // Timestamp for most recent login using credential
  string logged_in_at = 219006096;
  // IP address of client for most recent login using credential
  string logged_in_ip = 219006340;
  // Short name for the type of this kind of credential
  string type = 3575610;
  // Link to get this item
  string url = 116079;
  // Link to get this user
  string user_url = 266140933;
}


message CredentialsOIDC {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Timestamp for the creation of this credential
  string created_at = 342420026;
  // EMail address
  string email = 96619420;
  // Has this credential been disabled?
  bool is_disabled = 464089615;
  // Timestamp for most recent login using credential
  string logged_in_at = 219006096;
  // OIDC OP's Unique ID for this user
  string oidc_user_id = 340693525;
  // Short name for the type of this kind of credential
  string type = 3575610;
  // Link to get this item
  string url = 116079;
}


message CredentialsSaml {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Timestamp for the creation of this credential
  string created_at = 342420026;
  // EMail address
  string email = 96619420;
  // Has this credential been disabled?
  bool is_disabled = 464089615;
  // Timestamp for most recent login using credential
  string logged_in_at = 219006096;
  // Saml IdP's Unique ID for this user
  string saml_user_id = 211576771;
  // Short name for the type of this kind of credential
  string type = 3575610;
  // Link to get this item
  string url = 116079;
}


message CredentialsTotp {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Timestamp for the creation of this credential
  string created_at = 342420026;
  // Has this credential been disabled?
  bool is_disabled = 464089615;
  // Short name for the type of this kind of credential
  string type = 3575610;
  // User has verified
  bool verified = 498595918;
  // Link to get this item
  string url = 116079;
}


message CustomWelcomeEmail {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // If true, custom email content will replace the default body of welcome emails
  bool enabled = 402398511;
  // The HTML to use as custom content for welcome emails. Script elements and other potentially dangerous markup will be removed.
  string content = 475765308;
  // The text to appear in the email subject line.
  string subject = 466971317;
  // The text to appear in the header line of the email body.
  string header = 305317724;
}


message Dashboard {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Content Favorite Id
  int64 content_favorite_id = 403544586;
  // Id of content metadata
  int64 content_metadata_id = 293222822;
  // Description
  string description = 431136513;
  // Is Hidden
  bool hidden = 304371861;
  // Unique Id
  string id = 3355;
  LookModel model = 104069929;
  // Timezone in which the Dashboard will run by default.
  string query_timezone = 202424720;
  // Is Read-only
  bool readonly = 433365215;
  // Refresh Interval, as a time duration phrase like "2 hours 30 minutes". A number with no time units will be interpreted as whole seconds.
  string refresh_interval = 454206058;
  // Refresh Interval in milliseconds
  int64 refresh_interval_to_i = 403845601;
  FolderBase folder = 317241572;
  // Dashboard Title
  string title = 110371416;
  // Id of User
  int64 user_id = 147132913;
  // Background color
  string background_color = 509195076;
  // Time that the Dashboard was created.
  google.protobuf.Timestamp created_at = 342420026;
  // Enables crossfiltering in dashboards - only available in dashboards-next (beta)
  bool crossfilter_enabled = 315812131;
  // Elements
  repeated DashboardElement dashboard_elements = 291640431;
  // Filters
  repeated DashboardFilter dashboard_filters = 454602920;
  // Layouts
  repeated DashboardLayout dashboard_layouts = 430524919;
  // Whether or not a dashboard is 'soft' deleted.
  bool deleted = 387615750;
  // Time that the Dashboard was 'soft' deleted.
  google.protobuf.Timestamp deleted_at = 441264006;
  // Id of User that 'soft' deleted the dashboard.
  int64 deleter_id = 441368332;
  // Relative path of URI of LookML file to edit the dashboard (LookML dashboard only).
  string edit_uri = 400593773;
  // Number of times favorited
  int64 favorite_count = 358762965;
  // Time the dashboard was last accessed
  google.protobuf.Timestamp last_accessed_at = 391609649;
  // Time last viewed in the Looker web UI
  google.protobuf.Timestamp last_viewed_at = 273134349;
  // configuration option that governs how dashboard loading will happen.
  string load_configuration = 278159272;
  // Links this dashboard to a particular LookML dashboard such that calling a **sync** operation on that LookML dashboard will update this dashboard to match.
  string lookml_link_id = 458227247;
  // Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user's ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://looker.com/docs/r/api/control-access)
  bool show_filters_bar = 313221091;
  // Show title
  bool show_title = 281598885;
  // Content Metadata Slug
  string slug = 3533483;
  // Id of folder
  string folder_id = 527488652;
  // Color of text on text tiles
  string text_tile_text_color = 296014652;
  // Tile background color
  string tile_background_color = 472118176;
  // Tile text color
  string tile_text_color = 482028031;
  // Title color
  string title_color = 422398302;
  // Number of times viewed in the Looker web UI
  int64 view_count = 383588418;
  DashboardAppearance appearance = 449179417;
  // The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)
  string preferred_viewer = 518361060;
}


message DashboardAggregateTableLookml {
  // Dashboard Id
  string dashboard_id = 496187565;
  // Aggregate Table LookML
  string aggregate_table_lookml = 152035185;
}


message DashboardAppearance {
  // Page margin (side) width
  int64 page_side_margins = 294185644;
  // Background color for the dashboard
  string page_background_color = 53912382;
  // Title alignment on dashboard tiles
  string tile_title_alignment = 278794058;
  // Space between tiles
  int64 tile_space_between = 92833282;
  // Background color for tiles
  string tile_background_color = 472118176;
  // Tile shadow on/off
  bool tile_shadow = 410871563;
  // Key color
  string key_color = 415126687;
}


message DashboardBase {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Content Favorite Id
  int64 content_favorite_id = 403544586;
  // Id of content metadata
  int64 content_metadata_id = 293222822;
  // Description
  string description = 431136513;
  // Is Hidden
  bool hidden = 304371861;
  // Unique Id
  string id = 3355;
  LookModel model = 104069929;
  // Timezone in which the Dashboard will run by default.
  string query_timezone = 202424720;
  // Is Read-only
  bool readonly = 433365215;
  // Refresh Interval, as a time duration phrase like "2 hours 30 minutes". A number with no time units will be interpreted as whole seconds.
  string refresh_interval = 454206058;
  // Refresh Interval in milliseconds
  int64 refresh_interval_to_i = 403845601;
  FolderBase folder = 317241572;
  // Dashboard Title
  string title = 110371416;
  // Id of User
  int64 user_id = 147132913;
}


message DashboardElement {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Text tile body text
  string body_text = 313253482;
  // Text tile body text as Html
  string body_text_as_html = 381900416;
  // Id of Dashboard
  string dashboard_id = 496187565;
  // Relative path of URI of LookML file to edit the dashboard element (LookML dashboard only).
  string edit_uri = 400593773;
  // Unique Id
  string id = 3355;
  LookWithQuery look = 3327647;
  // Id Of Look
  string look_id = 349778619;
  // LookML link ID
  string lookml_link_id = 458227247;
  // ID of merge result
  string merge_result_id = 374234034;
  // Note Display
  string note_display = 33923723;
  // Note State
  string note_state = 312488702;
  // Note Text
  string note_text = 445242710;
  // Note Text as Html
  string note_text_as_html = 459711923;
  Query query = 107944136;
  // Id Of Query
  int64 query_id = 291663619;
  // Refresh Interval
  string refresh_interval = 454206058;
  // Refresh Interval as integer
  int64 refresh_interval_to_i = 403845601;
  ResultMakerWithIdVisConfigAndDynamicFields result_maker = 523671970;
  // ID of the ResultMakerLookup entry.
  int64 result_maker_id = 347633462;
  // Text tile subtitle text
  string subtitle_text = 527614074;
  // Title of dashboard element
  string title = 110371416;
  // Whether title is hidden
  bool title_hidden = 278123192;
  // Text tile title
  string title_text = 443341651;
  // Type
  string type = 3575610;
  // Count of Alerts associated to a dashboard element
  int64 alert_count = 310385610;
  // Text tile title text as Html
  string title_text_as_html = 429319302;
  // Text tile subtitle text as Html
  string subtitle_text_as_html = 486874579;
}


message DashboardFilter {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  string id = 3355;
  // Id of Dashboard
  string dashboard_id = 496187565;
  // Name of filter
  string name = 3373707;
  // Title of filter
  string title = 110371416;
  // Type of filter: one of date, number, string, or field
  string type = 3575610;
  // Default value of filter
  string default_value = 329667964;
  // Model of filter (required if type = field)
  string model = 104069929;
  // Explore of filter (required if type = field)
  string explore = 327287131;
  // Dimension of filter (required if type = field)
  string dimension = 273753254;
  // Field information
  map<string, google.protobuf.Any> field = 97427706;
  // Display order of this filter relative to other filters
  int64 row = 113114;
  // Array of listeners for faceted filters
  repeated string listens_to_filters = 326256077;
  // Whether the filter allows multiple filter values
  bool allow_multiple_values = 444540061;
  // Whether the filter requires a value to run the dashboard
  bool required = 393139297;
  // The visual configuration for this filter. Used to set up how the UI for this filter should appear.
  map<string, google.protobuf.Any> ui_config = 338401068;
}


message DashboardLayout {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  string id = 3355;
  // Id of Dashboard
  string dashboard_id = 496187565;
  // Type
  string type = 3575610;
  // Is Active
  bool active = 355737662;
  // Column Width
  int64 column_width = 104395875;
  // Width
  int64 width = 113126854;
  // Whether or not the dashboard layout is deleted.
  bool deleted = 387615750;
  // Title extracted from the dashboard this layout represents.
  string dashboard_title = 394294212;
  // Components
  repeated DashboardLayoutComponent dashboard_layout_components = 358251928;
}


message DashboardLayoutComponent {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  string id = 3355;
  // Id of Dashboard Layout
  string dashboard_layout_id = 343841433;
  // Id Of Dashboard Element
  string dashboard_element_id = 79370295;
  // Row
  int64 row = 113114;
  // Column
  int64 column = 338709290;
  // Width
  int64 width = 113126854;
  // Height
  int64 height = 305257398;
  // Whether or not the dashboard layout component is deleted
  bool deleted = 387615750;
  // Dashboard element title, extracted from the Dashboard Element.
  string element_title = 294405205;
  // Whether or not the dashboard element title is displayed.
  bool element_title_hidden = 387069323;
  // Visualization type, extracted from a query's vis_config
  string vis_type = 393864446;
}


message DashboardLookml {
  // Id of Dashboard
  string dashboard_id = 496187565;
  // lookml of UDD
  string lookml = 274273760;
}


message DataActionForm {
  DataActionUserState state = 109757585;
  // Array of form fields.
  repeated DataActionFormField fields = 318677073;
}


message DataActionFormField {
  // Name
  string name = 3373707;
  // Human-readable label
  string label = 102727412;
  // Description of field
  string description = 431136513;
  // Type of field.
  string type = 3575610;
  // Default value of the field.
  string default = 386200976;
  // The URL for an oauth link, if type is 'oauth_link'.
  string oauth_url = 406587406;
  // Whether or not a field supports interactive forms.
  bool interactive = 461026232;
  // Whether or not the field is required. This is a user-interface hint. A user interface displaying this form should not submit it without a value for this field. The action server must also perform this validation.
  bool required = 393139297;
  // If the form type is 'select', a list of options to be selected from.
  repeated DataActionFormSelectOption options = 312368728;
}


message DataActionFormSelectOption {
  // Name
  string name = 3373707;
  // Human-readable label
  string label = 102727412;
}


message DataActionRequest {
  // The JSON describing the data action. This JSON should be considered opaque and should be passed through unmodified from the query result it came from.
  map<string, string> action = 355737714;
  // User input for any form values the data action might use.
  map<string, string> form_values = 257529603;
}


message DataActionResponse {
  // ID of the webhook event that sent this data action. In some error conditions, this may be null.
  string webhook_id = 311874531;
  // Whether the data action was successful.
  bool success = 466792447;
  // When true, indicates that the client should refresh (rerun) the source query because the data may have been changed by the action.
  bool refresh_query = 358658151;
  ValidationError validation_errors = 428190968;
  // Optional message returned by the data action server describing the state of the action that took place. This can be used to implement custom failure messages. If a failure is related to a particular form field, the server should send back a validation error instead. The Looker web UI does not currently display any message if the action indicates 'success', but may do so in the future.
  string message = 477462531;
}


message DataActionUserState {
  // User state data
  string data = 3076010;
  // Time in seconds until the state needs to be refreshed
  int64 refresh_time = 46200399;
}


message Datagroup {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // UNIX timestamp at which this entry was created.
  int64 created_at = 342420026;
  // Unique ID of the datagroup
  int64 id = 3355;
  // Name of the model containing the datagroup. Unique when combined with name.
  string model_name = 526217848;
  // Name of the datagroup. Unique when combined with model_name.
  string name = 3373707;
  // UNIX timestamp before which cache entries are considered stale. Cannot be in the future.
  int64 stale_before = 349731513;
  // UNIX timestamp at which this entry trigger was last checked.
  int64 trigger_check_at = 361567047;
  // The message returned with the error of the last trigger check.
  string trigger_error = 312027087;
  // The value of the trigger when last checked.
  string trigger_value = 308230133;
  // UNIX timestamp at which this entry became triggered. Cannot be in the future.
  int64 triggered_at = 380872987;
}


message DBConnection {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Name of the connection. Also used as the unique identifier
  string name = 3373707;
  Dialect dialect = 413753737;
  // SQL Runner snippets for this connection
  repeated Snippet snippets = 513815286;
  // True if PDTs are enabled on this connection
  bool pdts_enabled = 5079435;
  // Host name/address of server
  string host = 3208616;
  // Port number on server
  int64 port = 3446913;
  // Username for server authentication
  string username = 265713450;
  // (Write-Only) Password for server authentication
  string password = 304246438;
  // Whether the connection uses OAuth for authentication.
  bool uses_oauth = 369224423;
  // (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
  string certificate = 488099941;
  // (Write-Only) Certificate keyfile type - .json or .p12
  string file_type = 329066488;
  // Database name
  string database = 447366238;
  // Time zone of database
  string db_timezone = 462146893;
  // Timezone to use in queries
  string query_timezone = 202424720;
  // Scheme name
  string schema = 453993775;
  // Maximum number of concurrent connection to use
  int64 max_connections = 426218758;
  // Maximum size of query in GBs (BigQuery only, can be a user_attribute name)
  string max_billing_gigabytes = 76432944;
  // Use SSL/TLS when connecting to server
  bool ssl = 114188;
  // Verify the SSL
  bool verify_ssl = 516339549;
  // Name of temporary database (if used)
  string tmp_db_name = 503272258;
  // Additional params to add to JDBC connection string
  string jdbc_additional_params = 377926166;
  // Connection Pool Timeout, in seconds
  int64 pool_timeout = 386536432;
  // (Read/Write) SQL Dialect name
  string dialect_name = 453584193;
  // Creation date for this connection
  string created_at = 342420026;
  // Id of user who last modified this connection configuration
  string user_id = 147132913;
  // Is this an example connection?
  bool example = 330742693;
  // (Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password
  bool user_db_credentials = 401569003;
  // Fields whose values map to user attribute names
  repeated string user_attribute_fields = 501842924;
  // Cron string specifying when maintenance such as PDT trigger checks and drops should be performed
  string maintenance_cron = 408001806;
  // Unix timestamp at start of last completed PDT trigger check process
  string last_regen_at = 106929410;
  // Unix timestamp at start of last completed PDT reap process
  string last_reap_at = 413472721;
  // Precache tables in the SQL Runner
  bool sql_runner_precache_tables = 290662041;
  // SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
  string after_connect_statements = 39151260;
  DBConnectionOverride pdt_context_override = 355387537;
  // Is this connection created and managed by Looker
  bool managed = 417630159;
  // The Id of the ssh tunnel this connection uses
  string tunnel_id = 313005097;
  // Maximum number of threads to use to build PDTs in parallel
  int64 pdt_concurrency = 395006102;
  // When disable_context_comment is true comment will not be added to SQL
  bool disable_context_comment = 390654690;
  // An External OAuth Application to use for authenticating to the database
  int64 oauth_application_id = 466979396;
}


message DBConnectionBase {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Name of the connection. Also used as the unique identifier
  string name = 3373707;
  Dialect dialect = 413753737;
  // SQL Runner snippets for this connection
  repeated Snippet snippets = 513815286;
  // True if PDTs are enabled on this connection
  bool pdts_enabled = 5079435;
}


message DBConnectionOverride {
  // Context in which to override (`pdt` is the only allowed value)
  string context = 475765463;
  // Host name/address of server
  string host = 3208616;
  // Port number on server
  string port = 3446913;
  // Username for server authentication
  string username = 265713450;
  // (Write-Only) Password for server authentication
  string password = 304246438;
  // Whether or not the password is overridden in this context
  bool has_password = 445650520;
  // (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
  string certificate = 488099941;
  // (Write-Only) Certificate keyfile type - .json or .p12
  string file_type = 329066488;
  // Database name
  string database = 447366238;
  // Scheme name
  string schema = 453993775;
  // Additional params to add to JDBC connection string
  string jdbc_additional_params = 377926166;
  // SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
  string after_connect_statements = 39151260;
}


message DBConnectionTestResult {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // JDBC connection string. (only populated in the 'connect' test)
  string connection_string = 271121883;
  // Result message of test
  string message = 477462531;
  // Name of test
  string name = 3373707;
  // Result code of test
  string status = 446240775;
}


message DelegateOauthTest {
  // Delegate Oauth Connection Name
  string name = 3373707;
  // The ID of the installation target. For Slack, this would be workspace id.
  string installation_target_id = 531552079;
  // Installation ID
  int64 installation_id = 409834416;
  // Whether or not the test was successful
  bool success = 466792447;
}

// Status of the dependencies in your project. Valid values are: "lock_optional", "lock_required", "lock_error", "install_none".
enum DependencyStatus {
  _DEPENDENCY_STATUS_UNSET = 0;
  DEPENDENCY_STATUS_LOCK_OPTIONAL = 529686454;
  DEPENDENCY_STATUS_LOCK_REQUIRED = 451155910;
  DEPENDENCY_STATUS_LOCK_ERROR = 317341619;
  DEPENDENCY_STATUS_INSTALL_NONE = 168704949;
}


message Dialect {
  // The name of the dialect
  string name = 3373707;
  // The human-readable label of the connection
  string label = 102727412;
  // Whether the dialect supports query cost estimates
  bool supports_cost_estimate = 499263120;
  // PDT index columns
  string persistent_table_indexes = 409191033;
  // PDT sortkey columns
  string persistent_table_sortkeys = 375046213;
  // PDT distkey column
  string persistent_table_distkey = 341338616;
  // Suports streaming results
  bool supports_streaming = 285904409;
  // Should SQL Runner snippets automatically be run
  bool automatically_run_sql_runner_snippets = 304805017;
  // Array of names of the tests that can be run on a connection using this dialect
  repeated string connection_tests = 303105120;
  // Is supported with the inducer (i.e. generate from sql)
  bool supports_inducer = 534911144;
  // Can multiple databases be accessed from a connection using this dialect
  bool supports_multiple_databases = 379600830;
  // Whether the dialect supports allowing Looker to build persistent derived tables
  bool supports_persistent_derived_tables = 473024582;
  // Does the database have client SSL support settable through the JDBC string explicitly?
  bool has_ssl_support = 405011613;
}


message DialectInfo {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Default number max connections
  string default_max_connections = 326961924;
  // Default port number
  string default_port = 325181984;
  // Is the supporting driver installed
  bool installed = 29046650;
  // The human-readable label of the connection
  string label = 102727412;
  // What the dialect calls the equivalent of a normal SQL table
  string label_for_database_equivalent = 317871990;
  // The name of the dialect
  string name = 3373707;
  DialectInfoOptions supported_options = 345365763;
}


message DialectInfoOptions {
  // Has additional params support
  bool additional_params = 452971224;
  // Has auth support
  bool auth = 3005864;
  // Has host support
  bool host = 3208616;
  // Has support for a service account
  bool oauth_credentials = 347809451;
  // Has project name support
  bool project_name = 469694456;
  // Has schema support
  bool schema = 453993775;
  // Has SSL support
  bool ssl = 114188;
  // Has timezone support
  bool timezone = 519056897;
  // Has tmp table support
  bool tmp_table = 463763795;
  // Username is required
  bool username_required = 358259002;
}


message DigestEmails {
  // Whether or not digest emails are enabled
  bool is_enabled = 109284052;
}


message DigestEmailSend {
  // True if content was successfully generated and delivered
  bool configuration_delivered = 415144673;
}


message DiscretePalette {
  // Unique identity string
  string id = 3355;
  // Label for palette
  string label = 102727412;
  // Type of palette
  string type = 3575610;
  // Array of colors in the palette
  repeated string colors = 338710692;
}


message EmbedParams {
  // The complete URL of the Looker UI page to display in the embed context. For example, to display the dashboard with id 34, `target_url` would look like: `https://mycompany.looker.com:9999/dashboards/34`. `target_uri` MUST contain a scheme (HTTPS), domain name, and URL path. Port must be included if it is required to reach the Looker server from browser clients. If the Looker instance is behind a load balancer or other proxy, `target_uri` must be the public-facing domain name and port required to reach the Looker instance, not the actual internal network machine name of the Looker instance.
  string target_url = 486946241;
  // Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days).
  int64 session_length = 427421739;
  // When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true.
  bool force_logout_login = 429771950;
}


message EmbedSsoParams {
  // The complete URL of the Looker UI page to display in the embed context. For example, to display the dashboard with id 34, `target_url` would look like: `https://mycompany.looker.com:9999/dashboards/34`. `target_uri` MUST contain a scheme (HTTPS), domain name, and URL path. Port must be included if it is required to reach the Looker server from browser clients. If the Looker instance is behind a load balancer or other proxy, `target_uri` must be the public-facing domain name and port required to reach the Looker instance, not the actual internal network machine name of the Looker instance.
  string target_url = 486946241;
  // Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days).
  int64 session_length = 427421739;
  // When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true.
  bool force_logout_login = 429771950;
  // A value from an external system that uniquely identifies the embed user. Since the user_ids of Looker embed users may change with every embed session, external_user_id provides a way to assign a known, stable user identifier across multiple embed sessions.
  string external_user_id = 438485145;
  // First name of the embed user. Defaults to 'Embed' if not specified
  string first_name = 160985414;
  // Last name of the embed user. Defaults to 'User' if not specified
  string last_name = 503280549;
  // Sets the user timezone for the embed user session, if the User Specific Timezones setting is enabled in the Looker admin settings. A value of `null` forces the embed user to use the Looker Application Default Timezone. You MUST omit this property from the request if the User Specific Timezones setting is disabled. Timezone values are validated against the IANA Timezone standard and can be seen in the Application Time Zone dropdown list on the Looker General Settings admin page.
  string user_timezone = 506419076;
  // List of Looker permission names to grant to the embed user. Requested permissions will be filtered to permissions allowed for embed sessions.
  repeated string permissions = 283426081;
  // List of model names that the embed user may access
  repeated string models = 534399691;
  // List of Looker group ids in which to enroll the embed user
  repeated int64 group_ids = 370665154;
  // A unique value identifying an embed-exclusive group. Multiple embed users using the same `external_group_id` value will be able to share Looker content with each other. Content and embed users associated with the `external_group_id` will not be accessible to normal Looker users or embed users not associated with this `external_group_id`.
  int64 external_group_id = 515008972;
  // A dictionary of name-value pairs associating a Looker user attribute name with a value.
  map<string, google.protobuf.Any> user_attributes = 435197330;
  // Id of the embed secret to use to sign this SSO url. If specified, the value must be an id of a valid (active) secret defined in the Looker instance. If not specified, the URL will be signed with the newest active embed secret defined in the Looker instance.
  int64 secret_id = 369773947;
}


message EmbedUrlResponse {
  // The embed URL. Any modification to this string will make the URL unusable.
  string url = 116079;
}


message Error {
  // Error details
  string message = 477462531;
  // Documentation link
  string documentation_url = 282180250;
}


message ExternalOauthApplication {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // ID of this OAuth Application
  int64 id = 3355;
  // The name of this application.  For Snowflake connections, this should be the name of the host database.
  string name = 3373707;
  // The OAuth Client ID for this application
  string client_id = 476022396;
  // (Write-Only) The OAuth Client Secret for this application
  string client_secret = 278906578;
  // The database dialect for this application.
  string dialect_name = 453584193;
  // Creation time for this application
  google.protobuf.Timestamp created_at = 342420026;
}

// The style of dimension fill that is possible for this field. Null if no dimension fill is possible. Valid values are: "enumeration", "range".
enum FillStyle {
  _FILL_STYLE_UNSET = 0;
  FILL_STYLE_ENUMERATION = 426018000;
  FILL_STYLE_RANGE = 273453555;
}


message Folder {
  // Unique Name
  string name = 3373707;
  // Id of Parent. If the parent id is null, this is a root-level entry
  string parent_id = 517581876;
  // Unique Id
  string id = 3355;
  // Id of content metadata
  int64 content_metadata_id = 293222822;
  // Time the space was created
  google.protobuf.Timestamp created_at = 342420026;
  // User Id of Creator
  int64 creator_id = 344833155;
  // Children Count
  int64 child_count = 477810154;
  // Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login
  string external_id = 288268924;
  // Folder is an embed folder
  bool is_embed = 111589252;
  // Folder is the root embed shared folder
  bool is_embed_shared_root = 289654239;
  // Folder is the root embed users folder
  bool is_embed_users_root = 533781034;
  // Folder is a user's personal folder
  bool is_personal = 291866187;
  // Folder is descendant of a user's personal folder
  bool is_personal_descendant = 429873891;
  // Folder is the root shared folder
  bool is_shared_root = 508018572;
  // Folder is the root user folder
  bool is_users_root = 499284718;
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Dashboards
  repeated DashboardBase dashboards = 469015063;
  // Looks
  repeated LookWithDashboards looks = 103157172;
}


message FolderBase {
  // Unique Name
  string name = 3373707;
  // Id of Parent. If the parent id is null, this is a root-level entry
  string parent_id = 517581876;
  // Unique Id
  string id = 3355;
  // Id of content metadata
  int64 content_metadata_id = 293222822;
  // Time the folder was created
  google.protobuf.Timestamp created_at = 342420026;
  // User Id of Creator
  int64 creator_id = 344833155;
  // Children Count
  int64 child_count = 477810154;
  // Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login
  string external_id = 288268924;
  // Folder is an embed folder
  bool is_embed = 111589252;
  // Folder is the root embed shared folder
  bool is_embed_shared_root = 289654239;
  // Folder is the root embed users folder
  bool is_embed_users_root = 533781034;
  // Folder is a user's personal folder
  bool is_personal = 291866187;
  // Folder is descendant of a user's personal folder
  bool is_personal_descendant = 429873891;
  // Folder is the root shared folder
  bool is_shared_root = 508018572;
  // Folder is the root user folder
  bool is_users_root = 499284718;
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
}

// Specifies the data format of the region information. Valid values are: "topojson", "vector_tile_region".
enum Format {
  _FORMAT_UNSET = 0;
  FORMAT_TOPOJSON = 313154326;
  FORMAT_VECTOR_TILE_REGION = 387763843;
}

// Scheme that is running on application server (for PRs, file browsing, etc.) Valid values are: "http", "https".
enum GitApplicationServerHttpScheme {
  _GIT_APPLICATION_SERVER_HTTP_SCHEME_UNSET = 0;
  GIT_APPLICATION_SERVER_HTTP_SCHEME_HTTP = 392265021;
  GIT_APPLICATION_SERVER_HTTP_SCHEME_HTTPS = 349055574;
}


message GitBranch {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // The short name on the local. Updating `name` results in `git checkout <new_name>`
  string name = 3373707;
  // The name of the remote
  string remote = 467305437;
  // The short name on the remote
  string remote_name = 517186119;
  // Name of error
  string error = 96784904;
  // Message describing an error if present
  string message = 477462531;
  // Name of the owner of a personal branch
  string owner_name = 278559819;
  // Whether or not this branch is readonly
  bool readonly = 433365215;
  // Whether or not this branch is a personal branch - readonly for all developers except the owner
  bool personal = 443164224;
  // Whether or not a local ref exists for the branch
  bool is_local = 118114326;
  // Whether or not a remote ref exists for the branch
  bool is_remote = 470571781;
  // Whether or not this is the production branch
  bool is_production = 236569874;
  // Number of commits the local branch is ahead of the remote
  int64 ahead_count = 356439415;
  // Number of commits the local branch is behind the remote
  int64 behind_count = 324674445;
  // UNIX timestamp at which this branch was last committed.
  int64 commit_at = 372790769;
  // The resolved ref of this branch. Updating `ref` results in `git reset --hard <new_ref>``.
  string ref = 112787;
  // The resolved ref of this branch remote.
  string remote_ref = 520824461;
}


message GitConnectionTest {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Human readable string describing the test
  string description = 431136513;
  // A short string, uniquely naming this test
  string id = 3355;
}


message GitConnectionTestResult {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // A short string, uniquely naming this test
  string id = 3355;
  // Additional data from the test
  string message = 477462531;
  // Either 'pass' or 'fail'
  string status = 446240775;
}


message GitStatus {
  // Git action: add, delete, etc
  string action = 355737714;
  // When true, changes to the local file conflict with the remote repository
  bool conflict = 290023959;
  // When true, the file can be reverted to an earlier state
  bool revertable = 390695265;
  // Git description of the action
  string text = 3556653;
}


message Group {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Group can be used in content access controls
  bool can_add_to_content_metadata = 97036652;
  // Currently logged in user is group member
  bool contains_current_user = 520764295;
  // External Id group if embed group
  string external_group_id = 515008972;
  // Group membership controlled outside of Looker
  bool externally_managed = 317189570;
  // Unique Id
  int64 id = 3355;
  // New users are added to this group by default
  bool include_by_default = 413560172;
  // Name of group
  string name = 3373707;
  // Number of users included in this group
  int64 user_count = 479975142;
}


message GroupHierarchy {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Group can be used in content access controls
  bool can_add_to_content_metadata = 97036652;
  // Currently logged in user is group member
  bool contains_current_user = 520764295;
  // External Id group if embed group
  string external_group_id = 515008972;
  // Group membership controlled outside of Looker
  bool externally_managed = 317189570;
  // Unique Id
  int64 id = 3355;
  // New users are added to this group by default
  bool include_by_default = 413560172;
  // Name of group
  string name = 3373707;
  // Number of users included in this group
  int64 user_count = 479975142;
  // IDs of parents of this group
  repeated int64 parent_group_ids = 533743336;
  // Role IDs assigned to group
  repeated int64 role_ids = 266265745;
}


message GroupIdForGroupInclusion {
  // Id of group
  int64 group_id = 506361563;
}


message GroupIdForGroupUserInclusion {
  // Id of user
  int64 user_id = 147132913;
}


message GroupSearch {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Group can be used in content access controls
  bool can_add_to_content_metadata = 97036652;
  // Currently logged in user is group member
  bool contains_current_user = 520764295;
  // External Id group if embed group
  string external_group_id = 515008972;
  // Group membership controlled outside of Looker
  bool externally_managed = 317189570;
  // Unique Id
  int64 id = 3355;
  // New users are added to this group by default
  bool include_by_default = 413560172;
  // Name of group
  string name = 3373707;
  // Number of users included in this group
  int64 user_count = 479975142;
  // Roles assigned to group
  repeated Role roles = 108695229;
}


message HomepageItem {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Name of user who created the content this item is based on
  string content_created_by = 310271269;
  // Content favorite id associated with the item this content is based on
  int64 content_favorite_id = 403544586;
  // Content metadata id associated with the item this content is based on
  int64 content_metadata_id = 293222822;
  // Last time the content that this item is based on was updated
  string content_updated_at = 424059459;
  // Custom description entered by the user, if present
  string custom_description = 276109801;
  // (Write-Only) base64 encoded image data
  string custom_image_data_base64 = 133974354;
  // Custom image_url entered by the user, if present
  string custom_image_url = 84288829;
  // Custom title entered by the user, if present
  string custom_title = 365526021;
  // Custom url entered by the user, if present
  string custom_url = 395339799;
  // Dashboard to base this item on
  int64 dashboard_id = 496187565;
  // The actual description for display
  string description = 431136513;
  // Number of times content has been favorited, if present
  int64 favorite_count = 358762965;
  // Associated Homepage Section
  int64 homepage_section_id = 398167145;
  // Unique Id
  int64 id = 3355;
  // The actual image_url for display
  string image_url = 438911930;
  // The container folder name of the content
  string location = 475260909;
  // Look to base this item on
  int64 look_id = 349778619;
  // LookML Dashboard to base this item on
  string lookml_dashboard_id = 339184839;
  // An arbitrary integer representing the sort order within the section
  int64 order = 106006350;
  // Number of seconds it took to fetch the section this item is in
  float section_fetch_time = 506652826;
  // The actual title for display
  string title = 110371416;
  // The actual url for display
  string url = 116079;
  // Whether the custom description should be used instead of the content description, if the item is associated with content
  bool use_custom_description = 302018950;
  // Whether the custom image should be used instead of the content image, if the item is associated with content
  bool use_custom_image = 531254114;
  // Whether the custom title should be used instead of the content title, if the item is associated with content
  bool use_custom_title = 536283105;
  // Whether the custom url should be used instead of the content url, if the item is associated with content
  bool use_custom_url = 314245462;
  // Number of times content has been viewed, if present
  int64 view_count = 383588418;
}


message HomepageSection {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Time at which this section was created.
  google.protobuf.Timestamp created_at = 342420026;
  // Time at which this section was deleted.
  google.protobuf.Timestamp deleted_at = 441264006;
  // A URL pointing to a page showing further information about the content in the section.
  string detail_url = 517980607;
  // Id reference to parent homepage
  int64 homepage_id = 360012995;
  // Items in the homepage section
  repeated HomepageItem homepage_items = 459801588;
  // Unique Id
  int64 id = 3355;
  // Is this a header section (has no items)
  bool is_header = 378615903;
  // ids of the homepage items in the order they should be displayed
  repeated int64 item_order = 488938807;
  // Name of row
  string title = 110371416;
  // Time at which this section was last updated.
  google.protobuf.Timestamp updated_at = 295464393;
  // Description of the content found in this section.
  string description = 431136513;
}


message ImportedProject {
  // Dependency name
  string name = 3373707;
  // Url for a remote dependency
  string url = 116079;
  // Ref for a remote dependency
  string ref = 112787;
  // Flag signifying if a dependency is remote or local
  bool is_remote = 470571781;
}


message Integration {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // ID of the integration.
  string id = 3355;
  // ID of the integration hub.
  int64 integration_hub_id = 485110416;
  // Label for the integration.
  string label = 102727412;
  // Description of the integration.
  string description = 431136513;
  // Whether the integration is available to users.
  bool enabled = 402398511;
  // Array of params for the integration.
  repeated IntegrationParam params = 497713981;
  // A list of data formats the integration supports. If unspecified, the default is all data formats. Valid values are: "txt", "csv", "inline_json", "json", "json_label", "json_detail", "json_detail_lite_stream", "xlsx", "html", "wysiwyg_pdf", "assembled_pdf", "wysiwyg_png", "csv_zip".
  repeated SupportedFormats supported_formats = 488373554;
  // A list of action types the integration supports. Valid values are: "cell", "query", "dashboard".
  repeated SupportedActionTypes supported_action_types = 526489160;
  // A list of formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: "formatted", "unformatted".
  repeated SupportedFormattings supported_formattings = 516035485;
  // A list of visualization formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: "apply", "noapply".
  repeated SupportedVisualizationFormattings supported_visualization_formattings = 377097887;
  // A list of all the download mechanisms the integration supports. The order of values is not significant: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this defaults to all download setting values. Valid values are: "push", "url".
  repeated SupportedDownloadSettings supported_download_settings = 452598570;
  // URL to an icon for the integration.
  string icon_url = 368794027;
  // Whether the integration uses oauth.
  bool uses_oauth = 369224423;
  // A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required.
  repeated IntegrationRequiredField required_fields = 395601836;
  // Whether the integration uses delegate oauth, which allows federation between an integration installation scope specific entity (like org, group, and team, etc.) and Looker.
  bool delegate_oauth = 412079575;
  // Whether the integration is available to users.
  repeated int64 installed_delegate_oauth_targets = 448297026;
}


message IntegrationHub {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // ID of the hub.
  int64 id = 3355;
  // URL of the hub.
  string url = 116079;
  // Label of the hub.
  string label = 102727412;
  // Whether this hub is a first-party integration hub operated by Looker.
  bool official = 382644874;
  // An error message, present if the integration hub metadata could not be fetched. If this is present, the integration hub is unusable.
  string fetch_error_message = 324681221;
  // (Write-Only) An authorization key that will be sent to the integration hub on every request.
  string authorization_token = 369213356;
  // Whether the authorization_token is set for the hub.
  bool has_authorization_token = 312331662;
  // Whether the legal agreement message has been signed by the user. This only matters if legal_agreement_required is true.
  bool legal_agreement_signed = 93078455;
  // Whether the legal terms for the integration hub are required before use.
  bool legal_agreement_required = 362720929;
  // The legal agreement text for this integration hub.
  string legal_agreement_text = 529546684;
}


message IntegrationParam {
  // Name of the parameter.
  string name = 3373707;
  // Label of the parameter.
  string label = 102727412;
  // Short description of the parameter.
  string description = 431136513;
  // Whether the parameter is required to be set to use the destination. If unspecified, this defaults to false.
  bool required = 393139297;
  // Whether the parameter has a value set.
  bool has_value = 72657804;
  // The current value of the parameter. Always null if the value is sensitive. When writing, null values will be ignored. Set the value to an empty string to clear it.
  string value = 111972721;
  // When present, the param's value comes from this user attribute instead of the 'value' parameter. Set to null to use the 'value'.
  string user_attribute_name = 494434128;
  // Whether the parameter contains sensitive data like API credentials. If unspecified, this defaults to true.
  bool sensitive = 465391254;
  // When true, this parameter must be assigned to a user attribute in the admin panel (instead of a constant value), and that value may be updated by the user as part of the integration flow.
  bool per_user = 424877485;
  // When present, the param represents the oauth url the user will be taken to.
  string delegate_oauth_url = 100182643;
}


message IntegrationRequiredField {
  // Matches a field that has this tag.
  string tag = 114586;
  // If present, supercedes 'tag' and matches a field that has any of the provided tags.
  repeated string any_tag = 421279388;
  // If present, supercedes 'tag' and matches a field that has all of the provided tags.
  repeated string all_tags = 449565693;
}


message IntegrationTestResult {
  // Whether or not the test was successful
  bool success = 466792447;
  // A message representing the results of the test.
  string message = 477462531;
  // An array of connection test result for delegate oauth actions.
  repeated DelegateOauthTest delegate_oauth_result = 363584319;
}


message InternalHelpResources {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // If true and internal help resources content is not blank then the link for internal help resources will be shown in the help menu and the content displayed within Looker
  bool enabled = 402398511;
}


message InternalHelpResourcesContent {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Text to display in the help menu item which will display the internal help resources
  string organization_name = 425834740;
  // Content to be displayed in the internal help resources page/modal
  string markdown_content = 165250775;
}


message LDAPConfig {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  bool alternate_email_login_allowed = 332315627;
  // (Write-Only)  Password for the LDAP account used to access the LDAP server
  string auth_password = 415503534;
  // Users will not be allowed to login at all unless a role for them is found in LDAP if set to true
  bool auth_requires_role = 488630792;
  // Distinguished name of LDAP account used to access the LDAP server
  string auth_username = 474550684;
  // LDAP server hostname
  string connection_host = 365749556;
  // LDAP host port
  string connection_port = 365868705;
  // Use Transport Layer Security
  bool connection_tls = 317633542;
  // Do not verify peer when using TLS
  bool connection_tls_no_verify = 432426857;
  // (Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP
  repeated int64 default_new_user_group_ids = 91703103;
  // (Read-only) Groups that will be applied to new users the first time they login via LDAP
  repeated Group default_new_user_groups = 381653162;
  // (Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP
  repeated int64 default_new_user_role_ids = 429566625;
  // (Read-only) Roles that will be applied to new users the first time they login via LDAP
  repeated Role default_new_user_roles = 435450942;
  // Enable/Disable LDAP authentication for the server
  bool enabled = 402398511;
  // Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it.
  bool force_no_page = 344726209;
  // (Read-only) Array of mappings between LDAP Groups and Looker Roles
  repeated LDAPGroupRead groups = 309365131;
  // Base dn for finding groups in LDAP searches
  string groups_base_dn = 456083027;
  // Identifier for a strategy for how Looker will search for groups in the LDAP server
  string groups_finder_type = 336365796;
  // LDAP Group attribute that signifies the members of the groups. Most commonly 'member'
  string groups_member_attribute = 281577616;
  // Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches
  string groups_objectclasses = 270841289;
  // LDAP Group attribute that signifies the user in a group. Most commonly 'dn'
  string groups_user_attribute = 467193795;
  // (Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids
  repeated LDAPGroupWrite groups_with_role_ids = 475300071;
  // (Read-only) Has the password been set for the LDAP account used to access the LDAP server
  bool has_auth_password = 349728411;
  // Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user.
  bool merge_new_users_by_email = 391067523;
  // When this config was last modified
  string modified_at = 386047141;
  // User id of user who last modified this config
  string modified_by = 386047132;
  // Set user roles in Looker based on groups from LDAP
  bool set_roles_from_groups = 441288982;
  // (Write-Only)  Test LDAP user password. For ldap tests only.
  string test_ldap_password = 71095482;
  // (Write-Only)  Test LDAP user login id. For ldap tests only.
  string test_ldap_user = 159290890;
  // Name of user record attributes used to indicate email address field
  string user_attribute_map_email = 384506455;
  // Name of user record attributes used to indicate first name
  string user_attribute_map_first_name = 401269830;
  // Name of user record attributes used to indicate last name
  string user_attribute_map_last_name = 506361433;
  // Name of user record attributes used to indicate unique record id
  string user_attribute_map_ldap_id = 271507598;
  // (Read-only) Array of mappings between LDAP User Attributes and Looker User Attributes
  repeated LDAPUserAttributeRead user_attributes = 435197330;
  // (Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids
  repeated LDAPUserAttributeWrite user_attributes_with_ids = 514666905;
  // Distinguished name of LDAP node used as the base for user searches
  string user_bind_base_dn = 468855466;
  // (Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses.
  string user_custom_filter = 359623314;
  // Name(s) of user record attributes used for matching user login id (comma separated list)
  string user_id_attribute_names = 495858029;
  // (Optional) Name of user record objectclass used for finding user during login id
  string user_objectclass = 365251017;
  // Allow LDAP auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
  bool allow_normal_group_membership = 480346046;
  // LDAP auth'd users will be able to inherit roles from non-reflected Looker groups.
  bool allow_roles_from_normal_groups = 302729383;
  // Allows roles to be directly assigned to LDAP auth'd users.
  bool allow_direct_roles = 315512839;
  // Link to get this item
  string url = 116079;
}


message LDAPConfigTestIssue {
  // Severity of the issue. Error or Warning
  string severity = 369575103;
  // Message describing the issue
  string message = 477462531;
}


message LDAPConfigTestResult {
  // Additional details for error cases
  string details = 389430416;
  // Array of issues/considerations about the result
  repeated LDAPConfigTestIssue issues = 294789969;
  // Short human readable test about the result
  string message = 477462531;
  // Test status code: always 'success' or 'error'
  string status = 446240775;
  // A more detailed trace of incremental results during auth tests
  string trace = 110620997;
  LDAPUser user = 3599307;
  // Link to ldap config
  string url = 116079;
}


message LDAPGroupRead {
  // Unique Id
  int64 id = 3355;
  // Unique Id of group in Looker
  int64 looker_group_id = 304537367;
  // Name of group in Looker
  string looker_group_name = 301354167;
  // Name of group in LDAP
  string name = 3373707;
  // Looker Roles
  repeated Role roles = 108695229;
  // Link to ldap config
  string url = 116079;
}


message LDAPGroupWrite {
  // Unique Id
  int64 id = 3355;
  // Unique Id of group in Looker
  int64 looker_group_id = 304537367;
  // Name of group in Looker
  string looker_group_name = 301354167;
  // Name of group in LDAP
  string name = 3373707;
  // Looker Role Ids
  repeated int64 role_ids = 266265745;
  // Link to ldap config
  string url = 116079;
}


message LDAPUser {
  // Array of user's email addresses and aliases for use in migration
  repeated string all_emails = 283783469;
  // Dictionary of user's attributes (name/value)
  map<string, string> attributes = 405645655;
  // Primary email address
  string email = 96619420;
  // First name
  string first_name = 160985414;
  // Array of user's groups (group names only)
  repeated string groups = 309365131;
  // Last Name
  string last_name = 503280549;
  // LDAP's distinguished name for the user record
  string ldap_dn = 22077474;
  // LDAP's Unique ID for the user
  string ldap_id = 22077619;
  // Array of user's roles (role names only)
  repeated string roles = 108695229;
  // Link to ldap config
  string url = 116079;
}


message LDAPUserAttributeRead {
  // Name of User Attribute in LDAP
  string name = 3373707;
  // Required to be in LDAP assertion for login to be allowed to succeed
  bool required = 393139297;
  // Looker User Attributes
  repeated UserAttribute user_attributes = 435197330;
  // Link to ldap config
  string url = 116079;
}


message LDAPUserAttributeWrite {
  // Name of User Attribute in LDAP
  string name = 3373707;
  // Required to be in LDAP assertion for login to be allowed to succeed
  bool required = 393139297;
  // Looker User Attribute Ids
  repeated int64 user_attribute_ids = 468967351;
  // Link to ldap config
  string url = 116079;
}


message LegacyFeature {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  string id = 3355;
  // Name
  string name = 3373707;
  // Description
  string description = 431136513;
  // Whether this feature has been enabled by a user
  bool enabled_locally = 472119345;
  // Whether this feature is currently enabled
  bool enabled = 402398511;
  // Looker version where this feature became a legacy feature
  string disallowed_as_of_version = 388206984;
  // Looker version where this feature will be automatically disabled
  string disable_on_upgrade_to_version = 357209432;
  // Future Looker version where this feature will be removed
  string end_of_life_version = 269176985;
  // URL for documentation about this feature
  string documentation_url = 282180250;
  // Approximate date that this feature will be automatically disabled.
  google.protobuf.Timestamp approximate_disable_date = 435078408;
  // Approximate date that this feature will be removed.
  google.protobuf.Timestamp approximate_end_of_life_date = 413188266;
  // Whether this legacy feature may have been automatically disabled when upgrading to the current version.
  bool has_disabled_on_upgrade = 465129201;
}

// Name of the command Valid values are: "dashboard", "lookml_dashboard".
enum LinkedContentType {
  _LINKED_CONTENT_TYPE_UNSET = 0;
  LINKED_CONTENT_TYPE_DASHBOARD = 278150833;
  LINKED_CONTENT_TYPE_LOOKML_DASHBOARD = 441682131;
}


message Locale {
  // Code for Locale
  string code = 3059181;
  // Name of Locale in its own language
  string native_name = 437737068;
  // Name of Locale in English
  string english_name = 277569798;
}


message LocalizationSettings {
  // Default locale for localization
  string default_locale = 487618182;
  // Localization level - strict or permissive
  string localization_level = 337718167;
}


message Look {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Id of content metadata
  int64 content_metadata_id = 293222822;
  // Unique Id
  int64 id = 3355;
  // Look Title
  string title = 110371416;
  // User Id
  int64 user_id = 147132913;
  // Content Favorite Id
  int64 content_favorite_id = 403544586;
  // Time that the Look was created.
  google.protobuf.Timestamp created_at = 342420026;
  // Whether or not a look is 'soft' deleted.
  bool deleted = 387615750;
  // Time that the Look was deleted.
  google.protobuf.Timestamp deleted_at = 441264006;
  // Id of User that deleted the look.
  int64 deleter_id = 441368332;
  // Description
  string description = 431136513;
  // Embed Url
  string embed_url = 352154685;
  // Excel File Url
  string excel_file_url = 493227475;
  // Number of times favorited
  int64 favorite_count = 358762965;
  // Google Spreadsheet Formula
  string google_spreadsheet_formula = 434476859;
  // Image Embed Url
  string image_embed_url = 469465270;
  // auto-run query when Look viewed
  bool is_run_on_load = 494569088;
  // Time that the Look was last accessed by any user
  google.protobuf.Timestamp last_accessed_at = 391609649;
  // Id of User that last updated the look.
  int64 last_updater_id = 328160870;
  // Time last viewed in the Looker web UI
  google.protobuf.Timestamp last_viewed_at = 273134349;
  LookModel model = 104069929;
  // Is Public
  bool public = 488711883;
  // Public Slug
  string public_slug = 270024015;
  // Public Url
  string public_url = 476205734;
  // Query Id
  int64 query_id = 291663619;
  // Short Url
  string short_url = 506923317;
  FolderBase folder = 317241572;
  // Folder Id
  string folder_id = 527488652;
  // Time that the Look was updated.
  google.protobuf.Timestamp updated_at = 295464393;
  // Number of times viewed in the Looker web UI
  int64 view_count = 383588418;
}


message LookBasic {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Id of content metadata
  int64 content_metadata_id = 293222822;
  // Unique Id
  int64 id = 3355;
  // Look Title
  string title = 110371416;
  // User Id
  int64 user_id = 147132913;
}


message LookmlModel {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Array of names of connections this model is allowed to use
  repeated string allowed_db_connection_names = 482839655;
  // Array of explores (if has_content)
  repeated LookmlModelNavExplore explores = 482224624;
  // Does this model declaration have have lookml content?
  bool has_content = 456150261;
  // UI-friendly name for this model
  string label = 102727412;
  // Name of the model. Also used as the unique identifier
  string name = 3373707;
  // Name of project containing the model
  string project_name = 469694456;
  // Is this model allowed to use all current and future connections
  bool unlimited_db_connections = 419500594;
}


message LookmlModelExplore {
  // Fully qualified explore name (model name plus explore name)
  string id = 3355;
  // Explore name
  string name = 3373707;
  // Description
  string description = 431136513;
  // Label
  string label = 102727412;
  // Explore title
  string title = 110371416;
  // Scopes
  repeated string scopes = 453884336;
  // Can Total
  bool can_total = 376021525;
  // Can Develop LookML
  bool can_develop = 510023049;
  // Can See LookML
  bool can_see_lookml = 272702243;
  // A URL linking to the definition of this explore in the LookML IDE.
  string lookml_link = 315140153;
  // Can Save
  bool can_save = 126460788;
  // Can Explain
  bool can_explain = 406068104;
  // Can pivot in the DB
  bool can_pivot_in_db = 81932716;
  // Can use subtotals
  bool can_subtotal = 427786093;
  // Has timezone support
  bool has_timezone_support = 438214435;
  // Cost estimates supported
  bool supports_cost_estimate = 499263120;
  // Connection name
  string connection_name = 365832102;
  // How nulls are sorted, possible values are "low", "high", "first" and "last"
  string null_sort_treatment = 345326183;
  // List of model source files
  repeated string files = 97434231;
  // Primary source_file file
  string source_file = 85057760;
  // Name of project
  string project_name = 469694456;
  // Name of model
  string model_name = 526217848;
  // Name of view
  string view_name = 393300486;
  // Is hidden
  bool hidden = 304371861;
  // A sql_table_name expression that defines what sql table the view/explore maps onto. Example: "prod_orders2 AS orders" in a view named orders.
  string sql_table_name = 459754643;
  // (DEPRECATED) Array of access filter field names
  repeated string access_filter_fields = 472279153;
  // Access filters
  repeated LookmlModelExploreAccessFilter access_filters = 494874128;
  // Aliases
  repeated LookmlModelExploreAlias aliases = 457267329;
  // Always filter
  repeated LookmlModelExploreAlwaysFilter always_filter = 506242538;
  // Conditionally filter
  repeated LookmlModelExploreConditionallyFilter conditionally_filter = 467462830;
  // Array of index fields
  repeated string index_fields = 349446854;
  // Sets
  repeated LookmlModelExploreSet sets = 3526737;
  // An array of arbitrary string tags provided in the model for this explore.
  repeated string tags = 3552281;
  // Errors
  repeated LookmlModelExploreError errors = 323658789;
  LookmlModelExploreFieldset fields = 318677073;
  // Views joined into this explore
  repeated LookmlModelExploreJoins joins = 101304457;
  // Label used to group explores in the navigation menus
  string group_label = 273739597;
  // An array of items describing which custom measure types are supported for creating a custom measure 'based_on' each possible dimension type.
  repeated LookmlModelExploreSupportedMeasureType supported_measure_types = 277815363;
}


message LookmlModelExploreAccessFilter {
  // Field to be filtered
  string field = 97427706;
  // User attribute name
  string user_attribute = 395043786;
}


message LookmlModelExploreAlias {
  // Name
  string name = 3373707;
  // Value
  string value = 111972721;
}


message LookmlModelExploreAlwaysFilter {
  // Name
  string name = 3373707;
  // Value
  string value = 111972721;
}


message LookmlModelExploreConditionallyFilter {
  // Name
  string name = 3373707;
  // Value
  string value = 111972721;
}


message LookmlModelExploreError {
  // Error Message
  string message = 477462531;
  // Details
  google.protobuf.Any details = 389430416;
  // Error source location
  string error_pos = 329871261;
  // Is this a field error
  bool field_error = 344381761;
}


message LookmlModelExploreField {
  // The appropriate horizontal text alignment the values of this field should be displayed in. Valid values are: "left", "right".
  Align align = 92903173;
  // Whether it's possible to filter on this field.
  bool can_filter = 408701006;
  // Field category Valid values are: "parameter", "filter", "measure", "dimension".
  Category category = 50511102;
  // The default value that this field uses when filtering. Null if there is no default value.
  string default_filter_value = 251606232;
  // Description
  string description = 431136513;
  // An array enumerating all the possible values that this field can contain. When null, there is no limit to the set of possible values this field can contain.
  repeated LookmlModelExploreFieldEnumeration enumerations = 8797964;
  // An error message indicating a problem with the definition of this field. If there are no errors, this will be null.
  string error = 96784904;
  // A label creating a grouping of fields. All fields with this label should be presented together when displayed in a UI.
  string field_group_label = 348076708;
  // When presented in a field group via field_group_label, a shorter name of the field to be displayed in that context.
  string field_group_variant = 493011696;
  // The style of dimension fill that is possible for this field. Null if no dimension fill is possible. Valid values are: "enumeration", "range".
  FillStyle fill_style = 233043979;
  // An offset (in months) from the calendar start month to the fiscal start month defined in the LookML model this field belongs to.
  int64 fiscal_month_offset = 496032004;
  // Whether this field has a set of allowed_values specified in LookML.
  bool has_allowed_values = 372703215;
  // Whether this field should be hidden from the user interface.
  bool hidden = 304371861;
  // Whether this field is a filter.
  bool is_filter = 405226473;
  // Whether this field represents a fiscal time value.
  bool is_fiscal = 405130438;
  // Whether this field is of a type that represents a numeric value.
  bool is_numeric = 500103944;
  // Whether this field is of a type that represents a time value.
  bool is_timeframe = 317011333;
  // Whether this field can be time filtered.
  bool can_time_filter = 467147362;
  LookmlModelExploreFieldTimeInterval time_interval = 343756027;
  // Fully-qualified human-readable label of the field.
  string label = 102727412;
  // The name of the parameter that will provide a parameterized label for this field, if available in the current context.
  string label_from_parameter = 295803007;
  // The human-readable label of the field, without the view label.
  string label_short = 404447089;
  // A URL linking to the definition of this field in the LookML IDE.
  string lookml_link = 315140153;
  LookmlModelExploreFieldMapLayer map_layer = 312138283;
  // Whether this field is a measure.
  bool measure = 469160623;
  // Fully-qualified name of the field.
  string name = 3373707;
  // If yes, the field will not be localized with the user attribute number_format. Defaults to no
  bool strict_value_format = 421377265;
  // Whether this field is a parameter.
  bool parameter = 488615146;
  // Whether this field can be removed from a query.
  bool permanent = 334244439;
  // Whether or not the field represents a primary key.
  bool primary_key = 433617583;
  // The name of the project this field is defined in.
  string project_name = 469694456;
  // When true, it's not possible to re-sort this field's values without re-running the SQL query, due to database logic that affects the sort.
  bool requires_refresh_on_sort = 274825730;
  // The LookML scope this field belongs to. The scope is typically the field's view.
  string scope = 109264468;
  // Whether this field can be sorted.
  bool sortable = 415556350;
  // The path portion of source_file_path.
  string source_file = 85057760;
  // The fully-qualified path of the project file this field is defined in.
  string source_file_path = 435439374;
  // SQL expression as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.
  string sql = 114126;
  // An array of conditions and values that make up a SQL Case expression, as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.
  repeated LookmlModelExploreFieldSqlCase sql_case = 524422271;
  // Array of filter conditions defined for the measure in LookML.
  repeated LookmlModelExploreFieldMeasureFilters filters = 427273730;
  // The name of the dimension to base suggest queries from.
  string suggest_dimension = 473128650;
  // The name of the explore to base suggest queries from.
  string suggest_explore = 470265034;
  // Whether or not suggestions are possible for this field.
  bool suggestable = 381392712;
  // If available, a list of suggestions for this field. For most fields, a suggest query is a more appropriate way to get an up-to-date list of suggestions. Or use enumerations to list all the possible values.
  repeated string suggestions = 381329988;
  // An array of arbitrary string tags provided in the model for this field.
  repeated string tags = 3552281;
  // The LookML type of the field.
  string type = 3575610;
  // An array of user attribute types that are allowed to be used in filters on this field. Valid values are: "advanced_filter_string", "advanced_filter_number", "advanced_filter_datetime", "string", "number", "datetime", "relative_url", "yesno", "zipcode".
  repeated UserAttributeFilterTypes user_attribute_filter_types = 357567957;
  // If specified, the LookML value format string for formatting values of this field.
  string value_format = 443748997;
  // The name of the view this field belongs to.
  string view = 3619493;
  // The human-readable label of the view the field belongs to.
  string view_label = 381619401;
  // Whether this field was specified in "dynamic_fields" and is not part of the model.
  bool dynamic = 531191823;
  // The name of the starting day of the week. Valid values are: "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday".
  WeekStartDay week_start_day = 516641811;
  // The number of times this field has been used in queries
  int64 times_used = 422530629;
}


message LookmlModelExploreFieldEnumeration {
  // Label
  string label = 102727412;
  // Value
  google.protobuf.Any value = 111972721;
}


message LookmlModelExploreFieldMapLayer {
  // URL to the map layer resource.
  string url = 116079;
  // Name of the map layer, as defined in LookML.
  string name = 3373707;
  // Specifies the name of the TopoJSON object that the map layer references. If not specified, use the first object..
  string feature_key = 376644202;
  // Selects which property from the TopoJSON data to plot against. TopoJSON supports arbitrary metadata for each region. When null, the first matching property should be used.
  string property_key = 432087941;
  // Which property from the TopoJSON data to use to label the region. When null, property_key should be used.
  string property_label_key = 284376789;
  // The preferred geographic projection of the map layer when displayed in a visualization that supports multiple geographic projections.
  string projection = 492490092;
  // Specifies the data format of the region information. Valid values are: "topojson", "vector_tile_region".
  Format format = 317194754;
  // Specifies the URL to a JSON file that defines the geographic extents of each region available in the map layer. This data is used to automatically center the map on the available data for visualization purposes. The JSON file must be a JSON object where the keys are the mapping value of the feature (as specified by property_key) and the values are arrays of four numbers representing the west longitude, south latitude, east longitude, and north latitude extents of the region. The object must include a key for every possible value of property_key.
  string extents_json_url = 393240412;
  // The minimum zoom level that the map layer may be displayed at, for visualizations that support zooming.
  int64 max_zoom_level = 355661940;
  // The maximum zoom level that the map layer may be displayed at, for visualizations that support zooming.
  int64 min_zoom_level = 519890953;
}


message LookmlModelExploreFieldMeasureFilters {
  // Filter field name
  string field = 97427706;
  // Filter condition value
  string condition = 430655858;
}


message LookmlModelExploreFieldset {
  // Array of dimensions
  repeated LookmlModelExploreField dimensions = 414334925;
  // Array of measures
  repeated LookmlModelExploreField measures = 488406165;
  // Array of filters
  repeated LookmlModelExploreField filters = 427273730;
  // Array of parameters
  repeated LookmlModelExploreField parameters = 458736106;
}


message LookmlModelExploreFieldSqlCase {
  // SQL Case label value
  string value = 111972721;
  // SQL Case condition expression
  string condition = 430655858;
}


message LookmlModelExploreFieldTimeInterval {
  // The type of time interval this field represents a grouping of. Valid values are: "day", "hour", "minute", "second", "millisecond", "microsecond", "week", "month", "quarter", "year".
  Name name = 3373707;
  // The number of intervals this field represents a grouping of.
  int64 count = 94851343;
}


message LookmlModelExploreJoins {
  // Name of this join (and name of the view to join)
  string name = 3373707;
  // Fields referenced by the join
  repeated string dependent_fields = 473159934;
  // Fields of the joined view to pull into this explore
  repeated string fields = 318677073;
  // Name of the dimension in this explore whose value is in the primary key of the joined view
  string foreign_key = 361959139;
  // Name of view to join
  string from = 3151786;
  // Specifies whether all queries must use an outer join
  bool outer_only = 436007740;
  // many_to_one, one_to_one, one_to_many, many_to_many
  string relationship = 261851592;
  // Names of joins that must always be included in SQL queries
  repeated string required_joins = 373655301;
  // SQL expression that produces a foreign key
  string sql_foreign_key = 439274945;
  // SQL ON expression describing the join condition
  string sql_on = 447472392;
  // SQL table name to join
  string sql_table_name = 459754643;
  // The join type: left_outer, full_outer, inner, or cross
  string type = 3575610;
  // Label to display in UI selectors
  string view_label = 381619401;
}


message LookmlModelExploreSet {
  // Name
  string name = 3373707;
  // Value set
  repeated string value = 111972721;
}


message LookmlModelExploreSupportedMeasureType {
  string dimension_type = 236959117;
  repeated string measure_types = 317184150;
}


message LookmlModelNavExplore {
  // Name of the explore
  string name = 3373707;
  // Description for the explore
  string description = 431136513;
  // Label for the explore
  string label = 102727412;
  // Is this explore marked as hidden
  bool hidden = 304371861;
  // Label used to group explores in the navigation menus
  string group_label = 273739597;
}


message LookmlTest {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Name of model containing this test.
  string model_name = 526217848;
  // Name of this test.
  string name = 3373707;
  // Name of the explore this test runs a query against
  string explore_name = 485574866;
  // The url parameters that can be used to reproduce this test's query on an explore.
  string query_url_params = 274768500;
  // Name of the LookML file containing this test.
  string file = 3143036;
  // Line number of this test in LookML.
  int64 line = 3321844;
}


message LookmlTestResult {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Name of model containing this test.
  string model_name = 526217848;
  // Name of this test.
  string test_name = 295076218;
  // Number of assertions in this test
  int64 assertions_count = 363767167;
  // Number of assertions passed in this test
  int64 assertions_failed = 503064762;
  // A list of any errors encountered by the test.
  repeated ProjectError errors = 323658789;
  // A list of any warnings encountered by the test.
  repeated ProjectError warnings = 498091095;
  // True if this test passsed without errors.
  bool success = 466792447;
}


message LookModel {
  // Model Id
  string id = 3355;
  // Model Label
  string label = 102727412;
}


message LookWithDashboards {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Id of content metadata
  int64 content_metadata_id = 293222822;
  // Unique Id
  int64 id = 3355;
  // Look Title
  string title = 110371416;
  // User Id
  int64 user_id = 147132913;
  // Content Favorite Id
  int64 content_favorite_id = 403544586;
  // Time that the Look was created.
  google.protobuf.Timestamp created_at = 342420026;
  // Whether or not a look is 'soft' deleted.
  bool deleted = 387615750;
  // Time that the Look was deleted.
  google.protobuf.Timestamp deleted_at = 441264006;
  // Id of User that deleted the look.
  int64 deleter_id = 441368332;
  // Description
  string description = 431136513;
  // Embed Url
  string embed_url = 352154685;
  // Excel File Url
  string excel_file_url = 493227475;
  // Number of times favorited
  int64 favorite_count = 358762965;
  // Google Spreadsheet Formula
  string google_spreadsheet_formula = 434476859;
  // Image Embed Url
  string image_embed_url = 469465270;
  // auto-run query when Look viewed
  bool is_run_on_load = 494569088;
  // Time that the Look was last accessed by any user
  google.protobuf.Timestamp last_accessed_at = 391609649;
  // Id of User that last updated the look.
  int64 last_updater_id = 328160870;
  // Time last viewed in the Looker web UI
  google.protobuf.Timestamp last_viewed_at = 273134349;
  LookModel model = 104069929;
  // Is Public
  bool public = 488711883;
  // Public Slug
  string public_slug = 270024015;
  // Public Url
  string public_url = 476205734;
  // Query Id
  int64 query_id = 291663619;
  // Short Url
  string short_url = 506923317;
  FolderBase folder = 317241572;
  // Folder Id
  string folder_id = 527488652;
  // Time that the Look was updated.
  google.protobuf.Timestamp updated_at = 295464393;
  // Number of times viewed in the Looker web UI
  int64 view_count = 383588418;
  // Dashboards
  repeated DashboardBase dashboards = 469015063;
}


message LookWithQuery {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Id of content metadata
  int64 content_metadata_id = 293222822;
  // Unique Id
  int64 id = 3355;
  // Look Title
  string title = 110371416;
  // User Id
  int64 user_id = 147132913;
  // Content Favorite Id
  int64 content_favorite_id = 403544586;
  // Time that the Look was created.
  google.protobuf.Timestamp created_at = 342420026;
  // Whether or not a look is 'soft' deleted.
  bool deleted = 387615750;
  // Time that the Look was deleted.
  google.protobuf.Timestamp deleted_at = 441264006;
  // Id of User that deleted the look.
  int64 deleter_id = 441368332;
  // Description
  string description = 431136513;
  // Embed Url
  string embed_url = 352154685;
  // Excel File Url
  string excel_file_url = 493227475;
  // Number of times favorited
  int64 favorite_count = 358762965;
  // Google Spreadsheet Formula
  string google_spreadsheet_formula = 434476859;
  // Image Embed Url
  string image_embed_url = 469465270;
  // auto-run query when Look viewed
  bool is_run_on_load = 494569088;
  // Time that the Look was last accessed by any user
  google.protobuf.Timestamp last_accessed_at = 391609649;
  // Id of User that last updated the look.
  int64 last_updater_id = 328160870;
  // Time last viewed in the Looker web UI
  google.protobuf.Timestamp last_viewed_at = 273134349;
  LookModel model = 104069929;
  // Is Public
  bool public = 488711883;
  // Public Slug
  string public_slug = 270024015;
  // Public Url
  string public_url = 476205734;
  // Query Id
  int64 query_id = 291663619;
  // Short Url
  string short_url = 506923317;
  FolderBase folder = 317241572;
  // Folder Id
  string folder_id = 527488652;
  // Time that the Look was updated.
  google.protobuf.Timestamp updated_at = 295464393;
  // Number of times viewed in the Looker web UI
  int64 view_count = 383588418;
  Query query = 107944136;
  // Url
  string url = 116079;
}


message Manifest {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Manifest project name
  string name = 3373707;
  // Imports for a project
  repeated ImportedProject imports = 481509467;
  LocalizationSettings localization_settings = 362233467;
}


message MergeFields {
  // Field name to map onto in the merged results
  string field_name = 288329560;
  // Field name from the source query
  string source_field_name = 375791445;
}


message MergeQuery {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Column Limit
  string column_limit = 114546286;
  // Dynamic Fields
  string dynamic_fields = 74327737;
  // Unique Id
  string id = 3355;
  // Pivots
  repeated string pivots = 493953479;
  // Unique to get results
  int64 result_maker_id = 347633462;
  // Sorts
  repeated string sorts = 109624981;
  // Source Queries defining the results to be merged.
  repeated MergeQuerySourceQuery source_queries = 396289744;
  // Total
  bool total = 110549828;
  // Visualization Config
  map<string, string> vis_config = 422614288;
}


message MergeQuerySourceQuery {
  // An array defining which fields of the source query are mapped onto fields of the merge query
  repeated MergeFields merge_fields = 483158960;
  // Display name
  string name = 3373707;
  // Id of the query to merge
  int64 query_id = 291663619;
}


message ModelFieldSuggestions {
  // List of suggestions
  repeated string suggestions = 381329988;
  // Error message
  string error = 96784904;
  // True if result came from the cache
  bool from_cache = 452407124;
  // True if this was a hit limit
  bool hit_limit = 502186499;
  // True if calcite was used
  bool used_calcite_materialization = 412821088;
}


message ModelSet {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  bool all_access = 505719009;
  bool built_in = 357544798;
  // Unique Id
  int64 id = 3355;
  repeated string models = 534399691;
  // Name of ModelSet
  string name = 3373707;
  // Link to get this item
  string url = 116079;
}


message ModelsNotValidated {
  // Model name
  string name = 3373707;
  // Project file
  string project_file_id = 523157964;
}

// The type of time interval this field represents a grouping of. Valid values are: "day", "hour", "minute", "second", "millisecond", "microsecond", "week", "month", "quarter", "year".
enum Name {
  _NAME_UNSET = 0;
  NAME_DAY = 417621262;
  NAME_HOUR = 245296360;
  NAME_MINUTE = 315400484;
  NAME_SECOND = 399274068;
  NAME_MILLISECOND = 456314708;
  NAME_MICROSECOND = 158944356;
  NAME_WEEK = 244859608;
  NAME_MONTH = 495179222;
  NAME_QUARTER = 490365750;
  NAME_YEAR = 244800143;
}


message OauthClientApp {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // The globally unique id of this application
  string client_guid = 174062979;
  // The uri with which this application will receive an auth code by browser redirect.
  string redirect_uri = 475615044;
  // The application's display name
  string display_name = 403771642;
  // A description of the application that will be displayed to users
  string description = 431136513;
  // When enabled is true, OAuth2 and API requests will be accepted from this app. When false, all requests from this app will be refused.
  bool enabled = 402398511;
  // If set, only Looker users who are members of this group can use this web app with Looker. If group_id is not set, any Looker user may use this app to access this Looker instance
  int64 group_id = 506361563;
  // All auth codes, access tokens, and refresh tokens issued for this application prior to this date-time for ALL USERS will be invalid.
  google.protobuf.Timestamp tokens_invalid_before = 348775418;
  // All users who have been activated to use this app
  repeated UserPublic activated_users = 331044486;
}


message OIDCConfig {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  bool alternate_email_login_allowed = 332315627;
  // OpenID Provider Audience
  string audience = 487814402;
  // Users will not be allowed to login at all unless a role for them is found in OIDC if set to true
  bool auth_requires_role = 488630792;
  // OpenID Provider Authorization Url
  string authorization_endpoint = 535116198;
  // (Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC
  repeated int64 default_new_user_group_ids = 91703103;
  // (Read-only) Groups that will be applied to new users the first time they login via OIDC
  repeated Group default_new_user_groups = 381653162;
  // (Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC
  repeated int64 default_new_user_role_ids = 429566625;
  // (Read-only) Roles that will be applied to new users the first time they login via OIDC
  repeated Role default_new_user_roles = 435450942;
  // Enable/Disable OIDC authentication for the server
  bool enabled = 402398511;
  // (Read-only) Array of mappings between OIDC Groups and Looker Roles
  repeated OIDCGroupRead groups = 309365131;
  // Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
  string groups_attribute = 407121539;
  // (Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids
  repeated OIDCGroupWrite groups_with_role_ids = 475300071;
  // Relying Party Identifier (provided by OpenID Provider)
  string identifier = 404608213;
  // OpenID Provider Issuer
  string issuer = 294789969;
  // When this config was last modified
  google.protobuf.Timestamp modified_at = 386047141;
  // User id of user who last modified this config
  int64 modified_by = 386047132;
  // Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
  string new_user_migration_types = 348180790;
  // Array of scopes to request.
  repeated string scopes = 453884336;
  // (Write-Only) Relying Party Secret (provided by OpenID Provider)
  string secret = 453138600;
  // Set user roles in Looker based on groups from OIDC
  bool set_roles_from_groups = 441288982;
  // Slug to identify configurations that are created in order to run a OIDC config test
  string test_slug = 295036274;
  // OpenID Provider Token Url
  string token_endpoint = 495238427;
  // Name of user record attributes used to indicate email address field
  string user_attribute_map_email = 384506455;
  // Name of user record attributes used to indicate first name
  string user_attribute_map_first_name = 401269830;
  // Name of user record attributes used to indicate last name
  string user_attribute_map_last_name = 506361433;
  // (Read-only) Array of mappings between OIDC User Attributes and Looker User Attributes
  repeated OIDCUserAttributeRead user_attributes = 435197330;
  // (Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids
  repeated OIDCUserAttributeWrite user_attributes_with_ids = 514666905;
  // OpenID Provider User Information Url
  string userinfo_endpoint = 146023451;
  // Allow OIDC auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
  bool allow_normal_group_membership = 480346046;
  // OIDC auth'd users will inherit roles from non-reflected Looker groups.
  bool allow_roles_from_normal_groups = 302729383;
  // Allows roles to be directly assigned to OIDC auth'd users.
  bool allow_direct_roles = 315512839;
  // Link to get this item
  string url = 116079;
}


message OIDCGroupRead {
  // Unique Id
  int64 id = 3355;
  // Unique Id of group in Looker
  int64 looker_group_id = 304537367;
  // Name of group in Looker
  string looker_group_name = 301354167;
  // Name of group in OIDC
  string name = 3373707;
  // Looker Roles
  repeated Role roles = 108695229;
}


message OIDCGroupWrite {
  // Unique Id
  int64 id = 3355;
  // Unique Id of group in Looker
  int64 looker_group_id = 304537367;
  // Name of group in Looker
  string looker_group_name = 301354167;
  // Name of group in OIDC
  string name = 3373707;
  // Looker Role Ids
  repeated int64 role_ids = 266265745;
}


message OIDCUserAttributeRead {
  // Name of User Attribute in OIDC
  string name = 3373707;
  // Required to be in OIDC assertion for login to be allowed to succeed
  bool required = 393139297;
  // Looker User Attributes
  repeated UserAttribute user_attributes = 435197330;
}


message OIDCUserAttributeWrite {
  // Name of User Attribute in OIDC
  string name = 3373707;
  // Required to be in OIDC assertion for login to be allowed to succeed
  bool required = 393139297;
  // Looker User Attribute Ids
  repeated int64 user_attribute_ids = 468967351;
}


message PasswordConfig {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Minimum number of characters required for a new password.  Must be between 7 and 100
  int64 min_length = 355788614;
  // Require at least one numeric character
  bool require_numeric = 381969292;
  // Require at least one uppercase and one lowercase letter
  bool require_upperlower = 533074595;
  // Require at least one special character
  bool require_special = 379956471;
}


message Permission {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Permission symbol
  string permission = 517618225;
  // Dependency parent symbol
  string parent = 497712043;
  // Description
  string description = 431136513;
}


message PermissionSet {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  bool all_access = 505719009;
  bool built_in = 357544798;
  // Unique Id
  int64 id = 3355;
  // Name of PermissionSet
  string name = 3373707;
  repeated string permissions = 283426081;
  // Link to get this item
  string url = 116079;
}

// Type of permission: "view" or "edit" Valid values are: "view", "edit".
enum PermissionType {
  _PERMISSION_TYPE_UNSET = 0;
  PERMISSION_TYPE_VIEW = 370880998;
  PERMISSION_TYPE_EDIT = 371392129;
}


message Project {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Project Id
  string id = 3355;
  // Project display name
  string name = 3373707;
  // If true the project is configured with a git repository
  bool uses_git = 265231137;
  // Git remote repository url
  string git_remote_url = 337946079;
  // Git username for HTTPS authentication. (For production only, if using user attributes.)
  string git_username = 393319598;
  // (Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)
  string git_password = 348030004;
  // User attribute name for username in per-user HTTPS authentication.
  string git_username_user_attribute = 430560495;
  // User attribute name for password in per-user HTTPS authentication.
  string git_password_user_attribute = 173008929;
  // Name of the git service provider
  string git_service_name = 481280695;
  // Port that HTTP(S) application server is running on (for PRs, file browsing, etc.)
  int64 git_application_server_http_port = 478877938;
  // Scheme that is running on application server (for PRs, file browsing, etc.) Valid values are: "http", "https".
  GitApplicationServerHttpScheme git_application_server_http_scheme = 452168167;
  // (Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated.
  string deploy_secret = 451554436;
  // (Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint.
  bool unset_deploy_secret = 465427100;
  // The git pull request policy for this project. Valid values are: "off", "links", "recommended", "required".
  PullRequestMode pull_request_mode = 421135683;
  // Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository
  bool validation_required = 427509330;
  // If true, advanced git release management is enabled for this project
  bool git_release_mgmt_enabled = 529764014;
  // Validation policy: If true, the project can be committed with warnings when `validation_required` is true. (`allow_warnings` does nothing if `validation_required` is false).
  bool allow_warnings = 320266972;
  // If true the project is an example project and cannot be modified
  bool is_example = 177339221;
  // Status of dependencies in your manifest & lockfile
  string dependency_status = 50086042;
}


message ProjectError {
  // A stable token that uniquely identifies this class of error, ignoring parameter values. Error message text may vary due to parameters or localization, but error codes do not. For example, a "File not found" error will have the same error code regardless of the filename in question or the user's display language
  string code = 3059181;
  // Severity: fatal, error, warning, info, success
  string severity = 369575103;
  // Error classification: syntax, deprecation, model_configuration, etc
  string kind = 3292052;
  // Error message which may contain information such as dashboard or model names that may be considered sensitive in some use cases. Avoid storing or sending this message outside of Looker
  string message = 477462531;
  // The field associated with this error
  string field_name = 288329560;
  // Name of the file containing this error
  string file_path = 329102014;
  // Line number in the file of this error
  int64 line_number = 396496372;
  // The model associated with this error
  string model_id = 309519111;
  // The explore associated with this error
  string explore = 327287131;
  // A link to Looker documentation about this error
  string help_url = 394715719;
  // Error parameters
  map<string, string> params = 497713981;
  // A version of the error message that does not contain potentially sensitive information. Suitable for situations in which messages are stored or sent to consumers outside of Looker, such as external logs. Sanitized messages will display "(?)" where sensitive information would appear in the corresponding non-sanitized message
  string sanitized_message = 454942833;
}


message ProjectFile {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // An opaque token uniquely identifying a file within a project. Avoid parsing or decomposing the text of this token. This token is stable within a Looker release but may change between Looker releases
  string id = 3355;
  // Path, file name, and extension of the file relative to the project root directory
  string path = 3433509;
  // Display name
  string title = 110371416;
  // File type: model, view, etc
  string type = 3575610;
  // The extension of the file: .view.lkml, .model.lkml, etc
  string extension = 306278880;
  // File mime type
  string mime_type = 196041627;
  // State of editability for the file.
  bool editable = 400604057;
  GitStatus git_status = 436663488;
}


message ProjectValidation {
  // A list of project errors
  repeated ProjectError errors = 323658789;
  // A hash value computed from the project's current state
  string project_digest = 530534826;
  // A list of models which were not fully validated
  repeated ModelsNotValidated models_not_validated = 470831011;
  // Duration of project validation in seconds
  float computation_time = 279797358;
}


message ProjectValidationCache {
  // A list of project errors
  repeated ProjectError errors = 323658789;
  // A hash value computed from the project's current state
  string project_digest = 530534826;
  // A list of models which were not fully validated
  repeated ModelsNotValidated models_not_validated = 470831011;
  // Duration of project validation in seconds
  float computation_time = 279797358;
  // If true, the cached project validation results are no longer accurate because the project has changed since the cached results were calculated
  bool stale = 109757337;
}


message ProjectWorkspace {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // The id of the project
  string project_id = 492492543;
  // The id of the local workspace containing the project files
  string workspace_id = 394620993;
  // The status of the local git directory
  string git_status = 436663488;
  // Git head revision name
  string git_head = 307839627;
  // Status of the dependencies in your project. Valid values are: "lock_optional", "lock_required", "lock_error", "install_none".
  DependencyStatus dependency_status = 50086042;
  GitBranch git_branch = 514941099;
  // The lookml syntax used by all files in this project
  string lookml_type = 315076713;
}

// The git pull request policy for this project. Valid values are: "off", "links", "recommended", "required".
enum PullRequestMode {
  _PULL_REQUEST_MODE_UNSET = 0;
  PULL_REQUEST_MODE_OFF = 481298627;
  PULL_REQUEST_MODE_LINKS = 331454081;
  PULL_REQUEST_MODE_RECOMMENDED = 207710761;
  PULL_REQUEST_MODE_REQUIRED = 356618951;
}


message Query {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  int64 id = 3355;
  // Model
  string model = 104069929;
  // Explore Name
  string view = 3619493;
  // Fields
  repeated string fields = 318677073;
  // Pivots
  repeated string pivots = 493953479;
  // Fill Fields
  repeated string fill_fields = 491318906;
  // Filters
  map<string, string> filters = 427273730;
  // Filter Expression
  string filter_expression = 294547567;
  // Sorting for the query results. Use the format `["view.field", ...]` to sort on fields in ascending order. Use the format `["view.field desc", ...]` to sort on fields in descending order. Use `["__UNSORTED__"]` (2 underscores before and after) to disable sorting entirely. Empty sorts `[]` will trigger a default sort.
  repeated string sorts = 109624981;
  // Limit
  string limit = 102976443;
  // Column Limit
  string column_limit = 114546286;
  // Total
  bool total = 110549828;
  // Raw Total
  string row_total = 339028775;
  // Fields on which to run subtotals
  repeated string subtotals = 277302775;
  // Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A "type" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
  map<string, google.protobuf.Any> vis_config = 422614288;
  // The filter_config represents the state of the filter UI on the explore page for a given query. When running a query via the Looker UI, this parameter takes precedence over "filters". When creating a query or modifying an existing query, "filter_config" should be set to null. Setting it to any other value could cause unexpected filtering behavior. The format should be considered opaque.
  map<string, google.protobuf.Any> filter_config = 505106699;
  // Visible UI Sections
  string visible_ui_sections = 328103627;
  // Slug
  string slug = 3533483;
  // Dynamic Fields
  string dynamic_fields = 74327737;
  // Client Id: used to generate shortened explore URLs. If set by client, must be a unique 22 character alphanumeric string. Otherwise one will be generated.
  string client_id = 476022396;
  // Share Url
  string share_url = 395423932;
  // Expanded Share Url
  string expanded_share_url = 427685755;
  // Expanded Url
  string url = 116079;
  // Query Timezone
  string query_timezone = 202424720;
  // Has Table Calculations
  bool has_table_calculations = 464917416;
}


message QueryTask {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  string id = 3355;
  // Id of query
  int64 query_id = 291663619;
  Query query = 107944136;
  // whether or not to generate links in the query response.
  bool generate_links = 443594980;
  // Use production models to run query (even is user is in dev mode).
  bool force_production = 378049187;
  // Prefix to use for drill links.
  string path_prefix = 525914619;
  // Whether or not to use the cache
  bool cache = 94416770;
  // Whether or not to run table calculations on the server
  bool server_table_calcs = 334030724;
  // Retrieve any results from cache even if the results have expired.
  bool cache_only = 28936777;
  // cache key used to cache query.
  string cache_key = 276629999;
  // Status of query task.
  string status = 446240775;
  // Source of query task.
  string source = 448252914;
  // Runtime of prior queries.
  float runtime = 387740662;
  // Rebuild PDTS used in query.
  bool rebuild_pdts = 256532759;
  // Source of the results of the query.
  string result_source = 380511937;
  // Id of look associated with query.
  int64 look_id = 349778619;
  // Id of dashboard associated with query.
  string dashboard_id = 496187565;
  // The data format of the query results.
  string result_format = 283324265;
}


message RenderTask {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Date/Time render task was created
  string created_at = 342420026;
  // Filter values to apply to the dashboard queries, in URL query format
  string dashboard_filters = 454602920;
  // Id of dashboard to render
  int64 dashboard_id = 496187565;
  // Dashboard layout style: single_column or tiled
  string dashboard_style = 394441966;
  // Date/Time render task was completed
  string finalized_at = 388292413;
  // Output height in pixels. Flowed layouts may ignore this value.
  int64 height = 305257398;
  // Id of this render task
  string id = 3355;
  // Id of look to render
  int64 look_id = 349778619;
  // Id of lookml dashboard to render
  string lookml_dashboard_id = 339184839;
  // Id of query to render
  int64 query_id = 291663619;
  // Number of seconds elapsed running queries
  double query_runtime = 336843224;
  // Number of seconds elapsed rendering data
  double render_runtime = 497365131;
  // Output format: pdf, png, or jpg
  string result_format = 283324265;
  // Total seconds elapsed for render task
  double runtime = 387740662;
  // Render task status: enqueued_for_query, querying, enqueued_for_render, rendering, success, failure
  string status = 446240775;
  // Additional information about the current status
  string status_detail = 522482767;
  // The user account permissions in which the render task will execute
  int64 user_id = 147132913;
  // Output width in pixels
  int64 width = 113126854;
}


message RepositoryCredential {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  string id = 3355;
  // Root project Id
  string root_project_id = 379036192;
  // Git remote repository url
  string remote_url = 520826107;
  // Git username for HTTPS authentication.
  string git_username = 393319598;
  // (Write-Only) Git password for HTTPS authentication.
  string git_password = 348030004;
  // Public deploy key for SSH authentication.
  string ssh_public_key = 461638024;
  // Whether the credentials have been configured for the Git Repository.
  bool is_configured = 289271523;
}

// Desired async query result format. Valid values are: "inline_json", "json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml".
enum ResultFormat {
  _RESULT_FORMAT_UNSET = 0;
  RESULT_FORMAT_INLINE_JSON = 466622342;
  RESULT_FORMAT_JSON = 329557308;
  RESULT_FORMAT_JSON_DETAIL = 397990225;
  RESULT_FORMAT_JSON_FE = 453484516;
  RESULT_FORMAT_CSV = 495548224;
  RESULT_FORMAT_HTML = 329571979;
  RESULT_FORMAT_MD = 516886369;
  RESULT_FORMAT_TXT = 495544101;
  RESULT_FORMAT_XLSX = 329454688;
  RESULT_FORMAT_GSXML = 520451209;
}


message ResultMakerFilterables {
  // The model this filterable comes from (used for field suggestions).
  string model = 104069929;
  // The view this filterable comes from (used for field suggestions).
  string view = 3619493;
  // The name of the filterable thing (Query or Merged Results).
  string name = 3373707;
  // array of dashboard_filter_name: and field: objects.
  repeated ResultMakerFilterablesListen listen = 275627150;
}


message ResultMakerFilterablesListen {
  // The name of a dashboard filter to listen to.
  string dashboard_filter_name = 270130631;
  // The name of the field in the filterable to filter with the value of the dashboard filter.
  string field = 97427706;
}


message ResultMakerWithIdVisConfigAndDynamicFields {
  // Unique Id.
  int64 id = 3355;
  // JSON string of dynamic field information.
  string dynamic_fields = 74327737;
  // array of items that can be filtered and information about them.
  repeated ResultMakerFilterables filterables = 444310799;
  // Sorts of the constituent Look, Query, or Merge Query
  repeated string sorts = 109624981;
  // ID of merge result if this is a merge_result.
  string merge_result_id = 374234034;
  // Total of the constituent Look, Query, or Merge Query
  bool total = 110549828;
  // ID of query if this is a query.
  int64 query_id = 291663619;
  // ID of SQL Query if this is a SQL Runner Query
  string sql_query_id = 57188541;
  Query query = 107944136;
  // Vis config of the constituent Query, or Merge Query.
  map<string, string> vis_config = 422614288;
}


message Role {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  int64 id = 3355;
  // Name of Role
  string name = 3373707;
  PermissionSet permission_set = 359445379;
  // (Write-Only) Id of permission set
  int64 permission_set_id = 379867460;
  ModelSet model_set = 502576493;
  // (Write-Only) Id of model set
  int64 model_set_id = 1141778;
  // Link to get this item
  string url = 116079;
  // Link to get list of users with this role
  string users_url = 357383864;
}


message RunningQueries {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  int64 id = 3355;
  UserPublic user = 3599307;
  Query query = 107944136;
  SqlQuery sql_query = 464767429;
  LookBasic look = 3327647;
  // Date/Time Query was initiated
  string created_at = 342420026;
  // Date/Time Query was completed
  string completed_at = 409546073;
  // Query Id
  string query_id = 291663619;
  // Source (look, dashboard, queryrunner, explore, etc.)
  string source = 448252914;
  // Node Id
  string node_id = 528612126;
  // Slug
  string slug = 3533483;
  // ID of a Query Task
  string query_task_id = 435207576;
  // Cache Key
  string cache_key = 276629999;
  // Connection
  string connection_name = 365832102;
  // Dialect
  string dialect = 413753737;
  // Connection ID
  string connection_id = 513204708;
  // Additional Information(Error message or verbose status)
  string message = 477462531;
  // Status description
  string status = 446240775;
  // Number of seconds elapsed running the Query
  double runtime = 387740662;
  // SQL text of the query as run
  string sql = 114126;
}


message SamlConfig {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Enable/Disable Saml authentication for the server
  bool enabled = 402398511;
  // Identity Provider Certificate (provided by IdP)
  string idp_cert = 164795758;
  // Identity Provider Url (provided by IdP)
  string idp_url = 416975417;
  // Identity Provider Issuer (provided by IdP)
  string idp_issuer = 360328317;
  // Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.
  string idp_audience = 473436179;
  // Count of seconds of clock drift to allow when validating timestamps of assertions.
  int64 allowed_clock_drift = 494276104;
  // Name of user record attributes used to indicate email address field
  string user_attribute_map_email = 384506455;
  // Name of user record attributes used to indicate first name
  string user_attribute_map_first_name = 401269830;
  // Name of user record attributes used to indicate last name
  string user_attribute_map_last_name = 506361433;
  // Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
  string new_user_migration_types = 348180790;
  // Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  bool alternate_email_login_allowed = 332315627;
  // Slug to identify configurations that are created in order to run a Saml config test
  string test_slug = 295036274;
  // When this config was last modified
  string modified_at = 386047141;
  // User id of user who last modified this config
  string modified_by = 386047132;
  // (Read-only) Roles that will be applied to new users the first time they login via Saml
  repeated Role default_new_user_roles = 435450942;
  // (Read-only) Groups that will be applied to new users the first time they login via Saml
  repeated Group default_new_user_groups = 381653162;
  // (Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml
  repeated int64 default_new_user_role_ids = 429566625;
  // (Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml
  repeated int64 default_new_user_group_ids = 91703103;
  // Set user roles in Looker based on groups from Saml
  bool set_roles_from_groups = 441288982;
  // Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
  string groups_attribute = 407121539;
  // (Read-only) Array of mappings between Saml Groups and Looker Roles
  repeated SamlGroupRead groups = 309365131;
  // (Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids
  repeated SamlGroupWrite groups_with_role_ids = 475300071;
  // Users will not be allowed to login at all unless a role for them is found in Saml if set to true
  bool auth_requires_role = 488630792;
  // (Read-only) Array of mappings between Saml User Attributes and Looker User Attributes
  repeated SamlUserAttributeRead user_attributes = 435197330;
  // (Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids
  repeated SamlUserAttributeWrite user_attributes_with_ids = 514666905;
  // Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']
  string groups_finder_type = 336365796;
  // Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'
  string groups_member_value = 400280826;
  // Bypass the login page when user authentication is required. Redirect to IdP immediately instead.
  bool bypass_login_page = 349317458;
  // Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
  bool allow_normal_group_membership = 480346046;
  // SAML auth'd users will inherit roles from non-reflected Looker groups.
  bool allow_roles_from_normal_groups = 302729383;
  // Allows roles to be directly assigned to SAML auth'd users.
  bool allow_direct_roles = 315512839;
  // Link to get this item
  string url = 116079;
}


message SamlGroupRead {
  // Unique Id
  int64 id = 3355;
  // Unique Id of group in Looker
  int64 looker_group_id = 304537367;
  // Name of group in Looker
  string looker_group_name = 301354167;
  // Name of group in Saml
  string name = 3373707;
  // Looker Roles
  repeated Role roles = 108695229;
  // Link to saml config
  string url = 116079;
}


message SamlGroupWrite {
  // Unique Id
  int64 id = 3355;
  // Unique Id of group in Looker
  int64 looker_group_id = 304537367;
  // Name of group in Looker
  string looker_group_name = 301354167;
  // Name of group in Saml
  string name = 3373707;
  // Looker Role Ids
  repeated int64 role_ids = 266265745;
  // Link to saml config
  string url = 116079;
}


message SamlMetadataParseResult {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Identify Provider Issuer
  string idp_issuer = 360328317;
  // Identify Provider Url
  string idp_url = 416975417;
  // Identify Provider Certificate
  string idp_cert = 164795758;
}


message SamlUserAttributeRead {
  // Name of User Attribute in Saml
  string name = 3373707;
  // Required to be in Saml assertion for login to be allowed to succeed
  bool required = 393139297;
  // Looker User Attributes
  repeated UserAttribute user_attributes = 435197330;
  // Link to saml config
  string url = 116079;
}


message SamlUserAttributeWrite {
  // Name of User Attribute in Saml
  string name = 3373707;
  // Required to be in Saml assertion for login to be allowed to succeed
  bool required = 393139297;
  // Looker User Attribute Ids
  repeated int64 user_attribute_ids = 468967351;
  // Link to saml config
  string url = 116079;
}


message ScheduledPlan {
  // Name of this scheduled plan
  string name = 3373707;
  // User Id which owns this scheduled plan
  int64 user_id = 147132913;
  // Whether schedule is run as recipient (only applicable for email recipients)
  bool run_as_recipient = 296373536;
  // Whether the ScheduledPlan is enabled
  bool enabled = 402398511;
  // Id of a look
  int64 look_id = 349778619;
  // Id of a dashboard
  int64 dashboard_id = 496187565;
  // Id of a LookML dashboard
  string lookml_dashboard_id = 339184839;
  // Query string to run look or dashboard with
  string filters_string = 109992149;
  // (DEPRECATED) Alias for filters_string field
  string dashboard_filters = 454602920;
  // Delivery should occur if running the dashboard or look returns results
  bool require_results = 330870556;
  // Delivery should occur if the dashboard look does not return results
  bool require_no_results = 420497737;
  // Delivery should occur if data have changed since the last run
  bool require_change = 381228813;
  // Will run an unlimited query and send all results.
  bool send_all_results = 335604919;
  // Vixie-Style crontab specification when to run
  string crontab = 519088419;
  // Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)
  string datagroup = 356040427;
  // Timezone for interpreting the specified crontab (default is Looker instance timezone)
  string timezone = 519056897;
  // Query id
  string query_id = 291663619;
  // Scheduled plan destinations
  repeated ScheduledPlanDestination scheduled_plan_destination = 354055597;
  // Whether the plan in question should only be run once (usually for testing)
  bool run_once = 407993818;
  // Whether links back to Looker should be included in this ScheduledPlan
  bool include_links = 386647463;
  // The size of paper the PDF should be formatted to fit. Valid values are: "letter", "legal", "tabloid", "a0", "a1", "a2", "a3", "a4", "a5".
  string pdf_paper_size = 491759120;
  // Whether the PDF should be formatted for landscape orientation
  bool pdf_landscape = 359176724;
  // Whether this schedule is in an embed context or not
  bool embed = 96620249;
  // Color scheme of the dashboard if applicable
  string color_theme = 331361403;
  // Whether or not to expand table vis to full length
  bool long_tables = 359736222;
  // The pixel width at which we render the inline table visualizations
  int64 inline_table_width = 484902747;
  // Unique Id
  int64 id = 3355;
  // Date and time when ScheduledPlan was created
  google.protobuf.Timestamp created_at = 342420026;
  // Date and time when ScheduledPlan was last updated
  google.protobuf.Timestamp updated_at = 295464393;
  // Title
  string title = 110371416;
  UserPublic user = 3599307;
  // When the ScheduledPlan will next run (null if running once)
  google.protobuf.Timestamp next_run_at = 368958540;
  // When the ScheduledPlan was last run
  google.protobuf.Timestamp last_run_at = 502040332;
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
}


message ScheduledPlanDestination {
  // Unique Id
  int64 id = 3355;
  // Id of a scheduled plan you own
  int64 scheduled_plan_id = 335709463;
  // The data format to send to the given destination. Supported formats vary by destination, but include: "txt", "csv", "inline_json", "json", "json_detail", "xlsx", "html", "wysiwyg_pdf", "assembled_pdf", "wysiwyg_png"
  string format = 317194754;
  // Are values formatted? (containing currency symbols, digit separators, etc.
  bool apply_formatting = 400669803;
  // Whether visualization options are applied to the results.
  bool apply_vis = 518830860;
  // Address for recipient. For email e.g. 'user@example.com'. For webhooks e.g. 'https://domain/path'. For Amazon S3 e.g. 's3://bucket-name/path/'. For SFTP e.g. 'sftp://host-name/path/'. 
  string address = 286923011;
  // Whether the recipient is a Looker user on the current instance (only applicable for email recipients)
  bool looker_recipient = 290777818;
  // Type of the address ('email', 'webhook', 's3', or 'sftp')
  string type = 3575610;
  // JSON object containing parameters for external scheduling. For Amazon S3, this requires keys and values for access_key_id and region. For SFTP, this requires a key and value for username.
  string parameters = 458736106;
  // (Write-Only) JSON object containing secret parameters for external scheduling. For Amazon S3, this requires a key and value for secret_access_key. For SFTP, this requires a key and value for password.
  string secret_parameters = 529011017;
  // Optional message to be included in scheduled emails
  string message = 477462531;
}


message Schema {
  // Schema name
  string name = 3373707;
  // True if this is the default schema
  bool is_default = 312463349;
}


message SchemaColumn {
  // Schema item name
  string name = 3373707;
  // Full name of item
  string sql_escaped_name = 394857990;
  // Name of schema
  string schema_name = 505336523;
  // SQL dialect data type
  string data_type_database = 407848203;
  // Data type
  string data_type = 363359569;
  // Looker data type
  string data_type_looker = 463896804;
  // SQL data type
  string description = 431136513;
  // Column data size
  int64 column_size = 417385051;
  // SQL Runner snippets for this connection
  repeated Snippet snippets = 513815286;
}


message SchemaColumns {
  // Schema item name
  string name = 3373707;
  // Full name of item
  string sql_escaped_name = 394857990;
  // Name of schema
  string schema_name = 505336523;
  // Columns for this schema
  repeated SchemaColumn columns = 474860526;
}


message SchemaTable {
  // Schema item name
  string name = 3373707;
  // Full name of item
  string sql_escaped_name = 394857990;
  // Name of schema
  string schema_name = 505336523;
  // Number of data rows
  int64 rows = 3506649;
  // External reference???
  string external = 455190285;
  // SQL Runner snippets for connection
  repeated Snippet snippets = 513815286;
}


message SchemaTables {
  // Schema name
  string name = 3373707;
  // True if this is the default schema
  bool is_default = 312463349;
  // Tables for this schema
  repeated SchemaTable tables = 440688845;
}


message Session {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  int64 id = 3355;
  // IP address of user when this session was initiated
  string ip_address = 370003511;
  // User's browser type
  string browser = 150940456;
  // User's Operating System
  string operating_system = 223060243;
  // City component of user location (derived from IP address)
  string city = 3053931;
  // State component of user location (derived from IP address)
  string state = 109757585;
  // Country component of user location (derived from IP address)
  string country = 478915531;
  // Type of credentials used for logging in this session
  string credentials_type = 525817688;
  // Time when this session was last extended by the user
  string extended_at = 345479555;
  // Number of times this session was extended
  int64 extended_count = 354296994;
  // Actual user in the case when this session represents one user sudo'ing as another
  int64 sudo_user_id = 287410032;
  // Time when this session was initiated
  string created_at = 342420026;
  // Time when this session will expire
  string expires_at = 416905585;
  // Link to get this item
  string url = 116079;
}


message SessionConfig {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Allow users to have persistent sessions when they login
  bool allow_persistent_sessions = 319921999;
  // Number of minutes for user sessions.  Must be between 5 and 43200
  int64 session_minutes = 457960434;
  // Allow users to have an unbounded number of concurrent sessions (otherwise, users will be limited to only one session at a time).
  bool unlimited_sessions_per_user = 344212172;
  // Enforce session logout for sessions that are inactive for 15 minutes.
  bool use_inactivity_based_logout = 353744386;
  // Track location of session when user logs in.
  bool track_session_location = 531851756;
}


message Snippet {
  // Name of the snippet
  string name = 3373707;
  // Label of the snippet
  string label = 102727412;
  // SQL text of the snippet
  string sql = 114126;
}


message SqlQuery {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // The identifier of the SQL query
  string slug = 3533483;
  // Number of seconds this query took to run the most recent time it was run
  float last_runtime = 531023051;
  // Number of times this query has been run
  int64 run_count = 485221797;
  // Maximum number of rows this query will display on the SQL Runner page
  int64 browser_limit = 377817351;
  // SQL query text
  string sql = 114126;
  // The most recent time this query was run
  string last_run_at = 502040332;
  DBConnectionBase connection = 387825809;
  // Model name this query uses
  string model_name = 526217848;
  UserPublic creator = 514277398;
  // Explore page URL for this SQL query
  string explore_url = 362030223;
  // Should this query be rendered as plain text
  bool plaintext = 493308541;
  // Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A "type" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
  map<string, google.protobuf.Any> vis_config = 422614288;
  // ID of the ResultMakerLookup entry.
  int64 result_maker_id = 347633462;
}


message SqlQueryCreate {
  // Name of the db connection on which to run this query
  string connection_name = 365832102;
  // (DEPRECATED) Use `connection_name` instead
  string connection_id = 513204708;
  // Name of LookML Model (this or `connection_id` required)
  string model_name = 526217848;
  // SQL query
  string sql = 114126;
  // Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A "type" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
  map<string, google.protobuf.Any> vis_config = 422614288;
}


message SshPublicKey {
  // The SSH public key created for this instance
  string public_key = 476203234;
}


message SshServer {
  // A unique id used to identify this SSH Server
  string ssh_server_id = 326923896;
  // The name to identify this SSH Server
  string ssh_server_name = 432527764;
  // The hostname or ip address of the SSH Server
  string ssh_server_host = 432486491;
  // The port to connect to on the SSH Server
  int64 ssh_server_port = 432546065;
  // The username used to connect to the SSH Server
  string ssh_server_user = 432584164;
  // The md5 fingerprint used to identify the SSH Server
  string finger_print = 192567721;
  // The SHA fingerprint used to identify the SSH Server
  string sha_finger_print = 505918710;
  // The SSH public key created for this instance
  string public_key = 476203234;
  // The current connection status to this SSH Server
  string status = 446240775;
}


message SshTunnel {
  // Unique ID for the tunnel
  string tunnel_id = 313005097;
  // SSH Server ID
  string ssh_server_id = 326923896;
  // SSH Server name
  string ssh_server_name = 432527764;
  // SSH Server Hostname or IP Address
  string ssh_server_host = 432486491;
  // SSH Server port
  int64 ssh_server_port = 432546065;
  // Username used to connect to the SSH Server
  string ssh_server_user = 432584164;
  // Time of last connect attempt
  string last_attempt = 102099420;
  // Localhost Port used by the Looker instance to connect to the remote DB
  int64 local_host_port = 317463865;
  // Hostname or IP Address of the Database Server
  string database_host = 332770181;
  // Port that the Database Server is listening on
  int64 database_port = 332710606;
  // Current connection status for this Tunnel
  string status = 446240775;
}

// A list of action types the integration supports. Valid values are: "cell", "query", "dashboard".
enum SupportedActionTypes {
  _SUPPORTED_ACTION_TYPES_UNSET = 0;
  SUPPORTED_ACTION_TYPES_CELL = 39602752;
  SUPPORTED_ACTION_TYPES_QUERY = 303571453;
  SUPPORTED_ACTION_TYPES_DASHBOARD = 431901642;
}

// A list of all the download mechanisms the integration supports. The order of values is not significant: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this defaults to all download setting values. Valid values are: "push", "url".
enum SupportedDownloadSettings {
  _SUPPORTED_DOWNLOAD_SETTINGS_UNSET = 0;
  SUPPORTED_DOWNLOAD_SETTINGS_PUSH = 431825476;
  SUPPORTED_DOWNLOAD_SETTINGS_URL = 505621465;
}

// A list of data formats the integration supports. If unspecified, the default is all data formats. Valid values are: "txt", "csv", "inline_json", "json", "json_label", "json_detail", "json_detail_lite_stream", "xlsx", "html", "wysiwyg_pdf", "assembled_pdf", "wysiwyg_png", "csv_zip".
enum SupportedFormats {
  _SUPPORTED_FORMATS_UNSET = 0;
  SUPPORTED_FORMATS_TXT = 273431079;
  SUPPORTED_FORMATS_CSV = 273426956;
  SUPPORTED_FORMATS_INLINE_JSON = 354342170;
  SUPPORTED_FORMATS_JSON = 454587364;
  SUPPORTED_FORMATS_JSON_LABEL = 320226243;
  SUPPORTED_FORMATS_JSON_DETAIL = 319538827;
  SUPPORTED_FORMATS_JSON_DETAIL_LITE_STREAM = 479092957;
  SUPPORTED_FORMATS_XLSX = 454176883;
  SUPPORTED_FORMATS_HTML = 454646049;
  SUPPORTED_FORMATS_WYSIWYG_PDF = 506730778;
  SUPPORTED_FORMATS_ASSEMBLED_PDF = 511286980;
  SUPPORTED_FORMATS_WYSIWYG_PNG = 506730622;
  SUPPORTED_FORMATS_CSV_ZIP = 451048029;
}

// A list of formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: "formatted", "unformatted".
enum SupportedFormattings {
  _SUPPORTED_FORMATTINGS_UNSET = 0;
  SUPPORTED_FORMATTINGS_FORMATTED = 528102542;
  SUPPORTED_FORMATTINGS_UNFORMATTED = 272716527;
}

// A list of visualization formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: "apply", "noapply".
enum SupportedVisualizationFormattings {
  _SUPPORTED_VISUALIZATION_FORMATTINGS_UNSET = 0;
  SUPPORTED_VISUALIZATION_FORMATTINGS_APPLY = 402869043;
  SUPPORTED_VISUALIZATION_FORMATTINGS_NOAPPLY = 464866640;
}


message Theme {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Timestamp for when this theme becomes active. Null=always
  google.protobuf.Timestamp begin_at = 372355810;
  // Timestamp for when this theme expires. Null=never
  google.protobuf.Timestamp end_at = 324690554;
  // Unique Id
  int64 id = 3355;
  // Name of theme. Can only be alphanumeric and underscores.
  string name = 3373707;
  ThemeSettings settings = 358657800;
}


message ThemeSettings {
  // Default background color
  string background_color = 509195076;
  // Base font size for scaling fonts
  string base_font_size = 356717952;
  // Optional. ID of color collection to use with the theme. Use an empty string for none.
  string color_collection_id = 521066304;
  // Default font color
  string font_color = 507058317;
  // Primary font family
  string font_family = 383510869;
  // Source specification for font
  string font_source = 479849602;
  // Info button color
  string info_button_color = 479402238;
  // Primary button color
  string primary_button_color = 244794573;
  // Toggle to show filters. Defaults to true.
  bool show_filters_bar = 313221091;
  // Toggle to show the title. Defaults to true.
  bool show_title = 281598885;
  // Text color for text tiles
  string text_tile_text_color = 296014652;
  // Background color for tiles
  string tile_background_color = 472118176;
  // Text color for tiles
  string tile_text_color = 482028031;
  // Color for titles
  string title_color = 422398302;
  // Warning button color
  string warn_button_color = 343910760;
  // The text alignment of tile titles (New Dashboards)
  string tile_title_alignment = 278794058;
  // Toggles the tile shadow (New Dashboards)
  bool tile_shadow = 410871563;
}


message Timezone {
  // Timezone
  string value = 111972721;
  // Description of timezone
  string label = 102727412;
  // Timezone group (e.g Common, Other, etc.)
  string group = 98629247;
}


message UpdateCommand {
  // Name of the command
  string name = 3373707;
  // Description of the command
  string description = 431136513;
}


message UpdateFolder {
  // Unique Name
  string name = 3373707;
  // Id of Parent. If the parent id is null, this is a root-level entry
  string parent_id = 517581876;
}


message User {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // URL for the avatar image (may be generic)
  string avatar_url = 402824823;
  // URL for the avatar image (may be generic), does not specify size
  string avatar_url_without_sizing = 444474714;
  // API 3 credentials
  repeated CredentialsApi3 credentials_api3 = 525961425;
  CredentialsEmail credentials_email = 395554227;
  // Embed credentials
  repeated CredentialsEmbed credentials_embed = 395553813;
  CredentialsGoogle credentials_google = 326240567;
  CredentialsLDAP credentials_ldap = 525882429;
  CredentialsLookerOpenid credentials_looker_openid = 339831418;
  CredentialsOIDC credentials_oidc = 525858865;
  CredentialsSaml credentials_saml = 525830924;
  CredentialsTotp credentials_totp = 525820057;
  // Full name for display (available only if both first_name and last_name are set)
  string display_name = 403771642;
  // EMail address
  string email = 96619420;
  // (Embed only) ID of user's group space based on the external_group_id optionally specified during embed user login
  int64 embed_group_space_id = 358009270;
  // First name
  string first_name = 160985414;
  // Array of ids of the groups for this user
  repeated int64 group_ids = 370665154;
  // ID string for user's home folder
  string home_folder_id = 126256340;
  // Unique Id
  int64 id = 3355;
  // Account has been disabled
  bool is_disabled = 464089615;
  // Last name
  string last_name = 503280549;
  // User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example.
  string locale = 274365545;
  // Array of strings representing the Looker versions that this user has used (this only goes back as far as '3.54.0')
  repeated string looker_versions = 470584964;
  // User's dev workspace has been checked for presence of applicable production projects
  bool models_dir_validated = 476587036;
  // ID of user's personal folder
  int64 personal_folder_id = 468432428;
  // User is identified as an employee of Looker
  bool presumed_looker_employee = 507302581;
  // Array of ids of the roles for this user
  repeated int64 role_ids = 266265745;
  // Active sessions
  repeated Session sessions = 351269927;
  // Per user dictionary of undocumented state information owned by the Looker UI.
  map<string, string> ui_state = 360744045;
  // User is identified as an employee of Looker who has been verified via Looker corporate authentication
  bool verified_looker_employee = 471763269;
  // User's roles are managed by an external directory like SAML or LDAP and can not be changed directly.
  bool roles_externally_managed = 413287133;
  // User can be directly assigned a role.
  bool allow_direct_roles = 315512839;
  // User can be a direct member of a normal Looker group.
  bool allow_normal_group_membership = 480346046;
  // User can inherit roles from a normal Looker group.
  bool allow_roles_from_normal_groups = 302729383;
  // Link to get this item
  string url = 116079;
}


message UserAttribute {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  int64 id = 3355;
  // Name of user attribute
  string name = 3373707;
  // Human-friendly label for user attribute
  string label = 102727412;
  // Type of user attribute ("string", "number", "datetime", "yesno", "zipcode")
  string type = 3575610;
  // Default value for when no value is set on the user
  string default_value = 329667964;
  // Attribute is a system default
  bool is_system = 423289116;
  // Attribute is permanent and cannot be deleted
  bool is_permanent = 321308691;
  // If true, users will not be able to view values of this attribute
  bool value_is_hidden = 386768708;
  // Non-admin users can see the values of their attributes and use them in filters
  bool user_can_view = 75812952;
  // Users can change the value of this attribute for themselves
  bool user_can_edit = 76324083;
  // Destinations to which a hidden attribute may be sent. Once set, cannot be edited.
  string hidden_value_domain_whitelist = 389149836;
}

// An array of user attribute types that are allowed to be used in filters on this field. Valid values are: "advanced_filter_string", "advanced_filter_number", "advanced_filter_datetime", "string", "number", "datetime", "relative_url", "yesno", "zipcode".
enum UserAttributeFilterTypes {
  _USER_ATTRIBUTE_FILTER_TYPES_UNSET = 0;
  USER_ATTRIBUTE_FILTER_TYPES_ADVANCED_FILTER_STRING = 38119857;
  USER_ATTRIBUTE_FILTER_TYPES_ADVANCED_FILTER_NUMBER = 104258327;
  USER_ATTRIBUTE_FILTER_TYPES_ADVANCED_FILTER_DATETIME = 505706937;
  USER_ATTRIBUTE_FILTER_TYPES_STRING = 269933081;
  USER_ATTRIBUTE_FILTER_TYPES_NUMBER = 468677071;
  USER_ATTRIBUTE_FILTER_TYPES_DATETIME = 440156011;
  USER_ATTRIBUTE_FILTER_TYPES_RELATIVE_URL = 485099084;
  USER_ATTRIBUTE_FILTER_TYPES_YESNO = 395679271;
  USER_ATTRIBUTE_FILTER_TYPES_ZIPCODE = 356288364;
}


message UserAttributeGroupValue {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id of this group-attribute relation
  int64 id = 3355;
  // Id of group
  int64 group_id = 506361563;
  // Id of user attribute
  int64 user_attribute_id = 534680475;
  // If true, the "value" field will be null, because the attribute settings block access to this value
  bool value_is_hidden = 386768708;
  // Precedence for resolving value for user
  int64 rank = 3492908;
  // Value of user attribute for group
  string value = 111972721;
}


message UserAttributeWithValue {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Name of user attribute
  string name = 3373707;
  // Human-friendly label for user attribute
  string label = 102727412;
  // Precedence for setting value on user (lowest wins)
  int64 rank = 3492908;
  // Value of attribute for user
  string value = 111972721;
  // Id of User
  int64 user_id = 147132913;
  // Can the user set this value
  bool user_can_edit = 76324083;
  // If true, the "value" field will be null, because the attribute settings block access to this value
  bool value_is_hidden = 386768708;
  // Id of User Attribute
  int64 user_attribute_id = 534680475;
  // How user got this value for this attribute
  string source = 448252914;
  // If this user attribute is hidden, whitelist of destinations to which it may be sent.
  string hidden_value_domain_whitelist = 389149836;
}


message UserLoginLockout {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Hash of user's client id
  string key = 106079;
  // Authentication method for login failures
  string auth_type = 365227228;
  // IP address of most recent failed attempt
  string ip = 3367;
  // User ID
  int64 user_id = 147132913;
  // Remote ID of user if using LDAP
  string remote_id = 320131821;
  // User's name
  string full_name = 419294065;
  // Email address associated with the user's account
  string email = 96619420;
  // Number of failures that triggered the lockout
  int64 fail_count = 393297070;
  // Time when lockout was triggered
  google.protobuf.Timestamp lockout_at = 423752683;
}


message UserPublic {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  int64 id = 3355;
  // First Name
  string first_name = 160985414;
  // Last Name
  string last_name = 503280549;
  // Full name for display (available only if both first_name and last_name are set)
  string display_name = 403771642;
  // URL for the avatar image (may be generic)
  string avatar_url = 402824823;
  // Link to get this item
  string url = 116079;
}


message ValidationError {
  // Error details
  string message = 477462531;
  // Error detail array
  repeated ValidationErrorDetail errors = 323658789;
  // Documentation link
  string documentation_url = 282180250;
}


message ValidationErrorDetail {
  // Field with error
  string field = 97427706;
  // Error code
  string code = 3059181;
  // Error info message
  string message = 477462531;
  // Documentation link
  string documentation_url = 282180250;
}

// The name of the starting day of the week. Valid values are: "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday".
enum WeekStartDay {
  _WEEK_START_DAY_UNSET = 0;
  WEEK_START_DAY_MONDAY = 404658929;
  WEEK_START_DAY_TUESDAY = 425798095;
  WEEK_START_DAY_WEDNESDAY = 494504202;
  WEEK_START_DAY_THURSDAY = 293816977;
  WEEK_START_DAY_FRIDAY = 454104541;
  WEEK_START_DAY_SATURDAY = 445994505;
  WEEK_START_DAY_SUNDAY = 360329921;
}


message WelcomeEmailTest {
  // The content that would be sent in the body of a custom welcome email
  string content = 475765308;
  // The subject that would be sent for the custom welcome email
  string subject = 466971317;
  // The header that would be sent in the body of a custom welcome email
  string header = 305317724;
}


message WhitelabelConfiguration {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // Unique Id
  int64 id = 3355;
  // Customer logo image. Expected base64 encoded data (write-only)
  string logo_file = 390205724;
  // Logo image url (read-only)
  string logo_url = 506968886;
  // Custom favicon image. Expected base64 encoded data (write-only)
  string favicon_file = 516846492;
  // Favicon image url (read-only)
  string favicon_url = 243764420;
  // Default page title
  string default_title = 329267638;
  // Boolean to toggle showing help menus
  bool show_help_menu = 295555474;
  // Boolean to toggle showing docs
  bool show_docs = 475949680;
  // Boolean to toggle showing email subscription options.
  bool show_email_sub_options = 482126522;
  // Boolean to toggle mentions of Looker in emails
  bool allow_looker_mentions = 454767734;
  // Boolean to toggle links to Looker in emails
  bool allow_looker_links = 142583420;
  // Allow subject line and email heading customization in customized emails”
  bool custom_welcome_email_advanced = 25101424;
  // Remove the word Looker from appearing in the account setup page
  bool setup_mentions = 311522906;
  // Remove Looker logo from Alerts
  bool alerts_logo = 51977645;
  // Remove Looker links from Alerts
  bool alerts_links = 402869755;
  // Remove Looker mentions in home folder page when you don’t have any items saved
  bool folders_mentions = 269755200;
}


message Workspace {
  // Operations the current user is able to perform on this object
  map<string, bool> can = 98256;
  // The unique id of this user workspace. Predefined workspace ids include "production" and "dev"
  string id = 3355;
  // The local state of each project in the workspace
  repeated Project projects = 499348419;
}

// Dynamically generated writeable type for ApiSession removes properties:
  // can, sudo_user_id
message WriteApiSession {
  // The id of active workspace for this session
  string workspace_id = 394620993;
}

// Dynamically generated writeable type for BackupConfiguration removes properties:
  // can, url
message WriteBackupConfiguration {
  // Type of backup: looker-s3 or custom-s3
  string type = 3575610;
  // Name of bucket for custom-s3 backups
  string custom_s3_bucket = 358719282;
  // Name of region where the bucket is located
  string custom_s3_bucket_region = 278083340;
  // (Write-Only) AWS S3 key used for custom-s3 backups
  string custom_s3_key = 277162771;
  // (Write-Only) AWS S3 secret used for custom-s3 backups
  string custom_s3_secret = 245512607;
}

// Dynamically generated writeable type for Board removes properties:
  // can, content_metadata_id, created_at, board_sections, id, updated_at, user_id, primary_homepage
message WriteBoard {
  // Date of board deletion
  google.protobuf.Timestamp deleted_at = 441264006;
  // Description of the board
  string description = 431136513;
  // ids of the board sections in the order they should be displayed
  repeated int64 section_order = 328304035;
  // Title of the board
  string title = 110371416;
}

// Dynamically generated writeable type for BoardItem removes properties:
  // can, content_created_by, content_favorite_id, content_metadata_id, content_updated_at, description, favorite_count, id, location, title, url, view_count
message WriteBoardItem {
  // Dashboard to base this item on
  int64 dashboard_id = 496187565;
  // Associated Board Section
  int64 board_section_id = 501228011;
  // Look to base this item on
  int64 look_id = 349778619;
  // LookML Dashboard to base this item on
  string lookml_dashboard_id = 339184839;
  // An arbitrary integer representing the sort order within the section
  int64 order = 106006350;
}

// Dynamically generated writeable type for BoardSection removes properties:
  // can, created_at, board_items, id, updated_at
message WriteBoardSection {
  // Time at which this section was deleted.
  google.protobuf.Timestamp deleted_at = 441264006;
  // Description of the content found in this section.
  string description = 431136513;
  // Id reference to parent board
  int64 board_id = 402691141;
  // ids of the board items in the order they should be displayed
  repeated int64 item_order = 488938807;
  // Name of row
  string title = 110371416;
}

// Dynamically generated writeable type for ColorCollection removes properties:
  // id
message WriteColorCollection {
  // Label of color collection
  string label = 102727412;
  // Array of categorical palette definitions
  repeated DiscretePalette categoricalPalettes = 181997160;
  // Array of discrete palette definitions
  repeated ContinuousPalette sequentialPalettes = 296477661;
  // Array of diverging palette definitions
  repeated ContinuousPalette divergingPalettes = 417697719;
}

// Dynamically generated writeable type for Command removes properties:
  // id, author_id
message WriteCommand {
  // Name of the command
  string name = 3373707;
  // Description of the command
  string description = 431136513;
  // Id of the content associated with the command
  string linked_content_id = 63843193;
  // Name of the command Valid values are: "dashboard", "lookml_dashboard".
  LinkedContentType linked_content_type = 305853718;
}

// Dynamically generated writeable type for ContentFavorite removes properties:
  // id, look_id, dashboard_id, board_id
message WriteContentFavorite {
  // User Id which owns this ContentFavorite
  int64 user_id = 147132913;
  // Content Metadata Id associated with this ContentFavorite
  int64 content_metadata_id = 293222822;
  WriteLookBasic look = 3327647;
  WriteDashboardBase dashboard = 523930294;
}

// Dynamically generated writeable type for ContentMeta removes properties:
  // can, id, name, parent_id, dashboard_id, look_id, folder_id, content_type, inheriting_id, slug
message WriteContentMeta {
  // Whether content inherits its access levels from parent
  bool inherits = 226856664;
}

// Dynamically generated writeable type for CreateDashboardFilter removes properties:
  // id, field
message WriteCreateDashboardFilter {
  // Id of Dashboard
  string dashboard_id = 496187565;
  // Name of filter
  string name = 3373707;
  // Title of filter
  string title = 110371416;
  // Type of filter: one of date, number, string, or field
  string type = 3575610;
  // Default value of filter
  string default_value = 329667964;
  // Model of filter (required if type = field)
  string model = 104069929;
  // Explore of filter (required if type = field)
  string explore = 327287131;
  // Dimension of filter (required if type = field)
  string dimension = 273753254;
  // Display order of this filter relative to other filters
  int64 row = 113114;
  // Array of listeners for faceted filters
  repeated string listens_to_filters = 326256077;
  // Whether the filter allows multiple filter values
  bool allow_multiple_values = 444540061;
  // Whether the filter requires a value to run the dashboard
  bool required = 393139297;
  // The visual configuration for this filter. Used to set up how the UI for this filter should appear.
  map<string, google.protobuf.Any> ui_config = 338401068;
}

// Dynamically generated writeable type for CreateQueryTask removes properties:
  // can
message WriteCreateQueryTask {
  // Id of query to run
  int64 query_id = 291663619;
  // Desired async query result format. Valid values are: "inline_json", "json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml".
  ResultFormat result_format = 283324265;
  // Source of query task
  string source = 448252914;
  // Create the task but defer execution
  bool deferred = 323945455;
  // Id of look associated with query.
  int64 look_id = 349778619;
  // Id of dashboard associated with query.
  string dashboard_id = 496187565;
}

// Dynamically generated writeable type for CredentialsEmail removes properties:
  // can, created_at, is_disabled, logged_in_at, password_reset_url, type, url, user_url
message WriteCredentialsEmail {
  // EMail address used for user login
  string email = 96619420;
  // Force the user to change their password upon their next login
  bool forced_password_reset_at_next_login = 457930717;
}

// Dynamically generated writeable type for CustomWelcomeEmail removes properties:
  // can
message WriteCustomWelcomeEmail {
  // If true, custom email content will replace the default body of welcome emails
  bool enabled = 402398511;
  // The HTML to use as custom content for welcome emails. Script elements and other potentially dangerous markup will be removed.
  string content = 475765308;
  // The text to appear in the email subject line.
  string subject = 466971317;
  // The text to appear in the header line of the email body.
  string header = 305317724;
}

// Dynamically generated writeable type for Dashboard removes properties:
  // can, content_favorite_id, content_metadata_id, id, model, readonly, refresh_interval_to_i, user_id, created_at, dashboard_elements, dashboard_filters, dashboard_layouts, deleted_at, deleter_id, edit_uri, favorite_count, last_accessed_at, last_viewed_at, view_count
message WriteDashboard {
  // Description
  string description = 431136513;
  // Is Hidden
  bool hidden = 304371861;
  // Timezone in which the Dashboard will run by default.
  string query_timezone = 202424720;
  // Refresh Interval, as a time duration phrase like "2 hours 30 minutes". A number with no time units will be interpreted as whole seconds.
  string refresh_interval = 454206058;
  WriteFolderBase folder = 317241572;
  // Dashboard Title
  string title = 110371416;
  // Background color
  string background_color = 509195076;
  // Enables crossfiltering in dashboards - only available in dashboards-next (beta)
  bool crossfilter_enabled = 315812131;
  // Whether or not a dashboard is 'soft' deleted.
  bool deleted = 387615750;
  // configuration option that governs how dashboard loading will happen.
  string load_configuration = 278159272;
  // Links this dashboard to a particular LookML dashboard such that calling a **sync** operation on that LookML dashboard will update this dashboard to match.
  string lookml_link_id = 458227247;
  // Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user's ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://looker.com/docs/r/api/control-access)
  bool show_filters_bar = 313221091;
  // Show title
  bool show_title = 281598885;
  // Content Metadata Slug
  string slug = 3533483;
  // Id of folder
  string folder_id = 527488652;
  // Color of text on text tiles
  string text_tile_text_color = 296014652;
  // Tile background color
  string tile_background_color = 472118176;
  // Tile text color
  string tile_text_color = 482028031;
  // Title color
  string title_color = 422398302;
  DashboardAppearance appearance = 449179417;
  // The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)
  string preferred_viewer = 518361060;
}

// Dynamically generated writeable type for DashboardBase removes properties:
  // can, content_favorite_id, content_metadata_id, description, hidden, id, model, query_timezone, readonly, refresh_interval, refresh_interval_to_i, title, user_id
message WriteDashboardBase {
  WriteFolderBase folder = 317241572;
}

// Dynamically generated writeable type for DashboardElement removes properties:
  // can, body_text_as_html, edit_uri, id, lookml_link_id, note_text_as_html, refresh_interval_to_i, alert_count, title_text_as_html, subtitle_text_as_html
message WriteDashboardElement {
  // Text tile body text
  string body_text = 313253482;
  // Id of Dashboard
  string dashboard_id = 496187565;
  WriteLookWithQuery look = 3327647;
  // Id Of Look
  string look_id = 349778619;
  // ID of merge result
  string merge_result_id = 374234034;
  // Note Display
  string note_display = 33923723;
  // Note State
  string note_state = 312488702;
  // Note Text
  string note_text = 445242710;
  WriteQuery query = 107944136;
  // Id Of Query
  int64 query_id = 291663619;
  // Refresh Interval
  string refresh_interval = 454206058;
  WriteResultMakerWithIdVisConfigAndDynamicFields result_maker = 523671970;
  // ID of the ResultMakerLookup entry.
  int64 result_maker_id = 347633462;
  // Text tile subtitle text
  string subtitle_text = 527614074;
  // Title of dashboard element
  string title = 110371416;
  // Whether title is hidden
  bool title_hidden = 278123192;
  // Text tile title
  string title_text = 443341651;
  // Type
  string type = 3575610;
}

// Dynamically generated writeable type for DashboardFilter removes properties:
  // can, id, dashboard_id, field
message WriteDashboardFilter {
  // Name of filter
  string name = 3373707;
  // Title of filter
  string title = 110371416;
  // Type of filter: one of date, number, string, or field
  string type = 3575610;
  // Default value of filter
  string default_value = 329667964;
  // Model of filter (required if type = field)
  string model = 104069929;
  // Explore of filter (required if type = field)
  string explore = 327287131;
  // Dimension of filter (required if type = field)
  string dimension = 273753254;
  // Display order of this filter relative to other filters
  int64 row = 113114;
  // Array of listeners for faceted filters
  repeated string listens_to_filters = 326256077;
  // Whether the filter allows multiple filter values
  bool allow_multiple_values = 444540061;
  // Whether the filter requires a value to run the dashboard
  bool required = 393139297;
  // The visual configuration for this filter. Used to set up how the UI for this filter should appear.
  map<string, google.protobuf.Any> ui_config = 338401068;
}

// Dynamically generated writeable type for DashboardLayout removes properties:
  // can, id, deleted, dashboard_title, dashboard_layout_components
message WriteDashboardLayout {
  // Id of Dashboard
  string dashboard_id = 496187565;
  // Type
  string type = 3575610;
  // Is Active
  bool active = 355737662;
  // Column Width
  int64 column_width = 104395875;
  // Width
  int64 width = 113126854;
}

// Dynamically generated writeable type for DashboardLayoutComponent removes properties:
  // can, id, deleted, element_title, element_title_hidden, vis_type
message WriteDashboardLayoutComponent {
  // Id of Dashboard Layout
  string dashboard_layout_id = 343841433;
  // Id Of Dashboard Element
  string dashboard_element_id = 79370295;
  // Row
  int64 row = 113114;
  // Column
  int64 column = 338709290;
  // Width
  int64 width = 113126854;
  // Height
  int64 height = 305257398;
}

// Dynamically generated writeable type for Datagroup removes properties:
  // can, created_at, id, model_name, name, trigger_check_at, trigger_error, trigger_value
message WriteDatagroup {
  // UNIX timestamp before which cache entries are considered stale. Cannot be in the future.
  int64 stale_before = 349731513;
  // UNIX timestamp at which this entry became triggered. Cannot be in the future.
  int64 triggered_at = 380872987;
}

// Dynamically generated writeable type for DBConnection removes properties:
  // can, dialect, snippets, pdts_enabled, uses_oauth, created_at, user_id, example, last_regen_at, last_reap_at, managed
message WriteDBConnection {
  // Name of the connection. Also used as the unique identifier
  string name = 3373707;
  // Host name/address of server
  string host = 3208616;
  // Port number on server
  int64 port = 3446913;
  // Username for server authentication
  string username = 265713450;
  // (Write-Only) Password for server authentication
  string password = 304246438;
  // (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
  string certificate = 488099941;
  // (Write-Only) Certificate keyfile type - .json or .p12
  string file_type = 329066488;
  // Database name
  string database = 447366238;
  // Time zone of database
  string db_timezone = 462146893;
  // Timezone to use in queries
  string query_timezone = 202424720;
  // Scheme name
  string schema = 453993775;
  // Maximum number of concurrent connection to use
  int64 max_connections = 426218758;
  // Maximum size of query in GBs (BigQuery only, can be a user_attribute name)
  string max_billing_gigabytes = 76432944;
  // Use SSL/TLS when connecting to server
  bool ssl = 114188;
  // Verify the SSL
  bool verify_ssl = 516339549;
  // Name of temporary database (if used)
  string tmp_db_name = 503272258;
  // Additional params to add to JDBC connection string
  string jdbc_additional_params = 377926166;
  // Connection Pool Timeout, in seconds
  int64 pool_timeout = 386536432;
  // (Read/Write) SQL Dialect name
  string dialect_name = 453584193;
  // (Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password
  bool user_db_credentials = 401569003;
  // Fields whose values map to user attribute names
  repeated string user_attribute_fields = 501842924;
  // Cron string specifying when maintenance such as PDT trigger checks and drops should be performed
  string maintenance_cron = 408001806;
  // Precache tables in the SQL Runner
  bool sql_runner_precache_tables = 290662041;
  // SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
  string after_connect_statements = 39151260;
  WriteDBConnectionOverride pdt_context_override = 355387537;
  // The Id of the ssh tunnel this connection uses
  string tunnel_id = 313005097;
  // Maximum number of threads to use to build PDTs in parallel
  int64 pdt_concurrency = 395006102;
  // When disable_context_comment is true comment will not be added to SQL
  bool disable_context_comment = 390654690;
  // An External OAuth Application to use for authenticating to the database
  int64 oauth_application_id = 466979396;
}

// Dynamically generated writeable type for DBConnectionOverride removes properties:
  // has_password
message WriteDBConnectionOverride {
  // Context in which to override (`pdt` is the only allowed value)
  string context = 475765463;
  // Host name/address of server
  string host = 3208616;
  // Port number on server
  string port = 3446913;
  // Username for server authentication
  string username = 265713450;
  // (Write-Only) Password for server authentication
  string password = 304246438;
  // (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
  string certificate = 488099941;
  // (Write-Only) Certificate keyfile type - .json or .p12
  string file_type = 329066488;
  // Database name
  string database = 447366238;
  // Scheme name
  string schema = 453993775;
  // Additional params to add to JDBC connection string
  string jdbc_additional_params = 377926166;
  // SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
  string after_connect_statements = 39151260;
}

// Dynamically generated writeable type for ExternalOauthApplication removes properties:
  // can, id, created_at
message WriteExternalOauthApplication {
  // The name of this application.  For Snowflake connections, this should be the name of the host database.
  string name = 3373707;
  // The OAuth Client ID for this application
  string client_id = 476022396;
  // (Write-Only) The OAuth Client Secret for this application
  string client_secret = 278906578;
  // The database dialect for this application.
  string dialect_name = 453584193;
}

// Dynamically generated writeable type for FolderBase removes properties:
  // id, content_metadata_id, created_at, creator_id, child_count, external_id, is_embed, is_embed_shared_root, is_embed_users_root, is_personal, is_personal_descendant, is_shared_root, is_users_root, can
message WriteFolderBase {
  // Unique Name
  string name = 3373707;
  // Id of Parent. If the parent id is null, this is a root-level entry
  string parent_id = 517581876;
}

// Dynamically generated writeable type for GitBranch removes properties:
  // can, remote, remote_name, error, message, owner_name, readonly, personal, is_local, is_remote, is_production, ahead_count, behind_count, commit_at, remote_ref
message WriteGitBranch {
  // The short name on the local. Updating `name` results in `git checkout <new_name>`
  string name = 3373707;
  // The resolved ref of this branch. Updating `ref` results in `git reset --hard <new_ref>``.
  string ref = 112787;
}

// Dynamically generated writeable type for Group removes properties:
  // can, contains_current_user, external_group_id, externally_managed, id, include_by_default, user_count
message WriteGroup {
  // Group can be used in content access controls
  bool can_add_to_content_metadata = 97036652;
  // Name of group
  string name = 3373707;
}

// Dynamically generated writeable type for Integration removes properties:
  // can, id, integration_hub_id, label, description, supported_formats, supported_action_types, supported_formattings, supported_visualization_formattings, supported_download_settings, icon_url, uses_oauth, required_fields, delegate_oauth
message WriteIntegration {
  // Whether the integration is available to users.
  bool enabled = 402398511;
  // Array of params for the integration.
  repeated IntegrationParam params = 497713981;
  // Whether the integration is available to users.
  repeated int64 installed_delegate_oauth_targets = 448297026;
}

// Dynamically generated writeable type for IntegrationHub removes properties:
  // can, id, label, official, fetch_error_message, has_authorization_token, legal_agreement_signed, legal_agreement_required, legal_agreement_text
message WriteIntegrationHub {
  // URL of the hub.
  string url = 116079;
  // (Write-Only) An authorization key that will be sent to the integration hub on every request.
  string authorization_token = 369213356;
}

// Dynamically generated writeable type for InternalHelpResources removes properties:
  // can
message WriteInternalHelpResources {
  // If true and internal help resources content is not blank then the link for internal help resources will be shown in the help menu and the content displayed within Looker
  bool enabled = 402398511;
}

// Dynamically generated writeable type for InternalHelpResourcesContent removes properties:
  // can
message WriteInternalHelpResourcesContent {
  // Text to display in the help menu item which will display the internal help resources
  string organization_name = 425834740;
  // Content to be displayed in the internal help resources page/modal
  string markdown_content = 165250775;
}

// Dynamically generated writeable type for LDAPConfig removes properties:
  // can, default_new_user_groups, default_new_user_roles, groups, has_auth_password, modified_at, modified_by, user_attributes, url
message WriteLDAPConfig {
  // Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  bool alternate_email_login_allowed = 332315627;
  // (Write-Only)  Password for the LDAP account used to access the LDAP server
  string auth_password = 415503534;
  // Users will not be allowed to login at all unless a role for them is found in LDAP if set to true
  bool auth_requires_role = 488630792;
  // Distinguished name of LDAP account used to access the LDAP server
  string auth_username = 474550684;
  // LDAP server hostname
  string connection_host = 365749556;
  // LDAP host port
  string connection_port = 365868705;
  // Use Transport Layer Security
  bool connection_tls = 317633542;
  // Do not verify peer when using TLS
  bool connection_tls_no_verify = 432426857;
  // (Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP
  repeated int64 default_new_user_group_ids = 91703103;
  // (Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP
  repeated int64 default_new_user_role_ids = 429566625;
  // Enable/Disable LDAP authentication for the server
  bool enabled = 402398511;
  // Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it.
  bool force_no_page = 344726209;
  // Base dn for finding groups in LDAP searches
  string groups_base_dn = 456083027;
  // Identifier for a strategy for how Looker will search for groups in the LDAP server
  string groups_finder_type = 336365796;
  // LDAP Group attribute that signifies the members of the groups. Most commonly 'member'
  string groups_member_attribute = 281577616;
  // Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches
  string groups_objectclasses = 270841289;
  // LDAP Group attribute that signifies the user in a group. Most commonly 'dn'
  string groups_user_attribute = 467193795;
  // (Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids
  repeated LDAPGroupWrite groups_with_role_ids = 475300071;
  // Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user.
  bool merge_new_users_by_email = 391067523;
  // Set user roles in Looker based on groups from LDAP
  bool set_roles_from_groups = 441288982;
  // (Write-Only)  Test LDAP user password. For ldap tests only.
  string test_ldap_password = 71095482;
  // (Write-Only)  Test LDAP user login id. For ldap tests only.
  string test_ldap_user = 159290890;
  // Name of user record attributes used to indicate email address field
  string user_attribute_map_email = 384506455;
  // Name of user record attributes used to indicate first name
  string user_attribute_map_first_name = 401269830;
  // Name of user record attributes used to indicate last name
  string user_attribute_map_last_name = 506361433;
  // Name of user record attributes used to indicate unique record id
  string user_attribute_map_ldap_id = 271507598;
  // (Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids
  repeated LDAPUserAttributeWrite user_attributes_with_ids = 514666905;
  // Distinguished name of LDAP node used as the base for user searches
  string user_bind_base_dn = 468855466;
  // (Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses.
  string user_custom_filter = 359623314;
  // Name(s) of user record attributes used for matching user login id (comma separated list)
  string user_id_attribute_names = 495858029;
  // (Optional) Name of user record objectclass used for finding user during login id
  string user_objectclass = 365251017;
  // Allow LDAP auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
  bool allow_normal_group_membership = 480346046;
  // LDAP auth'd users will be able to inherit roles from non-reflected Looker groups.
  bool allow_roles_from_normal_groups = 302729383;
  // Allows roles to be directly assigned to LDAP auth'd users.
  bool allow_direct_roles = 315512839;
}

// Dynamically generated writeable type for LegacyFeature removes properties:
  // can, id, name, description, enabled, disallowed_as_of_version, disable_on_upgrade_to_version, end_of_life_version, documentation_url, approximate_disable_date, approximate_end_of_life_date, has_disabled_on_upgrade
message WriteLegacyFeature {
  // Whether this feature has been enabled by a user
  bool enabled_locally = 472119345;
}

// Dynamically generated writeable type for LookBasic removes properties:
  // can, content_metadata_id, id, title
message WriteLookBasic {
  // User Id
  int64 user_id = 147132913;
}

// Dynamically generated writeable type for LookmlModel removes properties:
  // can, explores, has_content, label
message WriteLookmlModel {
  // Array of names of connections this model is allowed to use
  repeated string allowed_db_connection_names = 482839655;
  // Name of the model. Also used as the unique identifier
  string name = 3373707;
  // Name of project containing the model
  string project_name = 469694456;
  // Is this model allowed to use all current and future connections
  bool unlimited_db_connections = 419500594;
}

// Dynamically generated writeable type for LookWithQuery removes properties:
  // can, content_metadata_id, id, content_favorite_id, created_at, deleted_at, deleter_id, embed_url, excel_file_url, favorite_count, google_spreadsheet_formula, image_embed_url, last_accessed_at, last_updater_id, last_viewed_at, model, public_slug, public_url, short_url, updated_at, view_count, url
message WriteLookWithQuery {
  // Look Title
  string title = 110371416;
  // User Id
  int64 user_id = 147132913;
  // Whether or not a look is 'soft' deleted.
  bool deleted = 387615750;
  // Description
  string description = 431136513;
  // auto-run query when Look viewed
  bool is_run_on_load = 494569088;
  // Is Public
  bool public = 488711883;
  // Query Id
  int64 query_id = 291663619;
  WriteFolderBase folder = 317241572;
  // Folder Id
  string folder_id = 527488652;
  WriteQuery query = 107944136;
}

// Dynamically generated writeable type for MergeQuery removes properties:
  // can, id, result_maker_id
message WriteMergeQuery {
  // Column Limit
  string column_limit = 114546286;
  // Dynamic Fields
  string dynamic_fields = 74327737;
  // Pivots
  repeated string pivots = 493953479;
  // Sorts
  repeated string sorts = 109624981;
  // Source Queries defining the results to be merged.
  repeated MergeQuerySourceQuery source_queries = 396289744;
  // Total
  bool total = 110549828;
  // Visualization Config
  map<string, string> vis_config = 422614288;
}

// Dynamically generated writeable type for ModelSet removes properties:
  // can, all_access, built_in, id, url
message WriteModelSet {
  repeated string models = 534399691;
  // Name of ModelSet
  string name = 3373707;
}

// Dynamically generated writeable type for OauthClientApp removes properties:
  // can, client_guid, tokens_invalid_before, activated_users
message WriteOauthClientApp {
  // The uri with which this application will receive an auth code by browser redirect.
  string redirect_uri = 475615044;
  // The application's display name
  string display_name = 403771642;
  // A description of the application that will be displayed to users
  string description = 431136513;
  // When enabled is true, OAuth2 and API requests will be accepted from this app. When false, all requests from this app will be refused.
  bool enabled = 402398511;
  // If set, only Looker users who are members of this group can use this web app with Looker. If group_id is not set, any Looker user may use this app to access this Looker instance
  int64 group_id = 506361563;
}

// Dynamically generated writeable type for OIDCConfig removes properties:
  // can, default_new_user_groups, default_new_user_roles, groups, modified_at, modified_by, test_slug, user_attributes, url
message WriteOIDCConfig {
  // Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  bool alternate_email_login_allowed = 332315627;
  // OpenID Provider Audience
  string audience = 487814402;
  // Users will not be allowed to login at all unless a role for them is found in OIDC if set to true
  bool auth_requires_role = 488630792;
  // OpenID Provider Authorization Url
  string authorization_endpoint = 535116198;
  // (Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC
  repeated int64 default_new_user_group_ids = 91703103;
  // (Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC
  repeated int64 default_new_user_role_ids = 429566625;
  // Enable/Disable OIDC authentication for the server
  bool enabled = 402398511;
  // Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
  string groups_attribute = 407121539;
  // (Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids
  repeated OIDCGroupWrite groups_with_role_ids = 475300071;
  // Relying Party Identifier (provided by OpenID Provider)
  string identifier = 404608213;
  // OpenID Provider Issuer
  string issuer = 294789969;
  // Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
  string new_user_migration_types = 348180790;
  // Array of scopes to request.
  repeated string scopes = 453884336;
  // (Write-Only) Relying Party Secret (provided by OpenID Provider)
  string secret = 453138600;
  // Set user roles in Looker based on groups from OIDC
  bool set_roles_from_groups = 441288982;
  // OpenID Provider Token Url
  string token_endpoint = 495238427;
  // Name of user record attributes used to indicate email address field
  string user_attribute_map_email = 384506455;
  // Name of user record attributes used to indicate first name
  string user_attribute_map_first_name = 401269830;
  // Name of user record attributes used to indicate last name
  string user_attribute_map_last_name = 506361433;
  // (Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids
  repeated OIDCUserAttributeWrite user_attributes_with_ids = 514666905;
  // OpenID Provider User Information Url
  string userinfo_endpoint = 146023451;
  // Allow OIDC auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
  bool allow_normal_group_membership = 480346046;
  // OIDC auth'd users will inherit roles from non-reflected Looker groups.
  bool allow_roles_from_normal_groups = 302729383;
  // Allows roles to be directly assigned to OIDC auth'd users.
  bool allow_direct_roles = 315512839;
}

// Dynamically generated writeable type for PasswordConfig removes properties:
  // can
message WritePasswordConfig {
  // Minimum number of characters required for a new password.  Must be between 7 and 100
  int64 min_length = 355788614;
  // Require at least one numeric character
  bool require_numeric = 381969292;
  // Require at least one uppercase and one lowercase letter
  bool require_upperlower = 533074595;
  // Require at least one special character
  bool require_special = 379956471;
}

// Dynamically generated writeable type for PermissionSet removes properties:
  // can, all_access, built_in, id, url
message WritePermissionSet {
  // Name of PermissionSet
  string name = 3373707;
  repeated string permissions = 283426081;
}

// Dynamically generated writeable type for Project removes properties:
  // can, id, uses_git, is_example
message WriteProject {
  // Project display name
  string name = 3373707;
  // Git remote repository url
  string git_remote_url = 337946079;
  // Git username for HTTPS authentication. (For production only, if using user attributes.)
  string git_username = 393319598;
  // (Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)
  string git_password = 348030004;
  // User attribute name for username in per-user HTTPS authentication.
  string git_username_user_attribute = 430560495;
  // User attribute name for password in per-user HTTPS authentication.
  string git_password_user_attribute = 173008929;
  // Name of the git service provider
  string git_service_name = 481280695;
  // Port that HTTP(S) application server is running on (for PRs, file browsing, etc.)
  int64 git_application_server_http_port = 478877938;
  // Scheme that is running on application server (for PRs, file browsing, etc.) Valid values are: "http", "https".
  GitApplicationServerHttpScheme git_application_server_http_scheme = 452168167;
  // (Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated.
  string deploy_secret = 451554436;
  // (Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint.
  bool unset_deploy_secret = 465427100;
  // The git pull request policy for this project. Valid values are: "off", "links", "recommended", "required".
  PullRequestMode pull_request_mode = 421135683;
  // Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository
  bool validation_required = 427509330;
  // If true, advanced git release management is enabled for this project
  bool git_release_mgmt_enabled = 529764014;
  // Validation policy: If true, the project can be committed with warnings when `validation_required` is true. (`allow_warnings` does nothing if `validation_required` is false).
  bool allow_warnings = 320266972;
  // Status of dependencies in your manifest & lockfile
  string dependency_status = 50086042;
}

// Dynamically generated writeable type for Query removes properties:
  // can, id, slug, share_url, expanded_share_url, url, has_table_calculations
message WriteQuery {
  // Model
  string model = 104069929;
  // Explore Name
  string view = 3619493;
  // Fields
  repeated string fields = 318677073;
  // Pivots
  repeated string pivots = 493953479;
  // Fill Fields
  repeated string fill_fields = 491318906;
  // Filters
  map<string, string> filters = 427273730;
  // Filter Expression
  string filter_expression = 294547567;
  // Sorting for the query results. Use the format `["view.field", ...]` to sort on fields in ascending order. Use the format `["view.field desc", ...]` to sort on fields in descending order. Use `["__UNSORTED__"]` (2 underscores before and after) to disable sorting entirely. Empty sorts `[]` will trigger a default sort.
  repeated string sorts = 109624981;
  // Limit
  string limit = 102976443;
  // Column Limit
  string column_limit = 114546286;
  // Total
  bool total = 110549828;
  // Raw Total
  string row_total = 339028775;
  // Fields on which to run subtotals
  repeated string subtotals = 277302775;
  // Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A "type" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
  map<string, google.protobuf.Any> vis_config = 422614288;
  // The filter_config represents the state of the filter UI on the explore page for a given query. When running a query via the Looker UI, this parameter takes precedence over "filters". When creating a query or modifying an existing query, "filter_config" should be set to null. Setting it to any other value could cause unexpected filtering behavior. The format should be considered opaque.
  map<string, google.protobuf.Any> filter_config = 505106699;
  // Visible UI Sections
  string visible_ui_sections = 328103627;
  // Dynamic Fields
  string dynamic_fields = 74327737;
  // Client Id: used to generate shortened explore URLs. If set by client, must be a unique 22 character alphanumeric string. Otherwise one will be generated.
  string client_id = 476022396;
  // Query Timezone
  string query_timezone = 202424720;
}

// Dynamically generated writeable type for RepositoryCredential removes properties:
  // can, id, root_project_id, remote_url, is_configured
message WriteRepositoryCredential {
  // Git username for HTTPS authentication.
  string git_username = 393319598;
  // (Write-Only) Git password for HTTPS authentication.
  string git_password = 348030004;
  // Public deploy key for SSH authentication.
  string ssh_public_key = 461638024;
}

// Dynamically generated writeable type for ResultMakerWithIdVisConfigAndDynamicFields removes properties:
  // id, dynamic_fields, filterables, sorts, merge_result_id, total, query_id, sql_query_id, vis_config
message WriteResultMakerWithIdVisConfigAndDynamicFields {
  WriteQuery query = 107944136;
}

// Dynamically generated writeable type for Role removes properties:
  // can, id, url, users_url
message WriteRole {
  // Name of Role
  string name = 3373707;
  WritePermissionSet permission_set = 359445379;
  // (Write-Only) Id of permission set
  int64 permission_set_id = 379867460;
  WriteModelSet model_set = 502576493;
  // (Write-Only) Id of model set
  int64 model_set_id = 1141778;
}

// Dynamically generated writeable type for SamlConfig removes properties:
  // can, test_slug, modified_at, modified_by, default_new_user_roles, default_new_user_groups, groups, user_attributes, url
message WriteSamlConfig {
  // Enable/Disable Saml authentication for the server
  bool enabled = 402398511;
  // Identity Provider Certificate (provided by IdP)
  string idp_cert = 164795758;
  // Identity Provider Url (provided by IdP)
  string idp_url = 416975417;
  // Identity Provider Issuer (provided by IdP)
  string idp_issuer = 360328317;
  // Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.
  string idp_audience = 473436179;
  // Count of seconds of clock drift to allow when validating timestamps of assertions.
  int64 allowed_clock_drift = 494276104;
  // Name of user record attributes used to indicate email address field
  string user_attribute_map_email = 384506455;
  // Name of user record attributes used to indicate first name
  string user_attribute_map_first_name = 401269830;
  // Name of user record attributes used to indicate last name
  string user_attribute_map_last_name = 506361433;
  // Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
  string new_user_migration_types = 348180790;
  // Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  bool alternate_email_login_allowed = 332315627;
  // (Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml
  repeated int64 default_new_user_role_ids = 429566625;
  // (Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml
  repeated int64 default_new_user_group_ids = 91703103;
  // Set user roles in Looker based on groups from Saml
  bool set_roles_from_groups = 441288982;
  // Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
  string groups_attribute = 407121539;
  // (Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids
  repeated SamlGroupWrite groups_with_role_ids = 475300071;
  // Users will not be allowed to login at all unless a role for them is found in Saml if set to true
  bool auth_requires_role = 488630792;
  // (Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids
  repeated SamlUserAttributeWrite user_attributes_with_ids = 514666905;
  // Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']
  string groups_finder_type = 336365796;
  // Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'
  string groups_member_value = 400280826;
  // Bypass the login page when user authentication is required. Redirect to IdP immediately instead.
  bool bypass_login_page = 349317458;
  // Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
  bool allow_normal_group_membership = 480346046;
  // SAML auth'd users will inherit roles from non-reflected Looker groups.
  bool allow_roles_from_normal_groups = 302729383;
  // Allows roles to be directly assigned to SAML auth'd users.
  bool allow_direct_roles = 315512839;
}

// Dynamically generated writeable type for ScheduledPlan removes properties:
  // id, created_at, updated_at, title, user, next_run_at, last_run_at, can
message WriteScheduledPlan {
  // Name of this scheduled plan
  string name = 3373707;
  // User Id which owns this scheduled plan
  int64 user_id = 147132913;
  // Whether schedule is run as recipient (only applicable for email recipients)
  bool run_as_recipient = 296373536;
  // Whether the ScheduledPlan is enabled
  bool enabled = 402398511;
  // Id of a look
  int64 look_id = 349778619;
  // Id of a dashboard
  int64 dashboard_id = 496187565;
  // Id of a LookML dashboard
  string lookml_dashboard_id = 339184839;
  // Query string to run look or dashboard with
  string filters_string = 109992149;
  // (DEPRECATED) Alias for filters_string field
  string dashboard_filters = 454602920;
  // Delivery should occur if running the dashboard or look returns results
  bool require_results = 330870556;
  // Delivery should occur if the dashboard look does not return results
  bool require_no_results = 420497737;
  // Delivery should occur if data have changed since the last run
  bool require_change = 381228813;
  // Will run an unlimited query and send all results.
  bool send_all_results = 335604919;
  // Vixie-Style crontab specification when to run
  string crontab = 519088419;
  // Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)
  string datagroup = 356040427;
  // Timezone for interpreting the specified crontab (default is Looker instance timezone)
  string timezone = 519056897;
  // Query id
  string query_id = 291663619;
  // Scheduled plan destinations
  repeated ScheduledPlanDestination scheduled_plan_destination = 354055597;
  // Whether the plan in question should only be run once (usually for testing)
  bool run_once = 407993818;
  // Whether links back to Looker should be included in this ScheduledPlan
  bool include_links = 386647463;
  // The size of paper the PDF should be formatted to fit. Valid values are: "letter", "legal", "tabloid", "a0", "a1", "a2", "a3", "a4", "a5".
  string pdf_paper_size = 491759120;
  // Whether the PDF should be formatted for landscape orientation
  bool pdf_landscape = 359176724;
  // Whether this schedule is in an embed context or not
  bool embed = 96620249;
  // Color scheme of the dashboard if applicable
  string color_theme = 331361403;
  // Whether or not to expand table vis to full length
  bool long_tables = 359736222;
  // The pixel width at which we render the inline table visualizations
  int64 inline_table_width = 484902747;
}

// Dynamically generated writeable type for SessionConfig removes properties:
  // can
message WriteSessionConfig {
  // Allow users to have persistent sessions when they login
  bool allow_persistent_sessions = 319921999;
  // Number of minutes for user sessions.  Must be between 5 and 43200
  int64 session_minutes = 457960434;
  // Allow users to have an unbounded number of concurrent sessions (otherwise, users will be limited to only one session at a time).
  bool unlimited_sessions_per_user = 344212172;
  // Enforce session logout for sessions that are inactive for 15 minutes.
  bool use_inactivity_based_logout = 353744386;
  // Track location of session when user logs in.
  bool track_session_location = 531851756;
}

// Dynamically generated writeable type for SshServer removes properties:
  // ssh_server_id, finger_print, sha_finger_print, public_key, status
message WriteSshServer {
  // The name to identify this SSH Server
  string ssh_server_name = 432527764;
  // The hostname or ip address of the SSH Server
  string ssh_server_host = 432486491;
  // The port to connect to on the SSH Server
  int64 ssh_server_port = 432546065;
  // The username used to connect to the SSH Server
  string ssh_server_user = 432584164;
}

// Dynamically generated writeable type for SshTunnel removes properties:
  // tunnel_id, ssh_server_name, ssh_server_host, ssh_server_port, ssh_server_user, last_attempt, local_host_port, status
message WriteSshTunnel {
  // SSH Server ID
  string ssh_server_id = 326923896;
  // Hostname or IP Address of the Database Server
  string database_host = 332770181;
  // Port that the Database Server is listening on
  int64 database_port = 332710606;
}

// Dynamically generated writeable type for Theme removes properties:
  // can, id
message WriteTheme {
  // Timestamp for when this theme becomes active. Null=always
  google.protobuf.Timestamp begin_at = 372355810;
  // Timestamp for when this theme expires. Null=never
  google.protobuf.Timestamp end_at = 324690554;
  // Name of theme. Can only be alphanumeric and underscores.
  string name = 3373707;
  ThemeSettings settings = 358657800;
}

// Dynamically generated writeable type for User removes properties:
  // can, avatar_url, avatar_url_without_sizing, credentials_api3, credentials_embed, credentials_google, credentials_ldap, credentials_looker_openid, credentials_oidc, credentials_saml, credentials_totp, display_name, email, embed_group_space_id, group_ids, id, looker_versions, personal_folder_id, presumed_looker_employee, role_ids, sessions, verified_looker_employee, roles_externally_managed, allow_direct_roles, allow_normal_group_membership, allow_roles_from_normal_groups, url
message WriteUser {
  WriteCredentialsEmail credentials_email = 395554227;
  // First name
  string first_name = 160985414;
  // ID string for user's home folder
  string home_folder_id = 126256340;
  // Account has been disabled
  bool is_disabled = 464089615;
  // Last name
  string last_name = 503280549;
  // User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example.
  string locale = 274365545;
  // User's dev workspace has been checked for presence of applicable production projects
  bool models_dir_validated = 476587036;
  // Per user dictionary of undocumented state information owned by the Looker UI.
  map<string, string> ui_state = 360744045;
}

// Dynamically generated writeable type for UserAttribute removes properties:
  // can, id, is_system, is_permanent
message WriteUserAttribute {
  // Name of user attribute
  string name = 3373707;
  // Human-friendly label for user attribute
  string label = 102727412;
  // Type of user attribute ("string", "number", "datetime", "yesno", "zipcode")
  string type = 3575610;
  // Default value for when no value is set on the user
  string default_value = 329667964;
  // If true, users will not be able to view values of this attribute
  bool value_is_hidden = 386768708;
  // Non-admin users can see the values of their attributes and use them in filters
  bool user_can_view = 75812952;
  // Users can change the value of this attribute for themselves
  bool user_can_edit = 76324083;
  // Destinations to which a hidden attribute may be sent. Once set, cannot be edited.
  string hidden_value_domain_whitelist = 389149836;
}

// Dynamically generated writeable type for UserAttributeWithValue removes properties:
  // can, name, label, rank, user_id, user_can_edit, value_is_hidden, user_attribute_id, source, hidden_value_domain_whitelist
message WriteUserAttributeWithValue {
  // Value of attribute for user
  string value = 111972721;
}

// Dynamically generated writeable type for WhitelabelConfiguration removes properties:
  // can, id, logo_url, favicon_url
message WriteWhitelabelConfiguration {
  // Customer logo image. Expected base64 encoded data (write-only)
  string logo_file = 390205724;
  // Custom favicon image. Expected base64 encoded data (write-only)
  string favicon_file = 516846492;
  // Default page title
  string default_title = 329267638;
  // Boolean to toggle showing help menus
  bool show_help_menu = 295555474;
  // Boolean to toggle showing docs
  bool show_docs = 475949680;
  // Boolean to toggle showing email subscription options.
  bool show_email_sub_options = 482126522;
  // Boolean to toggle mentions of Looker in emails
  bool allow_looker_mentions = 454767734;
  // Boolean to toggle links to Looker in emails
  bool allow_looker_links = 142583420;
  // Allow subject line and email heading customization in customized emails”
  bool custom_welcome_email_advanced = 25101424;
  // Remove the word Looker from appearing in the account setup page
  bool setup_mentions = 311522906;
  // Remove Looker logo from Alerts
  bool alerts_logo = 51977645;
  // Remove Looker links from Alerts
  bool alerts_links = 402869755;
  // Remove Looker mentions in home folder page when you don’t have any items saved
  bool folders_mentions = 269755200;
}

message LoginRequest {
  // client_id part of API3 Key.
  string client_id = 476022396;
  // client_secret part of API3 Key.
  string client_secret = 278906578;
}

message LoginResponse {
  // Access token with metadata.
  AccessToken result = 1;
}

message LoginUserRequest {
  // Id of user.
  int64 user_id = 147132913;
  // When true (default), API calls using the returned access_token are attributed to the admin user who created the access_token. When false, API activity is attributed to the user the access_token runs as. False requires a looker license.
  bool associative = 87499439;
}

message LoginUserResponse {
  // Access token with metadata.
  AccessToken result = 1;
}

message LogoutRequest {
  
}

message LogoutResponse {
  // Logged out successfully.
  string result = 1;
}

message CreateSsoEmbedUrlRequest {
  EmbedSsoParams body = 3029410;
}

message CreateSsoEmbedUrlResponse {
  // Signed SSO URL
  EmbedUrlResponse result = 1;
}

message CreateEmbedUrlAsMeRequest {
  EmbedParams body = 3029410;
}

message CreateEmbedUrlAsMeResponse {
  // Embed URL
  EmbedUrlResponse result = 1;
}

message LdapConfigRequest {
  
}

message LdapConfigResponse {
  // LDAP Configuration.
  LDAPConfig result = 1;
}

message UpdateLdapConfigRequest {
  LDAPConfig body = 3029410;
}

message UpdateLdapConfigResponse {
  // New state for LDAP Configuration.
  LDAPConfig result = 1;
}

message TestLdapConfigConnectionRequest {
  LDAPConfig body = 3029410;
}

message TestLdapConfigConnectionResponse {
  // Result info.
  LDAPConfigTestResult result = 1;
}

message TestLdapConfigAuthRequest {
  LDAPConfig body = 3029410;
}

message TestLdapConfigAuthResponse {
  // Result info.
  LDAPConfigTestResult result = 1;
}

message TestLdapConfigUserInfoRequest {
  LDAPConfig body = 3029410;
}

message TestLdapConfigUserInfoResponse {
  // Result info.
  LDAPConfigTestResult result = 1;
}

message TestLdapConfigUserAuthRequest {
  LDAPConfig body = 3029410;
}

message TestLdapConfigUserAuthResponse {
  // Result info.
  LDAPConfigTestResult result = 1;
}

message AllOauthClientAppsRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllOauthClientAppsResponse {
  // OAuth Client App
  repeated OauthClientApp result = 1;
}

message AllOauthClientAppsStreamResponse {
  // OAuth Client App
  OauthClientApp result = 1;
}

message OauthClientAppRequest {
  // The unique id of this application
  string client_guid = 174062979;
  // Requested fields.
  string fields = 318677073;
}

message OauthClientAppResponse {
  // OAuth Client App
  OauthClientApp result = 1;
}

message RegisterOauthClientAppRequest {
  // The unique id of this application
  string client_guid = 174062979;
  OauthClientApp body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message RegisterOauthClientAppResponse {
  // OAuth Client App
  OauthClientApp result = 1;
}

message UpdateOauthClientAppRequest {
  // The unique id of this application
  string client_guid = 174062979;
  OauthClientApp body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateOauthClientAppResponse {
  // OAuth Client App
  OauthClientApp result = 1;
}

message DeleteOauthClientAppRequest {
  // The unique id of this application
  string client_guid = 174062979;
}

message DeleteOauthClientAppResponse {
  // Successfully deleted.
  string result = 1;
}

message InvalidateTokensRequest {
  // The unique id of the application
  string client_guid = 174062979;
}

message InvalidateTokensResponse {
  // Successfully deleted.
  string result = 1;
}

message ActivateAppUserRequest {
  // The unique id of this application
  string client_guid = 174062979;
  // The id of the user to enable use of this app
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message ActivateAppUserResponse {
  
}

message DeactivateAppUserRequest {
  // The unique id of this application
  string client_guid = 174062979;
  // The id of the user to enable use of this app
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message DeactivateAppUserResponse {
  // Successfully deleted.
  string result = 1;
}

message OidcConfigRequest {
  
}

message OidcConfigResponse {
  // OIDC Configuration.
  OIDCConfig result = 1;
}

message UpdateOidcConfigRequest {
  OIDCConfig body = 3029410;
}

message UpdateOidcConfigResponse {
  // New state for OIDC Configuration.
  OIDCConfig result = 1;
}

message OidcTestConfigRequest {
  // Slug of test config
  string test_slug = 295036274;
}

message OidcTestConfigResponse {
  // OIDC test config.
  OIDCConfig result = 1;
}

message DeleteOidcTestConfigRequest {
  // Slug of test config
  string test_slug = 295036274;
}

message DeleteOidcTestConfigResponse {
  // Test config succssfully deleted.
  string result = 1;
}

message CreateOidcTestConfigRequest {
  OIDCConfig body = 3029410;
}

message CreateOidcTestConfigResponse {
  // OIDC test config
  OIDCConfig result = 1;
}

message PasswordConfigRequest {
  
}

message PasswordConfigResponse {
  // Password Config
  PasswordConfig result = 1;
}

message UpdatePasswordConfigRequest {
  PasswordConfig body = 3029410;
}

message UpdatePasswordConfigResponse {
  // Password Config
  PasswordConfig result = 1;
}

message ForcePasswordResetAtNextLoginForAllUsersRequest {
  
}

message ForcePasswordResetAtNextLoginForAllUsersResponse {
  // Password Config
  string result = 1;
}

message SamlConfigRequest {
  
}

message SamlConfigResponse {
  // SAML Configuration.
  SamlConfig result = 1;
}

message UpdateSamlConfigRequest {
  SamlConfig body = 3029410;
}

message UpdateSamlConfigResponse {
  // New state for SAML Configuration.
  SamlConfig result = 1;
}

message SamlTestConfigRequest {
  // Slug of test config
  string test_slug = 295036274;
}

message SamlTestConfigResponse {
  // SAML test config.
  SamlConfig result = 1;
}

message DeleteSamlTestConfigRequest {
  // Slug of test config
  string test_slug = 295036274;
}

message DeleteSamlTestConfigResponse {
  // Test config succssfully deleted.
  string result = 1;
}

message CreateSamlTestConfigRequest {
  SamlConfig body = 3029410;
}

message CreateSamlTestConfigResponse {
  // SAML test config
  SamlConfig result = 1;
}

message ParseSamlIdpMetadataRequest {
  string body = 3029410;
}

message ParseSamlIdpMetadataResponse {
  // Parse result
  SamlMetadataParseResult result = 1;
}

message FetchAndParseSamlIdpMetadataRequest {
  string body = 3029410;
}

message FetchAndParseSamlIdpMetadataResponse {
  // Parse result
  SamlMetadataParseResult result = 1;
}

message SessionConfigRequest {
  
}

message SessionConfigResponse {
  // Session Config
  SessionConfig result = 1;
}

message UpdateSessionConfigRequest {
  SessionConfig body = 3029410;
}

message UpdateSessionConfigResponse {
  // Session Config
  SessionConfig result = 1;
}

message AllUserLoginLockoutsRequest {
  // Include only these fields in the response
  string fields = 318677073;
}

message AllUserLoginLockoutsResponse {
  // User Login Lockout
  repeated UserLoginLockout result = 1;
}

message AllUserLoginLockoutsStreamResponse {
  // User Login Lockout
  UserLoginLockout result = 1;
}

message SearchUserLoginLockoutsRequest {
  // Include only these fields in the response
  string fields = 318677073;
  // Return only page N of paginated results
  int64 page = 3433103;
  // Return N rows of data per page
  int64 per_page = 424711281;
  // Fields to sort by.
  string sorts = 109624981;
  // Auth type user is locked out for (email, ldap, totp, api)
  string auth_type = 365227228;
  // Match name
  string full_name = 419294065;
  // Match email
  string email = 96619420;
  // Match remote LDAP ID
  string remote_id = 320131821;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
}

message SearchUserLoginLockoutsResponse {
  // User Login Lockout
  repeated UserLoginLockout result = 1;
}

message SearchUserLoginLockoutsStreamResponse {
  // User Login Lockout
  UserLoginLockout result = 1;
}

message DeleteUserLoginLockoutRequest {
  // The key associated with the locked user
  string key = 106079;
}

message DeleteUserLoginLockoutResponse {
  // Successfully deleted.
  string result = 1;
}

message AllBoardsRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllBoardsResponse {
  // Board
  repeated Board result = 1;
}

message AllBoardsStreamResponse {
  // Board
  Board result = 1;
}

message CreateBoardRequest {
  Board body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateBoardResponse {
  // Board
  Board result = 1;
}

message SearchBoardsRequest {
  // Matches board title.
  string title = 110371416;
  // Matches the timestamp for when the board was created.
  string created_at = 342420026;
  // The first name of the user who created this board.
  string first_name = 160985414;
  // The last name of the user who created this board.
  string last_name = 503280549;
  // Requested fields.
  string fields = 318677073;
  // Return favorited boards when true.
  bool favorited = 446309742;
  // Filter on boards created by a particular user.
  string creator_id = 344833155;
  // The fields to sort the results by
  string sorts = 109624981;
  // The page to return.
  int64 page = 3433103;
  // The number of items in the returned page.
  int64 per_page = 424711281;
  // The number of items to skip before returning any. (used with limit and takes priority over page and per_page)
  int64 offset = 509889974;
  // The maximum number of items to return. (used with offset and takes priority over page and per_page)
  int64 limit = 102976443;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
}

message SearchBoardsResponse {
  // boards
  repeated Board result = 1;
}

message SearchBoardsStreamResponse {
  // boards
  Board result = 1;
}

message BoardRequest {
  // Id of board
  int64 board_id = 402691141;
  // Requested fields.
  string fields = 318677073;
}

message BoardResponse {
  // Board
  Board result = 1;
}

message UpdateBoardRequest {
  // Id of board
  int64 board_id = 402691141;
  Board body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateBoardResponse {
  // Board
  Board result = 1;
}

message DeleteBoardRequest {
  // Id of board
  int64 board_id = 402691141;
}

message DeleteBoardResponse {
  // Successfully deleted.
  string result = 1;
}

message AllBoardItemsRequest {
  // Requested fields.
  string fields = 318677073;
  // Fields to sort by.
  string sorts = 109624981;
  // Filter to a specific board section
  string board_section_id = 501228011;
}

message AllBoardItemsResponse {
  // Board Item
  repeated BoardItem result = 1;
}

message AllBoardItemsStreamResponse {
  // Board Item
  BoardItem result = 1;
}

message CreateBoardItemRequest {
  BoardItem body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateBoardItemResponse {
  // Board Item
  BoardItem result = 1;
}

message BoardItemRequest {
  // Id of board item
  int64 board_item_id = 428047177;
  // Requested fields.
  string fields = 318677073;
}

message BoardItemResponse {
  // Board Item
  BoardItem result = 1;
}

message UpdateBoardItemRequest {
  // Id of board item
  int64 board_item_id = 428047177;
  BoardItem body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateBoardItemResponse {
  // Board Item
  BoardItem result = 1;
}

message DeleteBoardItemRequest {
  // Id of board_item
  int64 board_item_id = 428047177;
}

message DeleteBoardItemResponse {
  // Successfully deleted.
  string result = 1;
}

message AllBoardSectionsRequest {
  // Requested fields.
  string fields = 318677073;
  // Fields to sort by.
  string sorts = 109624981;
}

message AllBoardSectionsResponse {
  // Board section
  repeated BoardSection result = 1;
}

message AllBoardSectionsStreamResponse {
  // Board section
  BoardSection result = 1;
}

message CreateBoardSectionRequest {
  BoardSection body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateBoardSectionResponse {
  // Board section
  BoardSection result = 1;
}

message BoardSectionRequest {
  // Id of board section
  int64 board_section_id = 501228011;
  // Requested fields.
  string fields = 318677073;
}

message BoardSectionResponse {
  // Board section
  BoardSection result = 1;
}

message UpdateBoardSectionRequest {
  // Id of board section
  int64 board_section_id = 501228011;
  BoardSection body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateBoardSectionResponse {
  // Board section
  BoardSection result = 1;
}

message DeleteBoardSectionRequest {
  // Id of board section
  int64 board_section_id = 501228011;
}

message DeleteBoardSectionResponse {
  // Successfully deleted.
  string result = 1;
}

message AllColorCollectionsRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllColorCollectionsResponse {
  // ColorCollections
  repeated ColorCollection result = 1;
}

message AllColorCollectionsStreamResponse {
  // ColorCollections
  ColorCollection result = 1;
}

message CreateColorCollectionRequest {
  ColorCollection body = 3029410;
}

message CreateColorCollectionResponse {
  // ColorCollection
  ColorCollection result = 1;
}

message ColorCollectionsCustomRequest {
  // Requested fields.
  string fields = 318677073;
}

message ColorCollectionsCustomResponse {
  // ColorCollections
  repeated ColorCollection result = 1;
}

message ColorCollectionsCustomStreamResponse {
  // ColorCollections
  ColorCollection result = 1;
}

message ColorCollectionsStandardRequest {
  // Requested fields.
  string fields = 318677073;
}

message ColorCollectionsStandardResponse {
  // ColorCollections
  repeated ColorCollection result = 1;
}

message ColorCollectionsStandardStreamResponse {
  // ColorCollections
  ColorCollection result = 1;
}

message DefaultColorCollectionRequest {
  
}

message DefaultColorCollectionResponse {
  // ColorCollection
  ColorCollection result = 1;
}

message SetDefaultColorCollectionRequest {
  // ID of color collection to set as default
  string collection_id = 410621138;
}

message SetDefaultColorCollectionResponse {
  // ColorCollection
  ColorCollection result = 1;
}

message ColorCollectionRequest {
  // Id of Color Collection
  string collection_id = 410621138;
  // Requested fields.
  string fields = 318677073;
}

message ColorCollectionResponse {
  // ColorCollection
  ColorCollection result = 1;
}

message UpdateColorCollectionRequest {
  // Id of Custom Color Collection
  string collection_id = 410621138;
  ColorCollection body = 3029410;
}

message UpdateColorCollectionResponse {
  // ColorCollection
  ColorCollection result = 1;
}

message DeleteColorCollectionRequest {
  // Id of Color Collection
  string collection_id = 410621138;
}

message DeleteColorCollectionResponse {
  // Successfully deleted.
  string result = 1;
}

message GetAllCommandsRequest {
  // Id of the associated content. This must be accompanied with content_type.
  string content_id = 264552097;
  // Type of the associated content. This must be accompanied with content_id.
  string content_type = 415923104;
  // Number of results to return.
  int64 limit = 102976443;
}

message GetAllCommandsResponse {
  // Commands
  repeated Command result = 1;
}

message GetAllCommandsStreamResponse {
  // Commands
  Command result = 1;
}

message CreateCommandRequest {
  Command body = 3029410;
}

message CreateCommandResponse {
  // The command is saved.
  Command result = 1;
}

message UpdateCommandRequest {
  // ID of a command
  int64 command_id = 392078663;
  UpdateCommand body = 3029410;
}

message UpdateCommandResponse {
  // The command is updated.
  Command result = 1;
}

message DeleteCommandRequest {
  // ID of a command
  int64 command_id = 392078663;
}

message DeleteCommandResponse {
  // The command is deleted.
}

message CloudStorageConfigurationRequest {
  
}

message CloudStorageConfigurationResponse {
  // Current Cloud Storage Configuration
  BackupConfiguration result = 1;
}

message UpdateCloudStorageConfigurationRequest {
  BackupConfiguration body = 3029410;
}

message UpdateCloudStorageConfigurationResponse {
  // New state for specified model set.
  BackupConfiguration result = 1;
}

message CustomWelcomeEmailRequest {
  
}

message CustomWelcomeEmailResponse {
  // Custom Welcome Email
  CustomWelcomeEmail result = 1;
}

message UpdateCustomWelcomeEmailRequest {
  CustomWelcomeEmail body = 3029410;
  // If true a test email with the content from the request will be sent to the current user after saving
  bool send_test_welcome_email = 416442261;
}

message UpdateCustomWelcomeEmailResponse {
  // Custom Welcome Email
  CustomWelcomeEmail result = 1;
}

message UpdateCustomWelcomeEmailTestRequest {
  WelcomeEmailTest body = 3029410;
}

message UpdateCustomWelcomeEmailTestResponse {
  // Send Test Welcome Email
  WelcomeEmailTest result = 1;
}

message DigestEmailsEnabledRequest {
  
}

message DigestEmailsEnabledResponse {
  // Digest_emails
  DigestEmails result = 1;
}

message UpdateDigestEmailsEnabledRequest {
  DigestEmails body = 3029410;
}

message UpdateDigestEmailsEnabledResponse {
  // Digest_emails
  DigestEmails result = 1;
}

message CreateDigestEmailSendRequest {
  
}

message CreateDigestEmailSendResponse {
  // Status of generating and sending the data
  DigestEmailSend result = 1;
}

message InternalHelpResourcesContentRequest {
  
}

message InternalHelpResourcesContentResponse {
  // Internal Help Resources Content
  InternalHelpResourcesContent result = 1;
}

message UpdateInternalHelpResourcesContentRequest {
  InternalHelpResourcesContent body = 3029410;
}

message UpdateInternalHelpResourcesContentResponse {
  // Internal Help Resources Content
  InternalHelpResourcesContent result = 1;
}

message InternalHelpResourcesRequest {
  
}

message InternalHelpResourcesResponse {
  // Internal Help Resources
  InternalHelpResources result = 1;
}

message UpdateInternalHelpResourcesRequest {
  InternalHelpResources body = 3029410;
}

message UpdateInternalHelpResourcesResponse {
  // Custom Welcome Email
  InternalHelpResources result = 1;
}

message AllLegacyFeaturesRequest {
  
}

message AllLegacyFeaturesResponse {
  // Legacy Feature
  repeated LegacyFeature result = 1;
}

message AllLegacyFeaturesStreamResponse {
  // Legacy Feature
  LegacyFeature result = 1;
}

message LegacyFeatureRequest {
  // id of legacy feature
  string legacy_feature_id = 318344547;
}

message LegacyFeatureResponse {
  // Legacy Feature
  LegacyFeature result = 1;
}

message UpdateLegacyFeatureRequest {
  // id of legacy feature
  string legacy_feature_id = 318344547;
  LegacyFeature body = 3029410;
}

message UpdateLegacyFeatureResponse {
  // Legacy Feature
  LegacyFeature result = 1;
}

message AllLocalesRequest {
  
}

message AllLocalesResponse {
  // Locale
  repeated Locale result = 1;
}

message AllLocalesStreamResponse {
  // Locale
  Locale result = 1;
}

message AllTimezonesRequest {
  
}

message AllTimezonesResponse {
  // Timezone
  repeated Timezone result = 1;
}

message AllTimezonesStreamResponse {
  // Timezone
  Timezone result = 1;
}

message VersionsRequest {
  // Requested fields.
  string fields = 318677073;
}

message VersionsResponse {
  // ApiVersion
  ApiVersion result = 1;
}

message WhitelabelConfigurationRequest {
  // Requested fields.
  string fields = 318677073;
}

message WhitelabelConfigurationResponse {
  // Whitelabel configuration
  WhitelabelConfiguration result = 1;
}

message UpdateWhitelabelConfigurationRequest {
  WhitelabelConfiguration body = 3029410;
}

message UpdateWhitelabelConfigurationResponse {
  // Whitelabel configuration
  WhitelabelConfiguration result = 1;
}

message AllConnectionsRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllConnectionsResponse {
  // Connection
  repeated DBConnection result = 1;
}

message AllConnectionsStreamResponse {
  // Connection
  DBConnection result = 1;
}

message CreateConnectionRequest {
  DBConnection body = 3029410;
}

message CreateConnectionResponse {
  // Connection
  DBConnection result = 1;
}

message ConnectionRequest {
  // Name of connection
  string connection_name = 365832102;
  // Requested fields.
  string fields = 318677073;
}

message ConnectionResponse {
  // Connection
  DBConnection result = 1;
}

message UpdateConnectionRequest {
  // Name of connection
  string connection_name = 365832102;
  DBConnection body = 3029410;
}

message UpdateConnectionResponse {
  // Connection
  DBConnection result = 1;
}

message DeleteConnectionRequest {
  // Name of connection
  string connection_name = 365832102;
}

message DeleteConnectionResponse {
  // Successfully deleted.
  string result = 1;
}

message DeleteConnectionOverrideRequest {
  // Name of connection
  string connection_name = 365832102;
  // Context of connection override
  string override_context = 284763377;
}

message DeleteConnectionOverrideResponse {
  // Successfully deleted.
  string result = 1;
}

message TestConnectionRequest {
  // Name of connection
  string connection_name = 365832102;
  // Array of names of tests to run
  string tests = 110251553;
}

message TestConnectionResponse {
  // Test results
  repeated DBConnectionTestResult result = 1;
}

message TestConnectionStreamResponse {
  // Test results
  DBConnectionTestResult result = 1;
}

message TestConnectionConfigRequest {
  DBConnection body = 3029410;
  // Array of names of tests to run
  string tests = 110251553;
}

message TestConnectionConfigResponse {
  // Test results
  repeated DBConnectionTestResult result = 1;
}

message TestConnectionConfigStreamResponse {
  // Test results
  DBConnectionTestResult result = 1;
}

message AllDialectInfosRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllDialectInfosResponse {
  // Dialect Info
  repeated DialectInfo result = 1;
}

message AllDialectInfosStreamResponse {
  // Dialect Info
  DialectInfo result = 1;
}

message AllExternalOauthApplicationsRequest {
  // Application name
  string name = 3373707;
  // Application Client ID
  string client_id = 476022396;
}

message AllExternalOauthApplicationsResponse {
  // External OAuth Application.  This is an OAuth Application which Looker uses to access external systems.
  repeated ExternalOauthApplication result = 1;
}

message AllExternalOauthApplicationsStreamResponse {
  // External OAuth Application.  This is an OAuth Application which Looker uses to access external systems.
  ExternalOauthApplication result = 1;
}

message CreateExternalOauthApplicationRequest {
  ExternalOauthApplication body = 3029410;
}

message CreateExternalOauthApplicationResponse {
  // External OAuth Application.  This is an OAuth Application which Looker uses to access external systems.
  ExternalOauthApplication result = 1;
}

message AllSshServersRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllSshServersResponse {
  // SSH Server
  repeated SshServer result = 1;
}

message AllSshServersStreamResponse {
  // SSH Server
  SshServer result = 1;
}

message CreateSshServerRequest {
  SshServer body = 3029410;
}

message CreateSshServerResponse {
  // SSH Server
  SshServer result = 1;
}

message SshServerRequest {
  // Id of SSH Server
  string ssh_server_id = 326923896;
}

message SshServerResponse {
  // SSH Server
  SshServer result = 1;
}

message UpdateSshServerRequest {
  // Id of SSH Server
  string ssh_server_id = 326923896;
  SshServer body = 3029410;
}

message UpdateSshServerResponse {
  // SSH Server
  SshServer result = 1;
}

message DeleteSshServerRequest {
  // Id of SSH Server
  string ssh_server_id = 326923896;
}

message DeleteSshServerResponse {
  // Successfully deleted.
  string result = 1;
}

message TestSshServerRequest {
  // Id of SSH Server
  string ssh_server_id = 326923896;
}

message TestSshServerResponse {
  // Test SSH Server
  SshServer result = 1;
}

message AllSshTunnelsRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllSshTunnelsResponse {
  // SSH Tunnel
  repeated SshTunnel result = 1;
}

message AllSshTunnelsStreamResponse {
  // SSH Tunnel
  SshTunnel result = 1;
}

message CreateSshTunnelRequest {
  SshTunnel body = 3029410;
}

message CreateSshTunnelResponse {
  // SSH Tunnel
  SshTunnel result = 1;
}

message SshTunnelRequest {
  // Id of SSH Tunnel
  string ssh_tunnel_id = 484247845;
}

message SshTunnelResponse {
  // SSH Tunnel
  SshTunnel result = 1;
}

message UpdateSshTunnelRequest {
  // Id of SSH Tunnel
  string ssh_tunnel_id = 484247845;
  SshTunnel body = 3029410;
}

message UpdateSshTunnelResponse {
  // SSH Tunnel
  SshTunnel result = 1;
}

message DeleteSshTunnelRequest {
  // Id of SSH Tunnel
  string ssh_tunnel_id = 484247845;
}

message DeleteSshTunnelResponse {
  // Successfully deleted.
  string result = 1;
}

message TestSshTunnelRequest {
  // Id of SSH Tunnel
  string ssh_tunnel_id = 484247845;
}

message TestSshTunnelResponse {
  // Test SSH Tunnel
  SshTunnel result = 1;
}

message SshPublicKeyRequest {
  
}

message SshPublicKeyResponse {
  // SSH Public Key
  SshPublicKey result = 1;
}

message SearchContentFavoritesRequest {
  // Match content favorite id(s)
  int64 id = 3355;
  // Match user id(s).To create a list of multiple ids, use commas as separators
  string user_id = 147132913;
  // Match content metadata id(s).To create a list of multiple ids, use commas as separators
  string content_metadata_id = 293222822;
  // Match dashboard id(s).To create a list of multiple ids, use commas as separators
  string dashboard_id = 496187565;
  // Match look id(s).To create a list of multiple ids, use commas as separators
  string look_id = 349778619;
  // Match board id(s).To create a list of multiple ids, use commas as separators
  string board_id = 402691141;
  // Number of results to return. (used with offset)
  int64 limit = 102976443;
  // Number of results to skip before returning any. (used with limit)
  int64 offset = 509889974;
  // Fields to sort by.
  string sorts = 109624981;
  // Requested fields.
  string fields = 318677073;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
}

message SearchContentFavoritesResponse {
  // Favorite Content
  repeated ContentFavorite result = 1;
}

message SearchContentFavoritesStreamResponse {
  // Favorite Content
  ContentFavorite result = 1;
}

message ContentFavoriteRequest {
  // Id of favorite content
  int64 content_favorite_id = 403544586;
  // Requested fields.
  string fields = 318677073;
}

message ContentFavoriteResponse {
  // Favorite Content
  ContentFavorite result = 1;
}

message DeleteContentFavoriteRequest {
  // Id of favorite content
  int64 content_favorite_id = 403544586;
}

message DeleteContentFavoriteResponse {
  // Successfully deleted.
  string result = 1;
}

message CreateContentFavoriteRequest {
  ContentFavorite body = 3029410;
}

message CreateContentFavoriteResponse {
  // Favorite Content
  ContentFavorite result = 1;
}

message AllContentMetadatasRequest {
  // Parent space of content.
  int64 parent_id = 517581876;
  // Requested fields.
  string fields = 318677073;
}

message AllContentMetadatasResponse {
  // Content Metadata
  repeated ContentMeta result = 1;
}

message AllContentMetadatasStreamResponse {
  // Content Metadata
  ContentMeta result = 1;
}

message ContentMetadataRequest {
  // Id of content metadata
  int64 content_metadata_id = 293222822;
  // Requested fields.
  string fields = 318677073;
}

message ContentMetadataResponse {
  // Content Metadata
  ContentMeta result = 1;
}

message UpdateContentMetadataRequest {
  // Id of content metadata
  int64 content_metadata_id = 293222822;
  ContentMeta body = 3029410;
}

message UpdateContentMetadataResponse {
  // Content Metadata
  ContentMeta result = 1;
}

message AllContentMetadataAccessesRequest {
  // Id of content metadata
  int64 content_metadata_id = 293222822;
  // Requested fields.
  string fields = 318677073;
}

message AllContentMetadataAccessesResponse {
  // Content Metadata Access
  repeated ContentMetaGroupUser result = 1;
}

message AllContentMetadataAccessesStreamResponse {
  // Content Metadata Access
  ContentMetaGroupUser result = 1;
}

message CreateContentMetadataAccessRequest {
  ContentMetaGroupUser body = 3029410;
  // Optionally sends notification email when granting access to a board.
  bool send_boards_notification_email = 49054589;
}

message CreateContentMetadataAccessResponse {
  // Content Metadata Access
  ContentMetaGroupUser result = 1;
}

message UpdateContentMetadataAccessRequest {
  // Id of content metadata access
  string content_metadata_access_id = 311738150;
  ContentMetaGroupUser body = 3029410;
}

message UpdateContentMetadataAccessResponse {
  // Content Metadata Access
  ContentMetaGroupUser result = 1;
}

message DeleteContentMetadataAccessRequest {
  // Id of content metadata access
  int64 content_metadata_access_id = 311738150;
}

message DeleteContentMetadataAccessResponse {
  // Successfully deleted.
  string result = 1;
}

message ContentThumbnailRequest {
  // Either dashboard or look
  string type = 3575610;
  // ID of the dashboard or look to render
  string resource_id = 308634299;
  // Whether or not to refresh the rendered image with the latest content
  string reload = 467320627;
  // A value of png produces a thumbnail in PNG format instead of SVG (default)
  string format = 317194754;
  // The width of the image if format is supplied
  int64 width = 113126854;
  // The height of the image if format is supplied
  int64 height = 305257398;
}

message ContentThumbnailResponse {
  
}

message ContentValidationRequest {
  // Requested fields.
  string fields = 318677073;
}

message ContentValidationResponse {
  // Content validation results
  ContentValidation result = 1;
}

message SearchContentViewsRequest {
  // Match view count
  string view_count = 383588418;
  // Match Group Id
  string group_id = 506361563;
  // Match look_id
  string look_id = 349778619;
  // Match dashboard_id
  string dashboard_id = 496187565;
  // Match content metadata id
  string content_metadata_id = 293222822;
  // Match start of week date (format is "YYYY-MM-DD")
  string start_of_week_date = 75308398;
  // True if only all time view records should be returned
  bool all_time = 449567658;
  // Match user id
  string user_id = 147132913;
  // Requested fields
  string fields = 318677073;
  // Number of results to return. Use with `offset` to manage pagination of results
  int64 limit = 102976443;
  // Number of results to skip before returning data
  int64 offset = 509889974;
  // Fields to sort by
  string sorts = 109624981;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
}

message SearchContentViewsResponse {
  // Content View
  repeated ContentView result = 1;
}

message SearchContentViewsStreamResponse {
  // Content View
  ContentView result = 1;
}

message VectorThumbnailRequest {
  // Either dashboard or look
  string type = 3575610;
  // ID of the dashboard or look to render
  string resource_id = 308634299;
  // Whether or not to refresh the rendered image with the latest content
  string reload = 467320627;
}

message VectorThumbnailResponse {
  // Vector thumbnail
  string result = 1;
}

message AllDashboardsRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllDashboardsResponse {
  // dashboards
  repeated DashboardBase result = 1;
}

message AllDashboardsStreamResponse {
  // dashboards
  DashboardBase result = 1;
}

message CreateDashboardRequest {
  Dashboard body = 3029410;
}

message CreateDashboardResponse {
  // Dashboard
  Dashboard result = 1;
}

message SearchDashboardsRequest {
  // Match dashboard id.
  string id = 3355;
  // Match dashboard slug.
  string slug = 3533483;
  // Match Dashboard title.
  string title = 110371416;
  // Match Dashboard description.
  string description = 431136513;
  // Filter on a content favorite id.
  string content_favorite_id = 403544586;
  // Filter on a particular space.
  string folder_id = 527488652;
  // Filter on dashboards deleted status.
  string deleted = 387615750;
  // Filter on dashboards created by a particular user.
  string user_id = 147132913;
  // Filter on a particular value of view_count
  string view_count = 383588418;
  // Filter on a content favorite id.
  string content_metadata_id = 293222822;
  // Exclude items that exist only in personal spaces other than the users
  bool curate = 337284075;
  // Select dashboards based on when they were last viewed
  string last_viewed_at = 273134349;
  // Requested fields.
  string fields = 318677073;
  // Requested page.
  int64 page = 3433103;
  // Results per page.
  int64 per_page = 424711281;
  // Number of results to return. (used with offset and takes priority over page and per_page)
  int64 limit = 102976443;
  // Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
  int64 offset = 509889974;
  // One or more fields to sort by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :folder_id, :description, :view_count, :favorite_count, :slug, :content_favorite_id, :content_metadata_id, :deleted, :deleted_at, :last_viewed_at, :last_accessed_at]
  string sorts = 109624981;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
}

message SearchDashboardsResponse {
  // dashboards
  repeated Dashboard result = 1;
}

message SearchDashboardsStreamResponse {
  // dashboards
  Dashboard result = 1;
}

message ImportLookmlDashboardRequest {
  // Id of LookML dashboard
  string lookml_dashboard_id = 339184839;
  // Id of space to import the dashboard to
  string space_id = 511862461;
  Dashboard body = 3029410;
  // If true, and this dashboard is localized, export it with the raw keys, not localized.
  bool raw_locale = 401271403;
}

message ImportLookmlDashboardResponse {
  // Dashboard
  Dashboard result = 1;
}

message SyncLookmlDashboardRequest {
  // Id of LookML dashboard, in the form 'model::dashboardname'
  string lookml_dashboard_id = 339184839;
  Dashboard body = 3029410;
  // If true, and this dashboard is localized, export it with the raw keys, not localized.
  bool raw_locale = 401271403;
}

message SyncLookmlDashboardResponse {
  // Ids of all the dashboards that were updated by this operation
  repeated int64 result = 1;
}

message SyncLookmlDashboardStreamResponse {
  // Ids of all the dashboards that were updated by this operation
  int64 result = 1;
}

message DashboardRequest {
  // Id of dashboard
  string dashboard_id = 496187565;
  // Requested fields.
  string fields = 318677073;
}

message DashboardResponse {
  // Dashboard
  Dashboard result = 1;
}

message UpdateDashboardRequest {
  // Id of dashboard
  string dashboard_id = 496187565;
  Dashboard body = 3029410;
}

message UpdateDashboardResponse {
  // Dashboard
  Dashboard result = 1;
}

message DeleteDashboardRequest {
  // Id of dashboard
  string dashboard_id = 496187565;
}

message DeleteDashboardResponse {
  // Successfully deleted.
  string result = 1;
}

message DashboardAggregateTableLookmlRequest {
  // Id of dashboard
  string dashboard_id = 496187565;
}

message DashboardAggregateTableLookmlResponse {
  // JSON for Aggregate Table LookML
  DashboardAggregateTableLookml result = 1;
}

message DashboardLookmlRequest {
  // Id of dashboard
  string dashboard_id = 496187565;
}

message DashboardLookmlResponse {
  // json of dashboard
  DashboardLookml result = 1;
}

message SearchDashboardElementsRequest {
  // Select elements that refer to a given dashboard id
  int64 dashboard_id = 496187565;
  // Select elements that refer to a given look id
  int64 look_id = 349778619;
  // Match the title of element
  string title = 110371416;
  // Select soft-deleted dashboard elements
  bool deleted = 387615750;
  // Requested fields.
  string fields = 318677073;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
  // Fields to sort by. Sortable fields: [:look_id, :dashboard_id, :deleted, :title]
  string sorts = 109624981;
}

message SearchDashboardElementsResponse {
  // Dashboard elements
  repeated DashboardElement result = 1;
}

message SearchDashboardElementsStreamResponse {
  // Dashboard elements
  DashboardElement result = 1;
}

message DashboardElementRequest {
  // Id of dashboard element
  string dashboard_element_id = 79370295;
  // Requested fields.
  string fields = 318677073;
}

message DashboardElementResponse {
  // DashboardElement
  DashboardElement result = 1;
}

message UpdateDashboardElementRequest {
  // Id of dashboard element
  string dashboard_element_id = 79370295;
  DashboardElement body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateDashboardElementResponse {
  // DashboardElement
  DashboardElement result = 1;
}

message DeleteDashboardElementRequest {
  // Id of dashboard element
  string dashboard_element_id = 79370295;
}

message DeleteDashboardElementResponse {
  // Successfully deleted.
  string result = 1;
}

message DashboardDashboardElementsRequest {
  // Id of dashboard
  string dashboard_id = 496187565;
  // Requested fields.
  string fields = 318677073;
}

message DashboardDashboardElementsResponse {
  // DashboardElement
  repeated DashboardElement result = 1;
}

message DashboardDashboardElementsStreamResponse {
  // DashboardElement
  DashboardElement result = 1;
}

message CreateDashboardElementRequest {
  DashboardElement body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateDashboardElementResponse {
  // DashboardElement
  DashboardElement result = 1;
}

message DashboardFilterRequest {
  // Id of dashboard filters
  string dashboard_filter_id = 467108821;
  // Requested fields.
  string fields = 318677073;
}

message DashboardFilterResponse {
  // Dashboard Filter
  DashboardFilter result = 1;
}

message UpdateDashboardFilterRequest {
  // Id of dashboard filter
  string dashboard_filter_id = 467108821;
  DashboardFilter body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateDashboardFilterResponse {
  // Dashboard Filter
  DashboardFilter result = 1;
}

message DeleteDashboardFilterRequest {
  // Id of dashboard filter
  string dashboard_filter_id = 467108821;
}

message DeleteDashboardFilterResponse {
  // Successfully deleted.
  string result = 1;
}

message DashboardDashboardFiltersRequest {
  // Id of dashboard
  string dashboard_id = 496187565;
  // Requested fields.
  string fields = 318677073;
}

message DashboardDashboardFiltersResponse {
  // Dashboard Filter
  repeated DashboardFilter result = 1;
}

message DashboardDashboardFiltersStreamResponse {
  // Dashboard Filter
  DashboardFilter result = 1;
}

message CreateDashboardFilterRequest {
  CreateDashboardFilter body = 3029410;
  // Requested fields
  string fields = 318677073;
}

message CreateDashboardFilterResponse {
  // Dashboard Filter
  DashboardFilter result = 1;
}

message DashboardLayoutComponentRequest {
  // Id of dashboard layout component
  string dashboard_layout_component_id = 391026662;
  // Requested fields.
  string fields = 318677073;
}

message DashboardLayoutComponentResponse {
  // DashboardLayoutComponent
  DashboardLayoutComponent result = 1;
}

message UpdateDashboardLayoutComponentRequest {
  // Id of dashboard layout component
  string dashboard_layout_component_id = 391026662;
  DashboardLayoutComponent body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateDashboardLayoutComponentResponse {
  // DashboardLayoutComponent
  DashboardLayoutComponent result = 1;
}

message DashboardLayoutDashboardLayoutComponentsRequest {
  // Id of dashboard layout component
  string dashboard_layout_id = 343841433;
  // Requested fields.
  string fields = 318677073;
}

message DashboardLayoutDashboardLayoutComponentsResponse {
  // DashboardLayoutComponent
  repeated DashboardLayoutComponent result = 1;
}

message DashboardLayoutDashboardLayoutComponentsStreamResponse {
  // DashboardLayoutComponent
  DashboardLayoutComponent result = 1;
}

message DashboardLayoutRequest {
  // Id of dashboard layouts
  string dashboard_layout_id = 343841433;
  // Requested fields.
  string fields = 318677073;
}

message DashboardLayoutResponse {
  // DashboardLayout
  DashboardLayout result = 1;
}

message UpdateDashboardLayoutRequest {
  // Id of dashboard layout
  string dashboard_layout_id = 343841433;
  DashboardLayout body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateDashboardLayoutResponse {
  // DashboardLayout
  DashboardLayout result = 1;
}

message DeleteDashboardLayoutRequest {
  // Id of dashboard layout
  string dashboard_layout_id = 343841433;
}

message DeleteDashboardLayoutResponse {
  // Successfully deleted.
  string result = 1;
}

message DashboardDashboardLayoutsRequest {
  // Id of dashboard
  string dashboard_id = 496187565;
  // Requested fields.
  string fields = 318677073;
}

message DashboardDashboardLayoutsResponse {
  // DashboardLayout
  repeated DashboardLayout result = 1;
}

message DashboardDashboardLayoutsStreamResponse {
  // DashboardLayout
  DashboardLayout result = 1;
}

message CreateDashboardLayoutRequest {
  DashboardLayout body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateDashboardLayoutResponse {
  // DashboardLayout
  DashboardLayout result = 1;
}

message PerformDataActionRequest {
  DataActionRequest body = 3029410;
}

message PerformDataActionResponse {
  // Data Action Response
  DataActionResponse result = 1;
}

message FetchRemoteDataActionFormRequest {
  map<string, string> body = 3029410;
}

message FetchRemoteDataActionFormResponse {
  // Data Action Form
  DataActionForm result = 1;
}

message AllDatagroupsRequest {
  
}

message AllDatagroupsResponse {
  // Datagroup
  repeated Datagroup result = 1;
}

message AllDatagroupsStreamResponse {
  // Datagroup
  Datagroup result = 1;
}

message DatagroupRequest {
  // ID of datagroup.
  int64 datagroup_id = 442238753;
}

message DatagroupResponse {
  // Datagroup
  Datagroup result = 1;
}

message UpdateDatagroupRequest {
  // ID of datagroup.
  int64 datagroup_id = 442238753;
  Datagroup body = 3029410;
}

message UpdateDatagroupResponse {
  // Datagroup
  Datagroup result = 1;
}

message SearchFoldersRequest {
  // Requested fields.
  string fields = 318677073;
  // Requested page.
  int64 page = 3433103;
  // Results per page.
  int64 per_page = 424711281;
  // Number of results to return. (used with offset and takes priority over page and per_page)
  int64 limit = 102976443;
  // Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
  int64 offset = 509889974;
  // Fields to sort by.
  string sorts = 109624981;
  // Match Space title.
  string name = 3373707;
  // Match Space id
  int64 id = 3355;
  // Filter on a children of a particular folder.
  string parent_id = 517581876;
  // Filter on folder created by a particular user.
  string creator_id = 344833155;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
}

message SearchFoldersResponse {
  // folders
  repeated Folder result = 1;
}

message SearchFoldersStreamResponse {
  // folders
  Folder result = 1;
}

message FolderRequest {
  // Id of folder
  string folder_id = 527488652;
  // Requested fields.
  string fields = 318677073;
}

message FolderResponse {
  // Folder
  Folder result = 1;
}

message UpdateFolderRequest {
  // Id of folder
  string folder_id = 527488652;
  UpdateFolder body = 3029410;
}

message UpdateFolderResponse {
  // Folder
  Folder result = 1;
}

message DeleteFolderRequest {
  // Id of folder
  string folder_id = 527488652;
}

message DeleteFolderResponse {
  // Successfully deleted.
  string result = 1;
}

message AllFoldersRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllFoldersResponse {
  // Folder
  repeated Folder result = 1;
}

message AllFoldersStreamResponse {
  // Folder
  Folder result = 1;
}

message CreateFolderRequest {
  CreateFolder body = 3029410;
}

message CreateFolderResponse {
  // Folder
  Folder result = 1;
}

message FolderChildrenRequest {
  // Id of folder
  string folder_id = 527488652;
  // Requested fields.
  string fields = 318677073;
  // Requested page.
  int64 page = 3433103;
  // Results per page.
  int64 per_page = 424711281;
  // Fields to sort by.
  string sorts = 109624981;
}

message FolderChildrenResponse {
  // Folders
  repeated Folder result = 1;
}

message FolderChildrenStreamResponse {
  // Folders
  Folder result = 1;
}

message FolderChildrenSearchRequest {
  // Id of folder
  string folder_id = 527488652;
  // Requested fields.
  string fields = 318677073;
  // Fields to sort by.
  string sorts = 109624981;
  // Match folder name.
  string name = 3373707;
}

message FolderChildrenSearchResponse {
  // Folders
  repeated Folder result = 1;
}

message FolderChildrenSearchStreamResponse {
  // Folders
  Folder result = 1;
}

message FolderParentRequest {
  // Id of folder
  string folder_id = 527488652;
  // Requested fields.
  string fields = 318677073;
}

message FolderParentResponse {
  // Folder
  Folder result = 1;
}

message FolderAncestorsRequest {
  // Id of folder
  string folder_id = 527488652;
  // Requested fields.
  string fields = 318677073;
}

message FolderAncestorsResponse {
  // Folders
  repeated Folder result = 1;
}

message FolderAncestorsStreamResponse {
  // Folders
  Folder result = 1;
}

message FolderLooksRequest {
  // Id of folder
  string folder_id = 527488652;
  // Requested fields.
  string fields = 318677073;
}

message FolderLooksResponse {
  // Looks
  repeated LookWithQuery result = 1;
}

message FolderLooksStreamResponse {
  // Looks
  LookWithQuery result = 1;
}

message FolderDashboardsRequest {
  // Id of folder
  string folder_id = 527488652;
  // Requested fields.
  string fields = 318677073;
}

message FolderDashboardsResponse {
  // Dashboard
  repeated Dashboard result = 1;
}

message FolderDashboardsStreamResponse {
  // Dashboard
  Dashboard result = 1;
}

message AllGroupsRequest {
  // Requested fields.
  string fields = 318677073;
  // Requested page.
  int64 page = 3433103;
  // Results per page.
  int64 per_page = 424711281;
  // Fields to sort by.
  string sorts = 109624981;
  // Optional of ids to get specific groups.
  string ids = 104120;
  // Id of content metadata to which groups must have access.
  int64 content_metadata_id = 293222822;
  // Select only groups that either can/cannot be given access to content.
  bool can_add_to_content_metadata = 97036652;
}

message AllGroupsResponse {
  // Group
  repeated Group result = 1;
}

message AllGroupsStreamResponse {
  // Group
  Group result = 1;
}

message CreateGroupRequest {
  Group body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateGroupResponse {
  // Group
  Group result = 1;
}

message SearchGroupsRequest {
  // Requested fields.
  string fields = 318677073;
  // Number of results to return (used with `offset`).
  int64 limit = 102976443;
  // Number of results to skip before returning any (used with `limit`).
  int64 offset = 509889974;
  // Fields to sort by.
  string sorts = 109624981;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
  // Match group id.
  int64 id = 3355;
  // Match group name.
  string name = 3373707;
  // Match group external_group_id.
  string external_group_id = 515008972;
  // Match group externally_managed.
  bool externally_managed = 317189570;
  // Match group externally_orphaned.
  bool externally_orphaned = 390033015;
}

message SearchGroupsResponse {
  // Group
  repeated Group result = 1;
}

message SearchGroupsStreamResponse {
  // Group
  Group result = 1;
}

message SearchGroupsWithRolesRequest {
  // Requested fields.
  string fields = 318677073;
  // Number of results to return (used with `offset`).
  int64 limit = 102976443;
  // Number of results to skip before returning any (used with `limit`).
  int64 offset = 509889974;
  // Fields to sort by.
  string sorts = 109624981;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
  // Match group id.
  int64 id = 3355;
  // Match group name.
  string name = 3373707;
  // Match group external_group_id.
  string external_group_id = 515008972;
  // Match group externally_managed.
  bool externally_managed = 317189570;
  // Match group externally_orphaned.
  bool externally_orphaned = 390033015;
}

message SearchGroupsWithRolesResponse {
  // Group
  repeated GroupSearch result = 1;
}

message SearchGroupsWithRolesStreamResponse {
  // Group
  GroupSearch result = 1;
}

message SearchGroupsWithHierarchyRequest {
  // Requested fields.
  string fields = 318677073;
  // Number of results to return (used with `offset`).
  int64 limit = 102976443;
  // Number of results to skip before returning any (used with `limit`).
  int64 offset = 509889974;
  // Fields to sort by.
  string sorts = 109624981;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
  // Match group id.
  int64 id = 3355;
  // Match group name.
  string name = 3373707;
  // Match group external_group_id.
  string external_group_id = 515008972;
  // Match group externally_managed.
  bool externally_managed = 317189570;
  // Match group externally_orphaned.
  bool externally_orphaned = 390033015;
}

message SearchGroupsWithHierarchyResponse {
  // Group
  repeated GroupHierarchy result = 1;
}

message SearchGroupsWithHierarchyStreamResponse {
  // Group
  GroupHierarchy result = 1;
}

message GroupRequest {
  // Id of group
  int64 group_id = 506361563;
  // Requested fields.
  string fields = 318677073;
}

message GroupResponse {
  // Group
  Group result = 1;
}

message UpdateGroupRequest {
  // Id of group
  int64 group_id = 506361563;
  Group body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateGroupResponse {
  // Group
  Group result = 1;
}

message DeleteGroupRequest {
  // Id of group
  int64 group_id = 506361563;
}

message DeleteGroupResponse {
  // Successfully deleted.
  string result = 1;
}

message AllGroupGroupsRequest {
  // Id of group
  int64 group_id = 506361563;
  // Requested fields.
  string fields = 318677073;
}

message AllGroupGroupsResponse {
  // All groups in group.
  repeated Group result = 1;
}

message AllGroupGroupsStreamResponse {
  // All groups in group.
  Group result = 1;
}

message AddGroupGroupRequest {
  // Id of group
  int64 group_id = 506361563;
  GroupIdForGroupInclusion body = 3029410;
}

message AddGroupGroupResponse {
  // Added group.
  Group result = 1;
}

message AllGroupUsersRequest {
  // Id of group
  int64 group_id = 506361563;
  // Requested fields.
  string fields = 318677073;
  // Requested page.
  int64 page = 3433103;
  // Results per page.
  int64 per_page = 424711281;
  // Fields to sort by.
  string sorts = 109624981;
}

message AllGroupUsersResponse {
  // All users in group.
  repeated User result = 1;
}

message AllGroupUsersStreamResponse {
  // All users in group.
  User result = 1;
}

message AddGroupUserRequest {
  // Id of group
  int64 group_id = 506361563;
  GroupIdForGroupUserInclusion body = 3029410;
}

message AddGroupUserResponse {
  // Added user.
  User result = 1;
}

message DeleteGroupUserRequest {
  // Id of group
  int64 group_id = 506361563;
  // Id of user to remove from group
  int64 user_id = 147132913;
}

message DeleteGroupUserResponse {
  // User successfully removed from group
}

message DeleteGroupFromGroupRequest {
  // Id of group
  int64 group_id = 506361563;
  // Id of group to delete
  int64 deleting_group_id = 340570313;
}

message DeleteGroupFromGroupResponse {
  // Group successfully deleted
}

message UpdateUserAttributeGroupValueRequest {
  // Id of group
  int64 group_id = 506361563;
  // Id of user attribute
  int64 user_attribute_id = 534680475;
  UserAttributeGroupValue body = 3029410;
}

message UpdateUserAttributeGroupValueResponse {
  // Group value object.
  UserAttributeGroupValue result = 1;
}

message DeleteUserAttributeGroupValueRequest {
  // Id of group
  int64 group_id = 506361563;
  // Id of user attribute
  int64 user_attribute_id = 534680475;
}

message DeleteUserAttributeGroupValueResponse {
  // Value successfully unset
}

message AllPrimaryHomepageSectionsRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllPrimaryHomepageSectionsResponse {
  // Primary homepage section
  repeated HomepageSection result = 1;
}

message AllPrimaryHomepageSectionsStreamResponse {
  // Primary homepage section
  HomepageSection result = 1;
}

message AllIntegrationHubsRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllIntegrationHubsResponse {
  // Integration Hub
  repeated IntegrationHub result = 1;
}

message AllIntegrationHubsStreamResponse {
  // Integration Hub
  IntegrationHub result = 1;
}

message CreateIntegrationHubRequest {
  IntegrationHub body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateIntegrationHubResponse {
  // Integration Hub
  IntegrationHub result = 1;
}

message IntegrationHubRequest {
  // Id of Integration Hub
  int64 integration_hub_id = 485110416;
  // Requested fields.
  string fields = 318677073;
}

message IntegrationHubResponse {
  // Integration Hub
  IntegrationHub result = 1;
}

message UpdateIntegrationHubRequest {
  // Id of Integration Hub
  int64 integration_hub_id = 485110416;
  IntegrationHub body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateIntegrationHubResponse {
  // Integration Hub
  IntegrationHub result = 1;
}

message DeleteIntegrationHubRequest {
  // Id of integration_hub
  int64 integration_hub_id = 485110416;
}

message DeleteIntegrationHubResponse {
  // Successfully deleted.
  string result = 1;
}

message AcceptIntegrationHubLegalAgreementRequest {
  // Id of integration_hub
  int64 integration_hub_id = 485110416;
}

message AcceptIntegrationHubLegalAgreementResponse {
  // Integration hub
  IntegrationHub result = 1;
}

message AllIntegrationsRequest {
  // Requested fields.
  string fields = 318677073;
  // Filter to a specific provider
  string integration_hub_id = 485110416;
}

message AllIntegrationsResponse {
  // Integration
  repeated Integration result = 1;
}

message AllIntegrationsStreamResponse {
  // Integration
  Integration result = 1;
}

message IntegrationRequest {
  // Id of integration
  string integration_id = 297185574;
  // Requested fields.
  string fields = 318677073;
}

message IntegrationResponse {
  // Integration
  Integration result = 1;
}

message UpdateIntegrationRequest {
  // Id of integration
  string integration_id = 297185574;
  Integration body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateIntegrationResponse {
  // Integration
  Integration result = 1;
}

message FetchIntegrationFormRequest {
  // Id of integration
  string integration_id = 297185574;
  map<string, string> body = 3029410;
}

message FetchIntegrationFormResponse {
  // Data Action Form
  DataActionForm result = 1;
}

message TestIntegrationRequest {
  // Id of integration
  string integration_id = 297185574;
}

message TestIntegrationResponse {
  // Test Result
  IntegrationTestResult result = 1;
}

message AllLooksRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllLooksResponse {
  // Look
  repeated Look result = 1;
}

message AllLooksStreamResponse {
  // Look
  Look result = 1;
}

message CreateLookRequest {
  LookWithQuery body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateLookResponse {
  // Look
  LookWithQuery result = 1;
}

message SearchLooksRequest {
  // Match look id.
  string id = 3355;
  // Match Look title.
  string title = 110371416;
  // Match Look description.
  string description = 431136513;
  // Select looks with a particular content favorite id
  string content_favorite_id = 403544586;
  // Select looks in a particular folder.
  string folder_id = 527488652;
  // Select looks created by a particular user.
  string user_id = 147132913;
  // Select looks with particular view_count value
  string view_count = 383588418;
  // Select soft-deleted looks
  bool deleted = 387615750;
  // Select looks that reference a particular query by query_id
  int64 query_id = 291663619;
  // Exclude items that exist only in personal spaces other than the users
  bool curate = 337284075;
  // Select looks based on when they were last viewed
  string last_viewed_at = 273134349;
  // Requested fields.
  string fields = 318677073;
  // Requested page.
  int64 page = 3433103;
  // Results per page.
  int64 per_page = 424711281;
  // Number of results to return. (used with offset and takes priority over page and per_page)
  int64 limit = 102976443;
  // Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
  int64 offset = 509889974;
  // One or more fields to sort results by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :folder_id, :description, :updated_at, :last_updater_id, :view_count, :favorite_count, :content_favorite_id, :deleted, :deleted_at, :last_viewed_at, :last_accessed_at, :query_id]
  string sorts = 109624981;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
}

message SearchLooksResponse {
  // looks
  repeated Look result = 1;
}

message SearchLooksStreamResponse {
  // looks
  Look result = 1;
}

message LookRequest {
  // Id of look
  int64 look_id = 349778619;
  // Requested fields.
  string fields = 318677073;
}

message LookResponse {
  // Look
  LookWithQuery result = 1;
}

message UpdateLookRequest {
  // Id of look
  int64 look_id = 349778619;
  LookWithQuery body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateLookResponse {
  // Look
  LookWithQuery result = 1;
}

message DeleteLookRequest {
  // Id of look
  int64 look_id = 349778619;
}

message DeleteLookResponse {
  // Successfully deleted.
  string result = 1;
}

message RunLookRequest {
  // Id of look
  int64 look_id = 349778619;
  // Format of result
  string result_format = 283324265;
  // Row limit (may override the limit in the saved query).
  int64 limit = 102976443;
  // Apply model-specified formatting to each result.
  bool apply_formatting = 400669803;
  // Apply visualization options to results.
  bool apply_vis = 518830860;
  // Get results from cache if available.
  bool cache = 94416770;
  // Render width for image formats.
  int64 image_width = 443391367;
  // Render height for image formats.
  int64 image_height = 421050507;
  // Generate drill links (only applicable to 'json_detail' format.
  bool generate_drill_links = 88455413;
  // Force use of production models even if the user is in development mode.
  bool force_production = 378049187;
  // Retrieve any results from cache even if the results have expired.
  bool cache_only = 28936777;
  // Prefix to use for drill links (url encoded).
  string path_prefix = 525914619;
  // Rebuild PDTS used in query.
  bool rebuild_pdts = 256532759;
  // Perform table calculations on query results
  bool server_table_calcs = 334030724;
}

message RunLookResponse {
  
}

message AllLookmlModelsRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllLookmlModelsResponse {
  // LookML Model
  repeated LookmlModel result = 1;
}

message AllLookmlModelsStreamResponse {
  // LookML Model
  LookmlModel result = 1;
}

message CreateLookmlModelRequest {
  LookmlModel body = 3029410;
}

message CreateLookmlModelResponse {
  // LookML Model
  LookmlModel result = 1;
}

message LookmlModelRequest {
  // Name of lookml model.
  string lookml_model_name = 273434863;
  // Requested fields.
  string fields = 318677073;
}

message LookmlModelResponse {
  // LookML Model
  LookmlModel result = 1;
}

message UpdateLookmlModelRequest {
  // Name of lookml model.
  string lookml_model_name = 273434863;
  LookmlModel body = 3029410;
}

message UpdateLookmlModelResponse {
  // LookML Model
  LookmlModel result = 1;
}

message DeleteLookmlModelRequest {
  // Name of lookml model.
  string lookml_model_name = 273434863;
}

message DeleteLookmlModelResponse {
  // Successfully deleted.
  string result = 1;
}

message LookmlModelExploreRequest {
  // Name of lookml model.
  string lookml_model_name = 273434863;
  // Name of explore.
  string explore_name = 485574866;
  // Requested fields.
  string fields = 318677073;
}

message LookmlModelExploreResponse {
  // LookML Model Explore
  LookmlModelExplore result = 1;
}

message ModelFieldnameSuggestionsRequest {
  // Name of model
  string model_name = 526217848;
  // Name of view
  string view_name = 393300486;
  // Name of field to use for suggestions
  string field_name = 288329560;
  // Search term
  string term = 3556460;
  // Suggestion filters
  string filters = 427273730;
}

message ModelFieldnameSuggestionsResponse {
  // Model view field suggestions
  ModelFieldSuggestions result = 1;
}

message ConnectionDatabasesRequest {
  // Name of connection
  string connection_name = 365832102;
}

message ConnectionDatabasesResponse {
  // Database names
  repeated string result = 1;
}

message ConnectionDatabasesStreamResponse {
  // Database names
  string result = 1;
}

message ConnectionFeaturesRequest {
  // Name of connection
  string connection_name = 365832102;
  // Requested fields.
  string fields = 318677073;
}

message ConnectionFeaturesResponse {
  // Connection features
  ConnectionFeatures result = 1;
}

message ConnectionSchemasRequest {
  // Name of connection
  string connection_name = 365832102;
  // For dialects that support multiple databases, optionally identify which to use
  string database = 447366238;
  // True to use fetch from cache, false to load fresh
  bool cache = 94416770;
  // Requested fields.
  string fields = 318677073;
}

message ConnectionSchemasResponse {
  // Schemas for connection
  repeated Schema result = 1;
}

message ConnectionSchemasStreamResponse {
  // Schemas for connection
  Schema result = 1;
}

message ConnectionTablesRequest {
  // Name of connection
  string connection_name = 365832102;
  // Optional. Name of database to use for the query, only if applicable
  string database = 447366238;
  // Optional. Return only tables for this schema
  string schema_name = 505336523;
  // True to fetch from cache, false to load fresh
  bool cache = 94416770;
  // Requested fields.
  string fields = 318677073;
}

message ConnectionTablesResponse {
  // Schemas and tables for connection
  repeated SchemaTables result = 1;
}

message ConnectionTablesStreamResponse {
  // Schemas and tables for connection
  SchemaTables result = 1;
}

message ConnectionColumnsRequest {
  // Name of connection
  string connection_name = 365832102;
  // For dialects that support multiple databases, optionally identify which to use
  string database = 447366238;
  // Name of schema to use.
  string schema_name = 505336523;
  // True to fetch from cache, false to load fresh
  bool cache = 94416770;
  // limits the tables per schema returned
  int64 table_limit = 299740165;
  // only fetch columns for a given (comma-separated) list of tables
  string table_names = 300544459;
  // Requested fields.
  string fields = 318677073;
}

message ConnectionColumnsResponse {
  // Columns schema for connection
  repeated SchemaColumns result = 1;
}

message ConnectionColumnsStreamResponse {
  // Columns schema for connection
  SchemaColumns result = 1;
}

message ConnectionSearchColumnsRequest {
  // Name of connection
  string connection_name = 365832102;
  // Column name to find
  string column_name = 417463574;
  // Requested fields.
  string fields = 318677073;
}

message ConnectionSearchColumnsResponse {
  // Column names matching search pattern
  repeated ColumnSearch result = 1;
}

message ConnectionSearchColumnsStreamResponse {
  // Column names matching search pattern
  ColumnSearch result = 1;
}

message ConnectionCostEstimateRequest {
  // Name of connection
  string connection_name = 365832102;
  CreateCostEstimate body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message ConnectionCostEstimateResponse {
  // Connection cost estimates
  CostEstimate result = 1;
}

message LockAllRequest {
  // Id of project
  string project_id = 492492543;
  // Requested fields
  string fields = 318677073;
}

message LockAllResponse {
  
}

message AllGitBranchesRequest {
  // Project Id
  string project_id = 492492543;
}

message AllGitBranchesResponse {
  // Git Branch
  repeated GitBranch result = 1;
}

message AllGitBranchesStreamResponse {
  // Git Branch
  GitBranch result = 1;
}

message GitBranchRequest {
  // Project Id
  string project_id = 492492543;
}

message GitBranchResponse {
  // Git Branch
  GitBranch result = 1;
}

message UpdateGitBranchRequest {
  // Project Id
  string project_id = 492492543;
  GitBranch body = 3029410;
}

message UpdateGitBranchResponse {
  // Git Branch
  GitBranch result = 1;
}

message CreateGitBranchRequest {
  // Project Id
  string project_id = 492492543;
  GitBranch body = 3029410;
}

message CreateGitBranchResponse {
  // Git Branch
  GitBranch result = 1;
}

message FindGitBranchRequest {
  // Project Id
  string project_id = 492492543;
  // Branch Name
  string branch_name = 496000636;
}

message FindGitBranchResponse {
  // Git Branch
  GitBranch result = 1;
}

message DeleteGitBranchRequest {
  // Project Id
  string project_id = 492492543;
  // Branch Name
  string branch_name = 496000636;
}

message DeleteGitBranchResponse {
  // Successfully deleted.
  string result = 1;
}

message DeployRefToProductionRequest {
  // Id of project
  string project_id = 492492543;
  // Branch to deploy to production
  string branch = 345257623;
  // Ref to deploy to production
  string ref = 112787;
}

message DeployRefToProductionResponse {
  
}

message DeployToProductionRequest {
  // Id of project
  string project_id = 492492543;
}

message DeployToProductionResponse {
  
}

message ResetProjectToProductionRequest {
  // Id of project
  string project_id = 492492543;
}

message ResetProjectToProductionResponse {
  
}

message ResetProjectToRemoteRequest {
  // Id of project
  string project_id = 492492543;
}

message ResetProjectToRemoteResponse {
  
}

message AllProjectsRequest {
  // Requested fields
  string fields = 318677073;
}

message AllProjectsResponse {
  // Project
  repeated Project result = 1;
}

message AllProjectsStreamResponse {
  // Project
  Project result = 1;
}

message CreateProjectRequest {
  Project body = 3029410;
}

message CreateProjectResponse {
  // Project
  Project result = 1;
}

message ProjectRequest {
  // Project Id
  string project_id = 492492543;
  // Requested fields
  string fields = 318677073;
}

message ProjectResponse {
  // Project
  Project result = 1;
}

message UpdateProjectRequest {
  // Project Id
  string project_id = 492492543;
  Project body = 3029410;
  // Requested fields
  string fields = 318677073;
}

message UpdateProjectResponse {
  // Project
  Project result = 1;
}

message ManifestRequest {
  // Project Id
  string project_id = 492492543;
}

message ManifestResponse {
  // Manifest
  Manifest result = 1;
}

message GitDeployKeyRequest {
  // Project Id
  string project_id = 492492543;
}

message GitDeployKeyResponse {
  // The text of the public key portion of the deploy_key
  string result = 1;
}

message CreateGitDeployKeyRequest {
  // Project Id
  string project_id = 492492543;
}

message CreateGitDeployKeyResponse {
  // Project
  string result = 1;
}

message ProjectValidationResultsRequest {
  // Project Id
  string project_id = 492492543;
  // Requested fields
  string fields = 318677073;
}

message ProjectValidationResultsResponse {
  
}

message ValidateProjectRequest {
  // Project Id
  string project_id = 492492543;
  // Requested fields
  string fields = 318677073;
}

message ValidateProjectResponse {
  // Project validation results
  ProjectValidation result = 1;
}

message ProjectWorkspaceRequest {
  // Project Id
  string project_id = 492492543;
  // Requested fields
  string fields = 318677073;
}

message ProjectWorkspaceResponse {
  // Project Workspace
  ProjectWorkspace result = 1;
}

message AllProjectFilesRequest {
  // Project Id
  string project_id = 492492543;
  // Requested fields
  string fields = 318677073;
}

message AllProjectFilesResponse {
  // Project File
  repeated ProjectFile result = 1;
}

message AllProjectFilesStreamResponse {
  // Project File
  ProjectFile result = 1;
}

message ProjectFileRequest {
  // Project Id
  string project_id = 492492543;
  // File Id
  string file_id = 427500193;
  // Requested fields
  string fields = 318677073;
}

message ProjectFileResponse {
  // Project File
  ProjectFile result = 1;
}

message AllGitConnectionTestsRequest {
  // Project Id
  string project_id = 492492543;
  // (Optional: leave blank for root project) The remote url for remote dependency to test.
  string remote_url = 520826107;
}

message AllGitConnectionTestsResponse {
  // Git Connection Test
  repeated GitConnectionTest result = 1;
}

message AllGitConnectionTestsStreamResponse {
  // Git Connection Test
  GitConnectionTest result = 1;
}

message RunGitConnectionTestRequest {
  // Project Id
  string project_id = 492492543;
  // Test Id
  string test_id = 355613958;
  // (Optional: leave blank for root project) The remote url for remote dependency to test.
  string remote_url = 520826107;
}

message RunGitConnectionTestResponse {
  // Git Connection Test Result
  GitConnectionTestResult result = 1;
}

message AllLookmlTestsRequest {
  // Project Id
  string project_id = 492492543;
  // File Id
  string file_id = 427500193;
}

message AllLookmlTestsResponse {
  // LookML Test
  repeated LookmlTest result = 1;
}

message AllLookmlTestsStreamResponse {
  // LookML Test
  LookmlTest result = 1;
}

message RunLookmlTestRequest {
  // Project Id
  string project_id = 492492543;
  // File Name
  string file_id = 427500193;
  // Test Name
  string test = 3556498;
  // Model Name
  string model = 104069929;
}

message RunLookmlTestResponse {
  // LookML Test Results
  repeated LookmlTestResult result = 1;
}

message RunLookmlTestStreamResponse {
  // LookML Test Results
  LookmlTestResult result = 1;
}

message UpdateRepositoryCredentialRequest {
  // Root Project Id
  string root_project_id = 379036192;
  // Credential Id
  string credential_id = 371260031;
  RepositoryCredential body = 3029410;
}

message UpdateRepositoryCredentialResponse {
  // Repository Credential
  RepositoryCredential result = 1;
}

message DeleteRepositoryCredentialRequest {
  // Root Project Id
  string root_project_id = 379036192;
  // Credential Id
  string credential_id = 371260031;
}

message DeleteRepositoryCredentialResponse {
  // Successfully deleted.
  string result = 1;
}

message GetAllRepositoryCredentialsRequest {
  // Root Project Id
  string root_project_id = 379036192;
}

message GetAllRepositoryCredentialsResponse {
  // Repository Credential
  repeated RepositoryCredential result = 1;
}

message GetAllRepositoryCredentialsStreamResponse {
  // Repository Credential
  RepositoryCredential result = 1;
}

message CreateQueryTaskRequest {
  CreateQueryTask body = 3029410;
  // Row limit (may override the limit in the saved query).
  int64 limit = 102976443;
  // Apply model-specified formatting to each result.
  bool apply_formatting = 400669803;
  // Apply visualization options to results.
  bool apply_vis = 518830860;
  // Get results from cache if available.
  bool cache = 94416770;
  // Render width for image formats.
  int64 image_width = 443391367;
  // Render height for image formats.
  int64 image_height = 421050507;
  // Generate drill links (only applicable to 'json_detail' format.
  bool generate_drill_links = 88455413;
  // Force use of production models even if the user is in development mode.
  bool force_production = 378049187;
  // Retrieve any results from cache even if the results have expired.
  bool cache_only = 28936777;
  // Prefix to use for drill links (url encoded).
  string path_prefix = 525914619;
  // Rebuild PDTS used in query.
  bool rebuild_pdts = 256532759;
  // Perform table calculations on query results
  bool server_table_calcs = 334030724;
  // Requested fields
  string fields = 318677073;
}

message CreateQueryTaskResponse {
  // query_task
  QueryTask result = 1;
}

message QueryTaskMultiResultsRequest {
  // List of Query Task IDs
  string query_task_ids = 467208869;
}

message QueryTaskMultiResultsResponse {
  // Multiple query results
  map<string, string> result = 1;
}

message QueryTaskRequest {
  // ID of the Query Task
  string query_task_id = 435207576;
  // Requested fields.
  string fields = 318677073;
}

message QueryTaskResponse {
  // query_task
  QueryTask result = 1;
}

message QueryTaskResultsRequest {
  // ID of the Query Task
  string query_task_id = 435207576;
}

message QueryTaskResultsResponse {
  
}

message QueryRequest {
  // Id of query
  int64 query_id = 291663619;
  // Requested fields.
  string fields = 318677073;
}

message QueryResponse {
  // Query
  Query result = 1;
}

message QueryForSlugRequest {
  // Slug of query
  string slug = 3533483;
  // Requested fields.
  string fields = 318677073;
}

message QueryForSlugResponse {
  // Query
  Query result = 1;
}

message CreateQueryRequest {
  Query body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateQueryResponse {
  // Query
  Query result = 1;
}

message RunQueryRequest {
  // Id of query
  int64 query_id = 291663619;
  // Format of result
  string result_format = 283324265;
  // Row limit (may override the limit in the saved query).
  int64 limit = 102976443;
  // Apply model-specified formatting to each result.
  bool apply_formatting = 400669803;
  // Apply visualization options to results.
  bool apply_vis = 518830860;
  // Get results from cache if available.
  bool cache = 94416770;
  // Render width for image formats.
  int64 image_width = 443391367;
  // Render height for image formats.
  int64 image_height = 421050507;
  // Generate drill links (only applicable to 'json_detail' format.
  bool generate_drill_links = 88455413;
  // Force use of production models even if the user is in development mode.
  bool force_production = 378049187;
  // Retrieve any results from cache even if the results have expired.
  bool cache_only = 28936777;
  // Prefix to use for drill links (url encoded).
  string path_prefix = 525914619;
  // Rebuild PDTS used in query.
  bool rebuild_pdts = 256532759;
  // Perform table calculations on query results
  bool server_table_calcs = 334030724;
}

message RunQueryResponse {
  
}

message RunInlineQueryRequest {
  // Format of result
  string result_format = 283324265;
  Query body = 3029410;
  // Row limit (may override the limit in the saved query).
  int64 limit = 102976443;
  // Apply model-specified formatting to each result.
  bool apply_formatting = 400669803;
  // Apply visualization options to results.
  bool apply_vis = 518830860;
  // Get results from cache if available.
  bool cache = 94416770;
  // Render width for image formats.
  int64 image_width = 443391367;
  // Render height for image formats.
  int64 image_height = 421050507;
  // Generate drill links (only applicable to 'json_detail' format.
  bool generate_drill_links = 88455413;
  // Force use of production models even if the user is in development mode.
  bool force_production = 378049187;
  // Retrieve any results from cache even if the results have expired.
  bool cache_only = 28936777;
  // Prefix to use for drill links (url encoded).
  string path_prefix = 525914619;
  // Rebuild PDTS used in query.
  bool rebuild_pdts = 256532759;
  // Perform table calculations on query results
  bool server_table_calcs = 334030724;
}

message RunInlineQueryResponse {
  
}

message RunUrlEncodedQueryRequest {
  // Model name
  string model_name = 526217848;
  // View name
  string view_name = 393300486;
  // Format of result
  string result_format = 283324265;
}

message RunUrlEncodedQueryResponse {
  
}

message MergeQueryRequest {
  // Merge Query Id
  string merge_query_id = 289061881;
  // Requested fields
  string fields = 318677073;
}

message MergeQueryResponse {
  // Merge Query
  MergeQuery result = 1;
}

message CreateMergeQueryRequest {
  MergeQuery body = 3029410;
  // Requested fields
  string fields = 318677073;
}

message CreateMergeQueryResponse {
  // Merge Query
  MergeQuery result = 1;
}

message AllRunningQueriesRequest {
  
}

message AllRunningQueriesResponse {
  // Running Queries.
  repeated RunningQueries result = 1;
}

message AllRunningQueriesStreamResponse {
  // Running Queries.
  RunningQueries result = 1;
}

message KillQueryRequest {
  // Query task id.
  string query_task_id = 435207576;
}

message KillQueryResponse {
  // Query successfully killed.
  string result = 1;
}

message SqlQueryRequest {
  // slug of query
  string slug = 3533483;
}

message SqlQueryResponse {
  // SQL Runner Query
  SqlQuery result = 1;
}

message CreateSqlQueryRequest {
  SqlQueryCreate body = 3029410;
}

message CreateSqlQueryResponse {
  // SQL Runner Query
  SqlQuery result = 1;
}

message RunSqlQueryRequest {
  // slug of query
  string slug = 3533483;
  // Format of result, options are: ["inline_json", "json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml", "json_label"]
  string result_format = 283324265;
  // Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.
  string download = 356954658;
}

message RunSqlQueryResponse {
  
}

message CreateLookRenderTaskRequest {
  // Id of look to render
  int64 look_id = 349778619;
  // Output type: png, or jpg
  string result_format = 283324265;
  // Output width in pixels
  int64 width = 113126854;
  // Output height in pixels
  int64 height = 305257398;
  // Requested fields.
  string fields = 318677073;
}

message CreateLookRenderTaskResponse {
  // Render Task
  RenderTask result = 1;
}

message CreateQueryRenderTaskRequest {
  // Id of the query to render
  int64 query_id = 291663619;
  // Output type: png or jpg
  string result_format = 283324265;
  // Output width in pixels
  int64 width = 113126854;
  // Output height in pixels
  int64 height = 305257398;
  // Requested fields.
  string fields = 318677073;
}

message CreateQueryRenderTaskResponse {
  // Render Task
  RenderTask result = 1;
}

message CreateDashboardRenderTaskRequest {
  // Id of dashboard to render. The ID can be a LookML dashboard also.
  string dashboard_id = 496187565;
  // Output type: pdf, png, or jpg
  string result_format = 283324265;
  CreateDashboardRenderTask body = 3029410;
  // Output width in pixels
  int64 width = 113126854;
  // Output height in pixels
  int64 height = 305257398;
  // Requested fields.
  string fields = 318677073;
  // Paper size for pdf. Value can be one of: ["letter","legal","tabloid","a0","a1","a2","a3","a4","a5"]
  string pdf_paper_size = 491759120;
  // Whether to render pdf in landscape paper orientation
  bool pdf_landscape = 359176724;
  // Whether or not to expand table vis to full length
  bool long_tables = 359736222;
}

message CreateDashboardRenderTaskResponse {
  // Render Task
  RenderTask result = 1;
}

message RenderTaskRequest {
  // Id of render task
  string render_task_id = 274685669;
  // Requested fields.
  string fields = 318677073;
}

message RenderTaskResponse {
  // Render Task
  RenderTask result = 1;
}

message RenderTaskResultsRequest {
  // Id of render task
  string render_task_id = 274685669;
}

message RenderTaskResultsResponse {
  
}

message SearchModelSetsRequest {
  // Requested fields.
  string fields = 318677073;
  // Number of results to return (used with `offset`).
  int64 limit = 102976443;
  // Number of results to skip before returning any (used with `limit`).
  int64 offset = 509889974;
  // Fields to sort by.
  string sorts = 109624981;
  // Match model set id.
  int64 id = 3355;
  // Match model set name.
  string name = 3373707;
  // Match model sets by all_access status.
  bool all_access = 505719009;
  // Match model sets by built_in status.
  bool built_in = 357544798;
  // Combine given search criteria in a boolean OR expression.
  bool filter_or = 440686075;
}

message SearchModelSetsResponse {
  // Model Set
  repeated ModelSet result = 1;
}

message SearchModelSetsStreamResponse {
  // Model Set
  ModelSet result = 1;
}

message ModelSetRequest {
  // Id of model set
  int64 model_set_id = 1141778;
  // Requested fields.
  string fields = 318677073;
}

message ModelSetResponse {
  // Specified model set.
  ModelSet result = 1;
}

message UpdateModelSetRequest {
  // id of model set
  int64 model_set_id = 1141778;
  ModelSet body = 3029410;
}

message UpdateModelSetResponse {
  // New state for specified model set.
  ModelSet result = 1;
}

message DeleteModelSetRequest {
  // id of model set
  int64 model_set_id = 1141778;
}

message DeleteModelSetResponse {
  // Model set succssfully deleted.
  string result = 1;
}

message AllModelSetsRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllModelSetsResponse {
  // All model sets.
  repeated ModelSet result = 1;
}

message AllModelSetsStreamResponse {
  // All model sets.
  ModelSet result = 1;
}

message CreateModelSetRequest {
  ModelSet body = 3029410;
}

message CreateModelSetResponse {
  // Newly created ModelSet
  ModelSet result = 1;
}

message AllPermissionsRequest {
  
}

message AllPermissionsResponse {
  // Permission
  repeated Permission result = 1;
}

message AllPermissionsStreamResponse {
  // Permission
  Permission result = 1;
}

message SearchPermissionSetsRequest {
  // Requested fields.
  string fields = 318677073;
  // Number of results to return (used with `offset`).
  int64 limit = 102976443;
  // Number of results to skip before returning any (used with `limit`).
  int64 offset = 509889974;
  // Fields to sort by.
  string sorts = 109624981;
  // Match permission set id.
  int64 id = 3355;
  // Match permission set name.
  string name = 3373707;
  // Match permission sets by all_access status.
  bool all_access = 505719009;
  // Match permission sets by built_in status.
  bool built_in = 357544798;
  // Combine given search criteria in a boolean OR expression.
  bool filter_or = 440686075;
}

message SearchPermissionSetsResponse {
  // Permission Set
  repeated PermissionSet result = 1;
}

message SearchPermissionSetsStreamResponse {
  // Permission Set
  PermissionSet result = 1;
}

message PermissionSetRequest {
  // Id of permission set
  int64 permission_set_id = 379867460;
  // Requested fields.
  string fields = 318677073;
}

message PermissionSetResponse {
  // Permission Set
  PermissionSet result = 1;
}

message UpdatePermissionSetRequest {
  // id of permission set
  int64 permission_set_id = 379867460;
  PermissionSet body = 3029410;
}

message UpdatePermissionSetResponse {
  // Permission Set
  PermissionSet result = 1;
}

message DeletePermissionSetRequest {
  // Id of permission set
  int64 permission_set_id = 379867460;
}

message DeletePermissionSetResponse {
  // Successfully deleted.
  string result = 1;
}

message AllPermissionSetsRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllPermissionSetsResponse {
  // Permission Set
  repeated PermissionSet result = 1;
}

message AllPermissionSetsStreamResponse {
  // Permission Set
  PermissionSet result = 1;
}

message CreatePermissionSetRequest {
  PermissionSet body = 3029410;
}

message CreatePermissionSetResponse {
  // Permission Set
  PermissionSet result = 1;
}

message AllRolesRequest {
  // Requested fields.
  string fields = 318677073;
  // Optional list of ids to get specific roles.
  string ids = 104120;
}

message AllRolesResponse {
  // Role
  repeated Role result = 1;
}

message AllRolesStreamResponse {
  // Role
  Role result = 1;
}

message CreateRoleRequest {
  Role body = 3029410;
}

message CreateRoleResponse {
  // Role
  Role result = 1;
}

message SearchRolesRequest {
  // Requested fields.
  string fields = 318677073;
  // Number of results to return (used with `offset`).
  int64 limit = 102976443;
  // Number of results to skip before returning any (used with `limit`).
  int64 offset = 509889974;
  // Fields to sort by.
  string sorts = 109624981;
  // Match role id.
  int64 id = 3355;
  // Match role name.
  string name = 3373707;
  // Match roles by built_in status.
  bool built_in = 357544798;
  // Combine given search criteria in a boolean OR expression.
  bool filter_or = 440686075;
}

message SearchRolesResponse {
  // Role
  repeated Role result = 1;
}

message SearchRolesStreamResponse {
  // Role
  Role result = 1;
}

message RoleRequest {
  // id of role
  int64 role_id = 344221025;
}

message RoleResponse {
  // Role
  Role result = 1;
}

message UpdateRoleRequest {
  // id of role
  int64 role_id = 344221025;
  Role body = 3029410;
}

message UpdateRoleResponse {
  // Role
  Role result = 1;
}

message DeleteRoleRequest {
  // id of role
  int64 role_id = 344221025;
}

message DeleteRoleResponse {
  // Successfully deleted.
  string result = 1;
}

message RoleGroupsRequest {
  // id of role
  int64 role_id = 344221025;
  // Requested fields.
  string fields = 318677073;
}

message RoleGroupsResponse {
  // Groups with role.
  repeated Group result = 1;
}

message RoleGroupsStreamResponse {
  // Groups with role.
  Group result = 1;
}

message SetRoleGroupsRequest {
  // Id of Role
  int64 role_id = 344221025;
  repeated int64 body = 3029410;
}

message SetRoleGroupsResponse {
  // Groups with role.
  repeated Group result = 1;
}

message SetRoleGroupsStreamResponse {
  // Groups with role.
  Group result = 1;
}

message RoleUsersRequest {
  // id of user
  int64 role_id = 344221025;
  // Requested fields.
  string fields = 318677073;
  // Get only users associated directly with the role: exclude those only associated through groups.
  bool direct_association_only = 533341840;
}

message RoleUsersResponse {
  // Users with role.
  repeated User result = 1;
}

message RoleUsersStreamResponse {
  // Users with role.
  User result = 1;
}

message SetRoleUsersRequest {
  // id of role
  int64 role_id = 344221025;
  repeated int64 body = 3029410;
}

message SetRoleUsersResponse {
  // Users with role.
  repeated User result = 1;
}

message SetRoleUsersStreamResponse {
  // Users with role.
  User result = 1;
}

message ScheduledPlansForSpaceRequest {
  // Space Id
  int64 space_id = 511862461;
  // Requested fields.
  string fields = 318677073;
}

message ScheduledPlansForSpaceResponse {
  // Scheduled Plan
  repeated ScheduledPlan result = 1;
}

message ScheduledPlansForSpaceStreamResponse {
  // Scheduled Plan
  ScheduledPlan result = 1;
}

message ScheduledPlanRequest {
  // Scheduled Plan Id
  int64 scheduled_plan_id = 335709463;
  // Requested fields.
  string fields = 318677073;
}

message ScheduledPlanResponse {
  // Scheduled Plan
  ScheduledPlan result = 1;
}

message UpdateScheduledPlanRequest {
  // Scheduled Plan Id
  int64 scheduled_plan_id = 335709463;
  ScheduledPlan body = 3029410;
}

message UpdateScheduledPlanResponse {
  // Scheduled Plan
  ScheduledPlan result = 1;
}

message DeleteScheduledPlanRequest {
  // Scheduled Plan Id
  int64 scheduled_plan_id = 335709463;
}

message DeleteScheduledPlanResponse {
  // Successfully deleted.
  string result = 1;
}

message AllScheduledPlansRequest {
  // Return scheduled plans belonging to this user_id. If not provided, returns scheduled plans owned by the caller.
  int64 user_id = 147132913;
  // Comma delimited list of field names. If provided, only the fields specified will be included in the response
  string fields = 318677073;
  // Return scheduled plans belonging to all users (caller needs see_schedules permission)
  bool all_users = 86970902;
}

message AllScheduledPlansResponse {
  // Scheduled Plan
  repeated ScheduledPlan result = 1;
}

message AllScheduledPlansStreamResponse {
  // Scheduled Plan
  ScheduledPlan result = 1;
}

message CreateScheduledPlanRequest {
  ScheduledPlan body = 3029410;
}

message CreateScheduledPlanResponse {
  // Scheduled Plan
  ScheduledPlan result = 1;
}

message ScheduledPlanRunOnceRequest {
  ScheduledPlan body = 3029410;
}

message ScheduledPlanRunOnceResponse {
  // Scheduled Plan
  ScheduledPlan result = 1;
}

message ScheduledPlansForLookRequest {
  // Look Id
  int64 look_id = 349778619;
  // User Id (default is requesting user if not specified)
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
  // Return scheduled plans belonging to all users for the look
  bool all_users = 86970902;
}

message ScheduledPlansForLookResponse {
  // Scheduled Plan
  repeated ScheduledPlan result = 1;
}

message ScheduledPlansForLookStreamResponse {
  // Scheduled Plan
  ScheduledPlan result = 1;
}

message ScheduledPlansForDashboardRequest {
  // Dashboard Id
  int64 dashboard_id = 496187565;
  // User Id (default is requesting user if not specified)
  int64 user_id = 147132913;
  // Return scheduled plans belonging to all users for the dashboard
  bool all_users = 86970902;
  // Requested fields.
  string fields = 318677073;
}

message ScheduledPlansForDashboardResponse {
  // Scheduled Plan
  repeated ScheduledPlan result = 1;
}

message ScheduledPlansForDashboardStreamResponse {
  // Scheduled Plan
  ScheduledPlan result = 1;
}

message ScheduledPlansForLookmlDashboardRequest {
  // LookML Dashboard Id
  string lookml_dashboard_id = 339184839;
  // User Id (default is requesting user if not specified)
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
  // Return scheduled plans belonging to all users for the dashboard
  bool all_users = 86970902;
}

message ScheduledPlansForLookmlDashboardResponse {
  // Scheduled Plan
  repeated ScheduledPlan result = 1;
}

message ScheduledPlansForLookmlDashboardStreamResponse {
  // Scheduled Plan
  ScheduledPlan result = 1;
}

message ScheduledPlanRunOnceByIdRequest {
  // Id of schedule plan to copy and run
  int64 scheduled_plan_id = 335709463;
  WriteScheduledPlan body = 3029410;
}

message ScheduledPlanRunOnceByIdResponse {
  // Scheduled Plan
  ScheduledPlan result = 1;
}

message SessionRequest {
  
}

message SessionResponse {
  // Session
  ApiSession result = 1;
}

message UpdateSessionRequest {
  ApiSession body = 3029410;
}

message UpdateSessionResponse {
  // Session
  ApiSession result = 1;
}

message AllThemesRequest {
  // Requested fields.
  string fields = 318677073;
}

message AllThemesResponse {
  // Themes
  repeated Theme result = 1;
}

message AllThemesStreamResponse {
  // Themes
  Theme result = 1;
}

message CreateThemeRequest {
  Theme body = 3029410;
}

message CreateThemeResponse {
  // Theme
  Theme result = 1;
}

message SearchThemesRequest {
  // Match theme id.
  int64 id = 3355;
  // Match theme name.
  string name = 3373707;
  // Timestamp for activation.
  google.protobuf.Timestamp begin_at = 372355810;
  // Timestamp for expiration.
  google.protobuf.Timestamp end_at = 324690554;
  // Number of results to return (used with `offset`).
  int64 limit = 102976443;
  // Number of results to skip before returning any (used with `limit`).
  int64 offset = 509889974;
  // Fields to sort by.
  string sorts = 109624981;
  // Requested fields.
  string fields = 318677073;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
}

message SearchThemesResponse {
  // Themes
  repeated Theme result = 1;
}

message SearchThemesStreamResponse {
  // Themes
  Theme result = 1;
}

message DefaultThemeRequest {
  // Timestamp representing the target datetime for the active period. Defaults to 'now'
  google.protobuf.Timestamp ts = 3711;
}

message DefaultThemeResponse {
  // Theme
  Theme result = 1;
}

message SetDefaultThemeRequest {
  // Name of theme to set as default
  string name = 3373707;
}

message SetDefaultThemeResponse {
  // Theme
  Theme result = 1;
}

message ActiveThemesRequest {
  // Name of theme
  string name = 3373707;
  // Timestamp representing the target datetime for the active period. Defaults to 'now'
  google.protobuf.Timestamp ts = 3711;
  // Requested fields.
  string fields = 318677073;
}

message ActiveThemesResponse {
  // Themes
  repeated Theme result = 1;
}

message ActiveThemesStreamResponse {
  // Themes
  Theme result = 1;
}

message ThemeOrDefaultRequest {
  // Name of theme
  string name = 3373707;
  // Timestamp representing the target datetime for the active period. Defaults to 'now'
  google.protobuf.Timestamp ts = 3711;
}

message ThemeOrDefaultResponse {
  // Theme
  Theme result = 1;
}

message ValidateThemeRequest {
  Theme body = 3029410;
}

message ValidateThemeResponse {
  
}

message ThemeRequest {
  // Id of theme
  int64 theme_id = 277237460;
  // Requested fields.
  string fields = 318677073;
}

message ThemeResponse {
  // Theme
  Theme result = 1;
}

message UpdateThemeRequest {
  // Id of theme
  int64 theme_id = 277237460;
  Theme body = 3029410;
}

message UpdateThemeResponse {
  // Theme
  Theme result = 1;
}

message DeleteThemeRequest {
  // Id of theme
  string theme_id = 277237460;
}

message DeleteThemeResponse {
  // Successfully deleted.
  string result = 1;
}

message MeRequest {
  // Requested fields.
  string fields = 318677073;
}

message MeResponse {
  // Current user.
  User result = 1;
}

message AllUsersRequest {
  // Requested fields.
  string fields = 318677073;
  // Requested page.
  int64 page = 3433103;
  // Results per page.
  int64 per_page = 424711281;
  // Fields to sort by.
  string sorts = 109624981;
  // Optional list of ids to get specific users.
  string ids = 104120;
}

message AllUsersResponse {
  // All users.
  repeated User result = 1;
}

message AllUsersStreamResponse {
  // All users.
  User result = 1;
}

message CreateUserRequest {
  User body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateUserResponse {
  // Created User
  User result = 1;
}

message SearchUsersRequest {
  // Include only these fields in the response
  string fields = 318677073;
  // Return only page N of paginated results
  int64 page = 3433103;
  // Return N rows of data per page
  int64 per_page = 424711281;
  // Fields to sort by.
  string sorts = 109624981;
  // Match User Id.
  string id = 3355;
  // Match First name.
  string first_name = 160985414;
  // Match Last name.
  string last_name = 503280549;
  // Search for user accounts associated with Looker employees
  bool verified_looker_employee = 471763269;
  // Search for the user with this email address
  string email = 96619420;
  // Search for disabled user accounts
  bool is_disabled = 464089615;
  // Combine given search criteria in a boolean OR expression
  bool filter_or = 440686075;
  // Search for users who have access to this content_metadata item
  string content_metadata_id = 293222822;
  // Search for users who are direct members of this group
  string group_id = 506361563;
}

message SearchUsersResponse {
  // Matching users.
  repeated User result = 1;
}

message SearchUsersStreamResponse {
  // Matching users.
  User result = 1;
}

message SearchUsersNamesRequest {
  // Pattern to match
  string pattern = 395545144;
  // Include only these fields in the response
  string fields = 318677073;
  // Return only page N of paginated results
  int64 page = 3433103;
  // Return N rows of data per page
  int64 per_page = 424711281;
  // Fields to sort by
  string sorts = 109624981;
  // Match User Id
  int64 id = 3355;
  // Match First name
  string first_name = 160985414;
  // Match Last name
  string last_name = 503280549;
  // Match Verified Looker employee
  bool verified_looker_employee = 471763269;
  // Match Email Address
  string email = 96619420;
  // Include or exclude disabled accounts in the results
  bool is_disabled = 464089615;
}

message SearchUsersNamesResponse {
  // Matching users.
  repeated User result = 1;
}

message SearchUsersNamesStreamResponse {
  // Matching users.
  User result = 1;
}

message UserRequest {
  // Id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message UserResponse {
  // Specified user.
  User result = 1;
}

message UpdateUserRequest {
  // Id of user
  int64 user_id = 147132913;
  User body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateUserResponse {
  // New state for specified user.
  User result = 1;
}

message DeleteUserRequest {
  // Id of user
  int64 user_id = 147132913;
}

message DeleteUserResponse {
  // User successfully deleted.
  string result = 1;
}

message UserForCredentialRequest {
  // Type name of credential
  string credential_type = 298516599;
  // Id of credential
  string credential_id = 371260031;
  // Requested fields.
  string fields = 318677073;
}

message UserForCredentialResponse {
  // Specified user.
  User result = 1;
}

message UserCredentialsEmailRequest {
  // id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message UserCredentialsEmailResponse {
  // Email/Password Credential
  CredentialsEmail result = 1;
}

message CreateUserCredentialsEmailRequest {
  // id of user
  int64 user_id = 147132913;
  CredentialsEmail body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateUserCredentialsEmailResponse {
  // Email/Password Credential
  CredentialsEmail result = 1;
}

message UpdateUserCredentialsEmailRequest {
  // id of user
  int64 user_id = 147132913;
  CredentialsEmail body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateUserCredentialsEmailResponse {
  // Email/Password Credential
  CredentialsEmail result = 1;
}

message DeleteUserCredentialsEmailRequest {
  // id of user
  int64 user_id = 147132913;
}

message DeleteUserCredentialsEmailResponse {
  // Successfully deleted.
  string result = 1;
}

message UserCredentialsTotpRequest {
  // id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message UserCredentialsTotpResponse {
  // Two-Factor Credential
  CredentialsTotp result = 1;
}

message CreateUserCredentialsTotpRequest {
  // id of user
  int64 user_id = 147132913;
  CredentialsTotp body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateUserCredentialsTotpResponse {
  // Two-Factor Credential
  CredentialsTotp result = 1;
}

message DeleteUserCredentialsTotpRequest {
  // id of user
  int64 user_id = 147132913;
}

message DeleteUserCredentialsTotpResponse {
  // Successfully deleted.
  string result = 1;
}

message UserCredentialsLdapRequest {
  // id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message UserCredentialsLdapResponse {
  // LDAP Credential
  CredentialsLDAP result = 1;
}

message DeleteUserCredentialsLdapRequest {
  // id of user
  int64 user_id = 147132913;
}

message DeleteUserCredentialsLdapResponse {
  // Successfully deleted.
  string result = 1;
}

message UserCredentialsGoogleRequest {
  // id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message UserCredentialsGoogleResponse {
  // Google Auth Credential
  CredentialsGoogle result = 1;
}

message DeleteUserCredentialsGoogleRequest {
  // id of user
  int64 user_id = 147132913;
}

message DeleteUserCredentialsGoogleResponse {
  // Successfully deleted.
  string result = 1;
}

message UserCredentialsSamlRequest {
  // id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message UserCredentialsSamlResponse {
  // Saml Auth Credential
  CredentialsSaml result = 1;
}

message DeleteUserCredentialsSamlRequest {
  // id of user
  int64 user_id = 147132913;
}

message DeleteUserCredentialsSamlResponse {
  // Successfully deleted.
  string result = 1;
}

message UserCredentialsOidcRequest {
  // id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message UserCredentialsOidcResponse {
  // OIDC Auth Credential
  CredentialsOIDC result = 1;
}

message DeleteUserCredentialsOidcRequest {
  // id of user
  int64 user_id = 147132913;
}

message DeleteUserCredentialsOidcResponse {
  // Successfully deleted.
  string result = 1;
}

message UserCredentialsApi3Request {
  // Id of user
  int64 user_id = 147132913;
  // Id of API 3 Credential
  int64 credentials_api3_id = 395298239;
  // Requested fields.
  string fields = 318677073;
}

message UserCredentialsApi3Response {
  // API 3 Credential
  CredentialsApi3 result = 1;
}

message DeleteUserCredentialsApi3Request {
  // id of user
  int64 user_id = 147132913;
  // id of API 3 Credential
  int64 credentials_api3_id = 395298239;
}

message DeleteUserCredentialsApi3Response {
  // Successfully deleted.
  string result = 1;
}

message AllUserCredentialsApi3sRequest {
  // id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message AllUserCredentialsApi3sResponse {
  // API 3 Credential
  repeated CredentialsApi3 result = 1;
}

message AllUserCredentialsApi3sStreamResponse {
  // API 3 Credential
  CredentialsApi3 result = 1;
}

message CreateUserCredentialsApi3Request {
  // id of user
  int64 user_id = 147132913;
  CredentialsApi3 body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateUserCredentialsApi3Response {
  // API 3 Credential
  CredentialsApi3 result = 1;
}

message UserCredentialsEmbedRequest {
  // Id of user
  int64 user_id = 147132913;
  // Id of Embedding Credential
  int64 credentials_embed_id = 350409591;
  // Requested fields.
  string fields = 318677073;
}

message UserCredentialsEmbedResponse {
  // Embedding Credential
  CredentialsEmbed result = 1;
}

message DeleteUserCredentialsEmbedRequest {
  // id of user
  int64 user_id = 147132913;
  // id of Embedding Credential
  int64 credentials_embed_id = 350409591;
}

message DeleteUserCredentialsEmbedResponse {
  // Successfully deleted.
  string result = 1;
}

message AllUserCredentialsEmbedsRequest {
  // id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message AllUserCredentialsEmbedsResponse {
  // Embedding Credential
  repeated CredentialsEmbed result = 1;
}

message AllUserCredentialsEmbedsStreamResponse {
  // Embedding Credential
  CredentialsEmbed result = 1;
}

message UserCredentialsLookerOpenidRequest {
  // id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message UserCredentialsLookerOpenidResponse {
  // Looker OpenId Credential
  CredentialsLookerOpenid result = 1;
}

message DeleteUserCredentialsLookerOpenidRequest {
  // id of user
  int64 user_id = 147132913;
}

message DeleteUserCredentialsLookerOpenidResponse {
  // Successfully deleted.
  string result = 1;
}

message UserSessionRequest {
  // Id of user
  int64 user_id = 147132913;
  // Id of Web Login Session
  int64 session_id = 415463385;
  // Requested fields.
  string fields = 318677073;
}

message UserSessionResponse {
  // Web Login Session
  Session result = 1;
}

message DeleteUserSessionRequest {
  // id of user
  int64 user_id = 147132913;
  // id of Web Login Session
  int64 session_id = 415463385;
}

message DeleteUserSessionResponse {
  // Successfully deleted.
  string result = 1;
}

message AllUserSessionsRequest {
  // id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message AllUserSessionsResponse {
  // Web Login Session
  repeated Session result = 1;
}

message AllUserSessionsStreamResponse {
  // Web Login Session
  Session result = 1;
}

message CreateUserCredentialsEmailPasswordResetRequest {
  // Id of user
  int64 user_id = 147132913;
  // Expiring token.
  bool expires = 327308851;
  // Requested fields.
  string fields = 318677073;
}

message CreateUserCredentialsEmailPasswordResetResponse {
  // email/password credential
  CredentialsEmail result = 1;
}

message UserRolesRequest {
  // id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
  // Get only roles associated directly with the user: exclude those only associated through groups.
  bool direct_association_only = 533341840;
}

message UserRolesResponse {
  // Roles of user.
  repeated Role result = 1;
}

message UserRolesStreamResponse {
  // Roles of user.
  Role result = 1;
}

message SetUserRolesRequest {
  // id of user
  int64 user_id = 147132913;
  repeated int64 body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message SetUserRolesResponse {
  // Roles of user.
  repeated Role result = 1;
}

message SetUserRolesStreamResponse {
  // Roles of user.
  Role result = 1;
}

message UserAttributeUserValuesRequest {
  // Id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
  // Specific user attributes to request. Omit or leave blank to request all user attributes.
  string user_attribute_ids = 468967351;
  // If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence.
  bool all_values = 402771552;
  // If true, returns an empty record for each requested attribute that has no user, group, or default value.
  bool include_unset = 384531147;
}

message UserAttributeUserValuesResponse {
  // Value of user attribute.
  repeated UserAttributeWithValue result = 1;
}

message UserAttributeUserValuesStreamResponse {
  // Value of user attribute.
  UserAttributeWithValue result = 1;
}

message SetUserAttributeUserValueRequest {
  // Id of user
  int64 user_id = 147132913;
  // Id of user attribute
  int64 user_attribute_id = 534680475;
  UserAttributeWithValue body = 3029410;
}

message SetUserAttributeUserValueResponse {
  // User attribute value.
  UserAttributeWithValue result = 1;
}

message DeleteUserAttributeUserValueRequest {
  // Id of user
  int64 user_id = 147132913;
  // Id of user attribute
  int64 user_attribute_id = 534680475;
}

message DeleteUserAttributeUserValueResponse {
  // Deleted
}

message SendUserCredentialsEmailPasswordResetRequest {
  // Id of user
  int64 user_id = 147132913;
  // Requested fields.
  string fields = 318677073;
}

message SendUserCredentialsEmailPasswordResetResponse {
  // email/password credential
  CredentialsEmail result = 1;
}

message AllUserAttributesRequest {
  // Requested fields.
  string fields = 318677073;
  // Fields to order the results by. Sortable fields include: name, label
  string sorts = 109624981;
}

message AllUserAttributesResponse {
  // User Attribute
  repeated UserAttribute result = 1;
}

message AllUserAttributesStreamResponse {
  // User Attribute
  UserAttribute result = 1;
}

message CreateUserAttributeRequest {
  UserAttribute body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message CreateUserAttributeResponse {
  // User Attribute
  UserAttribute result = 1;
}

message UserAttributeRequest {
  // Id of user attribute
  int64 user_attribute_id = 534680475;
  // Requested fields.
  string fields = 318677073;
}

message UserAttributeResponse {
  // User Attribute
  UserAttribute result = 1;
}

message UpdateUserAttributeRequest {
  // Id of user attribute
  int64 user_attribute_id = 534680475;
  UserAttribute body = 3029410;
  // Requested fields.
  string fields = 318677073;
}

message UpdateUserAttributeResponse {
  // User Attribute
  UserAttribute result = 1;
}

message DeleteUserAttributeRequest {
  // Id of user_attribute
  int64 user_attribute_id = 534680475;
}

message DeleteUserAttributeResponse {
  // Successfully deleted.
  string result = 1;
}

message AllUserAttributeGroupValuesRequest {
  // Id of user attribute
  int64 user_attribute_id = 534680475;
  // Requested fields.
  string fields = 318677073;
}

message AllUserAttributeGroupValuesResponse {
  // All group values for attribute.
  repeated UserAttributeGroupValue result = 1;
}

message AllUserAttributeGroupValuesStreamResponse {
  // All group values for attribute.
  UserAttributeGroupValue result = 1;
}

message SetUserAttributeGroupValuesRequest {
  // Id of user attribute
  int64 user_attribute_id = 534680475;
  repeated UserAttributeGroupValue body = 3029410;
}

message SetUserAttributeGroupValuesResponse {
  // Array of group values.
  repeated UserAttributeGroupValue result = 1;
}

message SetUserAttributeGroupValuesStreamResponse {
  // Array of group values.
  UserAttributeGroupValue result = 1;
}

message AllWorkspacesRequest {
  
}

message AllWorkspacesResponse {
  // Workspace
  repeated Workspace result = 1;
}

message AllWorkspacesStreamResponse {
  // Workspace
  Workspace result = 1;
}

message WorkspaceRequest {
  // Id of the workspace 
  string workspace_id = 394620993;
}

message WorkspaceResponse {
  // Workspace
  Workspace result = 1;
}
