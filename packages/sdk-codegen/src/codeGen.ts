/*

 MIT License

 Copyright (c) 2020 Looker Data Sciences, Inc.

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.

 */

import { commentBlock } from '@looker/sdk-codegen-utils'
import {
  Arg,
  ICodeGen,
  IMethod,
  IParameter,
  IType,
  IProperty,
  IMappedType,
  ApiModel,
  EnumType,
  EnumValueType,
  mayQuote,
} from './sdkModels'

export interface IVersionInfo {
  lookerVersion: string
  apiVersion: string
}

export abstract class CodeGen implements ICodeGen {
  needsRequestTypes = false
  willItStream = false
  codePath = './'
  packagePath = 'looker'
  packageName = 'LookerSDK'
  environmentPrefix = this.packageName.toUpperCase()
  itself = ''
  fileExtension = '.code'
  argDelimiter = ', '
  paramDelimiter = ',\n'
  propDelimiter = '\n'
  enumDelimiter = ',\n'
  codeQuote = `'`

  indentStr = '  '
  commentStr = '// '
  nullStr = 'null'
  endTypeStr = ''
  transport = 'rtl'

  apiVersion = ''
  apiRef = ''
  apiPath = ''

  constructor(public api: ApiModel, public versions?: IVersionInfo) {
    if (versions && versions.apiVersion) {
      this.apiVersion = versions.apiVersion
      this.apiRef = this.apiVersion.replace('.', '')
      this.apiPath = `/${this.apiVersion}`
      this.packageName = this.supportsMultiApi()
        ? `Looker${this.apiRef}SDK`
        : `LookerSDK`
      this.packagePath += this.apiPath
    }
  }

  /**
   * Returns true if the SDK supports multiple API versions of models
   * @returns {boolean} True if multi-API is supported
   */
  supportsMultiApi() {
    // Currently, all but Swift support multiple APIs
    return true
  }

  /**
   * beginning of the "methods" file for a language
   * @param {string} indent
   * @returns {string}
   */
  abstract methodsPrologue(indent: string): string

  /**
   * ending of the "methods" file for a language
   * @param {string} indent
   * @returns {string}
   */
  abstract methodsEpilogue(indent: string): string

  streamsPrologue(_indent: string) {
    return ''
  }

  /**
   * beginning of the "models" file for a language
   * @param {string} indent
   * @returns {string}
   */
  abstract modelsPrologue(indent: string): string

  /**
   * ending of the "models" file for a language
   * @param {string} indent
   * @returns {string}
   */
  abstract modelsEpilogue(indent: string): string

  abstract declareParameter(
    indent: string,
    method: IMethod,
    param: IParameter
  ): string

  declareEnumValue(indent: string, value: EnumValueType) {
    const quote = typeof value === 'string' ? this.codeQuote : ''
    return `${indent}${mayQuote(value)} = ${quote}${value}${quote}`
  }

  abstract declareProperty(indent: string, property: IProperty): string

  abstract typeSignature(indent: string, type: IType): string

  abstract methodSignature(indent: string, method: IMethod): string

  abstract declareMethod(indent: string, method: IMethod): string

  abstract encodePathParams(indent: string, method: IMethod): string

  warnEditing() {
    return (
      'NOTE: Do not edit this file generated by Looker SDK Codegen' +
      (this.versions
        ? ` for Looker ${this.versions?.lookerVersion} API ${this.apiVersion}`
        : '')
    )
  }

  streamerSignature(_indent: string, _method: IMethod) {
    return ''
  }

  // Only implement this method for languages that have explicit streaming methods declared
  declareStreamer(_indent: string, _method: IMethod) {
    return ''
  }

  abstract summary(indent: string, text: string | undefined): string

  initArg(_indent: string, _property: IProperty): string {
    return ''
  }

  construct(_indent: string, _type: IType): string {
    return ''
  }

  bumper(indent: string) {
    return indent + this.indentStr
  }

  describeProperty(property: IProperty) {
    return `${property.description}${property.readOnly ? ' (read-only)' : ''}`
  }

  sdkFileName(baseFileName: string) {
    return this.fileName(`sdk/${this.apiVersion}/${baseFileName}`)
  }

  fileName(base: string) {
    return `${this.codePath}${this.packagePath}/${base}${this.fileExtension}`
  }

  comment(indent: string, description: string) {
    return commentBlock(description, indent, this.commentStr)
  }

  commentHeader(
    indent: string,
    text: string | undefined,
    _commentStr?: string
  ) {
    return text ? `${this.comment(indent, text)}\n` : ''
  }

  declareParameters(indent: string, method: IMethod) {
    const params = method.allParams
    const items: string[] = []
    if (params)
      params.forEach((p) =>
        items.push(this.declareParameter(indent, method, p))
      )
    return items.join(this.paramDelimiter)
  }

  declareConstructorArg(indent: string, property: IProperty) {
    return `${indent}${property.name}${
      property.nullable ? ' = ' + this.nullStr : ''
    }`
  }

  it(value: string) {
    return this.itself ? `${this.itself}.${value}` : value
  }

  declareType(indent: string, type: IType) {
    const bump = this.bumper(indent)
    const props: string[] = []
    let propertyValues = ''
    if (type instanceof EnumType) {
      const num = type as EnumType
      num.values.forEach((value) =>
        props.push(this.declareEnumValue(bump, value))
      )
      propertyValues = props.join(this.enumDelimiter)
    } else {
      Object.values(type.properties).forEach((prop) =>
        props.push(this.declareProperty(bump, prop))
      )
      propertyValues = props.join(this.propDelimiter)
    }
    return (
      this.typeSignature(indent, type) +
      propertyValues +
      this.construct(indent, type) +
      `${this.endTypeStr ? indent : ''}${this.endTypeStr}`
    )
  }

  argGroup(indent: string, args: Arg[], prefix?: string) {
    prefix = prefix || ''
    return args && args.length !== 0
      ? `${indent}[${prefix}${args.join(this.argDelimiter + prefix)}]`
      : this.nullStr
  }

  argList(indent: string, args: Arg[], prefix?: string) {
    prefix = prefix || ''
    return args && args.length !== 0
      ? `${indent}${prefix}${args.join(this.argDelimiter + prefix)}`
      : this.nullStr
  }

  // this is a builder function to produce arguments with optional null place holders but no extra required optional arguments
  argFill(current: string, args: string) {
    if (!current && args.trim() === this.nullStr) {
      // Don't append trailing optional arguments if none have been set yet
      return ''
    }
    return `${args}${current ? this.argDelimiter : ''}${current}`
  }

  httpPath(path: string, _prefix?: string) {
    return path
  }

  // build the http argument list from back to front, so trailing undefined arguments
  // can be omitted. Path arguments are resolved as part of the path parameter to general
  // purpose API method call
  // e.g.
  //   {queryArgs...}, bodyArg, {headerArgs...}, {cookieArgs...}
  //   {queryArgs...}, null, null, {cookieArgs...}
  //   null, bodyArg
  //   {queryArgs...}
  httpArgs(indent: string, method: IMethod) {
    let result = this.argFill('', this.argGroup(indent, method.cookieArgs))
    result = this.argFill(result, this.argGroup(indent, method.headerArgs))
    result = this.argFill(
      result,
      method.bodyArg ? method.bodyArg : this.nullStr
    )
    result = this.argFill(result, this.argGroup(indent, method.queryArgs))
    return result
  }

  errorResponses(_indent: string, method: IMethod) {
    const results: string[] = method.errorResponses.map((r) => `${r.type.name}`)
    return results.join(', ')
  }

  httpCall(indent: string, method: IMethod) {
    const bump = indent + this.indentStr
    const args = this.httpArgs(bump, method)
    const errors = `(${this.errorResponses(indent, method)})`
    return `${indent}return ${this.it(
      this.transport
    )}.${method.httpMethod.toLowerCase()}(${errors}, "${method.endpoint}"${
      args ? ', ' + args : ''
    })`
  }

  streamCall(_indent: string, _method: IMethod) {
    return ''
  }

  useRequest(method: IMethod) {
    if (!this.needsRequestTypes) return false
    return method.mayUseRequestType()
  }

  // Looks up or dynamically creates the request type for this method based
  // on rules for creating request types at the IApiModel implementation level
  // If no request type is required, no request type is created or referenced
  requestTypeName(method: IMethod): string {
    if (!this.useRequest(method)) return ''
    const request = this.api.getRequestType(method)
    if (!request) return ''
    request.refCount++
    method.addType(this.api, request)
    return request.name
  }

  // Looks up or dynamically creates the writeable type for this method based
  // on rules for creating writable types at the IApiModel implementation level
  // If no writeable type is required, no writeable type is created or referenced
  writeableType(type: IType, method: IMethod): IType | undefined {
    if (!type) return undefined
    const writer = this.api.mayGetWriteableType(type)
    if (!writer) return undefined
    writer.refCount++
    method.addType(this.api, writer)
    return writer
  }

  typeNames(_countError = true) {
    const items: string[] = []
    if (!this.api) return items
    Object.values(this.api.types)
      .filter((type) => type.refCount > 0 && !type.intrinsic)
      .forEach((type) => items.push(type.name))
    return items
  }

  typeMap(type: IType): IMappedType {
    type.refCount++ // increment refcount
    return { default: this.nullStr || '', name: type.name || '' }
  }
}
