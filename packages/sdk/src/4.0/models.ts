/*

 MIT License

 Copyright (c) 2023 Looker Data Sciences, Inc.

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.

 */

/**
 * 392 API models: 244 Spec, 66 Request, 60 Write, 22 Enum
 */

import type { IDictionary, DelimArray } from '@looker/sdk-rtl'

/*
 * NOTE: Do not edit this file generated by Looker SDK Codegen for API 4.0
 */

export interface IAccessToken {
  /**
   * Access Token used for API calls (read-only)
   */
  access_token?: string
  /**
   * Type of Token (read-only)
   */
  token_type?: string
  /**
   * Number of seconds before the token expires (read-only)
   */
  expires_in?: number
  /**
   * Refresh token which can be used to obtain a new access token (read-only)
   */
  refresh_token?: string | null
}

export interface IAlert {
  /**
   * Filters coming from the dashboard that are applied. Example `[{ "filter_title": "Name", "field_name": "distribution_centers.name", "filter_value": "Los Angeles CA" }]`
   */
  applied_dashboard_filters?: IAlertAppliedDashboardFilter[] | null
  /**
   * This property informs the check what kind of comparison we are performing. Only certain condition types are valid for time series alerts. For details, refer to [Setting Alert Conditions](https://cloud.google.com/looker/docs/sharing-and-publishing/creating-alerts#setting_alert_conditions) Valid values are: "EQUAL_TO", "GREATER_THAN", "GREATER_THAN_OR_EQUAL_TO", "LESS_THAN", "LESS_THAN_OR_EQUAL_TO", "INCREASES_BY", "DECREASES_BY", "CHANGES_BY".
   */
  comparison_type: ComparisonType
  /**
   * Vixie-Style crontab specification when to run. At minumum, it has to be longer than 15 minute intervals
   */
  cron: string
  /**
   * Domain for the custom url selected by the alert creator from the admin defined domain allowlist
   */
  custom_url_base?: string | null
  /**
   * Parameters and path for the custom url defined by the alert creator
   */
  custom_url_params?: string | null
  /**
   * Label for the custom url defined by the alert creator
   */
  custom_url_label?: string | null
  /**
   * Boolean to determine if the custom url should be used
   */
  show_custom_url?: boolean
  /**
   * An optional, user-defined title for the alert
   */
  custom_title?: string | null
  /**
   * ID of the dashboard element associated with the alert. Refer to [dashboard_element()](#!/Dashboard/DashboardElement)
   */
  dashboard_element_id?: string | null
  /**
   * An optional description for the alert. This supplements the title
   */
  description?: string | null
  /**
   * Array of destinations to send alerts to. Must be the same type of destination. Example `[{ "destination_type": "EMAIL", "email_address": "test@test.com" }]`
   */
  destinations: IAlertDestination[] | null
  field: IAlertField
  /**
   * Whether or not the user follows this alert. (read-only)
   */
  followed?: boolean
  /**
   * Whether or not the alert is followable (read-only)
   */
  followable?: boolean
  /**
   * ID of the alert (read-only)
   */
  id?: string
  /**
   * Whether or not the alert is disabled
   */
  is_disabled?: boolean
  /**
   * Reason for disabling alert
   */
  disabled_reason?: string | null
  /**
   * Whether or not the alert is public
   */
  is_public?: boolean
  /**
   * The type of the investigative content Valid values are: "dashboard".
   */
  investigative_content_type?: InvestigativeContentType | null
  /**
   * The ID of the investigative content. For dashboards, this will be the dashboard ID
   */
  investigative_content_id?: string | null
  /**
   * The title of the investigative content. (read-only)
   */
  investigative_content_title?: string | null
  /**
   * ID of the LookML dashboard associated with the alert
   */
  lookml_dashboard_id?: string | null
  /**
   * ID of the LookML dashboard element associated with the alert
   */
  lookml_link_id?: string | null
  /**
   * User id of alert owner
   */
  owner_id: string
  /**
   * Alert owner's display name (read-only)
   */
  owner_display_name?: string | null
  /**
   * Value of the alert threshold
   */
  threshold: number
  time_series_condition_state?: IAlertConditionState
}

export interface IAlertAppliedDashboardFilter {
  /**
   * Field Title. Refer to `DashboardFilter.title` in [DashboardFilter](#!/types/DashboardFilter). Example `Name`
   */
  filter_title: string | null
  /**
   * Field Name. Refer to `DashboardFilter.dimension` in [DashboardFilter](#!/types/DashboardFilter). Example `distribution_centers.name`
   */
  field_name: string
  /**
   * Field Value. [Filter Expressions](https://cloud.google.com/looker/docs/reference/filter-expressions). Example `Los Angeles CA`
   */
  filter_value: string
  /**
   * Human Readable Filter Description. This may be null or auto-generated. Example `is Los Angeles CA` (read-only)
   */
  filter_description?: string | null
}

export interface IAlertConditionState {
  /**
   * (Write-Only) The second latest time string the alert has seen.
   */
  previous_time_series_id?: string | null
  /**
   * (Write-Only) Latest time string the alert has seen.
   */
  latest_time_series_id?: string | null
}

export interface IAlertDestination {
  /**
   * Type of destination that the alert will be sent to Valid values are: "EMAIL", "ACTION_HUB".
   */
  destination_type: DestinationType
  /**
   * Email address for the 'email' type
   */
  email_address?: string | null
  /**
   * Action hub integration id for the 'action_hub' type. [Integration](#!/types/Integration)
   */
  action_hub_integration_id?: string | null
  /**
   * Action hub form params json for the 'action_hub' type [IntegrationParam](#!/types/IntegrationParam)
   */
  action_hub_form_params_json?: string | null
}

export interface IAlertField {
  /**
   * Field's title. Usually auto-generated to reflect field name and its filters
   */
  title: string
  /**
   * Field's name. Has the format `<view>.<field>` Refer to [docs](https://cloud.google.com/looker/docs/sharing-and-publishing/creating-alerts) for more details
   */
  name: string
  /**
   * (Optional / Advance Use) List of fields filter. This further restricts the alert to certain dashboard element's field values. This can be used on top of dashboard filters `applied_dashboard_filters`. To keep thing simple, it's suggested to just use dashboard filters. Example: `{ 'title': '12 Number on Hand', 'name': 'inventory_items.number_on_hand', 'filter': [{ 'field_name': 'inventory_items.id', 'field_value': 12, 'filter_value': null }] }`
   */
  filter?: IAlertFieldFilter[] | null
}

export interface IAlertFieldFilter {
  /**
   * Field Name. Has format `<view>.<field>`
   */
  field_name: string
  /**
   * Field Value. Depends on the type of field - numeric or string. For [location](https://cloud.google.com/looker/docs/reference/field-reference/dimension-type-reference#location) type, it's a list of floats. Example `[1.0, 56.0]`
   */
  field_value: any
  /**
   * Filter Value. Usually null except for [location](https://cloud.google.com/looker/docs/reference/field-reference/dimension-type-reference#location) type. It'll be a string of lat,long ie `'1.0,56.0'`
   */
  filter_value?: string | null
}

export interface IAlertNotifications {
  /**
   * ID of the notification (read-only)
   */
  notification_id?: string
  /**
   * ID of the alert (read-only)
   */
  alert_condition_id?: string
  /**
   * ID of the user (read-only)
   */
  user_id?: string
  /**
   * Read state of the notification
   */
  is_read?: boolean
  /**
   * The value of the field on which the alert condition is set (read-only)
   */
  field_value?: number | null
  /**
   * The value of the threshold which triggers the alert notification (read-only)
   */
  threshold_value?: number | null
  /**
   * The time at which the alert query ran (read-only)
   */
  ran_at?: string
  alert?: IMobilePayload
}

export interface IAlertPatch {
  /**
   * New owner ID of the alert
   */
  owner_id?: string | null
  /**
   * Set alert enabled or disabled
   */
  is_disabled?: boolean | null
  /**
   * The reason this alert is disabled
   */
  disabled_reason?: string | null
  /**
   * Set alert public or private
   */
  is_public?: boolean | null
  /**
   * New threshold value
   */
  threshold?: number | null
}

/**
 * The appropriate horizontal text alignment the values of this field should be displayed in. Valid values are: "left", "right". (Enum defined in LookmlModelExploreField)
 */
export enum Align {
  left = 'left',
  right = 'right',
}

export interface IApiSession {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * The id of active workspace for this session
   */
  workspace_id?: string | null
  /**
   * The id of the actual user in the case when this session represents one user sudo'ing as another (read-only)
   */
  sudo_user_id?: string | null
}

export interface IApiVersion {
  /**
   * Current Looker release version number (read-only)
   */
  looker_release_version?: string
  current_version?: IApiVersionElement
  /**
   * Array of versions supported by this Looker instance (read-only)
   */
  supported_versions?: IApiVersionElement[]
  /**
   * API server base url (read-only)
   */
  api_server_url?: string
  /**
   * Web server base url (read-only)
   */
  web_server_url?: string
}

export interface IApiVersionElement {
  /**
   * Version number as it appears in '/api/xxx/' urls (read-only)
   */
  version?: string | null
  /**
   * Full version number including minor version (read-only)
   */
  full_version?: string | null
  /**
   * Status of this version (read-only)
   */
  status?: string | null
  /**
   * Url for swagger.json for this version (read-only)
   */
  swagger_url?: string | null
}

export interface IArtifact {
  /**
   * Key of value to store. Namespace + Key must be unique.
   */
  key: string
  /**
   * Value to store.
   */
  value: string
  /**
   * MIME type of content. This can only be used to override content that is detected as text/plain. Needed to set application/json content types, which are analyzed as plain text.
   */
  content_type?: string | null
  /**
   * Version number of the stored value. The version must be provided for any updates to an existing artifact. (read-only)
   */
  version?: number
  /**
   * Artifact storage namespace. (read-only)
   */
  namespace: string
  /**
   * Timestamp when this artifact was created. (read-only)
   */
  created_at: Date
  /**
   * Timestamp when this artifact was updated. (read-only)
   */
  updated_at: Date
  /**
   * Size (in bytes) of the stored value. (read-only)
   */
  value_size: number
  /**
   * User id of the artifact creator. (read-only)
   */
  created_by_userid: string
  /**
   * User id of the artifact updater. (read-only)
   */
  updated_by_userid: string
}

export interface IArtifactNamespace {
  /**
   * Artifact storage namespace. (read-only)
   */
  namespace: string
  /**
   * The number of artifacts stored in the namespace. (read-only)
   */
  count: number
}

export interface IArtifactUsage {
  /**
   * The configured maximum size in bytes of the entire artifact store. (read-only)
   */
  max_size: number
  /**
   * The currently used storage size in bytes of the entire artifact store. (read-only)
   */
  usage: number
}

export interface IBackupConfiguration {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Type of backup: looker-s3 or custom-s3
   */
  type?: string | null
  /**
   * Name of bucket for custom-s3 backups
   */
  custom_s3_bucket?: string | null
  /**
   * Name of region where the bucket is located
   */
  custom_s3_bucket_region?: string | null
  /**
   * (Write-Only) AWS S3 key used for custom-s3 backups
   */
  custom_s3_key?: string | null
  /**
   * (Write-Only) AWS S3 secret used for custom-s3 backups
   */
  custom_s3_secret?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface IBoard {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Id of associated content_metadata record (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Date of board creation (read-only)
   */
  created_at?: Date | null
  /**
   * Date of board deletion
   */
  deleted_at?: Date | null
  /**
   * Description of the board
   */
  description?: string | null
  /**
   * Sections of the board (read-only)
   */
  board_sections?: IBoardSection[] | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * ids of the board sections in the order they should be displayed
   */
  section_order?: string[] | null
  /**
   * Title of the board
   */
  title?: string | null
  /**
   * Date of last board update (read-only)
   */
  updated_at?: Date | null
  /**
   * User id of board creator (read-only)
   */
  user_id?: string | null
  /**
   * Whether the board is the primary homepage or not (read-only)
   */
  primary_homepage?: boolean
}

export interface IBoardItem {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Name of user who created the content this item is based on (read-only)
   */
  content_created_by?: string | null
  /**
   * Content favorite id associated with the item this content is based on (read-only)
   */
  content_favorite_id?: string | null
  /**
   * Content metadata id associated with the item this content is based on (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Last time the content that this item is based on was updated (read-only)
   */
  content_updated_at?: string | null
  /**
   * Custom description entered by the user, if present
   */
  custom_description?: string | null
  /**
   * Custom title entered by the user, if present
   */
  custom_title?: string | null
  /**
   * Custom url entered by the user, if present
   */
  custom_url?: string | null
  /**
   * Dashboard to base this item on
   */
  dashboard_id?: string | null
  /**
   * The actual description for display (read-only)
   */
  description?: string | null
  /**
   * Number of times content has been favorited, if present (read-only)
   */
  favorite_count?: number | null
  /**
   * Associated Board Section
   */
  board_section_id?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * The actual image_url for display (read-only)
   */
  image_url?: string | null
  /**
   * The container folder name of the content (read-only)
   */
  location?: string | null
  /**
   * Look to base this item on
   */
  look_id?: string | null
  /**
   * LookML Dashboard to base this item on
   */
  lookml_dashboard_id?: string | null
  /**
   * An arbitrary integer representing the sort order within the section
   */
  order?: number | null
  /**
   * The actual title for display (read-only)
   */
  title?: string | null
  /**
   * Relative url for the associated content (read-only)
   */
  url?: string
  /**
   * Whether the custom description should be used instead of the content description, if the item is associated with content
   */
  use_custom_description?: boolean
  /**
   * Whether the custom title should be used instead of the content title, if the item is associated with content
   */
  use_custom_title?: boolean
  /**
   * Whether the custom url should be used instead of the content url, if the item is associated with content
   */
  use_custom_url?: boolean
  /**
   * Number of times content has been viewed, if present (read-only)
   */
  view_count?: number | null
  /**
   * (Write-Only) base64 encoded image data
   */
  custom_image_data_base64?: string | null
  /**
   * Custom image_url entered by the user, if present (read-only)
   */
  custom_image_url?: string | null
  /**
   * Whether the custom image should be used instead of the content image, if the item is associated with content
   */
  use_custom_image?: boolean
}

export interface IBoardSection {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Time at which this section was created. (read-only)
   */
  created_at?: Date | null
  /**
   * Time at which this section was deleted.
   */
  deleted_at?: Date | null
  /**
   * Description of the content found in this section.
   */
  description?: string | null
  /**
   * Id reference to parent board
   */
  board_id?: string | null
  /**
   * Items in the board section (read-only)
   */
  board_items?: IBoardItem[] | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * ids of the board items in the order they should be displayed
   */
  item_order?: string[] | null
  /**
   * ids of the homepage items the user can see in the order they should be displayed (read-only)
   */
  visible_item_order?: string[] | null
  /**
   * Name of row
   */
  title?: string | null
  /**
   * Time at which this section was last updated. (read-only)
   */
  updated_at?: Date | null
}

/**
 * Field category Valid values are: "parameter", "filter", "measure", "dimension". (Enum defined in LookmlModelExploreField)
 */
export enum Category {
  parameter = 'parameter',
  filter = 'filter',
  measure = 'measure',
  dimension = 'dimension',
}

export interface IColorCollection {
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Label of color collection
   */
  label?: string
  /**
   * Array of categorical palette definitions
   */
  categoricalPalettes?: IDiscretePalette[]
  /**
   * Array of discrete palette definitions
   */
  sequentialPalettes?: IContinuousPalette[]
  /**
   * Array of diverging palette definitions
   */
  divergingPalettes?: IContinuousPalette[]
}

export interface IColorStop {
  /**
   * CSS color string
   */
  color?: string
  /**
   * Offset in continuous palette (0 to 100)
   */
  offset?: number
}

export interface IColumnSearch {
  /**
   * Name of schema containing the table (read-only)
   */
  schema_name?: string | null
  /**
   * Name of table containing the column (read-only)
   */
  table_name?: string | null
  /**
   * Name of column (read-only)
   */
  column_name?: string | null
  /**
   * Column data type (read-only)
   */
  data_type?: string | null
}

/**
 * This property informs the check what kind of comparison we are performing. Only certain condition types are valid for time series alerts. For details, refer to [Setting Alert Conditions](https://cloud.google.com/looker/docs/sharing-and-publishing/creating-alerts#setting_alert_conditions) Valid values are: "EQUAL_TO", "GREATER_THAN", "GREATER_THAN_OR_EQUAL_TO", "LESS_THAN", "LESS_THAN_OR_EQUAL_TO", "INCREASES_BY", "DECREASES_BY", "CHANGES_BY". (Enum defined in Alert)
 */
export enum ComparisonType {
  EQUAL_TO = 'EQUAL_TO',
  GREATER_THAN = 'GREATER_THAN',
  GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO',
  LESS_THAN = 'LESS_THAN',
  LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO',
  INCREASES_BY = 'INCREASES_BY',
  DECREASES_BY = 'DECREASES_BY',
  CHANGES_BY = 'CHANGES_BY',
}

export interface IConnectionFeatures {
  /**
   * Name of the dialect for this connection (read-only)
   */
  dialect_name?: string
  /**
   * True for cost estimating support (read-only)
   */
  cost_estimate?: boolean
  /**
   * True for multiple database support (read-only)
   */
  multiple_databases?: boolean
  /**
   * True for cost estimating support (read-only)
   */
  column_search?: boolean
  /**
   * True for secondary index support (read-only)
   */
  persistent_table_indexes?: boolean
  /**
   * True for persistent derived table support (read-only)
   */
  persistent_derived_tables?: boolean
  /**
   * True for turtles support (read-only)
   */
  turtles?: boolean
  /**
   * True for percentile support (read-only)
   */
  percentile?: boolean
  /**
   * True for distinct percentile support (read-only)
   */
  distinct_percentile?: boolean
  /**
   * True for stable views support (read-only)
   */
  stable_views?: boolean
  /**
   * True for millisecond support (read-only)
   */
  milliseconds?: boolean
  /**
   * True for microsecond support (read-only)
   */
  microseconds?: boolean
  /**
   * True for subtotal support (read-only)
   */
  subtotals?: boolean
  /**
   * True for geographic location support (read-only)
   */
  location?: boolean
  /**
   * True for timezone conversion in query support (read-only)
   */
  timezone?: boolean
  /**
   * True for connection pooling support (read-only)
   */
  connection_pooling?: boolean
}

export interface IContentFavorite {
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * User Id which owns this ContentFavorite
   */
  user_id?: string
  /**
   * Content Metadata Id associated with this ContentFavorite
   */
  content_metadata_id?: string
  /**
   * Id of a look (read-only)
   */
  look_id?: string | null
  /**
   * Id of a dashboard (read-only)
   */
  dashboard_id?: string | null
  look?: ILookBasic
  dashboard?: IDashboardBase
  /**
   * Id of a board (read-only)
   */
  board_id?: string | null
}

export interface IContentMeta {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Name or title of underlying content (read-only)
   */
  name?: string | null
  /**
   * Id of Parent Content (read-only)
   */
  parent_id?: string | null
  /**
   * Id of associated dashboard when content_type is "dashboard" (read-only)
   */
  dashboard_id?: string | null
  /**
   * Id of associated look when content_type is "look" (read-only)
   */
  look_id?: string | null
  /**
   * Id of associated folder when content_type is "space" (read-only)
   */
  folder_id?: string | null
  /**
   * Content Type ("dashboard", "look", or "folder") (read-only)
   */
  content_type?: string | null
  /**
   * Whether content inherits its access levels from parent
   */
  inherits?: boolean
  /**
   * Id of Inherited Content (read-only)
   */
  inheriting_id?: string | null
  /**
   * Content Slug (read-only)
   */
  slug?: string | null
}

/**
 * WARNING: no writeable properties found for POST, PUT, or PATCH
 */
export interface IContentMetaGroupUser {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Id of associated Content Metadata (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Type of permission: "view" or "edit" Valid values are: "view", "edit". (read-only)
   */
  permission_type?: PermissionType | null
  /**
   * ID of associated group (read-only)
   */
  group_id?: string | null
  /**
   * ID of associated user (read-only)
   */
  user_id?: string | null
}

export interface IContentSearch {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Primary id associated with the content (read-only)
   */
  content_id?: string | null
  /**
   * Type of content (read-only)
   */
  type?: string | null
  /**
   * Content title (read-only)
   */
  title?: string | null
  /**
   * Content description (read-only)
   */
  description?: string | null
  /**
   * Id of the folder where the content is saved (read-only)
   */
  folder_id?: string | null
  /**
   * Name of the folder where the content is saved (read-only)
   */
  folder_name?: string | null
  /**
   * Number of times the content has been viewed (read-only)
   */
  view_count?: number | null
  /**
   * Preferred way of viewing the content (only applies to dashboards) (read-only)
   */
  preferred_viewer?: string | null
}

export interface IContentValidation {
  /**
   * A list of content errors (read-only)
   */
  content_with_errors?: IContentValidatorError[] | null
  /**
   * Duration of content validation in seconds (read-only)
   */
  computation_time?: number | null
  /**
   * The number of looks validated (read-only)
   */
  total_looks_validated?: number | null
  /**
   * The number of dashboard elements validated (read-only)
   */
  total_dashboard_elements_validated?: number | null
  /**
   * The number of dashboard filters validated (read-only)
   */
  total_dashboard_filters_validated?: number | null
  /**
   * The number of scheduled plans validated (read-only)
   */
  total_scheduled_plans_validated?: number | null
  /**
   * The number of alerts validated (read-only)
   */
  total_alerts_validated?: number | null
  /**
   * The number of explores used across all content validated (read-only)
   */
  total_explores_validated?: number | null
}

export interface IContentValidationAlert {
  /**
   * ID of the alert
   */
  id?: string
  /**
   * ID of the LookML dashboard associated with the alert
   */
  lookml_dashboard_id?: string | null
  /**
   * ID of the LookML dashboard element associated with the alert
   */
  lookml_link_id?: string | null
  /**
   * Domain for the custom url selected by the alert creator from the admin defined domain allowlist
   */
  custom_url_base?: string | null
  /**
   * Parameters and path for the custom url defined by the alert creator
   */
  custom_url_params?: string | null
  /**
   * Label for the custom url defined by the alert creator
   */
  custom_url_label?: string | null
  /**
   * Boolean to determine if the custom url should be used
   */
  show_custom_url?: boolean
  /**
   * An optional, user-defined title for the alert
   */
  custom_title?: string | null
}

export interface IContentValidationDashboard {
  /**
   * Description
   */
  description?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  folder?: IContentValidationFolder
  /**
   * Dashboard Title
   */
  title?: string | null
  /**
   * Relative URL of the dashboard (read-only)
   */
  url?: string | null
}

export interface IContentValidationDashboardElement {
  /**
   * Text tile body text
   */
  body_text?: string | null
  /**
   * Id of Dashboard
   */
  dashboard_id?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Id Of Look
   */
  look_id?: string | null
  /**
   * Note Display
   */
  note_display?: string | null
  /**
   * Note State
   */
  note_state?: string | null
  /**
   * Note Text
   */
  note_text?: string | null
  /**
   * Note Text as Html (read-only)
   */
  note_text_as_html?: string | null
  /**
   * Id Of Query
   */
  query_id?: string | null
  /**
   * Text tile subtitle text
   */
  subtitle_text?: string | null
  /**
   * Title of dashboard element
   */
  title?: string | null
  /**
   * Whether title is hidden
   */
  title_hidden?: boolean
  /**
   * Text tile title
   */
  title_text?: string | null
  /**
   * Type
   */
  type?: string | null
  /**
   * JSON with all the properties required for rich editor and buttons elements
   */
  rich_content_json?: string | null
  /**
   * Extension ID
   */
  extension_id?: string | null
}

export interface IContentValidationDashboardFilter {
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Id of Dashboard (read-only)
   */
  dashboard_id?: string | null
  /**
   * Name of filter
   */
  name?: string | null
  /**
   * Title of filter
   */
  title?: string | null
  /**
   * Type of filter: one of date, number, string, or field
   */
  type?: string | null
  /**
   * Default value of filter
   */
  default_value?: string | null
  /**
   * Model of filter (required if type = field)
   */
  model?: string | null
  /**
   * Explore of filter (required if type = field)
   */
  explore?: string | null
  /**
   * Dimension of filter (required if type = field)
   */
  dimension?: string | null
}

export interface IContentValidationError {
  /**
   * Error message (read-only)
   */
  message?: string | null
  /**
   * Name of the field involved in the error (read-only)
   */
  field_name?: string | null
  /**
   * Name of the model involved in the error (read-only)
   */
  model_name?: string | null
  /**
   * Name of the explore involved in the error (read-only)
   */
  explore_name?: string | null
  /**
   * Whether this validation error is removable (read-only)
   */
  removable?: boolean
}

export interface IContentValidationFolder {
  /**
   * Unique Name
   */
  name: string
  /**
   * Unique Id (read-only)
   */
  id?: string
}

export interface IContentValidationLook {
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Look Title
   */
  title?: string | null
  /**
   * Short Url (read-only)
   */
  short_url?: string | null
  folder?: IContentValidationFolder
}

export interface IContentValidationLookMLDashboard {
  /**
   * ID of the LookML Dashboard (read-only)
   */
  id?: string
  /**
   * Title of the LookML Dashboard (read-only)
   */
  title?: string | null
  /**
   * ID of Space (read-only)
   */
  space_id?: string | null
}

export interface IContentValidationLookMLDashboardElement {
  /**
   * Link ID of the LookML Dashboard Element (read-only)
   */
  lookml_link_id?: string | null
  /**
   * Title of the LookML Dashboard Element (read-only)
   */
  title?: string | null
}

export interface IContentValidationScheduledPlan {
  /**
   * Name of this scheduled plan
   */
  name?: string | null
  /**
   * Id of a look
   */
  look_id?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
}

export interface IContentValidatorError {
  look?: IContentValidationLook
  dashboard?: IContentValidationDashboard
  dashboard_element?: IContentValidationDashboardElement
  dashboard_filter?: IContentValidationDashboardFilter
  scheduled_plan?: IContentValidationScheduledPlan
  alert?: IContentValidationAlert
  lookml_dashboard?: IContentValidationLookMLDashboard
  lookml_dashboard_element?: IContentValidationLookMLDashboardElement
  /**
   * A list of errors found for this piece of content (read-only)
   */
  errors?: IContentValidationError[] | null
  /**
   * An id unique to this piece of content for this validation run (read-only)
   */
  id?: string
}

export interface IContentView {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Id of viewed Look (read-only)
   */
  look_id?: string | null
  /**
   * Id of the viewed Dashboard (read-only)
   */
  dashboard_id?: string | null
  /**
   * Name or title of underlying content (read-only)
   */
  title?: string | null
  /**
   * Content metadata id of the Look or Dashboard (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Id of user content was viewed by (read-only)
   */
  user_id?: string | null
  /**
   * Id of group content was viewed by (read-only)
   */
  group_id?: string | null
  /**
   * Number of times piece of content was viewed (read-only)
   */
  view_count?: number | null
  /**
   * Number of times piece of content was favorited (read-only)
   */
  favorite_count?: number | null
  /**
   * Date the piece of content was last viewed (read-only)
   */
  last_viewed_at?: string | null
  /**
   * Week start date for the view and favorite count during that given week (read-only)
   */
  start_of_week_date?: string | null
}

export interface IContinuousPalette {
  /**
   * Unique identity string (read-only)
   */
  id?: string
  /**
   * Label for palette
   */
  label?: string | null
  /**
   * Type of palette
   */
  type?: string
  /**
   * Array of ColorStops in the palette
   */
  stops?: IColorStop[]
}

export interface ICostEstimate {
  /**
   * Cost of SQL statement (read-only)
   */
  cost?: number
  /**
   * Does the result come from the cache? (read-only)
   */
  cache_hit?: boolean
  /**
   * Cost measurement size (read-only)
   */
  cost_unit?: string
  /**
   * Human-friendly message (read-only)
   */
  message?: string
}

/**
 * WARNING: no writeable properties found for POST, PUT, or PATCH
 */
export interface ICreateCostEstimate {
  /**
   * SQL statement to estimate (read-only)
   */
  sql?: string
}

export interface ICreateCredentialsApi3 {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * API key client_id (read-only)
   */
  client_id?: string | null
  /**
   * Timestamp for the creation of this credential (read-only)
   */
  created_at?: string | null
  /**
   * Has this credential been disabled? (read-only)
   */
  is_disabled?: boolean
  /**
   * Short name for the type of this kind of credential (read-only)
   */
  type?: string | null
  /**
   * API key client_secret (read-only)
   */
  client_secret?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface ICreateDashboardFilter {
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Id of Dashboard
   */
  dashboard_id: string | null
  /**
   * Name of filter
   */
  name: string | null
  /**
   * Title of filter
   */
  title: string | null
  /**
   * Type of filter: one of date, number, string, or field
   */
  type: string | null
  /**
   * Default value of filter
   */
  default_value?: string | null
  /**
   * Model of filter (required if type = field)
   */
  model?: string | null
  /**
   * Explore of filter (required if type = field)
   */
  explore?: string | null
  /**
   * Dimension of filter (required if type = field)
   */
  dimension?: string | null
  /**
   * Field information (read-only)
   */
  field?: IDictionary<any> | null
  /**
   * Display order of this filter relative to other filters
   */
  row?: number | null
  /**
   * Array of listeners for faceted filters
   */
  listens_to_filters?: string[] | null
  /**
   * Whether the filter allows multiple filter values (deprecated in the latest version of dashboards)
   */
  allow_multiple_values?: boolean
  /**
   * Whether the filter requires a value to run the dashboard
   */
  required?: boolean
  /**
   * The visual configuration for this filter. Used to set up how the UI for this filter should appear.
   */
  ui_config?: IDictionary<any> | null
}

export interface ICreateDashboardRenderTask {
  /**
   * Filter values to apply to the dashboard queries, in URL query format
   */
  dashboard_filters?: string | null
  /**
   * Dashboard layout style: single_column or tiled
   */
  dashboard_style?: string | null
}

export interface ICreateEmbedUserRequest {
  external_user_id: string
}

export interface ICreateFolder {
  /**
   * Unique Name
   */
  name: string
  /**
   * Id of Parent. If the parent id is null, this is a root-level entry
   */
  parent_id: string
}

export interface ICreateOAuthApplicationUserStateRequest {
  user_id: string
  oauth_application_id: string
  access_token: string
  access_token_expires_at: Date
  refresh_token?: string | null
  refresh_token_expires_at?: Date | null
}

export interface ICreateOAuthApplicationUserStateResponse {
  /**
   * User Id (read-only)
   */
  user_id: string
  /**
   * OAuth Application ID (read-only)
   */
  oauth_application_id: string
}

export interface ICreateQueryTask {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Id of query to run
   */
  query_id: string | null
  /**
   * Desired async query result format. Valid values are: "inline_json", "json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml".
   */
  result_format: ResultFormat | null
  /**
   * Source of query task
   */
  source?: string | null
  /**
   * Create the task but defer execution
   */
  deferred?: boolean
  /**
   * Id of look associated with query.
   */
  look_id?: string | null
  /**
   * Id of dashboard associated with query.
   */
  dashboard_id?: string | null
}

export interface ICredentialsApi3 {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * API key client_id (read-only)
   */
  client_id?: string | null
  /**
   * Timestamp for the creation of this credential (read-only)
   */
  created_at?: string | null
  /**
   * Has this credential been disabled? (read-only)
   */
  is_disabled?: boolean
  /**
   * Short name for the type of this kind of credential (read-only)
   */
  type?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface ICredentialsEmail {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Timestamp for the creation of this credential (read-only)
   */
  created_at?: string | null
  /**
   * EMail address used for user login
   */
  email?: string | null
  /**
   * Force the user to change their password upon their next login
   */
  forced_password_reset_at_next_login?: boolean
  /**
   * Unique Id of the user (read-only)
   */
  user_id?: string | null
  /**
   * Has this credential been disabled? (read-only)
   */
  is_disabled?: boolean
  /**
   * Timestamp for most recent login using credential (read-only)
   */
  logged_in_at?: string | null
  /**
   * Url with one-time use secret token that the user can use to reset password (read-only)
   */
  password_reset_url?: string | null
  /**
   * Url with one-time use secret token that the user can use to setup account (read-only)
   */
  account_setup_url?: string | null
  /**
   * Short name for the type of this kind of credential (read-only)
   */
  type?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
  /**
   * Link to get this user (read-only)
   */
  user_url?: string | null
}

export interface ICredentialsEmailSearch {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Timestamp for the creation of this credential (read-only)
   */
  created_at?: string | null
  /**
   * EMail address used for user login
   */
  email?: string | null
  /**
   * Force the user to change their password upon their next login
   */
  forced_password_reset_at_next_login?: boolean
  /**
   * Unique Id of the user (read-only)
   */
  user_id?: string | null
  /**
   * Has this credential been disabled? (read-only)
   */
  is_disabled?: boolean
  /**
   * Timestamp for most recent login using credential (read-only)
   */
  logged_in_at?: string | null
  /**
   * Url with one-time use secret token that the user can use to reset password (read-only)
   */
  password_reset_url?: string | null
  /**
   * Url with one-time use secret token that the user can use to setup account (read-only)
   */
  account_setup_url?: string | null
  /**
   * Short name for the type of this kind of credential (read-only)
   */
  type?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
  /**
   * Link to get this user (read-only)
   */
  user_url?: string | null
}

export interface ICredentialsEmbed {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Timestamp for the creation of this credential (read-only)
   */
  created_at?: string | null
  /**
   * Embedder's id for a group to which this user was added during the most recent login (read-only)
   */
  external_group_id?: string | null
  /**
   * Embedder's unique id for the user (read-only)
   */
  external_user_id?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Has this credential been disabled? (read-only)
   */
  is_disabled?: boolean
  /**
   * Timestamp for most recent login using credential (read-only)
   */
  logged_in_at?: string | null
  /**
   * Short name for the type of this kind of credential (read-only)
   */
  type?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface ICredentialsGoogle {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Timestamp for the creation of this credential (read-only)
   */
  created_at?: string | null
  /**
   * Google domain (read-only)
   */
  domain?: string | null
  /**
   * EMail address (read-only)
   */
  email?: string | null
  /**
   * Google's Unique ID for this user (read-only)
   */
  google_user_id?: string | null
  /**
   * Has this credential been disabled? (read-only)
   */
  is_disabled?: boolean
  /**
   * Timestamp for most recent login using credential (read-only)
   */
  logged_in_at?: string | null
  /**
   * Short name for the type of this kind of credential (read-only)
   */
  type?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface ICredentialsLDAP {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Timestamp for the creation of this credential (read-only)
   */
  created_at?: string | null
  /**
   * EMail address (read-only)
   */
  email?: string | null
  /**
   * Has this credential been disabled? (read-only)
   */
  is_disabled?: boolean
  /**
   * LDAP Distinguished name for this user (as-of the last login) (read-only)
   */
  ldap_dn?: string | null
  /**
   * LDAP Unique ID for this user (read-only)
   */
  ldap_id?: string | null
  /**
   * Timestamp for most recent login using credential (read-only)
   */
  logged_in_at?: string | null
  /**
   * Short name for the type of this kind of credential (read-only)
   */
  type?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface ICredentialsLookerOpenid {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Timestamp for the creation of this credential (read-only)
   */
  created_at?: string | null
  /**
   * EMail address used for user login (read-only)
   */
  email?: string | null
  /**
   * Has this credential been disabled? (read-only)
   */
  is_disabled?: boolean
  /**
   * Timestamp for most recent login using credential (read-only)
   */
  logged_in_at?: string | null
  /**
   * IP address of client for most recent login using credential (read-only)
   */
  logged_in_ip?: string | null
  /**
   * Short name for the type of this kind of credential (read-only)
   */
  type?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
  /**
   * Link to get this user (read-only)
   */
  user_url?: string | null
}

export interface ICredentialsOIDC {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Timestamp for the creation of this credential (read-only)
   */
  created_at?: string | null
  /**
   * EMail address (read-only)
   */
  email?: string | null
  /**
   * Has this credential been disabled? (read-only)
   */
  is_disabled?: boolean
  /**
   * Timestamp for most recent login using credential (read-only)
   */
  logged_in_at?: string | null
  /**
   * OIDC OP's Unique ID for this user (read-only)
   */
  oidc_user_id?: string | null
  /**
   * Short name for the type of this kind of credential (read-only)
   */
  type?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface ICredentialsSaml {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Timestamp for the creation of this credential (read-only)
   */
  created_at?: string | null
  /**
   * EMail address (read-only)
   */
  email?: string | null
  /**
   * Has this credential been disabled? (read-only)
   */
  is_disabled?: boolean
  /**
   * Timestamp for most recent login using credential (read-only)
   */
  logged_in_at?: string | null
  /**
   * Saml IdP's Unique ID for this user (read-only)
   */
  saml_user_id?: string | null
  /**
   * Short name for the type of this kind of credential (read-only)
   */
  type?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

/**
 * WARNING: no writeable properties found for POST, PUT, or PATCH
 */
export interface ICredentialsTotp {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Timestamp for the creation of this credential (read-only)
   */
  created_at?: string | null
  /**
   * Has this credential been disabled? (read-only)
   */
  is_disabled?: boolean
  /**
   * Short name for the type of this kind of credential (read-only)
   */
  type?: string | null
  /**
   * User has verified (read-only)
   */
  verified?: boolean
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface ICustomWelcomeEmail {
  /**
   * If true, custom email content will replace the default body of welcome emails
   */
  enabled?: boolean
  /**
   * The HTML to use as custom content for welcome emails. Script elements and other potentially dangerous markup will be removed.
   */
  content?: string | null
  /**
   * The text to appear in the email subject line. Only available with a whitelabel license and whitelabel_configuration.advanced_custom_welcome_email enabled.
   */
  subject?: string | null
  /**
   * The text to appear in the header line of the email body. Only available with a whitelabel license and whitelabel_configuration.advanced_custom_welcome_email enabled.
   */
  header?: string | null
}

export interface IDashboard {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Content Favorite Id (read-only)
   */
  content_favorite_id?: string | null
  /**
   * Id of content metadata (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Description
   */
  description?: string | null
  /**
   * Is Hidden
   */
  hidden?: boolean
  /**
   * Unique Id (read-only)
   */
  id?: string
  model?: ILookModel
  /**
   * Timezone in which the Dashboard will run by default.
   */
  query_timezone?: string | null
  /**
   * Is Read-only (read-only)
   */
  readonly?: boolean
  /**
   * Refresh Interval, as a time duration phrase like "2 hours 30 minutes". A number with no time units will be interpreted as whole seconds.
   */
  refresh_interval?: string | null
  /**
   * Refresh Interval in milliseconds (read-only)
   */
  refresh_interval_to_i?: number | null
  folder?: IFolderBase
  /**
   * Dashboard Title
   */
  title?: string | null
  /**
   * Id of User (read-only)
   */
  user_id?: string | null
  /**
   * Content Metadata Slug
   */
  slug?: string | null
  /**
   * The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)
   */
  preferred_viewer?: string | null
  /**
   * Enables alerts to keep in sync with dashboard filter changes
   */
  alert_sync_with_dashboard_filter_enabled?: boolean
  /**
   * Background color
   */
  background_color?: string | null
  /**
   * Time that the Dashboard was created. (read-only)
   */
  created_at?: Date | null
  /**
   * Enables crossfiltering in dashboards - only available in dashboards-next (beta)
   */
  crossfilter_enabled?: boolean
  /**
   * Elements (read-only)
   */
  dashboard_elements?: IDashboardElement[] | null
  /**
   * Filters (read-only)
   */
  dashboard_filters?: IDashboardFilter[] | null
  /**
   * Layouts (read-only)
   */
  dashboard_layouts?: IDashboardLayout[] | null
  /**
   * Whether or not a dashboard is 'soft' deleted.
   */
  deleted?: boolean
  /**
   * Time that the Dashboard was 'soft' deleted. (read-only)
   */
  deleted_at?: Date | null
  /**
   * Id of User that 'soft' deleted the dashboard. (read-only)
   */
  deleter_id?: string | null
  /**
   * Relative path of URI of LookML file to edit the dashboard (LookML dashboard only). (read-only)
   */
  edit_uri?: string | null
  /**
   * Allow visualizations to be viewed in full screen mode
   */
  enable_viz_full_screen?: boolean
  /**
   * Number of times favorited (read-only)
   */
  favorite_count?: number | null
  /**
   * Sets the default state of the filters bar to collapsed or open
   */
  filters_bar_collapsed?: boolean
  /**
   * Sets the default state of the filters location to top(true) or right(false)
   */
  filters_location_top?: boolean
  /**
   * Time the dashboard was last accessed (read-only)
   */
  last_accessed_at?: Date | null
  /**
   * Time last viewed in the Looker web UI (read-only)
   */
  last_viewed_at?: Date | null
  /**
   * Time that the Dashboard was most recently updated. (read-only)
   */
  updated_at?: Date | null
  /**
   * Id of User that most recently updated the dashboard. (read-only)
   */
  last_updater_id?: string | null
  /**
   * Name of User that most recently updated the dashboard. (read-only)
   */
  last_updater_name?: string | null
  /**
   * Name of User that created the dashboard. (read-only)
   */
  user_name?: string | null
  /**
   * configuration option that governs how dashboard loading will happen.
   */
  load_configuration?: string | null
  /**
   * Links this dashboard to a particular LookML dashboard such that calling a **sync** operation on that LookML dashboard will update this dashboard to match.
   */
  lookml_link_id?: string | null
  /**
   * Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user's ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://cloud.google.com/looker/docs/r/api/control-access)
   */
  show_filters_bar?: boolean | null
  /**
   * Show title
   */
  show_title?: boolean | null
  /**
   * Id of folder
   */
  folder_id?: string | null
  /**
   * Color of text on text tiles
   */
  text_tile_text_color?: string | null
  /**
   * Tile background color
   */
  tile_background_color?: string | null
  /**
   * Tile text color
   */
  tile_text_color?: string | null
  /**
   * Title color
   */
  title_color?: string | null
  /**
   * Number of times viewed in the Looker web UI (read-only)
   */
  view_count?: number | null
  appearance?: IDashboardAppearance
  /**
   * Relative URL of the dashboard (read-only)
   */
  url?: string | null
}

export interface IDashboardAggregateTableLookml {
  /**
   * Dashboard Id (read-only)
   */
  dashboard_id?: string | null
  /**
   * Aggregate Table LookML (read-only)
   */
  aggregate_table_lookml?: string | null
}

export interface IDashboardAppearance {
  /**
   * Page margin (side) width
   */
  page_side_margins?: number | null
  /**
   * Background color for the dashboard
   */
  page_background_color?: string | null
  /**
   * Title alignment on dashboard tiles
   */
  tile_title_alignment?: string | null
  /**
   * Space between tiles
   */
  tile_space_between?: number | null
  /**
   * Background color for tiles
   */
  tile_background_color?: string | null
  /**
   * Tile shadow on/off
   */
  tile_shadow?: boolean | null
  /**
   * Key color
   */
  key_color?: string | null
}

export interface IDashboardBase {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Content Favorite Id (read-only)
   */
  content_favorite_id?: string | null
  /**
   * Id of content metadata (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Description (read-only)
   */
  description?: string | null
  /**
   * Is Hidden (read-only)
   */
  hidden?: boolean
  /**
   * Unique Id (read-only)
   */
  id?: string
  model?: ILookModel
  /**
   * Timezone in which the Dashboard will run by default. (read-only)
   */
  query_timezone?: string | null
  /**
   * Is Read-only (read-only)
   */
  readonly?: boolean
  /**
   * Refresh Interval, as a time duration phrase like "2 hours 30 minutes". A number with no time units will be interpreted as whole seconds. (read-only)
   */
  refresh_interval?: string | null
  /**
   * Refresh Interval in milliseconds (read-only)
   */
  refresh_interval_to_i?: number | null
  folder?: IFolderBase
  /**
   * Dashboard Title (read-only)
   */
  title?: string | null
  /**
   * Id of User (read-only)
   */
  user_id?: string | null
  /**
   * Content Metadata Slug (read-only)
   */
  slug?: string | null
  /**
   * The preferred route for viewing this dashboard (ie: dashboards or dashboards-next) (read-only)
   */
  preferred_viewer?: string | null
}

export interface IDashboardElement {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Text tile body text
   */
  body_text?: string | null
  /**
   * Text tile body text as Html (read-only)
   */
  body_text_as_html?: string | null
  /**
   * Id of Dashboard
   */
  dashboard_id?: string | null
  /**
   * Relative path of URI of LookML file to edit the dashboard element (LookML dashboard only). (read-only)
   */
  edit_uri?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  look?: ILookWithQuery
  /**
   * Id Of Look
   */
  look_id?: string | null
  /**
   * LookML link ID (read-only)
   */
  lookml_link_id?: string | null
  /**
   * ID of merge result
   */
  merge_result_id?: string | null
  /**
   * Note Display
   */
  note_display?: string | null
  /**
   * Note State
   */
  note_state?: string | null
  /**
   * Note Text
   */
  note_text?: string | null
  /**
   * Note Text as Html (read-only)
   */
  note_text_as_html?: string | null
  query?: IQuery
  /**
   * Id Of Query
   */
  query_id?: string | null
  /**
   * Refresh Interval
   */
  refresh_interval?: string | null
  /**
   * Refresh Interval as integer (read-only)
   */
  refresh_interval_to_i?: number | null
  result_maker?: IResultMakerWithIdVisConfigAndDynamicFields
  /**
   * ID of the ResultMakerLookup entry.
   */
  result_maker_id?: string | null
  /**
   * Text tile subtitle text
   */
  subtitle_text?: string | null
  /**
   * Title of dashboard element
   */
  title?: string | null
  /**
   * Whether title is hidden
   */
  title_hidden?: boolean
  /**
   * Text tile title
   */
  title_text?: string | null
  /**
   * Type
   */
  type?: string | null
  /**
   * Count of Alerts associated to a dashboard element (read-only)
   */
  alert_count?: number | null
  /**
   * JSON with all the properties required for rich editor and buttons elements
   */
  rich_content_json?: string | null
  /**
   * Text tile title text as Html (read-only)
   */
  title_text_as_html?: string | null
  /**
   * Text tile subtitle text as Html (read-only)
   */
  subtitle_text_as_html?: string | null
  /**
   * Extension ID
   */
  extension_id?: string | null
}

export interface IDashboardFilter {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Id of Dashboard (read-only)
   */
  dashboard_id?: string | null
  /**
   * Name of filter
   */
  name?: string | null
  /**
   * Title of filter
   */
  title?: string | null
  /**
   * Type of filter: one of date, number, string, or field
   */
  type?: string | null
  /**
   * Default value of filter
   */
  default_value?: string | null
  /**
   * Model of filter (required if type = field)
   */
  model?: string | null
  /**
   * Explore of filter (required if type = field)
   */
  explore?: string | null
  /**
   * Dimension of filter (required if type = field)
   */
  dimension?: string | null
  /**
   * Field information (read-only)
   */
  field?: IDictionary<any> | null
  /**
   * Display order of this filter relative to other filters
   */
  row?: number | null
  /**
   * Array of listeners for faceted filters
   */
  listens_to_filters?: string[] | null
  /**
   * Whether the filter allows multiple filter values (deprecated in the latest version of dashboards)
   */
  allow_multiple_values?: boolean
  /**
   * Whether the filter requires a value to run the dashboard
   */
  required?: boolean
  /**
   * The visual configuration for this filter. Used to set up how the UI for this filter should appear.
   */
  ui_config?: IDictionary<any> | null
}

export interface IDashboardLayout {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Id of Dashboard
   */
  dashboard_id?: string | null
  /**
   * Type
   */
  type?: string | null
  /**
   * Is Active
   */
  active?: boolean
  /**
   * Column Width
   */
  column_width?: number | null
  /**
   * Width
   */
  width?: number | null
  /**
   * Whether or not the dashboard layout is deleted. (read-only)
   */
  deleted?: boolean
  /**
   * Title extracted from the dashboard this layout represents. (read-only)
   */
  dashboard_title?: string | null
  /**
   * Components (read-only)
   */
  dashboard_layout_components?: IDashboardLayoutComponent[] | null
}

export interface IDashboardLayoutComponent {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Id of Dashboard Layout
   */
  dashboard_layout_id?: string | null
  /**
   * Id Of Dashboard Element
   */
  dashboard_element_id?: string | null
  /**
   * Row
   */
  row?: number | null
  /**
   * Column
   */
  column?: number | null
  /**
   * Width
   */
  width?: number | null
  /**
   * Height
   */
  height?: number | null
  /**
   * Whether or not the dashboard layout component is deleted (read-only)
   */
  deleted?: boolean
  /**
   * Dashboard element title, extracted from the Dashboard Element. (read-only)
   */
  element_title?: string | null
  /**
   * Whether or not the dashboard element title is displayed. (read-only)
   */
  element_title_hidden?: boolean
  /**
   * Visualization type, extracted from a query's vis_config (read-only)
   */
  vis_type?: string | null
}

export interface IDashboardLookml {
  /**
   * Id of Dashboard (read-only)
   */
  dashboard_id?: string | null
  /**
   * (Write-Only) Id of the folder
   */
  folder_id?: string | null
  /**
   * lookml of UDD
   */
  lookml?: string | null
}

export interface IDataActionForm {
  state?: IDataActionUserState
  /**
   * Array of form fields. (read-only)
   */
  fields?: IDataActionFormField[] | null
}

export interface IDataActionFormField {
  /**
   * Name (read-only)
   */
  name?: string | null
  /**
   * Human-readable label (read-only)
   */
  label?: string | null
  /**
   * Description of field (read-only)
   */
  description?: string | null
  /**
   * Type of field. (read-only)
   */
  type?: string | null
  /**
   * Default value of the field. (read-only)
   */
  default?: string | null
  /**
   * The URL for an oauth link, if type is 'oauth_link'. (read-only)
   */
  oauth_url?: string | null
  /**
   * Whether or not a field supports interactive forms. (read-only)
   */
  interactive?: boolean
  /**
   * Whether or not the field is required. This is a user-interface hint. A user interface displaying this form should not submit it without a value for this field. The action server must also perform this validation. (read-only)
   */
  required?: boolean
  /**
   * If the form type is 'select', a list of options to be selected from. (read-only)
   */
  options?: IDataActionFormSelectOption[] | null
}

export interface IDataActionFormSelectOption {
  /**
   * Name (read-only)
   */
  name?: string | null
  /**
   * Human-readable label (read-only)
   */
  label?: string | null
}

export interface IDataActionRequest {
  /**
   * The JSON describing the data action. This JSON should be considered opaque and should be passed through unmodified from the query result it came from.
   */
  action?: IDictionary<any> | null
  /**
   * User input for any form values the data action might use.
   */
  form_values?: IDictionary<string> | null
}

export interface IDataActionResponse {
  /**
   * ID of the webhook event that sent this data action. In some error conditions, this may be null. (read-only)
   */
  webhook_id?: string | null
  /**
   * Whether the data action was successful. (read-only)
   */
  success?: boolean
  /**
   * When true, indicates that the client should refresh (rerun) the source query because the data may have been changed by the action. (read-only)
   */
  refresh_query?: boolean
  validation_errors?: IValidationError
  /**
   * Optional message returned by the data action server describing the state of the action that took place. This can be used to implement custom failure messages. If a failure is related to a particular form field, the server should send back a validation error instead. The Looker web UI does not currently display any message if the action indicates 'success', but may do so in the future. (read-only)
   */
  message?: string | null
}

export interface IDataActionUserState {
  /**
   * User state data (read-only)
   */
  data?: string | null
  /**
   * Time in seconds until the state needs to be refreshed (read-only)
   */
  refresh_time?: number | null
}

export interface IDatagroup {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * UNIX timestamp at which this entry was created. (read-only)
   */
  created_at?: number | null
  /**
   * Unique ID of the datagroup (read-only)
   */
  id?: string
  /**
   * Name of the model containing the datagroup. Unique when combined with name. (read-only)
   */
  model_name?: string | null
  /**
   * Name of the datagroup. Unique when combined with model_name. (read-only)
   */
  name?: string | null
  /**
   * UNIX timestamp before which cache entries are considered stale. Cannot be in the future.
   */
  stale_before?: number | null
  /**
   * UNIX timestamp at which this entry trigger was last checked. (read-only)
   */
  trigger_check_at?: number | null
  /**
   * The message returned with the error of the last trigger check. (read-only)
   */
  trigger_error?: string | null
  /**
   * The value of the trigger when last checked. (read-only)
   */
  trigger_value?: string | null
  /**
   * UNIX timestamp at which this entry became triggered. Cannot be in the future.
   */
  triggered_at?: number | null
}

export interface IDBConnection {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Name of the connection. Also used as the unique identifier
   */
  name?: string
  dialect?: IDialect
  /**
   * SQL Runner snippets for this connection (read-only)
   */
  snippets?: ISnippet[]
  /**
   * True if PDTs are enabled on this connection (read-only)
   */
  pdts_enabled?: boolean
  /**
   * Host name/address of server; or the string 'localhost' in case of a connection over an SSH tunnel.
   */
  host?: string | null
  /**
   * Port number on server. If the connection is over an SSH tunnel, then the local port associated with the SSH tunnel.
   */
  port?: string | null
  /**
   * Username for server authentication
   */
  username?: string | null
  /**
   * (Write-Only) Password for server authentication
   */
  password?: string | null
  /**
   * Whether the connection uses OAuth for authentication. (read-only)
   */
  uses_oauth?: boolean
  /**
   * (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
   */
  certificate?: string | null
  /**
   * (Write-Only) Certificate keyfile type - .json or .p12
   */
  file_type?: string | null
  /**
   * Database name
   */
  database?: string | null
  /**
   * Time zone of database
   */
  db_timezone?: string | null
  /**
   * Timezone to use in queries
   */
  query_timezone?: string | null
  /**
   * Scheme name
   */
  schema?: string | null
  /**
   * Maximum number of concurrent connection to use
   */
  max_connections?: number | null
  /**
   * Maximum size of query in GBs (BigQuery only, can be a user_attribute name)
   */
  max_billing_gigabytes?: string | null
  /**
   * Use SSL/TLS when connecting to server
   */
  ssl?: boolean
  /**
   * Verify the SSL
   */
  verify_ssl?: boolean
  /**
   * Name of temporary database (if used)
   */
  tmp_db_name?: string | null
  /**
   * Additional params to add to JDBC connection string
   */
  jdbc_additional_params?: string | null
  /**
   * Connection Pool Timeout, in seconds
   */
  pool_timeout?: number | null
  /**
   * (Read/Write) SQL Dialect name
   */
  dialect_name?: string | null
  /**
   * Database connection has the ability to support open data studio from explore (read-only)
   */
  supports_data_studio_link?: boolean
  /**
   * Creation date for this connection (read-only)
   */
  created_at?: string | null
  /**
   * Id of user who last modified this connection configuration (read-only)
   */
  user_id?: string | null
  /**
   * Is this an example connection? (read-only)
   */
  example?: boolean
  /**
   * (Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password
   */
  user_db_credentials?: boolean | null
  /**
   * Fields whose values map to user attribute names
   */
  user_attribute_fields?: string[] | null
  /**
   * Cron string specifying when maintenance such as PDT trigger checks and drops should be performed
   */
  maintenance_cron?: string | null
  /**
   * Unix timestamp at start of last completed PDT trigger check process (read-only)
   */
  last_regen_at?: string | null
  /**
   * Unix timestamp at start of last completed PDT reap process (read-only)
   */
  last_reap_at?: string | null
  /**
   * Precache tables in the SQL Runner
   */
  sql_runner_precache_tables?: boolean
  /**
   * Fetch Information Schema For SQL Writing
   */
  sql_writing_with_info_schema?: boolean
  /**
   * SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
   */
  after_connect_statements?: string | null
  pdt_context_override?: IDBConnectionOverride
  /**
   * Is this connection created and managed by Looker (read-only)
   */
  managed?: boolean
  /**
   * This field is only applicable to connections over an SSH Tunnel. The value of this field would be the local port associated with the SSH tunnel if configured manually. Otherwise either enter NULL or exclude this field.
   */
  custom_local_port?: number | null
  /**
   * The Id of the ssh tunnel this connection uses
   */
  tunnel_id?: string | null
  /**
   * Enable Transparent Network Substrate (TNS) connections
   */
  uses_tns?: boolean | null
  /**
   * Maximum number of threads to use to build PDTs in parallel
   */
  pdt_concurrency?: number | null
  /**
   * When disable_context_comment is true comment will not be added to SQL
   */
  disable_context_comment?: boolean | null
  /**
   * An External OAuth Application to use for authenticating to the database
   */
  oauth_application_id?: string | null
  /**
   * When true, error PDTs will be retried every regenerator cycle
   */
  always_retry_failed_builds?: boolean | null
  /**
   * When true, query cost estimate will be displayed in explore.
   */
  cost_estimate_enabled?: boolean | null
  /**
   * PDT builds on this connection can be kicked off and cancelled via API.
   */
  pdt_api_control_enabled?: boolean | null
}

export interface IDBConnectionBase {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Name of the connection. Also used as the unique identifier (read-only)
   */
  name?: string
  dialect?: IDialect
  /**
   * SQL Runner snippets for this connection (read-only)
   */
  snippets?: ISnippet[]
  /**
   * True if PDTs are enabled on this connection (read-only)
   */
  pdts_enabled?: boolean
}

export interface IDBConnectionOverride {
  /**
   * Context in which to override (`pdt` is the only allowed value)
   */
  context?: string
  /**
   * Host name/address of server
   */
  host?: string | null
  /**
   * Port number on server
   */
  port?: string | null
  /**
   * Username for server authentication
   */
  username?: string | null
  /**
   * (Write-Only) Password for server authentication
   */
  password?: string | null
  /**
   * Whether or not the password is overridden in this context (read-only)
   */
  has_password?: boolean
  /**
   * (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
   */
  certificate?: string | null
  /**
   * (Write-Only) Certificate keyfile type - .json or .p12
   */
  file_type?: string | null
  /**
   * Database name
   */
  database?: string | null
  /**
   * Scheme name
   */
  schema?: string | null
  /**
   * Additional params to add to JDBC connection string
   */
  jdbc_additional_params?: string | null
  /**
   * SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
   */
  after_connect_statements?: string | null
}

export interface IDBConnectionTestResult {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * JDBC connection string. (only populated in the 'connect' test) (read-only)
   */
  connection_string?: string | null
  /**
   * Result message of test (read-only)
   */
  message?: string | null
  /**
   * Name of test (read-only)
   */
  name?: string | null
  /**
   * Result code of test (read-only)
   */
  status?: string | null
}

export interface IDelegateOauthTest {
  /**
   * Delegate Oauth Connection Name (read-only)
   */
  name?: string
  /**
   * The ID of the installation target. For Slack, this would be workspace id. (read-only)
   */
  installation_target_id?: string
  /**
   * Installation ID (read-only)
   */
  installation_id?: string
  /**
   * Whether or not the test was successful (read-only)
   */
  success?: boolean
}

export interface IDependencyGraph {
  /**
   * The graph structure in the dot language that can be rendered into an image. (read-only)
   */
  graph_text?: string
}

/**
 * Status of the dependencies in your project. Valid values are: "lock_optional", "lock_required", "lock_error", "install_none". (Enum defined in ProjectWorkspace)
 */
export enum DependencyStatus {
  lock_optional = 'lock_optional',
  lock_required = 'lock_required',
  lock_error = 'lock_error',
  install_none = 'install_none',
}

/**
 * Type of destination that the alert will be sent to Valid values are: "EMAIL", "ACTION_HUB". (Enum defined in AlertDestination)
 */
export enum DestinationType {
  EMAIL = 'EMAIL',
  ACTION_HUB = 'ACTION_HUB',
}

/**
 * Specifies type of device. Valid values are: "android", "ios". (Enum defined in MobileToken)
 */
export enum DeviceType {
  android = 'android',
  ios = 'ios',
}

export interface IDialect {
  /**
   * The name of the dialect (read-only)
   */
  name?: string
  /**
   * The human-readable label of the connection (read-only)
   */
  label?: string
  /**
   * Whether the dialect supports query cost estimates (read-only)
   */
  supports_cost_estimate?: boolean
  /**
   * How the dialect handles cost estimation (read-only)
   */
  cost_estimate_style?: string | null
  /**
   * PDT index columns (read-only)
   */
  persistent_table_indexes?: string
  /**
   * PDT sortkey columns (read-only)
   */
  persistent_table_sortkeys?: string
  /**
   * PDT distkey column (read-only)
   */
  persistent_table_distkey?: string
  /**
   * Suports streaming results (read-only)
   */
  supports_streaming?: boolean
  /**
   * Should SQL Runner snippets automatically be run (read-only)
   */
  automatically_run_sql_runner_snippets?: boolean
  /**
   * Array of names of the tests that can be run on a connection using this dialect (read-only)
   */
  connection_tests?: string[]
  /**
   * Is supported with the inducer (i.e. generate from sql) (read-only)
   */
  supports_inducer?: boolean
  /**
   * Can multiple databases be accessed from a connection using this dialect (read-only)
   */
  supports_multiple_databases?: boolean
  /**
   * Whether the dialect supports allowing Looker to build persistent derived tables (read-only)
   */
  supports_persistent_derived_tables?: boolean
  /**
   * Does the database have client SSL support settable through the JDBC string explicitly? (read-only)
   */
  has_ssl_support?: boolean
}

export interface IDialectInfo {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Default number max connections (read-only)
   */
  default_max_connections?: string | null
  /**
   * Default port number (read-only)
   */
  default_port?: string | null
  /**
   * Is the supporting driver installed (read-only)
   */
  installed?: boolean
  /**
   * The human-readable label of the connection (read-only)
   */
  label?: string | null
  /**
   * What the dialect calls the equivalent of a normal SQL table (read-only)
   */
  label_for_database_equivalent?: string | null
  /**
   * The name of the dialect (read-only)
   */
  name?: string | null
  supported_options?: IDialectInfoOptions
}

export interface IDialectInfoOptions {
  /**
   * Has additional params support (read-only)
   */
  additional_params?: boolean
  /**
   * Has support for issuing statements after connecting to the database (read-only)
   */
  after_connect_statements?: boolean
  /**
   * Has analytical view support (read-only)
   */
  analytical_view_dataset?: boolean
  /**
   * Has auth support (read-only)
   */
  auth?: boolean
  /**
   * Has configurable cost estimation (read-only)
   */
  cost_estimate?: boolean
  /**
   * Can disable query context comments (read-only)
   */
  disable_context_comment?: boolean
  /**
   * Host is required (read-only)
   */
  host?: boolean
  /**
   * Instance name is required (read-only)
   */
  instance_name?: boolean
  /**
   * Has max billing gigabytes support (read-only)
   */
  max_billing_gigabytes?: boolean
  /**
   * Has support for a service account (read-only)
   */
  oauth_credentials?: boolean
  /**
   * Has OAuth for PDT support (read-only)
   */
  pdts_for_oauth?: boolean
  /**
   * Port can be specified (read-only)
   */
  port?: boolean
  /**
   * Has project name support (read-only)
   */
  project_name?: boolean
  /**
   * Schema can be specified (read-only)
   */
  schema?: boolean
  /**
   * Has support for a service account (read-only)
   */
  service_account_credentials?: boolean
  /**
   * Has TLS/SSL support (read-only)
   */
  ssl?: boolean
  /**
   * Has timezone support (read-only)
   */
  timezone?: boolean
  /**
   * Has tmp table support (read-only)
   */
  tmp_table?: boolean
  /**
   * Has Oracle TNS support (read-only)
   */
  tns?: boolean
  /**
   * Username can be specified (read-only)
   */
  username?: boolean
  /**
   * Username is required (read-only)
   */
  username_required?: boolean
}

export interface IDigestEmails {
  /**
   * Whether or not digest emails are enabled
   */
  is_enabled?: boolean
}

export interface IDigestEmailSend {
  /**
   * True if content was successfully generated and delivered
   */
  configuration_delivered?: boolean
}

export interface IDiscretePalette {
  /**
   * Unique identity string (read-only)
   */
  id?: string
  /**
   * Label for palette
   */
  label?: string | null
  /**
   * Type of palette
   */
  type?: string
  /**
   * Array of colors in the palette
   */
  colors?: string[]
}

export interface IEgressIpAddresses {
  /**
   * Egress IP addresses (read-only)
   */
  egress_ip_addresses?: string[] | null
}

export interface IEmbedCookielessSessionAcquire {
  /**
   * Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days).
   */
  session_length?: number | null
  /**
   * When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true.
   */
  force_logout_login?: boolean
  /**
   * A value from an external system that uniquely identifies the embed user. Since the user_ids of Looker embed users may change with every embed session, external_user_id provides a way to assign a known, stable user identifier across multiple embed sessions.
   */
  external_user_id?: string | null
  /**
   * First name of the embed user. Defaults to 'Embed' if not specified
   */
  first_name?: string | null
  /**
   * Last name of the embed user. Defaults to 'User' if not specified
   */
  last_name?: string | null
  /**
   * Sets the user timezone for the embed user session, if the User Specific Timezones setting is enabled in the Looker admin settings. A value of `null` forces the embed user to use the Looker Application Default Timezone. You MUST omit this property from the request if the User Specific Timezones setting is disabled. Timezone values are validated against the IANA Timezone standard and can be seen in the Application Time Zone dropdown list on the Looker General Settings admin page.
   */
  user_timezone?: string | null
  /**
   * List of Looker permission names to grant to the embed user. Requested permissions will be filtered to permissions allowed for embed sessions.
   */
  permissions?: string[] | null
  /**
   * List of model names that the embed user may access
   */
  models?: string[] | null
  /**
   * List of Looker group ids in which to enroll the embed user
   */
  group_ids?: string[] | null
  /**
   * A unique value identifying an embed-exclusive group. Multiple embed users using the same `external_group_id` value will be able to share Looker content with each other. Content and embed users associated with the `external_group_id` will not be accessible to normal Looker users or embed users not associated with this `external_group_id`.
   */
  external_group_id?: string | null
  /**
   * A dictionary of name-value pairs associating a Looker user attribute name with a value.
   */
  user_attributes?: IDictionary<any> | null
  /**
   * Token referencing the embed session and is used to generate new authentication, navigation and api tokens.
   */
  session_reference_token?: string | null
}

export interface IEmbedCookielessSessionAcquireResponse {
  /**
   * One time token used to create or to attach to an embedded session in the Looker application server.
   */
  authentication_token?: string | null
  /**
   * Authentication token time to live in seconds.
   */
  authentication_token_ttl?: number | null
  /**
   * Token used to load and navigate between Looker pages.
   */
  navigation_token?: string | null
  /**
   * Navigation token time to live in seconds.
   */
  navigation_token_ttl?: number | null
  /**
   * Token to used to call Looker APIs.
   */
  api_token?: string | null
  /**
   * Api token time to live in seconds.
   */
  api_token_ttl?: number | null
  /**
   * Token referencing the actual embed session. It is used to generate new api, navigation and authentication tokens. api and navigation tokens are short lived and must be refreshed regularly. A new authentication token must be acquired for each IFRAME that is created. The session_reference_token should be kept secure, ideally in the embed hosts application server.
   */
  session_reference_token?: string | null
  /**
   * Session reference token time to live in seconds. Note that this is the same as actual session.
   */
  session_reference_token_ttl?: number | null
}

export interface IEmbedCookielessSessionGenerateTokens {
  /**
   * Token referencing the embed session and is used to generate new authentication, navigation and api tokens.
   */
  session_reference_token: string
  /**
   * Token used to load and navigate between Looker pages.
   */
  navigation_token?: string | null
  /**
   * Token to used to call Looker APIs.
   */
  api_token?: string | null
}

export interface IEmbedCookielessSessionGenerateTokensResponse {
  /**
   * Token used to load and navigate between Looker pages.
   */
  navigation_token?: string | null
  /**
   * Navigation token time to live in seconds.
   */
  navigation_token_ttl?: number | null
  /**
   * Token to used to call Looker APIs.
   */
  api_token?: string | null
  /**
   * Api token time to live in seconds.
   */
  api_token_ttl?: number | null
  /**
   * Token referencing the embed session and is used to generate new authentication, navigation and api tokens.
   */
  session_reference_token: string
  /**
   * Session reference token time to live in seconds. Note that this is the same as actual session.
   */
  session_reference_token_ttl?: number | null
}

export interface IEmbedParams {
  /**
   * The complete URL of the Looker UI page to display in the embed context. For example, to display the dashboard with id 34, `target_url` would look like: `https://mycompany.looker.com:9999/dashboards/34`. `target_uri` MUST contain a scheme (HTTPS), domain name, and URL path. Port must be included if it is required to reach the Looker server from browser clients. If the Looker instance is behind a load balancer or other proxy, `target_uri` must be the public-facing domain name and port required to reach the Looker instance, not the actual internal network machine name of the Looker instance.
   */
  target_url: string
  /**
   * Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days).
   */
  session_length?: number | null
  /**
   * When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true.
   */
  force_logout_login?: boolean
}

export interface IEmbedSecret {
  /**
   * Signing algorithm to use with this secret. Either `hmac/sha-256`(default) or `hmac/sha-1`
   */
  algorithm?: string | null
  /**
   * When secret was created (read-only)
   */
  created_at?: string | null
  /**
   * Is this secret currently enabled
   */
  enabled?: boolean
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Secret for use with SSO embedding (read-only)
   */
  secret?: string | null
  /**
   * Id of user who created this secret (read-only)
   */
  user_id?: string | null
  /**
   * Field to distinguish between SSO secrets and JWT secrets Valid values are: "SSO", "JWT".
   */
  secret_type?: SecretType
}

export interface IEmbedSsoParams {
  /**
   * The complete URL of the Looker UI page to display in the embed context. For example, to display the dashboard with id 34, `target_url` would look like: `https://mycompany.looker.com:9999/dashboards/34`. `target_uri` MUST contain a scheme (HTTPS), domain name, and URL path. Port must be included if it is required to reach the Looker server from browser clients. If the Looker instance is behind a load balancer or other proxy, `target_uri` must be the public-facing domain name and port required to reach the Looker instance, not the actual internal network machine name of the Looker instance.
   */
  target_url: string
  /**
   * Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days).
   */
  session_length?: number | null
  /**
   * When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true.
   */
  force_logout_login?: boolean
  /**
   * A value from an external system that uniquely identifies the embed user. Since the user_ids of Looker embed users may change with every embed session, external_user_id provides a way to assign a known, stable user identifier across multiple embed sessions.
   */
  external_user_id?: string | null
  /**
   * First name of the embed user. Defaults to 'Embed' if not specified
   */
  first_name?: string | null
  /**
   * Last name of the embed user. Defaults to 'User' if not specified
   */
  last_name?: string | null
  /**
   * Sets the user timezone for the embed user session, if the User Specific Timezones setting is enabled in the Looker admin settings. A value of `null` forces the embed user to use the Looker Application Default Timezone. You MUST omit this property from the request if the User Specific Timezones setting is disabled. Timezone values are validated against the IANA Timezone standard and can be seen in the Application Time Zone dropdown list on the Looker General Settings admin page.
   */
  user_timezone?: string | null
  /**
   * List of Looker permission names to grant to the embed user. Requested permissions will be filtered to permissions allowed for embed sessions.
   */
  permissions?: string[] | null
  /**
   * List of model names that the embed user may access
   */
  models?: string[] | null
  /**
   * List of Looker group ids in which to enroll the embed user
   */
  group_ids?: string[] | null
  /**
   * A unique value identifying an embed-exclusive group. Multiple embed users using the same `external_group_id` value will be able to share Looker content with each other. Content and embed users associated with the `external_group_id` will not be accessible to normal Looker users or embed users not associated with this `external_group_id`.
   */
  external_group_id?: string | null
  /**
   * A dictionary of name-value pairs associating a Looker user attribute name with a value.
   */
  user_attributes?: IDictionary<any> | null
  /**
   * Id of the embed secret to use to sign this SSO url. If specified, the value must be an id of a valid (active) secret defined in the Looker instance. If not specified, the URL will be signed with the newest active embed secret defined in the Looker instance.
   */
  secret_id?: string | null
}

export interface IEmbedUrlResponse {
  /**
   * The embed URL. Any modification to this string will make the URL unusable. (read-only)
   */
  url?: string
}

export interface IError {
  /**
   * Error details (read-only)
   */
  message: string | null
  /**
   * Documentation link (read-only)
   */
  documentation_url: string | null
}

export interface IExternalOauthApplication {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * ID of this OAuth Application (read-only)
   */
  id?: string
  /**
   * The name of this application.  For Snowflake connections, this should be the name of the host database.
   */
  name?: string
  /**
   * The OAuth Client ID for this application
   */
  client_id?: string
  /**
   * (Write-Only) The OAuth Client Secret for this application
   */
  client_secret?: string
  /**
   * The database dialect for this application.
   */
  dialect_name?: string | null
  /**
   * Creation time for this application (read-only)
   */
  created_at?: Date
}

/**
 * The style of dimension fill that is possible for this field. Null if no dimension fill is possible. Valid values are: "enumeration", "range". (Enum defined in LookmlModelExploreField)
 */
export enum FillStyle {
  enumeration = 'enumeration',
  range = 'range',
}

export interface IFolder {
  /**
   * Unique Name
   */
  name: string
  /**
   * Id of Parent. If the parent id is null, this is a root-level entry
   */
  parent_id?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Id of content metadata (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Time the space was created (read-only)
   */
  created_at?: Date | null
  /**
   * User Id of Creator (read-only)
   */
  creator_id?: string | null
  /**
   * Children Count (read-only)
   */
  child_count?: number | null
  /**
   * Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login (read-only)
   */
  external_id?: string | null
  /**
   * Folder is an embed folder (read-only)
   */
  is_embed?: boolean
  /**
   * Folder is the root embed shared folder (read-only)
   */
  is_embed_shared_root?: boolean
  /**
   * Folder is the root embed users folder (read-only)
   */
  is_embed_users_root?: boolean
  /**
   * Folder is a user's personal folder (read-only)
   */
  is_personal?: boolean
  /**
   * Folder is descendant of a user's personal folder (read-only)
   */
  is_personal_descendant?: boolean
  /**
   * Folder is the root shared folder (read-only)
   */
  is_shared_root?: boolean
  /**
   * Folder is the root user folder (read-only)
   */
  is_users_root?: boolean
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Dashboards (read-only)
   */
  dashboards?: IDashboardBase[] | null
  /**
   * Looks (read-only)
   */
  looks?: ILookWithDashboards[] | null
}

export interface IFolderBase {
  /**
   * Unique Name
   */
  name: string
  /**
   * Id of Parent. If the parent id is null, this is a root-level entry
   */
  parent_id?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Id of content metadata (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Time the folder was created (read-only)
   */
  created_at?: Date | null
  /**
   * User Id of Creator (read-only)
   */
  creator_id?: string | null
  /**
   * Children Count (read-only)
   */
  child_count?: number | null
  /**
   * Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login (read-only)
   */
  external_id?: string | null
  /**
   * Folder is an embed folder (read-only)
   */
  is_embed?: boolean
  /**
   * Folder is the root embed shared folder (read-only)
   */
  is_embed_shared_root?: boolean
  /**
   * Folder is the root embed users folder (read-only)
   */
  is_embed_users_root?: boolean
  /**
   * Folder is a user's personal folder (read-only)
   */
  is_personal?: boolean
  /**
   * Folder is descendant of a user's personal folder (read-only)
   */
  is_personal_descendant?: boolean
  /**
   * Folder is the root shared folder (read-only)
   */
  is_shared_root?: boolean
  /**
   * Folder is the root user folder (read-only)
   */
  is_users_root?: boolean
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
}

/**
 * Specifies the data format of the region information. Valid values are: "topojson", "vector_tile_region". (Enum defined in LookmlModelExploreFieldMapLayer)
 */
export enum Format {
  topojson = 'topojson',
  vector_tile_region = 'vector_tile_region',
}

export interface IGitBranch {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * The short name on the local. Updating `name` results in `git checkout <new_name>`
   */
  name?: string | null
  /**
   * The name of the remote (read-only)
   */
  remote?: string | null
  /**
   * The short name on the remote (read-only)
   */
  remote_name?: string | null
  /**
   * Name of error (read-only)
   */
  error?: string | null
  /**
   * Message describing an error if present (read-only)
   */
  message?: string | null
  /**
   * Name of the owner of a personal branch (read-only)
   */
  owner_name?: string | null
  /**
   * Whether or not this branch is readonly (read-only)
   */
  readonly?: boolean
  /**
   * Whether or not this branch is a personal branch - readonly for all developers except the owner (read-only)
   */
  personal?: boolean
  /**
   * Whether or not a local ref exists for the branch (read-only)
   */
  is_local?: boolean
  /**
   * Whether or not a remote ref exists for the branch (read-only)
   */
  is_remote?: boolean
  /**
   * Whether or not this is the production branch (read-only)
   */
  is_production?: boolean
  /**
   * Number of commits the local branch is ahead of the remote (read-only)
   */
  ahead_count?: number | null
  /**
   * Number of commits the local branch is behind the remote (read-only)
   */
  behind_count?: number | null
  /**
   * UNIX timestamp at which this branch was last committed. (read-only)
   */
  commit_at?: number | null
  /**
   * The resolved ref of this branch. Updating `ref` results in `git reset --hard <new_ref>``.
   */
  ref?: string | null
  /**
   * The resolved ref of this branch remote. (read-only)
   */
  remote_ref?: string | null
}

export interface IGitConnectionTest {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Human readable string describing the test (read-only)
   */
  description?: string | null
  /**
   * A short string, uniquely naming this test (read-only)
   */
  id?: string
}

export interface IGitConnectionTestResult {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * A short string, uniquely naming this test (read-only)
   */
  id?: string
  /**
   * Additional data from the test (read-only)
   */
  message?: string | null
  /**
   * Either 'pass' or 'fail' (read-only)
   */
  status?: string | null
}

export interface IGitStatus {
  /**
   * Git action: add, delete, etc (read-only)
   */
  action?: string | null
  /**
   * When true, changes to the local file conflict with the remote repository (read-only)
   */
  conflict?: boolean
  /**
   * When true, the file can be reverted to an earlier state (read-only)
   */
  revertable?: boolean
  /**
   * Git description of the action (read-only)
   */
  text?: string | null
}

export interface IGroup {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Group can be used in content access controls
   */
  can_add_to_content_metadata?: boolean
  /**
   * Currently logged in user is group member (read-only)
   */
  contains_current_user?: boolean
  /**
   * External Id group if embed group (read-only)
   */
  external_group_id?: string | null
  /**
   * Group membership controlled outside of Looker (read-only)
   */
  externally_managed?: boolean
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * New users are added to this group by default (read-only)
   */
  include_by_default?: boolean
  /**
   * Name of group
   */
  name?: string | null
  /**
   * Number of users included in this group (read-only)
   */
  user_count?: number | null
}

export interface IGroupHierarchy {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Group can be used in content access controls
   */
  can_add_to_content_metadata?: boolean
  /**
   * Currently logged in user is group member (read-only)
   */
  contains_current_user?: boolean
  /**
   * External Id group if embed group (read-only)
   */
  external_group_id?: string | null
  /**
   * Group membership controlled outside of Looker (read-only)
   */
  externally_managed?: boolean
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * New users are added to this group by default (read-only)
   */
  include_by_default?: boolean
  /**
   * Name of group
   */
  name?: string | null
  /**
   * Number of users included in this group (read-only)
   */
  user_count?: number | null
  /**
   * IDs of parents of this group (read-only)
   */
  parent_group_ids?: string[] | null
  /**
   * Role IDs assigned to group (read-only)
   */
  role_ids?: string[] | null
}

/**
 * WARNING: no writeable properties found for POST, PUT, or PATCH
 */
export interface IGroupIdForGroupInclusion {
  /**
   * Id of group (read-only)
   */
  group_id?: string | null
}

/**
 * WARNING: no writeable properties found for POST, PUT, or PATCH
 */
export interface IGroupIdForGroupUserInclusion {
  /**
   * Id of user (read-only)
   */
  user_id?: string | null
}

export interface IGroupSearch {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Group can be used in content access controls
   */
  can_add_to_content_metadata?: boolean
  /**
   * Currently logged in user is group member (read-only)
   */
  contains_current_user?: boolean
  /**
   * External Id group if embed group (read-only)
   */
  external_group_id?: string | null
  /**
   * Group membership controlled outside of Looker (read-only)
   */
  externally_managed?: boolean
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * New users are added to this group by default (read-only)
   */
  include_by_default?: boolean
  /**
   * Name of group
   */
  name?: string | null
  /**
   * Number of users included in this group (read-only)
   */
  user_count?: number | null
  /**
   * Roles assigned to group (read-only)
   */
  roles?: IRole[] | null
}

export interface IHomepageItem {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Name of user who created the content this item is based on (read-only)
   */
  content_created_by?: string | null
  /**
   * Content favorite id associated with the item this content is based on (read-only)
   */
  content_favorite_id?: string | null
  /**
   * Content metadata id associated with the item this content is based on (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Last time the content that this item is based on was updated (read-only)
   */
  content_updated_at?: string | null
  /**
   * Custom description entered by the user, if present
   */
  custom_description?: string | null
  /**
   * (Write-Only) base64 encoded image data
   */
  custom_image_data_base64?: string | null
  /**
   * Custom image_url entered by the user, if present (read-only)
   */
  custom_image_url?: string | null
  /**
   * Custom title entered by the user, if present
   */
  custom_title?: string | null
  /**
   * Custom url entered by the user, if present
   */
  custom_url?: string | null
  /**
   * Dashboard to base this item on
   */
  dashboard_id?: string | null
  /**
   * The actual description for display (read-only)
   */
  description?: string | null
  /**
   * Number of times content has been favorited, if present (read-only)
   */
  favorite_count?: number | null
  /**
   * Associated Homepage Section
   */
  homepage_section_id?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * The actual image_url for display (read-only)
   */
  image_url?: string | null
  /**
   * The container folder name of the content (read-only)
   */
  location?: string | null
  /**
   * Look to base this item on
   */
  look_id?: string | null
  /**
   * LookML Dashboard to base this item on
   */
  lookml_dashboard_id?: string | null
  /**
   * An arbitrary integer representing the sort order within the section
   */
  order?: number | null
  /**
   * Number of seconds it took to fetch the section this item is in (read-only)
   */
  section_fetch_time?: number | null
  /**
   * The actual title for display (read-only)
   */
  title?: string | null
  /**
   * The actual url for display (read-only)
   */
  url?: string | null
  /**
   * Whether the custom description should be used instead of the content description, if the item is associated with content
   */
  use_custom_description?: boolean
  /**
   * Whether the custom image should be used instead of the content image, if the item is associated with content
   */
  use_custom_image?: boolean
  /**
   * Whether the custom title should be used instead of the content title, if the item is associated with content
   */
  use_custom_title?: boolean
  /**
   * Whether the custom url should be used instead of the content url, if the item is associated with content
   */
  use_custom_url?: boolean
  /**
   * Number of times content has been viewed, if present (read-only)
   */
  view_count?: number | null
}

export interface IHomepageSection {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Time at which this section was created. (read-only)
   */
  created_at?: Date | null
  /**
   * Time at which this section was deleted.
   */
  deleted_at?: Date | null
  /**
   * A URL pointing to a page showing further information about the content in the section. (read-only)
   */
  detail_url?: string | null
  /**
   * Id reference to parent homepage
   */
  homepage_id?: string | null
  /**
   * Items in the homepage section (read-only)
   */
  homepage_items?: IHomepageItem[] | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Is this a header section (has no items) (read-only)
   */
  is_header?: boolean
  /**
   * ids of the homepage items in the order they should be displayed
   */
  item_order?: string[] | null
  /**
   * Name of row
   */
  title?: string | null
  /**
   * Time at which this section was last updated. (read-only)
   */
  updated_at?: Date | null
  /**
   * Description of the content found in this section.
   */
  description?: string | null
  /**
   * ids of the homepage items the user can see in the order they should be displayed (read-only)
   */
  visible_item_order?: string[] | null
}

export interface IImportedProject {
  /**
   * Dependency name (read-only)
   */
  name?: string | null
  /**
   * Url for a remote dependency (read-only)
   */
  url?: string | null
  /**
   * Ref for a remote dependency (read-only)
   */
  ref?: string | null
  /**
   * Flag signifying if a dependency is remote or local (read-only)
   */
  is_remote?: boolean
}

export interface IIntegration {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * ID of the integration. (read-only)
   */
  id?: string
  /**
   * ID of the integration hub. (read-only)
   */
  integration_hub_id?: string
  /**
   * Label for the integration. (read-only)
   */
  label?: string
  /**
   * Description of the integration. (read-only)
   */
  description?: string | null
  /**
   * Whether the integration is available to users.
   */
  enabled?: boolean
  /**
   * Array of params for the integration.
   */
  params?: IIntegrationParam[]
  /**
   * A list of data formats the integration supports. If unspecified, the default is all data formats. Valid values are: "txt", "csv", "inline_json", "json", "json_label", "json_detail", "json_detail_lite_stream", "xlsx", "html", "wysiwyg_pdf", "assembled_pdf", "wysiwyg_png", "csv_zip". (read-only)
   */
  supported_formats?: SupportedFormats[]
  /**
   * A list of action types the integration supports. Valid values are: "cell", "query", "dashboard", "none". (read-only)
   */
  supported_action_types?: SupportedActionTypes[]
  /**
   * A list of formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: "formatted", "unformatted". (read-only)
   */
  supported_formattings?: SupportedFormattings[]
  /**
   * A list of visualization formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: "apply", "noapply". (read-only)
   */
  supported_visualization_formattings?: SupportedVisualizationFormattings[]
  /**
   * A list of all the download mechanisms the integration supports. The order of values is not significant: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this defaults to all download setting values. Valid values are: "push", "url". (read-only)
   */
  supported_download_settings?: SupportedDownloadSettings[]
  /**
   * URL to an icon for the integration. (read-only)
   */
  icon_url?: string | null
  /**
   * Whether the integration uses oauth. (read-only)
   */
  uses_oauth?: boolean | null
  /**
   * A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required. (read-only)
   */
  required_fields?: IIntegrationRequiredField[]
  /**
   * Link to privacy policy for destination (read-only)
   */
  privacy_link?: string | null
  /**
   * Whether the integration uses delegate oauth, which allows federation between an integration installation scope specific entity (like org, group, and team, etc.) and Looker. (read-only)
   */
  delegate_oauth?: boolean | null
  /**
   * Whether the integration is available to users.
   */
  installed_delegate_oauth_targets?: string[]
}

export interface IIntegrationHub {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * ID of the hub. (read-only)
   */
  id?: string
  /**
   * URL of the hub.
   */
  url?: string
  /**
   * Label of the hub. (read-only)
   */
  label?: string
  /**
   * Whether this hub is a first-party integration hub operated by Looker. (read-only)
   */
  official?: boolean
  /**
   * An error message, present if the integration hub metadata could not be fetched. If this is present, the integration hub is unusable. (read-only)
   */
  fetch_error_message?: string | null
  /**
   * (Write-Only) An authorization key that will be sent to the integration hub on every request.
   */
  authorization_token?: string | null
  /**
   * Whether the authorization_token is set for the hub. (read-only)
   */
  has_authorization_token?: boolean
  /**
   * Whether the legal agreement message has been signed by the user. This only matters if legal_agreement_required is true. (read-only)
   */
  legal_agreement_signed?: boolean
  /**
   * Whether the legal terms for the integration hub are required before use. (read-only)
   */
  legal_agreement_required?: boolean
  /**
   * The legal agreement text for this integration hub. (read-only)
   */
  legal_agreement_text?: string | null
}

export interface IIntegrationParam {
  /**
   * Name of the parameter.
   */
  name?: string | null
  /**
   * Label of the parameter. (read-only)
   */
  label?: string | null
  /**
   * Short description of the parameter. (read-only)
   */
  description?: string | null
  /**
   * Whether the parameter is required to be set to use the destination. If unspecified, this defaults to false. (read-only)
   */
  required?: boolean
  /**
   * Whether the parameter has a value set. (read-only)
   */
  has_value?: boolean
  /**
   * The current value of the parameter. Always null if the value is sensitive. When writing, null values will be ignored. Set the value to an empty string to clear it.
   */
  value?: string | null
  /**
   * When present, the param's value comes from this user attribute instead of the 'value' parameter. Set to null to use the 'value'.
   */
  user_attribute_name?: string | null
  /**
   * Whether the parameter contains sensitive data like API credentials. If unspecified, this defaults to true. (read-only)
   */
  sensitive?: boolean | null
  /**
   * When true, this parameter must be assigned to a user attribute in the admin panel (instead of a constant value), and that value may be updated by the user as part of the integration flow. (read-only)
   */
  per_user?: boolean
  /**
   * When present, the param represents the oauth url the user will be taken to. (read-only)
   */
  delegate_oauth_url?: string | null
}

export interface IIntegrationRequiredField {
  /**
   * Matches a field that has this tag. (read-only)
   */
  tag?: string | null
  /**
   * If present, supercedes 'tag' and matches a field that has any of the provided tags. (read-only)
   */
  any_tag?: string[] | null
  /**
   * If present, supercedes 'tag' and matches a field that has all of the provided tags. (read-only)
   */
  all_tags?: string[] | null
}

export interface IIntegrationTestResult {
  /**
   * Whether or not the test was successful (read-only)
   */
  success?: boolean
  /**
   * A message representing the results of the test. (read-only)
   */
  message?: string | null
  /**
   * An array of connection test result for delegate oauth actions. (read-only)
   */
  delegate_oauth_result?: IDelegateOauthTest[] | null
}

export interface IInternalHelpResources {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * If true and internal help resources content is not blank then the link for internal help resources will be shown in the help menu and the content displayed within Looker
   */
  enabled?: boolean
}

export interface IInternalHelpResourcesContent {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Text to display in the help menu item which will display the internal help resources
   */
  organization_name?: string | null
  /**
   * Content to be displayed in the internal help resources page/modal
   */
  markdown_content?: string | null
}

/**
 * The type of the investigative content Valid values are: "dashboard". (Enum defined in Alert)
 */
export enum InvestigativeContentType {
  dashboard = 'dashboard',
}

export interface ILDAPConfig {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
   */
  alternate_email_login_allowed?: boolean
  /**
   * (Write-Only)  Password for the LDAP account used to access the LDAP server
   */
  auth_password?: string | null
  /**
   * Users will not be allowed to login at all unless a role for them is found in LDAP if set to true
   */
  auth_requires_role?: boolean
  /**
   * Distinguished name of LDAP account used to access the LDAP server
   */
  auth_username?: string | null
  /**
   * LDAP server hostname
   */
  connection_host?: string | null
  /**
   * LDAP host port
   */
  connection_port?: string | null
  /**
   * Use Transport Layer Security
   */
  connection_tls?: boolean
  /**
   * Do not verify peer when using TLS
   */
  connection_tls_no_verify?: boolean
  /**
   * (Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP
   */
  default_new_user_group_ids?: string[] | null
  /**
   * (Read-only) Groups that will be applied to new users the first time they login via LDAP (read-only)
   */
  default_new_user_groups?: IGroup[] | null
  /**
   * (Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP
   */
  default_new_user_role_ids?: string[] | null
  /**
   * (Read-only) Roles that will be applied to new users the first time they login via LDAP (read-only)
   */
  default_new_user_roles?: IRole[] | null
  /**
   * Enable/Disable LDAP authentication for the server
   */
  enabled?: boolean
  /**
   * Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it.
   */
  force_no_page?: boolean
  /**
   * (Read-only) Array of mappings between LDAP Groups and Looker Roles (read-only)
   */
  groups?: ILDAPGroupRead[] | null
  /**
   * Base dn for finding groups in LDAP searches
   */
  groups_base_dn?: string | null
  /**
   * Identifier for a strategy for how Looker will search for groups in the LDAP server
   */
  groups_finder_type?: string | null
  /**
   * LDAP Group attribute that signifies the members of the groups. Most commonly 'member'
   */
  groups_member_attribute?: string | null
  /**
   * Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches
   */
  groups_objectclasses?: string | null
  /**
   * LDAP Group attribute that signifies the user in a group. Most commonly 'dn'
   */
  groups_user_attribute?: string | null
  /**
   * (Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids
   */
  groups_with_role_ids?: ILDAPGroupWrite[] | null
  /**
   * (Read-only) Has the password been set for the LDAP account used to access the LDAP server (read-only)
   */
  has_auth_password?: boolean
  /**
   * Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user.
   */
  merge_new_users_by_email?: boolean
  /**
   * When this config was last modified (read-only)
   */
  modified_at?: string | null
  /**
   * User id of user who last modified this config (read-only)
   */
  modified_by?: string | null
  /**
   * Set user roles in Looker based on groups from LDAP
   */
  set_roles_from_groups?: boolean
  /**
   * (Write-Only)  Test LDAP user password. For ldap tests only.
   */
  test_ldap_password?: string | null
  /**
   * (Write-Only)  Test LDAP user login id. For ldap tests only.
   */
  test_ldap_user?: string | null
  /**
   * Name of user record attributes used to indicate email address field
   */
  user_attribute_map_email?: string | null
  /**
   * Name of user record attributes used to indicate first name
   */
  user_attribute_map_first_name?: string | null
  /**
   * Name of user record attributes used to indicate last name
   */
  user_attribute_map_last_name?: string | null
  /**
   * Name of user record attributes used to indicate unique record id
   */
  user_attribute_map_ldap_id?: string | null
  /**
   * (Read-only) Array of mappings between LDAP User Attributes and Looker User Attributes (read-only)
   */
  user_attributes?: ILDAPUserAttributeRead[] | null
  /**
   * (Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids
   */
  user_attributes_with_ids?: ILDAPUserAttributeWrite[] | null
  /**
   * Distinguished name of LDAP node used as the base for user searches
   */
  user_bind_base_dn?: string | null
  /**
   * (Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses.
   */
  user_custom_filter?: string | null
  /**
   * Name(s) of user record attributes used for matching user login id (comma separated list)
   */
  user_id_attribute_names?: string | null
  /**
   * (Optional) Name of user record objectclass used for finding user during login id
   */
  user_objectclass?: string | null
  /**
   * Allow LDAP auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
   */
  allow_normal_group_membership?: boolean
  /**
   * LDAP auth'd users will be able to inherit roles from non-reflected Looker groups.
   */
  allow_roles_from_normal_groups?: boolean
  /**
   * Allows roles to be directly assigned to LDAP auth'd users.
   */
  allow_direct_roles?: boolean
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface ILDAPConfigTestIssue {
  /**
   * Severity of the issue. Error or Warning (read-only)
   */
  severity?: string | null
  /**
   * Message describing the issue (read-only)
   */
  message?: string | null
}

export interface ILDAPConfigTestResult {
  /**
   * Additional details for error cases (read-only)
   */
  details?: string | null
  /**
   * Array of issues/considerations about the result (read-only)
   */
  issues?: ILDAPConfigTestIssue[] | null
  /**
   * Short human readable test about the result (read-only)
   */
  message?: string | null
  /**
   * Test status code: always 'success' or 'error' (read-only)
   */
  status?: string | null
  /**
   * A more detailed trace of incremental results during auth tests (read-only)
   */
  trace?: string | null
  user?: ILDAPUser
  /**
   * Link to ldap config (read-only)
   */
  url?: string | null
}

export interface ILDAPGroupRead {
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Unique Id of group in Looker (read-only)
   */
  looker_group_id?: string | null
  /**
   * Name of group in Looker (read-only)
   */
  looker_group_name?: string | null
  /**
   * Name of group in LDAP (read-only)
   */
  name?: string | null
  /**
   * Looker Roles (read-only)
   */
  roles?: IRole[] | null
  /**
   * Link to ldap config (read-only)
   */
  url?: string | null
}

export interface ILDAPGroupWrite {
  /**
   * Unique Id
   */
  id?: string | null
  /**
   * Unique Id of group in Looker (read-only)
   */
  looker_group_id?: string | null
  /**
   * Name of group in Looker
   */
  looker_group_name?: string | null
  /**
   * Name of group in LDAP
   */
  name?: string | null
  /**
   * Looker Role Ids
   */
  role_ids?: string[] | null
  /**
   * Link to ldap config (read-only)
   */
  url?: string | null
}

export interface ILDAPUser {
  /**
   * Array of user's email addresses and aliases for use in migration (read-only)
   */
  all_emails?: string[] | null
  /**
   * Dictionary of user's attributes (name/value) (read-only)
   */
  attributes?: IDictionary<string> | null
  /**
   * Primary email address (read-only)
   */
  email?: string | null
  /**
   * First name (read-only)
   */
  first_name?: string | null
  /**
   * Array of user's groups (group names only) (read-only)
   */
  groups?: string[] | null
  /**
   * Last Name (read-only)
   */
  last_name?: string | null
  /**
   * LDAP's distinguished name for the user record (read-only)
   */
  ldap_dn?: string | null
  /**
   * LDAP's Unique ID for the user (read-only)
   */
  ldap_id?: string | null
  /**
   * Array of user's roles (role names only) (read-only)
   */
  roles?: string[] | null
  /**
   * Link to ldap config (read-only)
   */
  url?: string | null
}

export interface ILDAPUserAttributeRead {
  /**
   * Name of User Attribute in LDAP (read-only)
   */
  name?: string | null
  /**
   * Required to be in LDAP assertion for login to be allowed to succeed (read-only)
   */
  required?: boolean
  /**
   * Looker User Attributes (read-only)
   */
  user_attributes?: IUserAttribute[] | null
  /**
   * Link to ldap config (read-only)
   */
  url?: string | null
}

export interface ILDAPUserAttributeWrite {
  /**
   * Name of User Attribute in LDAP
   */
  name?: string | null
  /**
   * Required to be in LDAP assertion for login to be allowed to succeed
   */
  required?: boolean
  /**
   * Looker User Attribute Ids
   */
  user_attribute_ids?: string[] | null
  /**
   * Link to ldap config (read-only)
   */
  url?: string | null
}

export interface ILegacyFeature {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Name (read-only)
   */
  name?: string | null
  /**
   * Description (read-only)
   */
  description?: string | null
  /**
   * Whether this feature has been enabled by a user
   */
  enabled_locally?: boolean
  /**
   * Whether this feature is currently enabled (read-only)
   */
  enabled?: boolean
  /**
   * Looker version where this feature became a legacy feature (read-only)
   */
  disallowed_as_of_version?: string | null
  /**
   * Looker version where this feature will be automatically disabled (read-only)
   */
  disable_on_upgrade_to_version?: string | null
  /**
   * Future Looker version where this feature will be removed (read-only)
   */
  end_of_life_version?: string | null
  /**
   * URL for documentation about this feature (read-only)
   */
  documentation_url?: string | null
  /**
   * Approximate date that this feature will be automatically disabled. (read-only)
   */
  approximate_disable_date?: Date | null
  /**
   * Approximate date that this feature will be removed. (read-only)
   */
  approximate_end_of_life_date?: Date | null
  /**
   * Whether this legacy feature may have been automatically disabled when upgrading to the current version. (read-only)
   */
  has_disabled_on_upgrade?: boolean
}

export interface ILocale {
  /**
   * Code for Locale (read-only)
   */
  code?: string | null
  /**
   * Name of Locale in its own language (read-only)
   */
  native_name?: string | null
  /**
   * Name of Locale in English (read-only)
   */
  english_name?: string | null
}

export interface ILocalizationSettings {
  /**
   * Default locale for localization (read-only)
   */
  default_locale?: string | null
  /**
   * Localization level - strict or permissive (read-only)
   */
  localization_level?: string | null
}

export interface ILook {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Id of content metadata (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Look Title
   */
  title?: string | null
  /**
   * User Id
   */
  user_id?: string | null
  /**
   * Content Favorite Id (read-only)
   */
  content_favorite_id?: string | null
  /**
   * Time that the Look was created. (read-only)
   */
  created_at?: Date | null
  /**
   * Whether or not a look is 'soft' deleted.
   */
  deleted?: boolean
  /**
   * Time that the Look was deleted. (read-only)
   */
  deleted_at?: Date | null
  /**
   * Id of User that deleted the look. (read-only)
   */
  deleter_id?: string | null
  /**
   * Description
   */
  description?: string | null
  /**
   * Embed Url (read-only)
   */
  embed_url?: string | null
  /**
   * Excel File Url (read-only)
   */
  excel_file_url?: string | null
  /**
   * Number of times favorited (read-only)
   */
  favorite_count?: number | null
  /**
   * Google Spreadsheet Formula (read-only)
   */
  google_spreadsheet_formula?: string | null
  /**
   * Image Embed Url (read-only)
   */
  image_embed_url?: string | null
  /**
   * auto-run query when Look viewed
   */
  is_run_on_load?: boolean
  /**
   * Time that the Look was last accessed by any user (read-only)
   */
  last_accessed_at?: Date | null
  /**
   * Id of User that last updated the look. (read-only)
   */
  last_updater_id?: string | null
  /**
   * Time last viewed in the Looker web UI (read-only)
   */
  last_viewed_at?: Date | null
  model?: ILookModel
  /**
   * Is Public
   */
  public?: boolean
  /**
   * Public Slug (read-only)
   */
  public_slug?: string | null
  /**
   * Public Url (read-only)
   */
  public_url?: string | null
  /**
   * Query Id
   */
  query_id?: string | null
  /**
   * Short Url (read-only)
   */
  short_url?: string | null
  folder?: IFolderBase
  /**
   * Folder Id
   */
  folder_id?: string | null
  /**
   * Time that the Look was updated. (read-only)
   */
  updated_at?: Date | null
  /**
   * Number of times viewed in the Looker web UI (read-only)
   */
  view_count?: number | null
}

export interface ILookBasic {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Id of content metadata (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Look Title (read-only)
   */
  title?: string | null
  /**
   * User Id
   */
  user_id?: string | null
}

export interface ILookmlModel {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Array of names of connections this model is allowed to use
   */
  allowed_db_connection_names?: string[] | null
  /**
   * Array of explores (if has_content) (read-only)
   */
  explores?: ILookmlModelNavExplore[] | null
  /**
   * Does this model declaration have have lookml content? (read-only)
   */
  has_content?: boolean
  /**
   * UI-friendly name for this model (read-only)
   */
  label?: string | null
  /**
   * Name of the model. Also used as the unique identifier
   */
  name?: string | null
  /**
   * Name of project containing the model
   */
  project_name?: string | null
  /**
   * Is this model allowed to use all current and future connections
   */
  unlimited_db_connections?: boolean
}

export interface ILookmlModelExplore {
  /**
   * Fully qualified explore name (model name plus explore name) (read-only)
   */
  id?: string
  /**
   * Explore name (read-only)
   */
  name?: string | null
  /**
   * Description (read-only)
   */
  description?: string | null
  /**
   * Label (read-only)
   */
  label?: string | null
  /**
   * Explore title (read-only)
   */
  title?: string | null
  /**
   * Scopes (read-only)
   */
  scopes?: string[] | null
  /**
   * Can Total (read-only)
   */
  can_total?: boolean
  /**
   * Can Develop LookML (read-only)
   */
  can_develop?: boolean
  /**
   * Can See LookML (read-only)
   */
  can_see_lookml?: boolean
  /**
   * A URL linking to the definition of this explore in the LookML IDE. (read-only)
   */
  lookml_link?: string | null
  /**
   * Can Save (read-only)
   */
  can_save?: boolean
  /**
   * Can Explain (read-only)
   */
  can_explain?: boolean
  /**
   * Can pivot in the DB (read-only)
   */
  can_pivot_in_db?: boolean
  /**
   * Can use subtotals (read-only)
   */
  can_subtotal?: boolean
  /**
   * Has timezone support (read-only)
   */
  has_timezone_support?: boolean
  /**
   * Cost estimates supported (read-only)
   */
  supports_cost_estimate?: boolean
  /**
   * Connection name (read-only)
   */
  connection_name?: string | null
  /**
   * How nulls are sorted, possible values are "low", "high", "first" and "last" (read-only)
   */
  null_sort_treatment?: string | null
  /**
   * List of model source files (read-only)
   */
  files?: string[] | null
  /**
   * Primary source_file file (read-only)
   */
  source_file?: string | null
  /**
   * Name of project (read-only)
   */
  project_name?: string | null
  /**
   * Name of model (read-only)
   */
  model_name?: string | null
  /**
   * Name of view (read-only)
   */
  view_name?: string | null
  /**
   * Is hidden (read-only)
   */
  hidden?: boolean
  /**
   * A sql_table_name expression that defines what sql table the view/explore maps onto. Example: "prod_orders2 AS orders" in a view named orders. (read-only)
   */
  sql_table_name?: string | null
  /**
   * (DEPRECATED) Array of access filter field names (read-only)
   */
  access_filter_fields?: string[] | null
  /**
   * Access filters (read-only)
   */
  access_filters?: ILookmlModelExploreAccessFilter[] | null
  /**
   * Aliases (read-only)
   */
  aliases?: ILookmlModelExploreAlias[] | null
  /**
   * Always filter (read-only)
   */
  always_filter?: ILookmlModelExploreAlwaysFilter[] | null
  /**
   * Conditionally filter (read-only)
   */
  conditionally_filter?: ILookmlModelExploreConditionallyFilter[] | null
  /**
   * Array of index fields (read-only)
   */
  index_fields?: string[] | null
  /**
   * Sets (read-only)
   */
  sets?: ILookmlModelExploreSet[] | null
  /**
   * An array of arbitrary string tags provided in the model for this explore. (read-only)
   */
  tags?: string[] | null
  /**
   * Errors (read-only)
   */
  errors?: ILookmlModelExploreError[] | null
  fields?: ILookmlModelExploreFieldset
  /**
   * Views joined into this explore (read-only)
   */
  joins?: ILookmlModelExploreJoins[] | null
  /**
   * Label used to group explores in the navigation menus (read-only)
   */
  group_label?: string | null
  /**
   * An array of items describing which custom measure types are supported for creating a custom measure 'based_on' each possible dimension type. (read-only)
   */
  supported_measure_types?: ILookmlModelExploreSupportedMeasureType[]
  /**
   * An array of joins that will always be included in the SQL for this explore, even if the user has not selected a field from the joined view. (read-only)
   */
  always_join?: string[] | null
}

export interface ILookmlModelExploreAccessFilter {
  /**
   * Field to be filtered (read-only)
   */
  field?: string | null
  /**
   * User attribute name (read-only)
   */
  user_attribute?: string | null
}

export interface ILookmlModelExploreAlias {
  /**
   * Name (read-only)
   */
  name?: string | null
  /**
   * Value (read-only)
   */
  value?: string | null
}

export interface ILookmlModelExploreAlwaysFilter {
  /**
   * Name (read-only)
   */
  name?: string | null
  /**
   * Value (read-only)
   */
  value?: string | null
}

export interface ILookmlModelExploreConditionallyFilter {
  /**
   * Name (read-only)
   */
  name?: string | null
  /**
   * Value (read-only)
   */
  value?: string | null
}

export interface ILookmlModelExploreError {
  /**
   * Error Message (read-only)
   */
  message?: string | null
  /**
   * Details (read-only)
   */
  details?: any | null
  /**
   * Error source location (read-only)
   */
  error_pos?: string | null
  /**
   * Is this a field error (read-only)
   */
  field_error?: boolean
}

export interface ILookmlModelExploreField {
  /**
   * The appropriate horizontal text alignment the values of this field should be displayed in. Valid values are: "left", "right". (read-only)
   */
  align?: Align
  /**
   * Whether it's possible to filter on this field. (read-only)
   */
  can_filter?: boolean
  /**
   * Field category Valid values are: "parameter", "filter", "measure", "dimension". (read-only)
   */
  category?: Category | null
  /**
   * The default value that this field uses when filtering. Null if there is no default value. (read-only)
   */
  default_filter_value?: string | null
  /**
   * Description (read-only)
   */
  description?: string | null
  /**
   * Dimension group if this field is part of a dimension group. If not, this will be null. (read-only)
   */
  dimension_group?: string | null
  /**
   * An array enumerating all the possible values that this field can contain. When null, there is no limit to the set of possible values this field can contain. (read-only)
   */
  enumerations?: ILookmlModelExploreFieldEnumeration[] | null
  /**
   * An error message indicating a problem with the definition of this field. If there are no errors, this will be null. (read-only)
   */
  error?: string | null
  /**
   * A label creating a grouping of fields. All fields with this label should be presented together when displayed in a UI. (read-only)
   */
  field_group_label?: string | null
  /**
   * When presented in a field group via field_group_label, a shorter name of the field to be displayed in that context. (read-only)
   */
  field_group_variant?: string | null
  /**
   * The style of dimension fill that is possible for this field. Null if no dimension fill is possible. Valid values are: "enumeration", "range". (read-only)
   */
  fill_style?: FillStyle | null
  /**
   * An offset (in months) from the calendar start month to the fiscal start month defined in the LookML model this field belongs to. (read-only)
   */
  fiscal_month_offset?: number
  /**
   * Whether this field has a set of allowed_values specified in LookML. (read-only)
   */
  has_allowed_values?: boolean
  /**
   * Whether this field should be hidden from the user interface. (read-only)
   */
  hidden?: boolean
  /**
   * Whether this field is a filter. (read-only)
   */
  is_filter?: boolean
  /**
   * Whether this field represents a fiscal time value. (read-only)
   */
  is_fiscal?: boolean
  /**
   * Whether this field is of a type that represents a numeric value. (read-only)
   */
  is_numeric?: boolean
  /**
   * Whether this field is of a type that represents a time value. (read-only)
   */
  is_timeframe?: boolean
  /**
   * Whether this field can be time filtered. (read-only)
   */
  can_time_filter?: boolean
  time_interval?: ILookmlModelExploreFieldTimeInterval
  /**
   * Fully-qualified human-readable label of the field. (read-only)
   */
  label?: string
  /**
   * The name of the parameter that will provide a parameterized label for this field, if available in the current context. (read-only)
   */
  label_from_parameter?: string | null
  /**
   * The human-readable label of the field, without the view label. (read-only)
   */
  label_short?: string
  /**
   * A URL linking to the definition of this field in the LookML IDE. (read-only)
   */
  lookml_link?: string | null
  map_layer?: ILookmlModelExploreFieldMapLayer
  /**
   * Whether this field is a measure. (read-only)
   */
  measure?: boolean
  /**
   * Fully-qualified name of the field. (read-only)
   */
  name?: string
  /**
   * If yes, the field will not be localized with the user attribute number_format. Defaults to no (read-only)
   */
  strict_value_format?: boolean
  /**
   * Whether this field is a parameter. (read-only)
   */
  parameter?: boolean
  /**
   * Whether this field can be removed from a query. (read-only)
   */
  permanent?: boolean | null
  /**
   * Whether or not the field represents a primary key. (read-only)
   */
  primary_key?: boolean
  /**
   * The name of the project this field is defined in. (read-only)
   */
  project_name?: string | null
  /**
   * When true, it's not possible to re-sort this field's values without re-running the SQL query, due to database logic that affects the sort. (read-only)
   */
  requires_refresh_on_sort?: boolean
  /**
   * The LookML scope this field belongs to. The scope is typically the field's view. (read-only)
   */
  scope?: string
  /**
   * Whether this field can be sorted. (read-only)
   */
  sortable?: boolean
  /**
   * The path portion of source_file_path. (read-only)
   */
  source_file?: string
  /**
   * The fully-qualified path of the project file this field is defined in. (read-only)
   */
  source_file_path?: string
  /**
   * SQL expression as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model. (read-only)
   */
  sql?: string | null
  /**
   * An array of conditions and values that make up a SQL Case expression, as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model. (read-only)
   */
  sql_case?: ILookmlModelExploreFieldSqlCase[] | null
  /**
   * Array of filter conditions defined for the measure in LookML. (read-only)
   */
  filters?: ILookmlModelExploreFieldMeasureFilters[] | null
  /**
   * The name of the dimension to base suggest queries from. (read-only)
   */
  suggest_dimension?: string
  /**
   * The name of the explore to base suggest queries from. (read-only)
   */
  suggest_explore?: string
  /**
   * Whether or not suggestions are possible for this field. (read-only)
   */
  suggestable?: boolean
  /**
   * If available, a list of suggestions for this field. For most fields, a suggest query is a more appropriate way to get an up-to-date list of suggestions. Or use enumerations to list all the possible values. (read-only)
   */
  suggestions?: string[] | null
  /**
   * An array of arbitrary string tags provided in the model for this field. (read-only)
   */
  tags?: string[]
  /**
   * The LookML type of the field. (read-only)
   */
  type?: string
  /**
   * An array of user attribute types that are allowed to be used in filters on this field. Valid values are: "advanced_filter_string", "advanced_filter_number", "advanced_filter_datetime", "string", "number", "datetime", "relative_url", "yesno", "zipcode". (read-only)
   */
  user_attribute_filter_types?: UserAttributeFilterTypes[]
  /**
   * If specified, the LookML value format string for formatting values of this field. (read-only)
   */
  value_format?: string | null
  /**
   * The name of the view this field belongs to. (read-only)
   */
  view?: string
  /**
   * The human-readable label of the view the field belongs to. (read-only)
   */
  view_label?: string
  /**
   * Whether this field was specified in "dynamic_fields" and is not part of the model. (read-only)
   */
  dynamic?: boolean
  /**
   * The name of the starting day of the week. Valid values are: "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday". (read-only)
   */
  week_start_day?: WeekStartDay
  /**
   * The number of times this field has been used in queries (read-only)
   */
  times_used?: number
  /**
   * The name of the view this field is defined in. This will be different than "view" when the view has been joined via a different name using the "from" parameter. (read-only)
   */
  original_view?: string
}

export interface ILookmlModelExploreFieldEnumeration {
  /**
   * Label (read-only)
   */
  label?: string | null
  /**
   * Value (read-only)
   */
  value?: any | null
}

export interface ILookmlModelExploreFieldMapLayer {
  /**
   * URL to the map layer resource. (read-only)
   */
  url?: string
  /**
   * Name of the map layer, as defined in LookML. (read-only)
   */
  name?: string
  /**
   * Specifies the name of the TopoJSON object that the map layer references. If not specified, use the first object.. (read-only)
   */
  feature_key?: string | null
  /**
   * Selects which property from the TopoJSON data to plot against. TopoJSON supports arbitrary metadata for each region. When null, the first matching property should be used. (read-only)
   */
  property_key?: string | null
  /**
   * Which property from the TopoJSON data to use to label the region. When null, property_key should be used. (read-only)
   */
  property_label_key?: string | null
  /**
   * The preferred geographic projection of the map layer when displayed in a visualization that supports multiple geographic projections. (read-only)
   */
  projection?: string | null
  /**
   * Specifies the data format of the region information. Valid values are: "topojson", "vector_tile_region". (read-only)
   */
  format?: Format
  /**
   * Specifies the URL to a JSON file that defines the geographic extents of each region available in the map layer. This data is used to automatically center the map on the available data for visualization purposes. The JSON file must be a JSON object where the keys are the mapping value of the feature (as specified by property_key) and the values are arrays of four numbers representing the west longitude, south latitude, east longitude, and north latitude extents of the region. The object must include a key for every possible value of property_key. (read-only)
   */
  extents_json_url?: string | null
  /**
   * The minimum zoom level that the map layer may be displayed at, for visualizations that support zooming. (read-only)
   */
  max_zoom_level?: number | null
  /**
   * The maximum zoom level that the map layer may be displayed at, for visualizations that support zooming. (read-only)
   */
  min_zoom_level?: number | null
}

export interface ILookmlModelExploreFieldMeasureFilters {
  /**
   * Filter field name (read-only)
   */
  field?: string | null
  /**
   * Filter condition value (read-only)
   */
  condition?: string | null
}

export interface ILookmlModelExploreFieldset {
  /**
   * Array of dimensions (read-only)
   */
  dimensions?: ILookmlModelExploreField[] | null
  /**
   * Array of measures (read-only)
   */
  measures?: ILookmlModelExploreField[] | null
  /**
   * Array of filters (read-only)
   */
  filters?: ILookmlModelExploreField[] | null
  /**
   * Array of parameters (read-only)
   */
  parameters?: ILookmlModelExploreField[] | null
}

export interface ILookmlModelExploreFieldSqlCase {
  /**
   * SQL Case label value (read-only)
   */
  value?: string | null
  /**
   * SQL Case condition expression (read-only)
   */
  condition?: string | null
}

export interface ILookmlModelExploreFieldTimeInterval {
  /**
   * The type of time interval this field represents a grouping of. Valid values are: "day", "hour", "minute", "second", "millisecond", "microsecond", "week", "month", "quarter", "year". (read-only)
   */
  name?: Name
  /**
   * The number of intervals this field represents a grouping of. (read-only)
   */
  count?: number
}

export interface ILookmlModelExploreJoins {
  /**
   * Name of this join (and name of the view to join) (read-only)
   */
  name?: string | null
  /**
   * Fields referenced by the join (read-only)
   */
  dependent_fields?: string[] | null
  /**
   * Fields of the joined view to pull into this explore (read-only)
   */
  fields?: string[] | null
  /**
   * Name of the dimension in this explore whose value is in the primary key of the joined view (read-only)
   */
  foreign_key?: string | null
  /**
   * Name of view to join (read-only)
   */
  from?: string | null
  /**
   * Specifies whether all queries must use an outer join (read-only)
   */
  outer_only?: boolean | null
  /**
   * many_to_one, one_to_one, one_to_many, many_to_many (read-only)
   */
  relationship?: string | null
  /**
   * Names of joins that must always be included in SQL queries (read-only)
   */
  required_joins?: string[] | null
  /**
   * SQL expression that produces a foreign key (read-only)
   */
  sql_foreign_key?: string | null
  /**
   * SQL ON expression describing the join condition (read-only)
   */
  sql_on?: string | null
  /**
   * SQL table name to join (read-only)
   */
  sql_table_name?: string | null
  /**
   * The join type: left_outer, full_outer, inner, or cross (read-only)
   */
  type?: string | null
  /**
   * Label to display in UI selectors (read-only)
   */
  view_label?: string | null
}

export interface ILookmlModelExploreSet {
  /**
   * Name (read-only)
   */
  name?: string | null
  /**
   * Value set (read-only)
   */
  value?: string[] | null
}

export interface ILookmlModelExploreSupportedMeasureType {
  /**
   *  (read-only)
   */
  dimension_type?: string | null
  /**
   *  (read-only)
   */
  measure_types?: string[] | null
}

export interface ILookmlModelNavExplore {
  /**
   * Name of the explore (read-only)
   */
  name?: string | null
  /**
   * Description for the explore (read-only)
   */
  description?: string | null
  /**
   * Label for the explore (read-only)
   */
  label?: string | null
  /**
   * Is this explore marked as hidden (read-only)
   */
  hidden?: boolean
  /**
   * Label used to group explores in the navigation menus (read-only)
   */
  group_label?: string | null
}

export interface ILookmlTest {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Name of model containing this test. (read-only)
   */
  model_name?: string
  /**
   * Name of this test. (read-only)
   */
  name?: string
  /**
   * Name of the explore this test runs a query against (read-only)
   */
  explore_name?: string
  /**
   * The url parameters that can be used to reproduce this test's query on an explore. (read-only)
   */
  query_url_params?: string
  /**
   * Name of the LookML file containing this test. (read-only)
   */
  file?: string
  /**
   * Line number of this test in LookML. (read-only)
   */
  line?: number | null
}

export interface ILookmlTestResult {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Name of model containing this test. (read-only)
   */
  model_name?: string
  /**
   * Name of this test. (read-only)
   */
  test_name?: string
  /**
   * Number of assertions in this test (read-only)
   */
  assertions_count?: number
  /**
   * Number of assertions passed in this test (read-only)
   */
  assertions_failed?: number
  /**
   * A list of any errors encountered by the test. (read-only)
   */
  errors?: IProjectError[] | null
  /**
   * A list of any warnings encountered by the test. (read-only)
   */
  warnings?: IProjectError[] | null
  /**
   * True if this test passsed without errors. (read-only)
   */
  success?: boolean
}

export interface ILookModel {
  /**
   * Model Id (read-only)
   */
  id?: string
  /**
   * Model Label (read-only)
   */
  label?: string | null
}

export interface ILookWithDashboards {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Id of content metadata (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Look Title
   */
  title?: string | null
  /**
   * User Id
   */
  user_id?: string | null
  /**
   * Content Favorite Id (read-only)
   */
  content_favorite_id?: string | null
  /**
   * Time that the Look was created. (read-only)
   */
  created_at?: Date | null
  /**
   * Whether or not a look is 'soft' deleted.
   */
  deleted?: boolean
  /**
   * Time that the Look was deleted. (read-only)
   */
  deleted_at?: Date | null
  /**
   * Id of User that deleted the look. (read-only)
   */
  deleter_id?: string | null
  /**
   * Description
   */
  description?: string | null
  /**
   * Embed Url (read-only)
   */
  embed_url?: string | null
  /**
   * Excel File Url (read-only)
   */
  excel_file_url?: string | null
  /**
   * Number of times favorited (read-only)
   */
  favorite_count?: number | null
  /**
   * Google Spreadsheet Formula (read-only)
   */
  google_spreadsheet_formula?: string | null
  /**
   * Image Embed Url (read-only)
   */
  image_embed_url?: string | null
  /**
   * auto-run query when Look viewed
   */
  is_run_on_load?: boolean
  /**
   * Time that the Look was last accessed by any user (read-only)
   */
  last_accessed_at?: Date | null
  /**
   * Id of User that last updated the look. (read-only)
   */
  last_updater_id?: string | null
  /**
   * Time last viewed in the Looker web UI (read-only)
   */
  last_viewed_at?: Date | null
  model?: ILookModel
  /**
   * Is Public
   */
  public?: boolean
  /**
   * Public Slug (read-only)
   */
  public_slug?: string | null
  /**
   * Public Url (read-only)
   */
  public_url?: string | null
  /**
   * Query Id
   */
  query_id?: string | null
  /**
   * Short Url (read-only)
   */
  short_url?: string | null
  folder?: IFolderBase
  /**
   * Folder Id
   */
  folder_id?: string | null
  /**
   * Time that the Look was updated. (read-only)
   */
  updated_at?: Date | null
  /**
   * Number of times viewed in the Looker web UI (read-only)
   */
  view_count?: number | null
  /**
   * Dashboards (read-only)
   */
  dashboards?: IDashboardBase[] | null
}

export interface ILookWithQuery {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Id of content metadata (read-only)
   */
  content_metadata_id?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Look Title
   */
  title?: string | null
  /**
   * User Id
   */
  user_id?: string | null
  /**
   * Content Favorite Id (read-only)
   */
  content_favorite_id?: string | null
  /**
   * Time that the Look was created. (read-only)
   */
  created_at?: Date | null
  /**
   * Whether or not a look is 'soft' deleted.
   */
  deleted?: boolean
  /**
   * Time that the Look was deleted. (read-only)
   */
  deleted_at?: Date | null
  /**
   * Id of User that deleted the look. (read-only)
   */
  deleter_id?: string | null
  /**
   * Description
   */
  description?: string | null
  /**
   * Embed Url (read-only)
   */
  embed_url?: string | null
  /**
   * Excel File Url (read-only)
   */
  excel_file_url?: string | null
  /**
   * Number of times favorited (read-only)
   */
  favorite_count?: number | null
  /**
   * Google Spreadsheet Formula (read-only)
   */
  google_spreadsheet_formula?: string | null
  /**
   * Image Embed Url (read-only)
   */
  image_embed_url?: string | null
  /**
   * auto-run query when Look viewed
   */
  is_run_on_load?: boolean
  /**
   * Time that the Look was last accessed by any user (read-only)
   */
  last_accessed_at?: Date | null
  /**
   * Id of User that last updated the look. (read-only)
   */
  last_updater_id?: string | null
  /**
   * Time last viewed in the Looker web UI (read-only)
   */
  last_viewed_at?: Date | null
  model?: ILookModel
  /**
   * Is Public
   */
  public?: boolean
  /**
   * Public Slug (read-only)
   */
  public_slug?: string | null
  /**
   * Public Url (read-only)
   */
  public_url?: string | null
  /**
   * Query Id
   */
  query_id?: string | null
  /**
   * Short Url (read-only)
   */
  short_url?: string | null
  folder?: IFolderBase
  /**
   * Folder Id
   */
  folder_id?: string | null
  /**
   * Time that the Look was updated. (read-only)
   */
  updated_at?: Date | null
  /**
   * Number of times viewed in the Looker web UI (read-only)
   */
  view_count?: number | null
  query?: IQuery
  /**
   * Url (read-only)
   */
  url?: string | null
}

export interface IManifest {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Manifest project name (read-only)
   */
  name?: string | null
  /**
   * Imports for a project (read-only)
   */
  imports?: IImportedProject[] | null
  localization_settings?: ILocalizationSettings
}

export interface IMaterializePDT {
  /**
   * The ID of the enqueued materialization task (read-only)
   */
  materialization_id?: string
  /**
   * Detailed response in text format (read-only)
   */
  resp_text?: string | null
}

export interface IMergeFields {
  /**
   * Field name to map onto in the merged results
   */
  field_name?: string | null
  /**
   * Field name from the source query
   */
  source_field_name?: string | null
}

export interface IMergeQuery {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Column Limit
   */
  column_limit?: string | null
  /**
   * Dynamic Fields
   */
  dynamic_fields?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Pivots
   */
  pivots?: string[] | null
  /**
   * Unique to get results (read-only)
   */
  result_maker_id?: string | null
  /**
   * Sorts
   */
  sorts?: string[] | null
  /**
   * Source Queries defining the results to be merged.
   */
  source_queries?: IMergeQuerySourceQuery[] | null
  /**
   * Total
   */
  total?: boolean
  /**
   * Visualization Config
   */
  vis_config?: IDictionary<string> | null
}

export interface IMergeQuerySourceQuery {
  /**
   * An array defining which fields of the source query are mapped onto fields of the merge query
   */
  merge_fields?: IMergeFields[] | null
  /**
   * Display name
   */
  name?: string | null
  /**
   * Id of the query to merge
   */
  query_id?: string | null
}

export interface IMobileFeatureFlags {
  /**
   * Specifies the name of feature flag. (read-only)
   */
  feature_flag_name?: string | null
  /**
   * Specifies the state of feature flag (read-only)
   */
  feature_flag_state?: boolean
}

export interface IMobilePayload {
  /**
   * Title of the alert (read-only)
   */
  title?: string | null
  /**
   * ID of the alert (read-only)
   */
  alert_id: string
  /**
   * ID of the investigative content (read-only)
   */
  investigative_content_id?: string | null
  /**
   * Name of the dashboard on which the alert has been set (read-only)
   */
  dashboard_name?: string | null
  /**
   * ID of the dashboard on which the alert has been set (read-only)
   */
  dashboard_id?: string
  /**
   * Slug of the query which runs the alert queries. (read-only)
   */
  query_slug?: string
}

export interface IMobileSettings {
  /**
   * Specifies whether the force authentication option is enabled for mobile (read-only)
   */
  mobile_force_authentication?: boolean
  /**
   * Specifies whether mobile access for this instance is enabled. (read-only)
   */
  mobile_app_integration?: boolean
  /**
   * Specifies feature flag and state relevant to mobile. (read-only)
   */
  mobile_feature_flags?: IMobileFeatureFlags[] | null
}

export interface IMobileToken {
  /**
   * Unique ID. (read-only)
   */
  id?: string
  /**
   * Specifies the device token
   */
  device_token: string
  /**
   * Specifies type of device. Valid values are: "android", "ios".
   */
  device_type: DeviceType
}

export interface IModel {
  /**
   *  (read-only)
   */
  connection?: string | null
  /**
   *  (read-only)
   */
  name?: string
  /**
   * Array of named value formats (read-only)
   */
  value_formats?: IModelNamedValueFormats[] | null
}

export interface IModelFieldSuggestions {
  /**
   * List of suggestions (read-only)
   */
  suggestions?: string[]
  /**
   * Error message (read-only)
   */
  error?: string | null
  /**
   * True if result came from the cache (read-only)
   */
  from_cache?: boolean
  /**
   * True if this was a hit limit (read-only)
   */
  hit_limit?: boolean
  /**
   * True if calcite was used (read-only)
   */
  used_calcite_materialization?: boolean
}

export interface IModelNamedValueFormats {
  /**
   *  (read-only)
   */
  format_string?: string
  /**
   *  (read-only)
   */
  label?: string
  /**
   *  (read-only)
   */
  name?: string
  /**
   *  (read-only)
   */
  strict_value_format?: boolean
}

export interface IModelSet {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   *  (read-only)
   */
  all_access?: boolean
  /**
   *  (read-only)
   */
  built_in?: boolean
  /**
   * Unique Id (read-only)
   */
  id?: string
  models?: string[] | null
  /**
   * Name of ModelSet
   */
  name?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface IModelsNotValidated {
  /**
   * Model name (read-only)
   */
  name?: string | null
  /**
   * Project file (read-only)
   */
  project_file_id?: string | null
}

/**
 * The type of time interval this field represents a grouping of. Valid values are: "day", "hour", "minute", "second", "millisecond", "microsecond", "week", "month", "quarter", "year". (Enum defined in LookmlModelExploreFieldTimeInterval)
 */
export enum Name {
  day = 'day',
  hour = 'hour',
  minute = 'minute',
  second = 'second',
  millisecond = 'millisecond',
  microsecond = 'microsecond',
  week = 'week',
  month = 'month',
  quarter = 'quarter',
  year = 'year',
}

export interface IOauthClientApp {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * The globally unique id of this application (read-only)
   */
  client_guid?: string
  /**
   * The uri with which this application will receive an auth code by browser redirect.
   */
  redirect_uri?: string
  /**
   * The application's display name
   */
  display_name?: string
  /**
   * A description of the application that will be displayed to users
   */
  description?: string
  /**
   * When enabled is true, OAuth2 and API requests will be accepted from this app. When false, all requests from this app will be refused. Setting disabled invalidates existing tokens.
   */
  enabled?: boolean
  /**
   * If set, only Looker users who are members of this group can use this web app with Looker. If group_id is not set, any Looker user may use this app to access this Looker instance
   */
  group_id?: string | null
  /**
   * All auth codes, access tokens, and refresh tokens issued for this application prior to this date-time for ALL USERS will be invalid. (read-only)
   */
  tokens_invalid_before?: Date
  /**
   * All users who have been activated to use this app (read-only)
   */
  activated_users?: IUserPublic[]
}

export interface IOIDCConfig {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
   */
  alternate_email_login_allowed?: boolean
  /**
   * OpenID Provider Audience
   */
  audience?: string | null
  /**
   * Users will not be allowed to login at all unless a role for them is found in OIDC if set to true
   */
  auth_requires_role?: boolean
  /**
   * OpenID Provider Authorization Url
   */
  authorization_endpoint?: string | null
  /**
   * (Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC
   */
  default_new_user_group_ids?: string[] | null
  /**
   * (Read-only) Groups that will be applied to new users the first time they login via OIDC (read-only)
   */
  default_new_user_groups?: IGroup[] | null
  /**
   * (Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC
   */
  default_new_user_role_ids?: string[] | null
  /**
   * (Read-only) Roles that will be applied to new users the first time they login via OIDC (read-only)
   */
  default_new_user_roles?: IRole[] | null
  /**
   * Enable/Disable OIDC authentication for the server
   */
  enabled?: boolean
  /**
   * (Read-only) Array of mappings between OIDC Groups and Looker Roles (read-only)
   */
  groups?: IOIDCGroupRead[] | null
  /**
   * Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
   */
  groups_attribute?: string | null
  /**
   * (Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids
   */
  groups_with_role_ids?: IOIDCGroupWrite[] | null
  /**
   * Relying Party Identifier (provided by OpenID Provider)
   */
  identifier?: string | null
  /**
   * OpenID Provider Issuer
   */
  issuer?: string | null
  /**
   * When this config was last modified (read-only)
   */
  modified_at?: Date | null
  /**
   * User id of user who last modified this config (read-only)
   */
  modified_by?: string | null
  /**
   * Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
   */
  new_user_migration_types?: string | null
  /**
   * Array of scopes to request.
   */
  scopes?: string[] | null
  /**
   * (Write-Only) Relying Party Secret (provided by OpenID Provider)
   */
  secret?: string | null
  /**
   * Set user roles in Looker based on groups from OIDC
   */
  set_roles_from_groups?: boolean
  /**
   * Slug to identify configurations that are created in order to run a OIDC config test (read-only)
   */
  test_slug?: string | null
  /**
   * OpenID Provider Token Url
   */
  token_endpoint?: string | null
  /**
   * Name of user record attributes used to indicate email address field
   */
  user_attribute_map_email?: string | null
  /**
   * Name of user record attributes used to indicate first name
   */
  user_attribute_map_first_name?: string | null
  /**
   * Name of user record attributes used to indicate last name
   */
  user_attribute_map_last_name?: string | null
  /**
   * (Read-only) Array of mappings between OIDC User Attributes and Looker User Attributes (read-only)
   */
  user_attributes?: IOIDCUserAttributeRead[] | null
  /**
   * (Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids
   */
  user_attributes_with_ids?: IOIDCUserAttributeWrite[] | null
  /**
   * OpenID Provider User Information Url
   */
  userinfo_endpoint?: string | null
  /**
   * Allow OIDC auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
   */
  allow_normal_group_membership?: boolean
  /**
   * OIDC auth'd users will inherit roles from non-reflected Looker groups.
   */
  allow_roles_from_normal_groups?: boolean
  /**
   * Allows roles to be directly assigned to OIDC auth'd users.
   */
  allow_direct_roles?: boolean
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface IOIDCGroupRead {
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Unique Id of group in Looker (read-only)
   */
  looker_group_id?: string | null
  /**
   * Name of group in Looker (read-only)
   */
  looker_group_name?: string | null
  /**
   * Name of group in OIDC (read-only)
   */
  name?: string | null
  /**
   * Looker Roles (read-only)
   */
  roles?: IRole[] | null
}

export interface IOIDCGroupWrite {
  /**
   * Unique Id
   */
  id?: string | null
  /**
   * Unique Id of group in Looker (read-only)
   */
  looker_group_id?: string | null
  /**
   * Name of group in Looker
   */
  looker_group_name?: string | null
  /**
   * Name of group in OIDC
   */
  name?: string | null
  /**
   * Looker Role Ids
   */
  role_ids?: string[] | null
}

export interface IOIDCUserAttributeRead {
  /**
   * Name of User Attribute in OIDC (read-only)
   */
  name?: string | null
  /**
   * Required to be in OIDC assertion for login to be allowed to succeed (read-only)
   */
  required?: boolean
  /**
   * Looker User Attributes (read-only)
   */
  user_attributes?: IUserAttribute[] | null
}

export interface IOIDCUserAttributeWrite {
  /**
   * Name of User Attribute in OIDC
   */
  name?: string | null
  /**
   * Required to be in OIDC assertion for login to be allowed to succeed
   */
  required?: boolean
  /**
   * Looker User Attribute Ids
   */
  user_attribute_ids?: string[] | null
}

export interface IPasswordConfig {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Minimum number of characters required for a new password.  Must be between 7 and 100
   */
  min_length?: number | null
  /**
   * Require at least one numeric character
   */
  require_numeric?: boolean
  /**
   * Require at least one uppercase and one lowercase letter
   */
  require_upperlower?: boolean
  /**
   * Require at least one special character
   */
  require_special?: boolean
}

export interface IPermission {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Permission symbol (read-only)
   */
  permission?: string | null
  /**
   * Dependency parent symbol (read-only)
   */
  parent?: string | null
  /**
   * Description (read-only)
   */
  description?: string | null
}

export interface IPermissionSet {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   *  (read-only)
   */
  all_access?: boolean
  /**
   *  (read-only)
   */
  built_in?: boolean
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Name of PermissionSet
   */
  name?: string | null
  permissions?: string[] | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

/**
 * Type of permission: "view" or "edit" Valid values are: "view", "edit". (Enum defined in ContentMetaGroupUser)
 */
export enum PermissionType {
  view = 'view',
  edit = 'edit',
}

export interface IPrivatelabelConfiguration {
  /**
   * Customer logo image. Expected base64 encoded data (write-only)
   */
  logo_file?: string | null
  /**
   * Logo image url (read-only) (read-only)
   */
  logo_url?: string | null
  /**
   * Custom favicon image. Expected base64 encoded data (write-only)
   */
  favicon_file?: string | null
  /**
   * Favicon image url (read-only) (read-only)
   */
  favicon_url?: string | null
  /**
   * Default page title
   */
  default_title?: string | null
  /**
   * Boolean to toggle showing help menus
   */
  show_help_menu?: boolean
  /**
   * Boolean to toggle showing docs
   */
  show_docs?: boolean
  /**
   * Boolean to toggle showing email subscription options.
   */
  show_email_sub_options?: boolean
  /**
   * Boolean to toggle mentions of Looker in emails
   */
  allow_looker_mentions?: boolean
  /**
   * Boolean to toggle links to Looker in emails
   */
  allow_looker_links?: boolean
  /**
   * Allow subject line and email heading customization in customized emails”
   */
  custom_welcome_email_advanced?: boolean
  /**
   * Remove the word Looker from appearing in the account setup page
   */
  setup_mentions?: boolean
  /**
   * Remove Looker logo from Alerts
   */
  alerts_logo?: boolean
  /**
   * Remove Looker links from Alerts
   */
  alerts_links?: boolean
  /**
   * Remove Looker mentions in home folder page when you don’t have any items saved
   */
  folders_mentions?: boolean
}

export interface IProject {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Project Id (read-only)
   */
  id?: string
  /**
   * Project display name
   */
  name?: string
  /**
   * If true the project is configured with a git repository (read-only)
   */
  uses_git?: boolean
  /**
   * Git remote repository url
   */
  git_remote_url?: string | null
  /**
   * Git username for HTTPS authentication. (For production only, if using user attributes.)
   */
  git_username?: string | null
  /**
   * (Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)
   */
  git_password?: string | null
  /**
   * Git production branch name. Defaults to master. Supported only in Looker 21.0 and higher.
   */
  git_production_branch_name?: string
  /**
   * If true, the project uses a git cookie for authentication.
   */
  use_git_cookie_auth?: boolean
  /**
   * User attribute name for username in per-user HTTPS authentication.
   */
  git_username_user_attribute?: string | null
  /**
   * User attribute name for password in per-user HTTPS authentication.
   */
  git_password_user_attribute?: string | null
  /**
   * Name of the git service provider
   */
  git_service_name?: string | null
  /**
   * Port that HTTP(S) application server is running on (for PRs, file browsing, etc.)
   */
  git_application_server_http_port?: number | null
  /**
   * Scheme that is running on application server (for PRs, file browsing, etc.)
   */
  git_application_server_http_scheme?: string | null
  /**
   * (Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated.
   */
  deploy_secret?: string | null
  /**
   * (Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint.
   */
  unset_deploy_secret?: boolean
  /**
   * The git pull request policy for this project. Valid values are: "off", "links", "recommended", "required".
   */
  pull_request_mode?: PullRequestMode
  /**
   * Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository
   */
  validation_required?: boolean
  /**
   * If true, advanced git release management is enabled for this project
   */
  git_release_mgmt_enabled?: boolean
  /**
   * Validation policy: If true, the project can be committed with warnings when `validation_required` is true. (`allow_warnings` does nothing if `validation_required` is false).
   */
  allow_warnings?: boolean
  /**
   * If true the project is an example project and cannot be modified (read-only)
   */
  is_example?: boolean
  /**
   * Status of dependencies in your manifest & lockfile
   */
  dependency_status?: string | null
}

export interface IProjectError {
  /**
   * A stable token that uniquely identifies this class of error, ignoring parameter values. Error message text may vary due to parameters or localization, but error codes do not. For example, a "File not found" error will have the same error code regardless of the filename in question or the user's display language (read-only)
   */
  code?: string | null
  /**
   * Severity: fatal, error, warning, info, success (read-only)
   */
  severity?: string | null
  /**
   * Error classification: syntax, deprecation, model_configuration, etc (read-only)
   */
  kind?: string | null
  /**
   * Error message which may contain information such as dashboard or model names that may be considered sensitive in some use cases. Avoid storing or sending this message outside of Looker (read-only)
   */
  message?: string | null
  /**
   * The field associated with this error (read-only)
   */
  field_name?: string | null
  /**
   * Name of the file containing this error (read-only)
   */
  file_path?: string | null
  /**
   * Line number in the file of this error (read-only)
   */
  line_number?: number | null
  /**
   * The model associated with this error (read-only)
   */
  model_id?: string | null
  /**
   * The explore associated with this error (read-only)
   */
  explore?: string | null
  /**
   * A link to Looker documentation about this error (read-only)
   */
  help_url?: string | null
  /**
   * Error parameters (read-only)
   */
  params?: IDictionary<any> | null
  /**
   * A version of the error message that does not contain potentially sensitive information. Suitable for situations in which messages are stored or sent to consumers outside of Looker, such as external logs. Sanitized messages will display "(?)" where sensitive information would appear in the corresponding non-sanitized message (read-only)
   */
  sanitized_message?: string | null
}

export interface IProjectFile {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * An opaque token uniquely identifying a file within a project. Avoid parsing or decomposing the text of this token. This token is stable within a Looker release but may change between Looker releases (read-only)
   */
  id?: string
  /**
   * Path, file name, and extension of the file relative to the project root directory (read-only)
   */
  path?: string | null
  /**
   * Display name (read-only)
   */
  title?: string | null
  /**
   * File type: model, view, etc (read-only)
   */
  type?: string | null
  /**
   * The extension of the file: .view.lkml, .model.lkml, etc (read-only)
   */
  extension?: string | null
  /**
   * File mime type (read-only)
   */
  mime_type?: string | null
  /**
   * State of editability for the file. (read-only)
   */
  editable?: boolean
  git_status?: IGitStatus
}

export interface IProjectValidation {
  /**
   * A list of project errors (read-only)
   */
  errors?: IProjectError[] | null
  /**
   * A hash value computed from the project's current state (read-only)
   */
  project_digest?: string | null
  /**
   * A list of models which were not fully validated (read-only)
   */
  models_not_validated?: IModelsNotValidated[] | null
  /**
   * Duration of project validation in seconds (read-only)
   */
  computation_time?: number | null
}

export interface IProjectValidationCache {
  /**
   * A list of project errors (read-only)
   */
  errors?: IProjectError[] | null
  /**
   * A hash value computed from the project's current state (read-only)
   */
  project_digest?: string | null
  /**
   * A list of models which were not fully validated (read-only)
   */
  models_not_validated?: IModelsNotValidated[] | null
  /**
   * Duration of project validation in seconds (read-only)
   */
  computation_time?: number | null
  /**
   * If true, the cached project validation results are no longer accurate because the project has changed since the cached results were calculated (read-only)
   */
  stale?: boolean
}

export interface IProjectWorkspace {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * The id of the project (read-only)
   */
  project_id?: string | null
  /**
   * The id of the local workspace containing the project files (read-only)
   */
  workspace_id?: string | null
  /**
   * The status of the local git directory (read-only)
   */
  git_status?: string | null
  /**
   * Git head revision name (read-only)
   */
  git_head?: string | null
  /**
   * Status of the dependencies in your project. Valid values are: "lock_optional", "lock_required", "lock_error", "install_none". (read-only)
   */
  dependency_status?: DependencyStatus | null
  git_branch?: IGitBranch
  /**
   * The lookml syntax used by all files in this project (read-only)
   */
  lookml_type?: string | null
}

/**
 * The git pull request policy for this project. Valid values are: "off", "links", "recommended", "required". (Enum defined in Project)
 */
export enum PullRequestMode {
  off = 'off',
  links = 'links',
  recommended = 'recommended',
  required = 'required',
}

export interface IQuery {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Model
   */
  model: string
  /**
   * Explore Name
   */
  view: string
  /**
   * Fields
   */
  fields?: string[] | null
  /**
   * Pivots
   */
  pivots?: string[] | null
  /**
   * Fill Fields
   */
  fill_fields?: string[] | null
  /**
   * Filters
   */
  filters?: IDictionary<string> | null
  /**
   * Filter Expression
   */
  filter_expression?: string | null
  /**
   * Sorting for the query results. Use the format `["view.field", ...]` to sort on fields in ascending order. Use the format `["view.field desc", ...]` to sort on fields in descending order. Use `["__UNSORTED__"]` (2 underscores before and after) to disable sorting entirely. Empty sorts `[]` will trigger a default sort.
   */
  sorts?: string[] | null
  /**
   * Limit
   */
  limit?: string | null
  /**
   * Column Limit
   */
  column_limit?: string | null
  /**
   * Total
   */
  total?: boolean | null
  /**
   * Raw Total
   */
  row_total?: string | null
  /**
   * Fields on which to run subtotals
   */
  subtotals?: string[] | null
  /**
   * Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A "type" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
   */
  vis_config?: IDictionary<any> | null
  /**
   * The filter_config represents the state of the filter UI on the explore page for a given query. When running a query via the Looker UI, this parameter takes precedence over "filters". When creating a query or modifying an existing query, "filter_config" should be set to null. Setting it to any other value could cause unexpected filtering behavior. The format should be considered opaque.
   */
  filter_config?: IDictionary<any> | null
  /**
   * Visible UI Sections
   */
  visible_ui_sections?: string | null
  /**
   * Slug (read-only)
   */
  slug?: string | null
  /**
   * Dynamic Fields
   */
  dynamic_fields?: string | null
  /**
   * Client Id: used to generate shortened explore URLs. If set by client, must be a unique 22 character alphanumeric string. Otherwise one will be generated.
   */
  client_id?: string | null
  /**
   * Share Url (read-only)
   */
  share_url?: string | null
  /**
   * Expanded Share Url (read-only)
   */
  expanded_share_url?: string | null
  /**
   * Expanded Url (read-only)
   */
  url?: string | null
  /**
   * Query Timezone
   */
  query_timezone?: string | null
  /**
   * Has Table Calculations (read-only)
   */
  has_table_calculations?: boolean
}

export interface IQueryTask {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Id of query
   */
  query_id?: string | null
  query?: IQuery
  /**
   * whether or not to generate links in the query response.
   */
  generate_links?: boolean
  /**
   * Use production models to run query (even is user is in dev mode).
   */
  force_production?: boolean
  /**
   * Prefix to use for drill links.
   */
  path_prefix?: string | null
  /**
   * Whether or not to use the cache
   */
  cache?: boolean
  /**
   * Whether or not to run table calculations on the server
   */
  server_table_calcs?: boolean
  /**
   * Retrieve any results from cache even if the results have expired.
   */
  cache_only?: boolean
  /**
   * cache key used to cache query. (read-only)
   */
  cache_key?: string | null
  /**
   * Status of query task.
   */
  status?: string | null
  /**
   * Source of query task.
   */
  source?: string | null
  /**
   * Runtime of prior queries. (read-only)
   */
  runtime?: number | null
  /**
   * Rebuild PDTS used in query.
   */
  rebuild_pdts?: boolean
  /**
   * Source of the results of the query. (read-only)
   */
  result_source?: string | null
  /**
   * Id of look associated with query.
   */
  look_id?: string | null
  /**
   * Id of dashboard associated with query.
   */
  dashboard_id?: string | null
  /**
   * The data format of the query results. (read-only)
   */
  result_format?: string | null
}

export interface IRenderTask {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Date/Time render task was created (read-only)
   */
  created_at?: string | null
  /**
   * Filter values to apply to the dashboard queries, in URL query format (read-only)
   */
  dashboard_filters?: string | null
  /**
   * Id of dashboard to render (read-only)
   */
  dashboard_id?: string | null
  /**
   * Dashboard layout style: single_column or tiled (read-only)
   */
  dashboard_style?: string | null
  /**
   * Date/Time render task was completed (read-only)
   */
  finalized_at?: string | null
  /**
   * Output height in pixels. Flowed layouts may ignore this value. (read-only)
   */
  height?: number | null
  /**
   * Id of this render task (read-only)
   */
  id?: string
  /**
   * Id of look to render (read-only)
   */
  look_id?: string | null
  /**
   * Id of lookml dashboard to render (read-only)
   */
  lookml_dashboard_id?: string | null
  /**
   * Id of query to render (read-only)
   */
  query_id?: string | null
  /**
   * Id of dashboard element to render: UDD dashboard element would be numeric and LookML dashboard element would be model_name::dashboard_title::lookml_link_id (read-only)
   */
  dashboard_element_id?: string | null
  /**
   * Number of seconds elapsed running queries (read-only)
   */
  query_runtime?: number | null
  /**
   * Number of seconds elapsed rendering data (read-only)
   */
  render_runtime?: number | null
  /**
   * Output format: pdf, png, or jpg (read-only)
   */
  result_format?: string | null
  /**
   * Total seconds elapsed for render task (read-only)
   */
  runtime?: number | null
  /**
   * Render task status: enqueued_for_query, querying, enqueued_for_render, rendering, success, failure (read-only)
   */
  status?: string | null
  /**
   * Additional information about the current status (read-only)
   */
  status_detail?: string | null
  /**
   * The user account permissions in which the render task will execute (read-only)
   */
  user_id?: string | null
  /**
   * Output width in pixels (read-only)
   */
  width?: number | null
}

export interface IRepositoryCredential {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Root project Id (read-only)
   */
  root_project_id?: string
  /**
   * Git remote repository url (read-only)
   */
  remote_url?: string
  /**
   * Git username for HTTPS authentication.
   */
  git_username?: string | null
  /**
   * (Write-Only) Git password for HTTPS authentication.
   */
  git_password?: string | null
  /**
   * Public deploy key for SSH authentication.
   */
  ssh_public_key?: string | null
  /**
   * Whether the credentials have been configured for the Git Repository. (read-only)
   */
  is_configured?: boolean
}

/**
 * Dynamically generated request type for active_themes
 */
export interface IRequestActiveThemes {
  /**
   * Name of theme
   */
  name?: string | null
  /**
   * Timestamp representing the target datetime for the active period. Defaults to 'now'
   */
  ts?: Date | null
  /**
   * Requested fields.
   */
  fields?: string | null
}

/**
 * Dynamically generated request type for alert_notifications
 */
export interface IRequestAlertNotifications {
  /**
   * (Optional) Number of results to return (used with `offset`).
   */
  limit?: number | null
  /**
   * (Optional) Number of results to skip before returning any (used with `limit`).
   */
  offset?: number | null
}

/**
 * Dynamically generated request type for all_board_items
 */
export interface IRequestAllBoardItems {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Filter to a specific board section
   */
  board_section_id?: string | null
}

/**
 * Dynamically generated request type for all_board_sections
 */
export interface IRequestAllBoardSections {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
}

/**
 * Dynamically generated request type for all_external_oauth_applications
 */
export interface IRequestAllExternalOauthApplications {
  /**
   * Application name
   */
  name?: string | null
  /**
   * Application Client ID
   */
  client_id?: string | null
}

/**
 * Dynamically generated request type for all_groups
 */
export interface IRequestAllGroups {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * DEPRECATED. Use limit and offset instead. Return only page N of paginated results
   */
  page?: number | null
  /**
   * DEPRECATED. Use limit and offset instead. Return N rows of data per page
   */
  per_page?: number | null
  /**
   * Number of results to return. (used with offset and takes priority over page and per_page)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Optional of ids to get specific groups.
   */
  ids?: DelimArray<string> | null
  /**
   * Id of content metadata to which groups must have access.
   */
  content_metadata_id?: string | null
  /**
   * Select only groups that either can/cannot be given access to content.
   */
  can_add_to_content_metadata?: boolean | null
}

/**
 * Dynamically generated request type for all_group_users
 */
export interface IRequestAllGroupUsers {
  /**
   * Id of group
   */
  group_id: string
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * DEPRECATED. Use limit and offset instead. Return only page N of paginated results
   */
  page?: number | null
  /**
   * DEPRECATED. Use limit and offset instead. Return N rows of data per page
   */
  per_page?: number | null
  /**
   * Number of results to return. (used with offset and takes priority over page and per_page)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
}

/**
 * Dynamically generated request type for all_integrations
 */
export interface IRequestAllIntegrations {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Filter to a specific provider
   */
  integration_hub_id?: string | null
}

/**
 * Dynamically generated request type for all_lookml_models
 */
export interface IRequestAllLookmlModels {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Number of results to return. (can be used with offset)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (Defaults to 0 if not set when limit is used)
   */
  offset?: number | null
}

/**
 * Dynamically generated request type for all_roles
 */
export interface IRequestAllRoles {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Optional list of ids to get specific roles.
   */
  ids?: DelimArray<string> | null
}

/**
 * Dynamically generated request type for all_scheduled_plans
 */
export interface IRequestAllScheduledPlans {
  /**
   * Return scheduled plans belonging to this user_id. If not provided, returns scheduled plans owned by the caller.
   */
  user_id?: string | null
  /**
   * Comma delimited list of field names. If provided, only the fields specified will be included in the response
   */
  fields?: string | null
  /**
   * Return scheduled plans belonging to all users (caller needs see_schedules permission)
   */
  all_users?: boolean | null
}

/**
 * Dynamically generated request type for all_user_attributes
 */
export interface IRequestAllUserAttributes {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Fields to order the results by. Sortable fields include: name, label
   */
  sorts?: string | null
}

/**
 * Dynamically generated request type for all_users
 */
export interface IRequestAllUsers {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * DEPRECATED. Use limit and offset instead. Return only page N of paginated results
   */
  page?: number | null
  /**
   * DEPRECATED. Use limit and offset instead. Return N rows of data per page
   */
  per_page?: number | null
  /**
   * Number of results to return. (used with offset and takes priority over page and per_page)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Optional list of ids to get specific users.
   */
  ids?: DelimArray<string> | null
}

/**
 * Dynamically generated request type for artifact
 */
export interface IRequestArtifact {
  /**
   * Artifact storage namespace
   */
  namespace: string
  /**
   * Comma-delimited list of keys. Wildcards not allowed.
   */
  key: string
  /**
   * Comma-delimited names of fields to return in responses. Omit for all fields
   */
  fields?: string | null
  /**
   * Number of results to return. (used with offset)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit)
   */
  offset?: number | null
}

/**
 * Dynamically generated request type for artifact_namespaces
 */
export interface IRequestArtifactNamespaces {
  /**
   * Comma-delimited names of fields to return in responses. Omit for all fields
   */
  fields?: string | null
  /**
   * Number of results to return. (used with offset)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit)
   */
  offset?: number | null
}

/**
 * Dynamically generated request type for connection_columns
 */
export interface IRequestConnectionColumns {
  /**
   * Name of connection
   */
  connection_name: string
  /**
   * For dialects that support multiple databases, optionally identify which to use
   */
  database?: string | null
  /**
   * Name of schema to use.
   */
  schema_name?: string | null
  /**
   * True to fetch from cache, false to load fresh
   */
  cache?: boolean | null
  /**
   * limits the tables per schema returned
   */
  table_limit?: number | null
  /**
   * only fetch columns for a given (comma-separated) list of tables
   */
  table_names?: string | null
  /**
   * Requested fields.
   */
  fields?: string | null
}

/**
 * Dynamically generated request type for connection_schemas
 */
export interface IRequestConnectionSchemas {
  /**
   * Name of connection
   */
  connection_name: string
  /**
   * For dialects that support multiple databases, optionally identify which to use
   */
  database?: string | null
  /**
   * True to use fetch from cache, false to load fresh
   */
  cache?: boolean | null
  /**
   * Requested fields.
   */
  fields?: string | null
}

/**
 * Dynamically generated request type for connection_search_columns
 */
export interface IRequestConnectionSearchColumns {
  /**
   * Name of connection
   */
  connection_name: string
  /**
   * Column name to find
   */
  column_name?: string | null
  /**
   * Requested fields.
   */
  fields?: string | null
}

/**
 * Dynamically generated request type for connection_tables
 */
export interface IRequestConnectionTables {
  /**
   * Name of connection
   */
  connection_name: string
  /**
   * Optional. Name of database to use for the query, only if applicable
   */
  database?: string | null
  /**
   * Optional. Return only tables for this schema
   */
  schema_name?: string | null
  /**
   * True to fetch from cache, false to load fresh
   */
  cache?: boolean | null
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Optional. Return tables with names that contain this value
   */
  table_filter?: string | null
  /**
   * Optional. Return tables up to the table_limit
   */
  table_limit?: number | null
}

/**
 * Dynamically generated request type for content_thumbnail
 */
export interface IRequestContentThumbnail {
  /**
   * Either dashboard or look
   */
  type: string
  /**
   * ID of the dashboard or look to render
   */
  resource_id: string
  /**
   * Whether or not to refresh the rendered image with the latest content
   */
  reload?: string | null
  /**
   * A value of png produces a thumbnail in PNG format instead of SVG (default)
   */
  format?: string | null
  /**
   * The width of the image if format is supplied
   */
  width?: number | null
  /**
   * The height of the image if format is supplied
   */
  height?: number | null
}

/**
 * Dynamically generated request type for create_dashboard_element
 */
export interface IRequestCreateDashboardElement {
  /**
   * body parameter for dynamically created request type
   */
  body: IWriteDashboardElement
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Apply relevant filters on dashboard to this tile
   */
  apply_filters?: boolean | null
}

/**
 * Dynamically generated request type for create_dashboard_render_task
 */
export interface IRequestCreateDashboardRenderTask {
  /**
   * Id of dashboard to render. The ID can be a LookML dashboard also.
   */
  dashboard_id: string
  /**
   * Output type: pdf, png, or jpg
   */
  result_format: string
  /**
   * body parameter for dynamically created request type
   */
  body: ICreateDashboardRenderTask
  /**
   * Output width in pixels
   */
  width: number
  /**
   * Output height in pixels
   */
  height: number
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Paper size for pdf. Value can be one of: ["letter","legal","tabloid","a0","a1","a2","a3","a4","a5"]
   */
  pdf_paper_size?: string | null
  /**
   * Whether to render pdf in landscape paper orientation
   */
  pdf_landscape?: boolean | null
  /**
   * Whether or not to expand table vis to full length
   */
  long_tables?: boolean | null
}

/**
 * Dynamically generated request type for create_query_task
 */
export interface IRequestCreateQueryTask {
  /**
   * body parameter for dynamically created request type
   */
  body: IWriteCreateQueryTask
  /**
   * Row limit (may override the limit in the saved query).
   */
  limit?: number | null
  /**
   * Apply model-specified formatting to each result.
   */
  apply_formatting?: boolean | null
  /**
   * Apply visualization options to results.
   */
  apply_vis?: boolean | null
  /**
   * Get results from cache if available.
   */
  cache?: boolean | null
  /**
   * Generate drill links (only applicable to 'json_detail' format.
   */
  generate_drill_links?: boolean | null
  /**
   * Force use of production models even if the user is in development mode. Note that this flag being false does not guarantee development models will be used.
   */
  force_production?: boolean | null
  /**
   * Retrieve any results from cache even if the results have expired.
   */
  cache_only?: boolean | null
  /**
   * Prefix to use for drill links (url encoded).
   */
  path_prefix?: string | null
  /**
   * Rebuild PDTS used in query.
   */
  rebuild_pdts?: boolean | null
  /**
   * Perform table calculations on query results
   */
  server_table_calcs?: boolean | null
  /**
   * DEPRECATED. Render width for image formats. Note that this parameter is always ignored by this method.
   */
  image_width?: number | null
  /**
   * DEPRECATED. Render height for image formats. Note that this parameter is always ignored by this method.
   */
  image_height?: number | null
  /**
   * Requested fields
   */
  fields?: string | null
}

/**
 * Dynamically generated request type for create_user_credentials_email_password_reset
 */
export interface IRequestCreateUserCredentialsEmailPasswordReset {
  /**
   * Id of user
   */
  user_id: string
  /**
   * Expiring token.
   */
  expires?: boolean | null
  /**
   * Requested fields.
   */
  fields?: string | null
}

/**
 * Dynamically generated request type for deploy_ref_to_production
 */
export interface IRequestDeployRefToProduction {
  /**
   * Id of project
   */
  project_id: string
  /**
   * Branch to deploy to production
   */
  branch?: string | null
  /**
   * Ref to deploy to production
   */
  ref?: string | null
}

/**
 * Dynamically generated request type for folder_children
 */
export interface IRequestFolderChildren {
  /**
   * Id of folder
   */
  folder_id: string
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * DEPRECATED. Use limit and offset instead. Return only page N of paginated results
   */
  page?: number | null
  /**
   * DEPRECATED. Use limit and offset instead. Return N rows of data per page
   */
  per_page?: number | null
  /**
   * Number of results to return. (used with offset and takes priority over page and per_page)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
}

/**
 * Dynamically generated request type for folder_children_search
 */
export interface IRequestFolderChildrenSearch {
  /**
   * Id of folder
   */
  folder_id: string
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Match folder name.
   */
  name?: string | null
}

/**
 * Dynamically generated request type for graph_derived_tables_for_model
 */
export interface IRequestGraphDerivedTablesForModel {
  /**
   * The name of the Lookml model.
   */
  model: string
  /**
   * The format of the graph. Valid values are [dot]. Default is `dot`
   */
  format?: string | null
  /**
   * Color denoting the build status of the graph. Grey = not built, green = built, yellow = building, red = error.
   */
  color?: string | null
}

/**
 * Dynamically generated request type for graph_derived_tables_for_view
 */
export interface IRequestGraphDerivedTablesForView {
  /**
   * The derived table's view name.
   */
  view: string
  /**
   * The models where this derived table is defined.
   */
  models?: string | null
  /**
   * The model directory to look in, either `dev` or `production`.
   */
  workspace?: string | null
}

/**
 * Dynamically generated request type for login
 */
export interface IRequestLogin {
  /**
   * client_id part of API3 Key.
   */
  client_id?: string | null
  /**
   * client_secret part of API3 Key.
   */
  client_secret?: string | null
}

/**
 * Dynamically generated request type for model_fieldname_suggestions
 */
export interface IRequestModelFieldnameSuggestions {
  /**
   * Name of model
   */
  model_name: string
  /**
   * Name of view
   */
  view_name: string
  /**
   * Name of field to use for suggestions
   */
  field_name: string
  /**
   * Search term pattern (evaluated as as `%term%`)
   */
  term?: string | null
  /**
   * Suggestion filters with field name keys and comparison expressions
   */
  filters?: any | null
}

/**
 * Dynamically generated request type for role_users
 */
export interface IRequestRoleUsers {
  /**
   * id of role
   */
  role_id: string
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Get only users associated directly with the role: exclude those only associated through groups.
   */
  direct_association_only?: boolean | null
}

/**
 * Dynamically generated request type for run_git_connection_test
 */
export interface IRequestRunGitConnectionTest {
  /**
   * Project Id
   */
  project_id: string
  /**
   * Test Id
   */
  test_id: string
  /**
   * (Optional: leave blank for root project) The remote url for remote dependency to test.
   */
  remote_url?: string | null
  /**
   * (Optional: leave blank for dev credentials) Whether to use git production credentials.
   */
  use_production?: string | null
}

/**
 * Dynamically generated request type for run_inline_query
 */
export interface IRequestRunInlineQuery {
  /**
   * Format of result
   */
  result_format: string
  /**
   * body parameter for dynamically created request type
   */
  body: IWriteQuery
  /**
   * Row limit (may override the limit in the saved query).
   */
  limit?: number | null
  /**
   * Apply model-specified formatting to each result.
   */
  apply_formatting?: boolean | null
  /**
   * Apply visualization options to results.
   */
  apply_vis?: boolean | null
  /**
   * Get results from cache if available.
   */
  cache?: boolean | null
  /**
   * Render width for image formats.
   */
  image_width?: number | null
  /**
   * Render height for image formats.
   */
  image_height?: number | null
  /**
   * Generate drill links (only applicable to 'json_detail' format.
   */
  generate_drill_links?: boolean | null
  /**
   * Force use of production models even if the user is in development mode. Note that this flag being false does not guarantee development models will be used.
   */
  force_production?: boolean | null
  /**
   * Retrieve any results from cache even if the results have expired.
   */
  cache_only?: boolean | null
  /**
   * Prefix to use for drill links (url encoded).
   */
  path_prefix?: string | null
  /**
   * Rebuild PDTS used in query.
   */
  rebuild_pdts?: boolean | null
  /**
   * Perform table calculations on query results
   */
  server_table_calcs?: boolean | null
}

/**
 * Dynamically generated request type for run_look
 */
export interface IRequestRunLook {
  /**
   * Id of look
   */
  look_id: string
  /**
   * Format of result
   */
  result_format: string
  /**
   * Row limit (may override the limit in the saved query).
   */
  limit?: number | null
  /**
   * Apply model-specified formatting to each result.
   */
  apply_formatting?: boolean | null
  /**
   * Apply visualization options to results.
   */
  apply_vis?: boolean | null
  /**
   * Get results from cache if available.
   */
  cache?: boolean | null
  /**
   * Render width for image formats.
   */
  image_width?: number | null
  /**
   * Render height for image formats.
   */
  image_height?: number | null
  /**
   * Generate drill links (only applicable to 'json_detail' format.
   */
  generate_drill_links?: boolean | null
  /**
   * Force use of production models even if the user is in development mode. Note that this flag being false does not guarantee development models will be used.
   */
  force_production?: boolean | null
  /**
   * Retrieve any results from cache even if the results have expired.
   */
  cache_only?: boolean | null
  /**
   * Prefix to use for drill links (url encoded).
   */
  path_prefix?: string | null
  /**
   * Rebuild PDTS used in query.
   */
  rebuild_pdts?: boolean | null
  /**
   * Perform table calculations on query results
   */
  server_table_calcs?: boolean | null
}

/**
 * Dynamically generated request type for run_lookml_test
 */
export interface IRequestRunLookmlTest {
  /**
   * Project Id
   */
  project_id: string
  /**
   * File Name
   */
  file_id?: string | null
  /**
   * Test Name
   */
  test?: string | null
  /**
   * Model Name
   */
  model?: string | null
}

/**
 * Dynamically generated request type for run_query
 */
export interface IRequestRunQuery {
  /**
   * Id of query
   */
  query_id: string
  /**
   * Format of result
   */
  result_format: string
  /**
   * Row limit (may override the limit in the saved query).
   */
  limit?: number | null
  /**
   * Apply model-specified formatting to each result.
   */
  apply_formatting?: boolean | null
  /**
   * Apply visualization options to results.
   */
  apply_vis?: boolean | null
  /**
   * Get results from cache if available.
   */
  cache?: boolean | null
  /**
   * Render width for image formats.
   */
  image_width?: number | null
  /**
   * Render height for image formats.
   */
  image_height?: number | null
  /**
   * Generate drill links (only applicable to 'json_detail' format.
   */
  generate_drill_links?: boolean | null
  /**
   * Force use of production models even if the user is in development mode. Note that this flag being false does not guarantee development models will be used.
   */
  force_production?: boolean | null
  /**
   * Retrieve any results from cache even if the results have expired.
   */
  cache_only?: boolean | null
  /**
   * Prefix to use for drill links (url encoded).
   */
  path_prefix?: string | null
  /**
   * Rebuild PDTS used in query.
   */
  rebuild_pdts?: boolean | null
  /**
   * Perform table calculations on query results
   */
  server_table_calcs?: boolean | null
  /**
   * Specifies the source of this call.
   */
  source?: string | null
}

/**
 * Dynamically generated request type for scheduled_plans_for_dashboard
 */
export interface IRequestScheduledPlansForDashboard {
  /**
   * Dashboard Id
   */
  dashboard_id: string
  /**
   * User Id (default is requesting user if not specified)
   */
  user_id?: string | null
  /**
   * Return scheduled plans belonging to all users for the dashboard
   */
  all_users?: boolean | null
  /**
   * Requested fields.
   */
  fields?: string | null
}

/**
 * Dynamically generated request type for scheduled_plans_for_look
 */
export interface IRequestScheduledPlansForLook {
  /**
   * Look Id
   */
  look_id: string
  /**
   * User Id (default is requesting user if not specified)
   */
  user_id?: string | null
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Return scheduled plans belonging to all users for the look
   */
  all_users?: boolean | null
}

/**
 * Dynamically generated request type for scheduled_plans_for_lookml_dashboard
 */
export interface IRequestScheduledPlansForLookmlDashboard {
  /**
   * LookML Dashboard Id
   */
  lookml_dashboard_id: string
  /**
   * User Id (default is requesting user if not specified)
   */
  user_id?: string | null
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Return scheduled plans belonging to all users for the dashboard
   */
  all_users?: boolean | null
}

/**
 * Dynamically generated request type for search_alerts
 */
export interface IRequestSearchAlerts {
  /**
   * (Optional) Number of results to return (used with `offset`).
   */
  limit?: number | null
  /**
   * (Optional) Number of results to skip before returning any (used with `limit`).
   */
  offset?: number | null
  /**
   * (Optional) Dimension by which to order the results(`dashboard` | `owner`)
   */
  group_by?: string | null
  /**
   * (Optional) Requested fields.
   */
  fields?: string | null
  /**
   * (Optional) Filter on returning only enabled or disabled alerts.
   */
  disabled?: boolean | null
  /**
   * (Optional) Filter on alert frequency, such as: monthly, weekly, daily, hourly, minutes
   */
  frequency?: string | null
  /**
   * (Optional) Filter on whether the alert has met its condition when it last executed
   */
  condition_met?: boolean | null
  /**
   * (Optional) Filter on the start range of the last time the alerts were run. Example: 2021-01-01T01:01:01-08:00.
   */
  last_run_start?: string | null
  /**
   * (Optional) Filter on the start range of the last time the alerts were run. Example: 2021-01-01T01:01:01-08:00.
   */
  last_run_end?: string | null
  /**
   * (Admin only) (Optional) Filter for all owners.
   */
  all_owners?: boolean | null
}

/**
 * Dynamically generated request type for search_artifacts
 */
export interface IRequestSearchArtifacts {
  /**
   * Artifact storage namespace
   */
  namespace: string
  /**
   * Comma-delimited names of fields to return in responses. Omit for all fields
   */
  fields?: string | null
  /**
   * Key pattern to match
   */
  key?: string | null
  /**
   * Ids of users who created or updated the artifact (comma-delimited list)
   */
  user_ids?: string | null
  /**
   * Minimum storage size of the artifact
   */
  min_size?: number | null
  /**
   * Maximum storage size of the artifact
   */
  max_size?: number | null
  /**
   * Number of results to return. (used with offset)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit)
   */
  offset?: number | null
}

/**
 * Dynamically generated request type for search_boards
 */
export interface IRequestSearchBoards {
  /**
   * Matches board title.
   */
  title?: string | null
  /**
   * Matches the timestamp for when the board was created.
   */
  created_at?: string | null
  /**
   * The first name of the user who created this board.
   */
  first_name?: string | null
  /**
   * The last name of the user who created this board.
   */
  last_name?: string | null
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Return favorited boards when true.
   */
  favorited?: boolean | null
  /**
   * Filter on boards created by a particular user.
   */
  creator_id?: string | null
  /**
   * The fields to sort the results by
   */
  sorts?: string | null
  /**
   * The page to return. DEPRECATED. Use offset instead.
   */
  page?: number | null
  /**
   * The number of items in the returned page. DEPRECATED. Use limit instead.
   */
  per_page?: number | null
  /**
   * The number of items to skip before returning any. (used with limit and takes priority over page and per_page)
   */
  offset?: number | null
  /**
   * The maximum number of items to return. (used with offset and takes priority over page and per_page)
   */
  limit?: number | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
  /**
   * Filter results based on permission, either show (default) or update
   */
  permission?: string | null
}

/**
 * Dynamically generated request type for search_content
 */
export interface IRequestSearchContent {
  /**
   * Search terms
   */
  terms: string
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Content types requested (dashboard, look, lookml_dashboard).
   */
  types?: string | null
  /**
   * Number of results to return. (used with offset and takes priority over page and per_page)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
   */
  offset?: number | null
  /**
   * Requested page.
   */
  page?: number | null
  /**
   * Results per page.
   */
  per_page?: number | null
}

/**
 * Dynamically generated request type for search_content_favorites
 */
export interface IRequestSearchContentFavorites {
  /**
   * Match content favorite id(s)
   */
  id?: string | null
  /**
   * Match user id(s).To create a list of multiple ids, use commas as separators
   */
  user_id?: string | null
  /**
   * Match content metadata id(s).To create a list of multiple ids, use commas as separators
   */
  content_metadata_id?: string | null
  /**
   * Match dashboard id(s).To create a list of multiple ids, use commas as separators
   */
  dashboard_id?: string | null
  /**
   * Match look id(s).To create a list of multiple ids, use commas as separators
   */
  look_id?: string | null
  /**
   * Match board id(s).To create a list of multiple ids, use commas as separators
   */
  board_id?: string | null
  /**
   * Number of results to return. (used with offset)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit)
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
}

/**
 * Dynamically generated request type for search_content_views
 */
export interface IRequestSearchContentViews {
  /**
   * Match view count
   */
  view_count?: string | null
  /**
   * Match Group Id
   */
  group_id?: string | null
  /**
   * Match look_id
   */
  look_id?: string | null
  /**
   * Match dashboard_id
   */
  dashboard_id?: string | null
  /**
   * Match content metadata id
   */
  content_metadata_id?: string | null
  /**
   * Match start of week date (format is "YYYY-MM-DD")
   */
  start_of_week_date?: string | null
  /**
   * True if only all time view records should be returned
   */
  all_time?: boolean | null
  /**
   * Match user id
   */
  user_id?: string | null
  /**
   * Requested fields
   */
  fields?: string | null
  /**
   * Number of results to return. Use with `offset` to manage pagination of results
   */
  limit?: number | null
  /**
   * Number of results to skip before returning data
   */
  offset?: number | null
  /**
   * Fields to sort by
   */
  sorts?: string | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
}

/**
 * Dynamically generated request type for search_credentials_email
 */
export interface IRequestSearchCredentialsEmail {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Number of results to return (used with `offset`).
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any (used with `limit`).
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Match credentials_email id.
   */
  id?: string | null
  /**
   * Match credentials_email email.
   */
  email?: string | null
  /**
   * Find credentials_email that match given emails.
   */
  emails?: string | null
  /**
   * Combine given search criteria in a boolean OR expression.
   */
  filter_or?: boolean | null
}

/**
 * Dynamically generated request type for search_dashboard_elements
 */
export interface IRequestSearchDashboardElements {
  /**
   * Select elements that refer to a given dashboard id
   */
  dashboard_id?: string | null
  /**
   * Select elements that refer to a given look id
   */
  look_id?: string | null
  /**
   * Match the title of element
   */
  title?: string | null
  /**
   * Select soft-deleted dashboard elements
   */
  deleted?: boolean | null
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
  /**
   * Fields to sort by. Sortable fields: [:look_id, :dashboard_id, :deleted, :title]
   */
  sorts?: string | null
}

/**
 * Dynamically generated request type for search_dashboards
 */
export interface IRequestSearchDashboards {
  /**
   * Match dashboard id.
   */
  id?: string | null
  /**
   * Match dashboard slug.
   */
  slug?: string | null
  /**
   * Match Dashboard title.
   */
  title?: string | null
  /**
   * Match Dashboard description.
   */
  description?: string | null
  /**
   * Filter on a content favorite id.
   */
  content_favorite_id?: string | null
  /**
   * Filter on a particular space.
   */
  folder_id?: string | null
  /**
   * Filter on dashboards deleted status.
   */
  deleted?: string | null
  /**
   * Filter on dashboards created by a particular user.
   */
  user_id?: string | null
  /**
   * Filter on a particular value of view_count
   */
  view_count?: string | null
  /**
   * Filter on a content favorite id.
   */
  content_metadata_id?: string | null
  /**
   * Exclude items that exist only in personal spaces other than the users
   */
  curate?: boolean | null
  /**
   * Select dashboards based on when they were last viewed
   */
  last_viewed_at?: string | null
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * DEPRECATED. Use limit and offset instead. Return only page N of paginated results
   */
  page?: number | null
  /**
   * DEPRECATED. Use limit and offset instead. Return N rows of data per page
   */
  per_page?: number | null
  /**
   * Number of results to return. (used with offset and takes priority over page and per_page)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
   */
  offset?: number | null
  /**
   * One or more fields to sort by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :folder_id, :description, :view_count, :favorite_count, :slug, :content_favorite_id, :content_metadata_id, :deleted, :deleted_at, :last_viewed_at, :last_accessed_at]
   */
  sorts?: string | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
}

/**
 * Dynamically generated request type for search_folders
 */
export interface IRequestSearchFolders {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * DEPRECATED. Use limit and offset instead. Return only page N of paginated results
   */
  page?: number | null
  /**
   * DEPRECATED. Use limit and offset instead. Return N rows of data per page
   */
  per_page?: number | null
  /**
   * Number of results to return. (used with offset and takes priority over page and per_page)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Match Space title.
   */
  name?: string | null
  /**
   * Match Space id
   */
  id?: string | null
  /**
   * Filter on a children of a particular folder.
   */
  parent_id?: string | null
  /**
   * Filter on folder created by a particular user.
   */
  creator_id?: string | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
  /**
   * Match is shared root
   */
  is_shared_root?: boolean | null
}

/**
 * Dynamically generated request type for search_groups
 */
export interface IRequestSearchGroups {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Number of results to return (used with `offset`).
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any (used with `limit`).
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
  /**
   * Match group id.
   */
  id?: string | null
  /**
   * Match group name.
   */
  name?: string | null
  /**
   * Match group external_group_id.
   */
  external_group_id?: string | null
  /**
   * Match group externally_managed.
   */
  externally_managed?: boolean | null
  /**
   * Match group externally_orphaned.
   */
  externally_orphaned?: boolean | null
}

/**
 * Dynamically generated request type for search_groups_with_hierarchy
 */
export interface IRequestSearchGroupsWithHierarchy {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Number of results to return (used with `offset`).
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any (used with `limit`).
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
  /**
   * Match group id.
   */
  id?: string | null
  /**
   * Match group name.
   */
  name?: string | null
  /**
   * Match group external_group_id.
   */
  external_group_id?: string | null
  /**
   * Match group externally_managed.
   */
  externally_managed?: boolean | null
  /**
   * Match group externally_orphaned.
   */
  externally_orphaned?: boolean | null
}

/**
 * Dynamically generated request type for search_groups_with_roles
 */
export interface IRequestSearchGroupsWithRoles {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Number of results to return (used with `offset`).
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any (used with `limit`).
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
  /**
   * Match group id.
   */
  id?: string | null
  /**
   * Match group name.
   */
  name?: string | null
  /**
   * Match group external_group_id.
   */
  external_group_id?: string | null
  /**
   * Match group externally_managed.
   */
  externally_managed?: boolean | null
  /**
   * Match group externally_orphaned.
   */
  externally_orphaned?: boolean | null
}

/**
 * Dynamically generated request type for search_looks
 */
export interface IRequestSearchLooks {
  /**
   * Match look id.
   */
  id?: string | null
  /**
   * Match Look title.
   */
  title?: string | null
  /**
   * Match Look description.
   */
  description?: string | null
  /**
   * Select looks with a particular content favorite id
   */
  content_favorite_id?: string | null
  /**
   * Select looks in a particular folder.
   */
  folder_id?: string | null
  /**
   * Select looks created by a particular user.
   */
  user_id?: string | null
  /**
   * Select looks with particular view_count value
   */
  view_count?: string | null
  /**
   * Select soft-deleted looks
   */
  deleted?: boolean | null
  /**
   * Select looks that reference a particular query by query_id
   */
  query_id?: string | null
  /**
   * Exclude items that exist only in personal spaces other than the users
   */
  curate?: boolean | null
  /**
   * Select looks based on when they were last viewed
   */
  last_viewed_at?: string | null
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * DEPRECATED. Use limit and offset instead. Return only page N of paginated results
   */
  page?: number | null
  /**
   * DEPRECATED. Use limit and offset instead. Return N rows of data per page
   */
  per_page?: number | null
  /**
   * Number of results to return. (used with offset and takes priority over page and per_page)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
   */
  offset?: number | null
  /**
   * One or more fields to sort results by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :folder_id, :description, :updated_at, :last_updater_id, :view_count, :favorite_count, :content_favorite_id, :deleted, :deleted_at, :last_viewed_at, :last_accessed_at, :query_id]
   */
  sorts?: string | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
}

/**
 * Dynamically generated request type for search_model_sets
 */
export interface IRequestSearchModelSets {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Number of results to return (used with `offset`).
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any (used with `limit`).
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Match model set id.
   */
  id?: string | null
  /**
   * Match model set name.
   */
  name?: string | null
  /**
   * Match model sets by all_access status.
   */
  all_access?: boolean | null
  /**
   * Match model sets by built_in status.
   */
  built_in?: boolean | null
  /**
   * Combine given search criteria in a boolean OR expression.
   */
  filter_or?: boolean | null
}

/**
 * Dynamically generated request type for search_permission_sets
 */
export interface IRequestSearchPermissionSets {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Number of results to return (used with `offset`).
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any (used with `limit`).
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Match permission set id.
   */
  id?: string | null
  /**
   * Match permission set name.
   */
  name?: string | null
  /**
   * Match permission sets by all_access status.
   */
  all_access?: boolean | null
  /**
   * Match permission sets by built_in status.
   */
  built_in?: boolean | null
  /**
   * Combine given search criteria in a boolean OR expression.
   */
  filter_or?: boolean | null
}

/**
 * Dynamically generated request type for search_roles
 */
export interface IRequestSearchRoles {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Number of results to return (used with `offset`).
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any (used with `limit`).
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Match role id.
   */
  id?: string | null
  /**
   * Match role name.
   */
  name?: string | null
  /**
   * Match roles by built_in status.
   */
  built_in?: boolean | null
  /**
   * Combine given search criteria in a boolean OR expression.
   */
  filter_or?: boolean | null
}

/**
 * Dynamically generated request type for search_roles_with_user_count
 */
export interface IRequestSearchRolesWithUserCount {
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Number of results to return (used with `offset`).
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any (used with `limit`).
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Match role id.
   */
  id?: string | null
  /**
   * Match role name.
   */
  name?: string | null
  /**
   * Match roles by built_in status.
   */
  built_in?: boolean | null
  /**
   * Combine given search criteria in a boolean OR expression.
   */
  filter_or?: boolean | null
}

/**
 * Dynamically generated request type for search_themes
 */
export interface IRequestSearchThemes {
  /**
   * Match theme id.
   */
  id?: string | null
  /**
   * Match theme name.
   */
  name?: string | null
  /**
   * Timestamp for activation.
   */
  begin_at?: Date | null
  /**
   * Timestamp for expiration.
   */
  end_at?: Date | null
  /**
   * Number of results to return (used with `offset`).
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any (used with `limit`).
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
}

/**
 * Dynamically generated request type for search_user_login_lockouts
 */
export interface IRequestSearchUserLoginLockouts {
  /**
   * Include only these fields in the response
   */
  fields?: string | null
  /**
   * DEPRECATED. Use limit and offset instead. Return only page N of paginated results
   */
  page?: number | null
  /**
   * DEPRECATED. Use limit and offset instead. Return N rows of data per page
   */
  per_page?: number | null
  /**
   * Number of results to return. (used with offset and takes priority over page and per_page)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Auth type user is locked out for (email, ldap, totp, api)
   */
  auth_type?: string | null
  /**
   * Match name
   */
  full_name?: string | null
  /**
   * Match email
   */
  email?: string | null
  /**
   * Match remote LDAP ID
   */
  remote_id?: string | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
}

/**
 * Dynamically generated request type for search_users
 */
export interface IRequestSearchUsers {
  /**
   * Include only these fields in the response
   */
  fields?: string | null
  /**
   * DEPRECATED. Use limit and offset instead. Return only page N of paginated results
   */
  page?: number | null
  /**
   * DEPRECATED. Use limit and offset instead. Return N rows of data per page
   */
  per_page?: number | null
  /**
   * Number of results to return. (used with offset and takes priority over page and per_page)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
   */
  offset?: number | null
  /**
   * Fields to sort by.
   */
  sorts?: string | null
  /**
   * Match User Id.
   */
  id?: string | null
  /**
   * Match First name.
   */
  first_name?: string | null
  /**
   * Match Last name.
   */
  last_name?: string | null
  /**
   * Search for user accounts associated with Looker employees
   */
  verified_looker_employee?: boolean | null
  /**
   * Search for only embed users
   */
  embed_user?: boolean | null
  /**
   * Search for the user with this email address
   */
  email?: string | null
  /**
   * Search for disabled user accounts
   */
  is_disabled?: boolean | null
  /**
   * Combine given search criteria in a boolean OR expression
   */
  filter_or?: boolean | null
  /**
   * Search for users who have access to this content_metadata item
   */
  content_metadata_id?: string | null
  /**
   * Search for users who are direct members of this group
   */
  group_id?: string | null
}

/**
 * Dynamically generated request type for search_users_names
 */
export interface IRequestSearchUsersNames {
  /**
   * Pattern to match
   */
  pattern: string
  /**
   * Include only these fields in the response
   */
  fields?: string | null
  /**
   * DEPRECATED. Use limit and offset instead. Return only page N of paginated results
   */
  page?: number | null
  /**
   * DEPRECATED. Use limit and offset instead. Return N rows of data per page
   */
  per_page?: number | null
  /**
   * Number of results to return. (used with offset and takes priority over page and per_page)
   */
  limit?: number | null
  /**
   * Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
   */
  offset?: number | null
  /**
   * Fields to sort by
   */
  sorts?: string | null
  /**
   * Match User Id
   */
  id?: string | null
  /**
   * Match First name
   */
  first_name?: string | null
  /**
   * Match Last name
   */
  last_name?: string | null
  /**
   * Match Verified Looker employee
   */
  verified_looker_employee?: boolean | null
  /**
   * Match Email Address
   */
  email?: string | null
  /**
   * Include or exclude disabled accounts in the results
   */
  is_disabled?: boolean | null
}

/**
 * Dynamically generated request type for start_pdt_build
 */
export interface IRequestStartPdtBuild {
  /**
   * The model of the PDT to start building.
   */
  model_name: string
  /**
   * The view name of the PDT to start building.
   */
  view_name: string
  /**
   * Force rebuild of required dependent PDTs, even if they are already materialized.
   */
  force_rebuild?: string | null
  /**
   * Force involved incremental PDTs to fully re-materialize.
   */
  force_full_incremental?: string | null
  /**
   * Workspace in which to materialize selected PDT ('dev' or default 'production').
   */
  workspace?: string | null
  /**
   * The source of this request.
   */
  source?: string | null
}

/**
 * Dynamically generated request type for tag_ref
 */
export interface IRequestTagRef {
  /**
   * Project Id
   */
  project_id: string
  /**
   * body parameter for dynamically created request type
   */
  body: IWriteProject
  /**
   * (Optional): Commit Sha to Tag
   */
  commit_sha?: string | null
  /**
   * Tag Name
   */
  tag_name?: string | null
  /**
   * (Optional): Tag Message
   */
  tag_message?: string | null
}

/**
 * Dynamically generated request type for user_attribute_user_values
 */
export interface IRequestUserAttributeUserValues {
  /**
   * Id of user
   */
  user_id: string
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Specific user attributes to request. Omit or leave blank to request all user attributes.
   */
  user_attribute_ids?: DelimArray<string> | null
  /**
   * If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence.
   */
  all_values?: boolean | null
  /**
   * If true, returns an empty record for each requested attribute that has no user, group, or default value.
   */
  include_unset?: boolean | null
}

/**
 * Dynamically generated request type for user_roles
 */
export interface IRequestUserRoles {
  /**
   * Id of user
   */
  user_id: string
  /**
   * Requested fields.
   */
  fields?: string | null
  /**
   * Get only roles associated directly with the user: exclude those only associated through groups.
   */
  direct_association_only?: boolean | null
}

/**
 * Desired async query result format. Valid values are: "inline_json", "json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml". (Enum defined in CreateQueryTask)
 */
export enum ResultFormat {
  inline_json = 'inline_json',
  json = 'json',
  json_detail = 'json_detail',
  json_fe = 'json_fe',
  csv = 'csv',
  html = 'html',
  md = 'md',
  txt = 'txt',
  xlsx = 'xlsx',
  gsxml = 'gsxml',
}

export interface IResultMakerFilterables {
  /**
   * The model this filterable comes from (used for field suggestions). (read-only)
   */
  model?: string | null
  /**
   * The view this filterable comes from (used for field suggestions). (read-only)
   */
  view?: string | null
  /**
   * The name of the filterable thing (Query or Merged Results). (read-only)
   */
  name?: string | null
  /**
   * array of dashboard_filter_name: and field: objects. (read-only)
   */
  listen?: IResultMakerFilterablesListen[] | null
}

export interface IResultMakerFilterablesListen {
  /**
   * The name of a dashboard filter to listen to.
   */
  dashboard_filter_name?: string | null
  /**
   * The name of the field in the filterable to filter with the value of the dashboard filter.
   */
  field?: string | null
}

export interface IResultMakerWithIdVisConfigAndDynamicFields {
  /**
   * Unique Id. (read-only)
   */
  id?: string
  /**
   * JSON string of dynamic field information. (read-only)
   */
  dynamic_fields?: string | null
  /**
   * array of items that can be filtered and information about them. (read-only)
   */
  filterables?: IResultMakerFilterables[] | null
  /**
   * Sorts of the constituent Look, Query, or Merge Query (read-only)
   */
  sorts?: string[] | null
  /**
   * ID of merge result if this is a merge_result. (read-only)
   */
  merge_result_id?: string | null
  /**
   * Total of the constituent Look, Query, or Merge Query (read-only)
   */
  total?: boolean
  /**
   * ID of query if this is a query. (read-only)
   */
  query_id?: string | null
  /**
   * ID of SQL Query if this is a SQL Runner Query (read-only)
   */
  sql_query_id?: string | null
  query?: IQuery
  /**
   * Vis config of the constituent Query, or Merge Query. (read-only)
   */
  vis_config?: IDictionary<any> | null
}

export interface IRole {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Name of Role
   */
  name?: string | null
  permission_set?: IPermissionSet
  /**
   * (Write-Only) Id of permission set
   */
  permission_set_id?: string | null
  model_set?: IModelSet
  /**
   * (Write-Only) Id of model set
   */
  model_set_id?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
  /**
   * Link to get list of users with this role (read-only)
   */
  users_url?: string | null
}

export interface IRoleSearch {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Name of Role
   */
  name?: string | null
  permission_set?: IPermissionSet
  /**
   * (Write-Only) Id of permission set
   */
  permission_set_id?: string | null
  model_set?: IModelSet
  /**
   * (Write-Only) Id of model set
   */
  model_set_id?: string | null
  /**
   * Count of users with this role (read-only)
   */
  user_count?: number | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
  /**
   * Link to get list of users with this role (read-only)
   */
  users_url?: string | null
}

export interface IRunningQueries {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  user?: IUserPublic
  query?: IQuery
  sql_query?: ISqlQuery
  look?: ILookBasic
  /**
   * Date/Time Query was initiated (read-only)
   */
  created_at?: string | null
  /**
   * Date/Time Query was completed (read-only)
   */
  completed_at?: string | null
  /**
   * Query Id (read-only)
   */
  query_id?: string | null
  /**
   * Source (look, dashboard, queryrunner, explore, etc.) (read-only)
   */
  source?: string | null
  /**
   * Node Id (read-only)
   */
  node_id?: string | null
  /**
   * Slug (read-only)
   */
  slug?: string | null
  /**
   * ID of a Query Task (read-only)
   */
  query_task_id?: string | null
  /**
   * Cache Key (read-only)
   */
  cache_key?: string | null
  /**
   * Connection (read-only)
   */
  connection_name?: string | null
  /**
   * Dialect (read-only)
   */
  dialect?: string | null
  /**
   * Connection ID (read-only)
   */
  connection_id?: string | null
  /**
   * Additional Information(Error message or verbose status) (read-only)
   */
  message?: string | null
  /**
   * Status description (read-only)
   */
  status?: string | null
  /**
   * Number of seconds elapsed running the Query (read-only)
   */
  runtime?: number | null
  /**
   * SQL text of the query as run (read-only)
   */
  sql?: string | null
}

export interface ISamlConfig {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Enable/Disable Saml authentication for the server
   */
  enabled?: boolean
  /**
   * Identity Provider Certificate (provided by IdP)
   */
  idp_cert?: string | null
  /**
   * Identity Provider Url (provided by IdP)
   */
  idp_url?: string | null
  /**
   * Identity Provider Issuer (provided by IdP)
   */
  idp_issuer?: string | null
  /**
   * Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.
   */
  idp_audience?: string | null
  /**
   * Count of seconds of clock drift to allow when validating timestamps of assertions.
   */
  allowed_clock_drift?: number | null
  /**
   * Name of user record attributes used to indicate email address field
   */
  user_attribute_map_email?: string | null
  /**
   * Name of user record attributes used to indicate first name
   */
  user_attribute_map_first_name?: string | null
  /**
   * Name of user record attributes used to indicate last name
   */
  user_attribute_map_last_name?: string | null
  /**
   * Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
   */
  new_user_migration_types?: string | null
  /**
   * Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
   */
  alternate_email_login_allowed?: boolean
  /**
   * Slug to identify configurations that are created in order to run a Saml config test (read-only)
   */
  test_slug?: string | null
  /**
   * When this config was last modified (read-only)
   */
  modified_at?: string | null
  /**
   * User id of user who last modified this config (read-only)
   */
  modified_by?: string | null
  /**
   * (Read-only) Roles that will be applied to new users the first time they login via Saml (read-only)
   */
  default_new_user_roles?: IRole[] | null
  /**
   * (Read-only) Groups that will be applied to new users the first time they login via Saml (read-only)
   */
  default_new_user_groups?: IGroup[] | null
  /**
   * (Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml
   */
  default_new_user_role_ids?: string[] | null
  /**
   * (Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml
   */
  default_new_user_group_ids?: string[] | null
  /**
   * Set user roles in Looker based on groups from Saml
   */
  set_roles_from_groups?: boolean
  /**
   * Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
   */
  groups_attribute?: string | null
  /**
   * (Read-only) Array of mappings between Saml Groups and Looker Roles (read-only)
   */
  groups?: ISamlGroupRead[] | null
  /**
   * (Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids
   */
  groups_with_role_ids?: ISamlGroupWrite[] | null
  /**
   * Users will not be allowed to login at all unless a role for them is found in Saml if set to true
   */
  auth_requires_role?: boolean
  /**
   * (Read-only) Array of mappings between Saml User Attributes and Looker User Attributes (read-only)
   */
  user_attributes?: ISamlUserAttributeRead[] | null
  /**
   * (Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids
   */
  user_attributes_with_ids?: ISamlUserAttributeWrite[] | null
  /**
   * Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']
   */
  groups_finder_type?: string | null
  /**
   * Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'
   */
  groups_member_value?: string | null
  /**
   * Bypass the login page when user authentication is required. Redirect to IdP immediately instead.
   */
  bypass_login_page?: boolean
  /**
   * Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
   */
  allow_normal_group_membership?: boolean
  /**
   * SAML auth'd users will inherit roles from non-reflected Looker groups.
   */
  allow_roles_from_normal_groups?: boolean
  /**
   * Allows roles to be directly assigned to SAML auth'd users.
   */
  allow_direct_roles?: boolean
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface ISamlGroupRead {
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Unique Id of group in Looker (read-only)
   */
  looker_group_id?: string | null
  /**
   * Name of group in Looker (read-only)
   */
  looker_group_name?: string | null
  /**
   * Name of group in Saml (read-only)
   */
  name?: string | null
  /**
   * Looker Roles (read-only)
   */
  roles?: IRole[] | null
  /**
   * Link to saml config (read-only)
   */
  url?: string | null
}

export interface ISamlGroupWrite {
  /**
   * Unique Id
   */
  id?: string | null
  /**
   * Unique Id of group in Looker (read-only)
   */
  looker_group_id?: string | null
  /**
   * Name of group in Looker
   */
  looker_group_name?: string | null
  /**
   * Name of group in Saml
   */
  name?: string | null
  /**
   * Looker Role Ids
   */
  role_ids?: string[] | null
  /**
   * Link to saml config (read-only)
   */
  url?: string | null
}

export interface ISamlMetadataParseResult {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Identify Provider Issuer (read-only)
   */
  idp_issuer?: string | null
  /**
   * Identify Provider Url (read-only)
   */
  idp_url?: string | null
  /**
   * Identify Provider Certificate (read-only)
   */
  idp_cert?: string | null
}

export interface ISamlUserAttributeRead {
  /**
   * Name of User Attribute in Saml (read-only)
   */
  name?: string | null
  /**
   * Required to be in Saml assertion for login to be allowed to succeed (read-only)
   */
  required?: boolean
  /**
   * Looker User Attributes (read-only)
   */
  user_attributes?: IUserAttribute[] | null
  /**
   * Link to saml config (read-only)
   */
  url?: string | null
}

export interface ISamlUserAttributeWrite {
  /**
   * Name of User Attribute in Saml
   */
  name?: string | null
  /**
   * Required to be in Saml assertion for login to be allowed to succeed
   */
  required?: boolean
  /**
   * Looker User Attribute Ids
   */
  user_attribute_ids?: string[] | null
  /**
   * Link to saml config (read-only)
   */
  url?: string | null
}

export interface IScheduledPlan {
  /**
   * Name of this scheduled plan
   */
  name?: string | null
  /**
   * User Id which owns this scheduled plan
   */
  user_id?: string | null
  /**
   * Whether schedule is run as recipient (only applicable for email recipients)
   */
  run_as_recipient?: boolean
  /**
   * Whether the ScheduledPlan is enabled
   */
  enabled?: boolean
  /**
   * Id of a look
   */
  look_id?: string | null
  /**
   * Id of a dashboard
   */
  dashboard_id?: string | null
  /**
   * Id of a LookML dashboard
   */
  lookml_dashboard_id?: string | null
  /**
   * Query string to run look or dashboard with
   */
  filters_string?: string | null
  /**
   * (DEPRECATED) Alias for filters_string field
   */
  dashboard_filters?: string | null
  /**
   * Delivery should occur if running the dashboard or look returns results
   */
  require_results?: boolean
  /**
   * Delivery should occur if the dashboard look does not return results
   */
  require_no_results?: boolean
  /**
   * Delivery should occur if data have changed since the last run
   */
  require_change?: boolean
  /**
   * Will run an unlimited query and send all results.
   */
  send_all_results?: boolean
  /**
   * Vixie-Style crontab specification when to run
   */
  crontab?: string | null
  /**
   * Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)
   */
  datagroup?: string | null
  /**
   * Timezone for interpreting the specified crontab (default is Looker instance timezone)
   */
  timezone?: string | null
  /**
   * Query id
   */
  query_id?: string | null
  /**
   * Scheduled plan destinations
   */
  scheduled_plan_destination?: IScheduledPlanDestination[] | null
  /**
   * Whether the plan in question should only be run once (usually for testing)
   */
  run_once?: boolean
  /**
   * Whether links back to Looker should be included in this ScheduledPlan
   */
  include_links?: boolean
  /**
   * Custom url domain for the scheduled entity
   */
  custom_url_base?: string | null
  /**
   * Custom url path and parameters for the scheduled entity
   */
  custom_url_params?: string | null
  /**
   * Custom url label for the scheduled entity
   */
  custom_url_label?: string | null
  /**
   * Whether to show custom link back instead of standard looker link
   */
  show_custom_url?: boolean
  /**
   * The size of paper the PDF should be formatted to fit. Valid values are: "letter", "legal", "tabloid", "a0", "a1", "a2", "a3", "a4", "a5".
   */
  pdf_paper_size?: string | null
  /**
   * Whether the PDF should be formatted for landscape orientation
   */
  pdf_landscape?: boolean
  /**
   * Whether this schedule is in an embed context or not
   */
  embed?: boolean
  /**
   * Color scheme of the dashboard if applicable
   */
  color_theme?: string | null
  /**
   * Whether or not to expand table vis to full length
   */
  long_tables?: boolean
  /**
   * The pixel width at which we render the inline table visualizations
   */
  inline_table_width?: number | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Date and time when ScheduledPlan was created (read-only)
   */
  created_at?: Date | null
  /**
   * Date and time when ScheduledPlan was last updated (read-only)
   */
  updated_at?: Date | null
  /**
   * Title (read-only)
   */
  title?: string | null
  user?: IUserPublic
  /**
   * When the ScheduledPlan will next run (null if running once) (read-only)
   */
  next_run_at?: Date | null
  /**
   * When the ScheduledPlan was last run (read-only)
   */
  last_run_at?: Date | null
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
}

export interface IScheduledPlanDestination {
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Id of a scheduled plan you own
   */
  scheduled_plan_id?: string | null
  /**
   * The data format to send to the given destination. Supported formats vary by destination, but include: "txt", "csv", "inline_json", "json", "json_detail", "xlsx", "html", "wysiwyg_pdf", "assembled_pdf", "wysiwyg_png"
   */
  format?: string | null
  /**
   * Are values formatted? (containing currency symbols, digit separators, etc.
   */
  apply_formatting?: boolean
  /**
   * Whether visualization options are applied to the results.
   */
  apply_vis?: boolean
  /**
   * Address for recipient. For email e.g. 'user@example.com'. For webhooks e.g. 'https://domain/path'. For Amazon S3 e.g. 's3://bucket-name/path/'. For SFTP e.g. 'sftp://host-name/path/'.
   */
  address?: string | null
  /**
   * Whether the recipient is a Looker user on the current instance (only applicable for email recipients) (read-only)
   */
  looker_recipient?: boolean
  /**
   * Type of the address ('email', 'webhook', 's3', or 'sftp')
   */
  type?: string | null
  /**
   * JSON object containing parameters for external scheduling. For Amazon S3, this requires keys and values for access_key_id and region. For SFTP, this requires a key and value for username.
   */
  parameters?: string | null
  /**
   * (Write-Only) JSON object containing secret parameters for external scheduling. For Amazon S3, this requires a key and value for secret_access_key. For SFTP, this requires a key and value for password.
   */
  secret_parameters?: string | null
  /**
   * Optional message to be included in scheduled emails
   */
  message?: string | null
}

export interface ISchema {
  /**
   * Schema name (read-only)
   */
  name?: string
  /**
   * True if this is the default schema (read-only)
   */
  is_default?: boolean
}

export interface ISchemaColumn {
  /**
   * Schema item name (read-only)
   */
  name?: string | null
  /**
   * Full name of item (read-only)
   */
  sql_escaped_name?: string | null
  /**
   * Name of schema (read-only)
   */
  schema_name?: string | null
  /**
   * SQL dialect data type (read-only)
   */
  data_type_database?: string
  /**
   * Data type (read-only)
   */
  data_type?: string
  /**
   * Looker data type (read-only)
   */
  data_type_looker?: string
  /**
   * SQL data type (read-only)
   */
  description?: string | null
  /**
   * Column data size (read-only)
   */
  column_size?: number | null
  /**
   * SQL Runner snippets for this connection (read-only)
   */
  snippets?: ISnippet[]
}

export interface ISchemaColumns {
  /**
   * Schema item name (read-only)
   */
  name?: string | null
  /**
   * Full name of item (read-only)
   */
  sql_escaped_name?: string | null
  /**
   * Name of schema (read-only)
   */
  schema_name?: string | null
  /**
   * Columns for this schema (read-only)
   */
  columns?: ISchemaColumn[]
}

export interface ISchemaTable {
  /**
   * Schema item name (read-only)
   */
  name?: string | null
  /**
   * Full name of item (read-only)
   */
  sql_escaped_name?: string | null
  /**
   * Name of schema (read-only)
   */
  schema_name?: string | null
  /**
   * Number of data rows (read-only)
   */
  rows?: number | null
  /**
   * External reference??? (read-only)
   */
  external?: string | null
  /**
   * SQL Runner snippets for connection (read-only)
   */
  snippets?: ISnippet[]
}

export interface ISchemaTables {
  /**
   * Schema name (read-only)
   */
  name?: string
  /**
   * True if this is the default schema (read-only)
   */
  is_default?: boolean
  /**
   * Tables for this schema (read-only)
   */
  tables?: ISchemaTable[]
  /**
   * True if the table limit was hit while retrieving tables in this schema (read-only)
   */
  table_limit_hit?: boolean
}

/**
 * Field to distinguish between SSO secrets and JWT secrets Valid values are: "SSO", "JWT". (Enum defined in EmbedSecret)
 */
export enum SecretType {
  SSO = 'SSO',
  JWT = 'JWT',
}

export interface ISession {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * IP address of user when this session was initiated (read-only)
   */
  ip_address?: string | null
  /**
   * User's browser type (read-only)
   */
  browser?: string | null
  /**
   * User's Operating System (read-only)
   */
  operating_system?: string | null
  /**
   * City component of user location (derived from IP address) (read-only)
   */
  city?: string | null
  /**
   * State component of user location (derived from IP address) (read-only)
   */
  state?: string | null
  /**
   * Country component of user location (derived from IP address) (read-only)
   */
  country?: string | null
  /**
   * Type of credentials used for logging in this session (read-only)
   */
  credentials_type?: string | null
  /**
   * Time when this session was last extended by the user (read-only)
   */
  extended_at?: string | null
  /**
   * Number of times this session was extended (read-only)
   */
  extended_count?: number | null
  /**
   * Actual user in the case when this session represents one user sudo'ing as another (read-only)
   */
  sudo_user_id?: string | null
  /**
   * Time when this session was initiated (read-only)
   */
  created_at?: string | null
  /**
   * Time when this session will expire (read-only)
   */
  expires_at?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface ISessionConfig {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Allow users to have persistent sessions when they login
   */
  allow_persistent_sessions?: boolean
  /**
   * Number of minutes for user sessions.  Must be between 5 and 43200
   */
  session_minutes?: number | null
  /**
   * Allow users to have an unbounded number of concurrent sessions (otherwise, users will be limited to only one session at a time).
   */
  unlimited_sessions_per_user?: boolean
  /**
   * Enforce session logout for sessions that are inactive for 15 minutes.
   */
  use_inactivity_based_logout?: boolean
  /**
   * Track location of session when user logs in.
   */
  track_session_location?: boolean
}

export interface ISetting {
  /**
   * Toggle extension framework on or off
   */
  extension_framework_enabled?: boolean
  /**
   * (DEPRECATED) Toggle extension extension load url on or off. Do not use. This is temporary setting that will eventually become a noop and subsequently deleted.
   */
  extension_load_url_enabled?: boolean
  /**
   * Toggle marketplace auto install on or off. Note that auto install only runs if marketplace is enabled.
   */
  marketplace_auto_install_enabled?: boolean
  /**
   * Toggle marketplace on or off
   */
  marketplace_enabled?: boolean
  privatelabel_configuration?: IPrivatelabelConfiguration
  custom_welcome_email?: ICustomWelcomeEmail
  /**
   * Toggle onboarding on or off
   */
  onboarding_enabled?: boolean
  /**
   * Change instance-wide default timezone
   */
  timezone?: string
  /**
   * Toggle user-specific timezones on or off
   */
  allow_user_timezones?: boolean
  /**
   * Toggle default future connectors on or off
   */
  data_connector_default_enabled?: boolean
  /**
   * Change the base portion of your Looker instance URL setting
   */
  host_url?: string
  /**
   * (Write-Only) If warnings are preventing a host URL change, this parameter allows for overriding warnings to force update the setting. Does not directly change any Looker settings.
   */
  override_warnings?: boolean
  /**
   * An array of Email Domain Allowlist of type string for Scheduled Content
   */
  email_domain_allowlist?: string[]
}

export interface ISmtpNodeStatus {
  /**
   * SMTP status of node (read-only)
   */
  is_valid?: boolean
  /**
   * Error message for node (read-only)
   */
  message?: string | null
  /**
   * Host name of node (read-only)
   */
  hostname?: string | null
}

export interface ISmtpSettings {
  /**
   * SMTP Server url
   */
  address?: string
  /**
   * From e-mail address
   */
  from?: string
  /**
   * User name
   */
  user_name?: string
  /**
   * Password
   */
  password?: string
  /**
   * SMTP Server's port
   */
  port?: number
  /**
   * Is TLS encryption enabled?
   */
  enable_starttls_auto?: boolean
  /**
   * TLS version selected Valid values are: "TLSv1_1", "SSLv23", "TLSv1_2".
   */
  ssl_version?: SslVersion | null
  /**
   * Whether to enable built-in Looker SMTP
   */
  default_smtp?: boolean | null
}

export interface ISmtpStatus {
  /**
   * Overall SMTP status of cluster (read-only)
   */
  is_valid?: boolean
  /**
   * Total number of nodes in cluster (read-only)
   */
  node_count?: number | null
  /**
   * array of each node's status containing is_valid, message, hostname (read-only)
   */
  node_status?: ISmtpNodeStatus[] | null
}

export interface ISnippet {
  /**
   * Name of the snippet (read-only)
   */
  name?: string
  /**
   * Label of the snippet (read-only)
   */
  label?: string
  /**
   * SQL text of the snippet (read-only)
   */
  sql?: string
}

export interface ISqlQuery {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * The identifier of the SQL query (read-only)
   */
  slug?: string
  /**
   * Number of seconds this query took to run the most recent time it was run (read-only)
   */
  last_runtime?: number | null
  /**
   * Number of times this query has been run (read-only)
   */
  run_count?: number
  /**
   * Maximum number of rows this query will display on the SQL Runner page (read-only)
   */
  browser_limit?: number
  /**
   * SQL query text (read-only)
   */
  sql?: string
  /**
   * The most recent time this query was run (read-only)
   */
  last_run_at?: string | null
  connection?: IDBConnectionBase
  /**
   * Model name this query uses (read-only)
   */
  model_name?: string | null
  creator?: IUserPublic
  /**
   * Explore page URL for this SQL query (read-only)
   */
  explore_url?: string | null
  /**
   * Should this query be rendered as plain text (read-only)
   */
  plaintext?: boolean
  /**
   * Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A "type" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
   */
  vis_config?: IDictionary<any> | null
  /**
   * ID of the ResultMakerLookup entry.
   */
  result_maker_id?: string | null
}

export interface ISqlQueryCreate {
  /**
   * Name of the db connection on which to run this query
   */
  connection_name?: string | null
  /**
   * (DEPRECATED) Use `connection_name` instead
   */
  connection_id?: string | null
  /**
   * Name of LookML Model (this or `connection_id` required)
   */
  model_name?: string | null
  /**
   * SQL query
   */
  sql?: string | null
  /**
   * Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A "type" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
   */
  vis_config?: IDictionary<any> | null
}

export interface ISshPublicKey {
  /**
   * The SSH public key created for this instance (read-only)
   */
  public_key?: string
}

export interface ISshServer {
  /**
   * A unique id used to identify this SSH Server (read-only)
   */
  ssh_server_id?: string
  /**
   * The name to identify this SSH Server
   */
  ssh_server_name?: string
  /**
   * The hostname or ip address of the SSH Server
   */
  ssh_server_host?: string
  /**
   * The port to connect to on the SSH Server
   */
  ssh_server_port?: number
  /**
   * The username used to connect to the SSH Server
   */
  ssh_server_user?: string
  /**
   * The md5 fingerprint used to identify the SSH Server (read-only)
   */
  finger_print?: string
  /**
   * The SHA fingerprint used to identify the SSH Server (read-only)
   */
  sha_finger_print?: string
  /**
   * The SSH public key created for this instance (read-only)
   */
  public_key?: string
  /**
   * The current connection status to this SSH Server (read-only)
   */
  status?: string
}

export interface ISshTunnel {
  /**
   * Unique ID for the tunnel (read-only)
   */
  tunnel_id?: string
  /**
   * SSH Server ID
   */
  ssh_server_id?: string
  /**
   * SSH Server name (read-only)
   */
  ssh_server_name?: string
  /**
   * SSH Server Hostname or IP Address (read-only)
   */
  ssh_server_host?: string
  /**
   * SSH Server port (read-only)
   */
  ssh_server_port?: number
  /**
   * Username used to connect to the SSH Server (read-only)
   */
  ssh_server_user?: string
  /**
   * Time of last connect attempt (read-only)
   */
  last_attempt?: string
  /**
   * Localhost Port used by the Looker instance to connect to the remote DB
   */
  local_host_port?: number
  /**
   * Hostname or IP Address of the Database Server
   */
  database_host?: string
  /**
   * Port that the Database Server is listening on
   */
  database_port?: number
  /**
   * Current connection status for this Tunnel (read-only)
   */
  status?: string
}

/**
 * TLS version selected Valid values are: "TLSv1_1", "SSLv23", "TLSv1_2". (Enum defined in SmtpSettings)
 */
export enum SslVersion {
  TLSv1_1 = 'TLSv1_1',
  SSLv23 = 'SSLv23',
  TLSv1_2 = 'TLSv1_2',
}

export interface ISupportAccessAddEntries {
  /**
   * An array of emails to add to the Allowlist
   */
  emails?: string[] | null
  /**
   * Reason for adding emails to the Allowlist
   */
  reason?: string | null
}

export interface ISupportAccessAllowlistEntry {
  /**
   * Unique ID (read-only)
   */
  id?: string
  /**
   * Email address
   */
  email?: string | null
  /**
   * Full name of allowlisted user (read-only)
   */
  full_name?: string | null
  /**
   * Reason the Email is included in the Allowlist
   */
  reason?: string | null
  /**
   * Date the Email was added to the Allowlist (read-only)
   */
  created_date?: Date | null
}

export interface ISupportAccessEnable {
  /**
   * Duration Support Access will remain enabled
   */
  duration_in_seconds: number | null
}

export interface ISupportAccessStatus {
  /**
   * Whether or not Support Access is open (read-only)
   */
  open?: boolean
  /**
   * Time that Support Access will expire (read-only)
   */
  open_until?: Date | null
}

/**
 * A list of action types the integration supports. Valid values are: "cell", "query", "dashboard", "none". (Enum defined in Integration)
 */
export enum SupportedActionTypes {
  cell = 'cell',
  query = 'query',
  dashboard = 'dashboard',
  none = 'none',
}

/**
 * A list of all the download mechanisms the integration supports. The order of values is not significant: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this defaults to all download setting values. Valid values are: "push", "url". (Enum defined in Integration)
 */
export enum SupportedDownloadSettings {
  push = 'push',
  url = 'url',
}

/**
 * A list of data formats the integration supports. If unspecified, the default is all data formats. Valid values are: "txt", "csv", "inline_json", "json", "json_label", "json_detail", "json_detail_lite_stream", "xlsx", "html", "wysiwyg_pdf", "assembled_pdf", "wysiwyg_png", "csv_zip". (Enum defined in Integration)
 */
export enum SupportedFormats {
  txt = 'txt',
  csv = 'csv',
  inline_json = 'inline_json',
  json = 'json',
  json_label = 'json_label',
  json_detail = 'json_detail',
  json_detail_lite_stream = 'json_detail_lite_stream',
  xlsx = 'xlsx',
  html = 'html',
  wysiwyg_pdf = 'wysiwyg_pdf',
  assembled_pdf = 'assembled_pdf',
  wysiwyg_png = 'wysiwyg_png',
  csv_zip = 'csv_zip',
}

/**
 * A list of formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: "formatted", "unformatted". (Enum defined in Integration)
 */
export enum SupportedFormattings {
  formatted = 'formatted',
  unformatted = 'unformatted',
}

/**
 * A list of visualization formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: "apply", "noapply". (Enum defined in Integration)
 */
export enum SupportedVisualizationFormattings {
  apply = 'apply',
  noapply = 'noapply',
}

export interface ITheme {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Timestamp for when this theme becomes active. Null=always
   */
  begin_at?: Date | null
  /**
   * Timestamp for when this theme expires. Null=never
   */
  end_at?: Date | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Name of theme. Can only be alphanumeric and underscores.
   */
  name?: string
  settings?: IThemeSettings
}

export interface IThemeSettings {
  /**
   * Default background color
   */
  background_color?: string
  /**
   * Base font size for scaling fonts (only supported by legacy dashboards)
   */
  base_font_size?: string | null
  /**
   * Optional. ID of color collection to use with the theme. Use an empty string for none.
   */
  color_collection_id?: string
  /**
   * Default font color
   */
  font_color?: string | null
  /**
   * Primary font family
   */
  font_family?: string
  /**
   * Source specification for font
   */
  font_source?: string | null
  /**
   * Info button color
   */
  info_button_color?: string
  /**
   * Primary button color
   */
  primary_button_color?: string
  /**
   * Toggle to show filters. Defaults to true.
   */
  show_filters_bar?: boolean
  /**
   * Toggle to show the title. Defaults to true.
   */
  show_title?: boolean
  /**
   * Text color for text tiles
   */
  text_tile_text_color?: string
  /**
   * Background color for tiles
   */
  tile_background_color?: string
  /**
   * Background color for text tiles
   */
  text_tile_background_color?: string
  /**
   * Text color for tiles
   */
  tile_text_color?: string
  /**
   * Color for titles
   */
  title_color?: string
  /**
   * Warning button color
   */
  warn_button_color?: string
  /**
   * The text alignment of tile titles (New Dashboards)
   */
  tile_title_alignment?: string
  /**
   * Toggles the tile shadow (not supported)
   */
  tile_shadow?: boolean
  /**
   * Toggle to show the dashboard last updated indicator. Defaults to true.
   */
  show_last_updated_indicator?: boolean
  /**
   * Toggle to show reload data icon/button. Defaults to true.
   */
  show_reload_data_icon?: boolean
  /**
   * Toggle to show the dashboard actions menu. Defaults to true.
   */
  show_dashboard_menu?: boolean
  /**
   * Toggle to show the filters icon/toggle. Defaults to true.
   */
  show_filters_toggle?: boolean
  /**
   * Toggle to show the dashboard header. Defaults to true.
   */
  show_dashboard_header?: boolean
  /**
   * Toggle to center the dashboard title. Defaults to false.
   */
  center_dashboard_title?: boolean
}

export interface ITimezone {
  /**
   * Timezone (read-only)
   */
  value?: string | null
  /**
   * Description of timezone (read-only)
   */
  label?: string | null
  /**
   * Timezone group (e.g Common, Other, etc.) (read-only)
   */
  group?: string | null
}

export interface IUpdateArtifact {
  /**
   * Key of value to store. Namespace + Key must be unique.
   */
  key: string
  /**
   * Value to store.
   */
  value: string
  /**
   * MIME type of content. This can only be used to override content that is detected as text/plain. Needed to set application/json content types, which are analyzed as plain text.
   */
  content_type?: string | null
  /**
   * Version number of the stored value. The version must be provided for any updates to an existing artifact. (read-only)
   */
  version?: number
}

export interface IUpdateFolder {
  /**
   * Unique Name
   */
  name?: string
  /**
   * Id of Parent. If the parent id is null, this is a root-level entry
   */
  parent_id?: string
}

export interface IUser {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * URL for the avatar image (may be generic) (read-only)
   */
  avatar_url?: string | null
  /**
   * URL for the avatar image (may be generic), does not specify size (read-only)
   */
  avatar_url_without_sizing?: string | null
  /**
   * API 3 credentials (read-only)
   */
  credentials_api3?: ICredentialsApi3[] | null
  credentials_email?: ICredentialsEmail
  /**
   * Embed credentials (read-only)
   */
  credentials_embed?: ICredentialsEmbed[] | null
  credentials_google?: ICredentialsGoogle
  credentials_ldap?: ICredentialsLDAP
  credentials_looker_openid?: ICredentialsLookerOpenid
  credentials_oidc?: ICredentialsOIDC
  credentials_saml?: ICredentialsSaml
  credentials_totp?: ICredentialsTotp
  /**
   * Full name for display (available only if both first_name and last_name are set) (read-only)
   */
  display_name?: string | null
  /**
   * EMail address (read-only)
   */
  email?: string | null
  /**
   * (DEPRECATED) (Embed only) ID of user's group space based on the external_group_id optionally specified during embed user login (read-only)
   */
  embed_group_space_id?: string | null
  /**
   * First name
   */
  first_name?: string | null
  /**
   * Array of ids of the groups for this user (read-only)
   */
  group_ids?: string[] | null
  /**
   * ID string for user's home folder
   */
  home_folder_id?: string | null
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Account has been disabled
   */
  is_disabled?: boolean
  /**
   * Last name
   */
  last_name?: string | null
  /**
   * User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example.
   */
  locale?: string | null
  /**
   * Array of strings representing the Looker versions that this user has used (this only goes back as far as '3.54.0') (read-only)
   */
  looker_versions?: string[] | null
  /**
   * User's dev workspace has been checked for presence of applicable production projects
   */
  models_dir_validated?: boolean | null
  /**
   * ID of user's personal folder (read-only)
   */
  personal_folder_id?: string | null
  /**
   * User is identified as an employee of Looker (read-only)
   */
  presumed_looker_employee?: boolean
  /**
   * Array of ids of the roles for this user (read-only)
   */
  role_ids?: string[] | null
  /**
   * Active sessions (read-only)
   */
  sessions?: ISession[] | null
  /**
   * Per user dictionary of undocumented state information owned by the Looker UI.
   */
  ui_state?: IDictionary<string> | null
  /**
   * User is identified as an employee of Looker who has been verified via Looker corporate authentication (read-only)
   */
  verified_looker_employee?: boolean
  /**
   * User's roles are managed by an external directory like SAML or LDAP and can not be changed directly. (read-only)
   */
  roles_externally_managed?: boolean
  /**
   * User can be directly assigned a role. (read-only)
   */
  allow_direct_roles?: boolean
  /**
   * User can be a direct member of a normal Looker group. (read-only)
   */
  allow_normal_group_membership?: boolean
  /**
   * User can inherit roles from a normal Looker group. (read-only)
   */
  allow_roles_from_normal_groups?: boolean
  /**
   * (Embed only) ID of user's group folder based on the external_group_id optionally specified during embed user login (read-only)
   */
  embed_group_folder_id?: string | null
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface IUserAttribute {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Name of user attribute
   */
  name: string | null
  /**
   * Human-friendly label for user attribute
   */
  label: string | null
  /**
   * Type of user attribute ("string", "number", "datetime", "yesno", "zipcode")
   */
  type: string | null
  /**
   * Default value for when no value is set on the user
   */
  default_value?: string | null
  /**
   * Attribute is a system default (read-only)
   */
  is_system?: boolean
  /**
   * Attribute is permanent and cannot be deleted (read-only)
   */
  is_permanent?: boolean
  /**
   * If true, users will not be able to view values of this attribute
   */
  value_is_hidden?: boolean
  /**
   * Non-admin users can see the values of their attributes and use them in filters
   */
  user_can_view?: boolean
  /**
   * Users can change the value of this attribute for themselves
   */
  user_can_edit?: boolean
  /**
   * Destinations to which a hidden attribute may be sent. Once set, cannot be edited.
   */
  hidden_value_domain_whitelist?: string | null
}

/**
 * An array of user attribute types that are allowed to be used in filters on this field. Valid values are: "advanced_filter_string", "advanced_filter_number", "advanced_filter_datetime", "string", "number", "datetime", "relative_url", "yesno", "zipcode". (Enum defined in LookmlModelExploreField)
 */
export enum UserAttributeFilterTypes {
  advanced_filter_string = 'advanced_filter_string',
  advanced_filter_number = 'advanced_filter_number',
  advanced_filter_datetime = 'advanced_filter_datetime',
  string = 'string',
  number = 'number',
  datetime = 'datetime',
  relative_url = 'relative_url',
  yesno = 'yesno',
  zipcode = 'zipcode',
}

/**
 * WARNING: no writeable properties found for POST, PUT, or PATCH
 */
export interface IUserAttributeGroupValue {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id of this group-attribute relation (read-only)
   */
  id?: string
  /**
   * Id of group (read-only)
   */
  group_id?: string | null
  /**
   * Id of user attribute (read-only)
   */
  user_attribute_id?: string | null
  /**
   * If true, the "value" field will be null, because the attribute settings block access to this value (read-only)
   */
  value_is_hidden?: boolean
  /**
   * Precedence for resolving value for user (read-only)
   */
  rank?: number | null
  /**
   * Value of user attribute for group (read-only)
   */
  value?: string | null
}

export interface IUserAttributeWithValue {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Name of user attribute (read-only)
   */
  name?: string | null
  /**
   * Human-friendly label for user attribute (read-only)
   */
  label?: string | null
  /**
   * Precedence for setting value on user (lowest wins) (read-only)
   */
  rank?: number | null
  /**
   * Value of attribute for user
   */
  value?: string | null
  /**
   * Id of User (read-only)
   */
  user_id?: string | null
  /**
   * Can the user set this value (read-only)
   */
  user_can_edit?: boolean
  /**
   * If true, the "value" field will be null, because the attribute settings block access to this value (read-only)
   */
  value_is_hidden?: boolean
  /**
   * Id of User Attribute (read-only)
   */
  user_attribute_id?: string | null
  /**
   * How user got this value for this attribute (read-only)
   */
  source?: string | null
  /**
   * If this user attribute is hidden, allowed list of destinations to which it may be sent. (read-only)
   */
  hidden_value_domain_whitelist?: string | null
}

export interface IUserEmailOnly {
  /**
   * Email Address
   */
  email: string
}

export interface IUserLoginLockout {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Hash of user's client id (read-only)
   */
  key?: string | null
  /**
   * Authentication method for login failures (read-only)
   */
  auth_type?: string | null
  /**
   * IP address of most recent failed attempt (read-only)
   */
  ip?: string | null
  /**
   * User ID (read-only)
   */
  user_id?: string | null
  /**
   * Remote ID of user if using LDAP (read-only)
   */
  remote_id?: string | null
  /**
   * User's name (read-only)
   */
  full_name?: string | null
  /**
   * Email address associated with the user's account (read-only)
   */
  email?: string | null
  /**
   * Number of failures that triggered the lockout (read-only)
   */
  fail_count?: number | null
  /**
   * Time when lockout was triggered (read-only)
   */
  lockout_at?: Date | null
}

export interface IUserPublic {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * First Name (read-only)
   */
  first_name?: string
  /**
   * Last Name (read-only)
   */
  last_name?: string
  /**
   * Full name for display (available only if both first_name and last_name are set) (read-only)
   */
  display_name?: string | null
  /**
   * URL for the avatar image (may be generic) (read-only)
   */
  avatar_url?: string
  /**
   * Link to get this item (read-only)
   */
  url?: string | null
}

export interface IValidationError {
  /**
   * Error details (read-only)
   */
  message: string | null
  /**
   * Error detail array (read-only)
   */
  errors?: IValidationErrorDetail[] | null
  /**
   * Documentation link (read-only)
   */
  documentation_url: string | null
}

export interface IValidationErrorDetail {
  /**
   * Field with error (read-only)
   */
  field?: string | null
  /**
   * Error code (read-only)
   */
  code?: string | null
  /**
   * Error info message (read-only)
   */
  message?: string | null
  /**
   * Documentation link (read-only)
   */
  documentation_url: string | null
}

/**
 * The name of the starting day of the week. Valid values are: "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday". (Enum defined in LookmlModelExploreField)
 */
export enum WeekStartDay {
  monday = 'monday',
  tuesday = 'tuesday',
  wednesday = 'wednesday',
  thursday = 'thursday',
  friday = 'friday',
  saturday = 'saturday',
  sunday = 'sunday',
}

export interface IWelcomeEmailTest {
  /**
   * The content that would be sent in the body of a custom welcome email
   */
  content?: string | null
  /**
   * The subject that would be sent for the custom welcome email
   */
  subject?: string | null
  /**
   * The header that would be sent in the body of a custom welcome email
   */
  header?: string | null
}

export interface IWhitelabelConfiguration {
  /**
   * Unique Id (read-only)
   */
  id?: string
  /**
   * Customer logo image. Expected base64 encoded data (write-only)
   */
  logo_file?: string | null
  /**
   * Logo image url (read-only) (read-only)
   */
  logo_url?: string | null
  /**
   * Custom favicon image. Expected base64 encoded data (write-only)
   */
  favicon_file?: string | null
  /**
   * Favicon image url (read-only) (read-only)
   */
  favicon_url?: string | null
  /**
   * Default page title
   */
  default_title?: string | null
  /**
   * Boolean to toggle showing help menus
   */
  show_help_menu?: boolean
  /**
   * Boolean to toggle showing docs
   */
  show_docs?: boolean
  /**
   * Boolean to toggle showing email subscription options.
   */
  show_email_sub_options?: boolean
  /**
   * Boolean to toggle mentions of Looker in emails
   */
  allow_looker_mentions?: boolean
  /**
   * Boolean to toggle links to Looker in emails
   */
  allow_looker_links?: boolean
  /**
   * Allow subject line and email heading customization in customized emails”
   */
  custom_welcome_email_advanced?: boolean
  /**
   * Remove the word Looker from appearing in the account setup page
   */
  setup_mentions?: boolean
  /**
   * Remove Looker logo from Alerts
   */
  alerts_logo?: boolean
  /**
   * Remove Looker links from Alerts
   */
  alerts_links?: boolean
  /**
   * Remove Looker mentions in home folder page when you don’t have any items saved
   */
  folders_mentions?: boolean
}

export interface IWorkspace {
  /**
   * Operations the current user is able to perform on this object (read-only)
   */
  can?: IDictionary<boolean>
  /**
   * The unique id of this user workspace. Predefined workspace ids include "production" and "dev" (read-only)
   */
  id?: string
  /**
   * The local state of each project in the workspace (read-only)
   */
  projects?: IProject[] | null
}

/**
 * Dynamic writeable type for Alert removes:
 * followed, followable, id, investigative_content_title, owner_display_name
 */
export interface IWriteAlert {
  /**
   * Filters coming from the dashboard that are applied. Example `[{ "filter_title": "Name", "field_name": "distribution_centers.name", "filter_value": "Los Angeles CA" }]`
   */
  applied_dashboard_filters?: IAlertAppliedDashboardFilter[] | null
  /**
   * This property informs the check what kind of comparison we are performing. Only certain condition types are valid for time series alerts. For details, refer to [Setting Alert Conditions](https://cloud.google.com/looker/docs/sharing-and-publishing/creating-alerts#setting_alert_conditions) Valid values are: "EQUAL_TO", "GREATER_THAN", "GREATER_THAN_OR_EQUAL_TO", "LESS_THAN", "LESS_THAN_OR_EQUAL_TO", "INCREASES_BY", "DECREASES_BY", "CHANGES_BY".
   */
  comparison_type: ComparisonType | null
  /**
   * Vixie-Style crontab specification when to run. At minumum, it has to be longer than 15 minute intervals
   */
  cron: string
  /**
   * Domain for the custom url selected by the alert creator from the admin defined domain allowlist
   */
  custom_url_base?: string | null
  /**
   * Parameters and path for the custom url defined by the alert creator
   */
  custom_url_params?: string | null
  /**
   * Label for the custom url defined by the alert creator
   */
  custom_url_label?: string | null
  /**
   * Boolean to determine if the custom url should be used
   */
  show_custom_url?: boolean
  /**
   * An optional, user-defined title for the alert
   */
  custom_title?: string | null
  /**
   * ID of the dashboard element associated with the alert. Refer to [dashboard_element()](#!/Dashboard/DashboardElement)
   */
  dashboard_element_id?: string | null
  /**
   * An optional description for the alert. This supplements the title
   */
  description?: string | null
  /**
   * Array of destinations to send alerts to. Must be the same type of destination. Example `[{ "destination_type": "EMAIL", "email_address": "test@test.com" }]`
   */
  destinations: IAlertDestination[] | null
  field: IAlertField | null
  /**
   * Whether or not the alert is disabled
   */
  is_disabled?: boolean
  /**
   * Reason for disabling alert
   */
  disabled_reason?: string | null
  /**
   * Whether or not the alert is public
   */
  is_public?: boolean
  /**
   * The type of the investigative content Valid values are: "dashboard".
   */
  investigative_content_type?: InvestigativeContentType | null
  /**
   * The ID of the investigative content. For dashboards, this will be the dashboard ID
   */
  investigative_content_id?: string | null
  /**
   * ID of the LookML dashboard associated with the alert
   */
  lookml_dashboard_id?: string | null
  /**
   * ID of the LookML dashboard element associated with the alert
   */
  lookml_link_id?: string | null
  /**
   * User id of alert owner
   */
  owner_id: string
  /**
   * Value of the alert threshold
   */
  threshold: number
  time_series_condition_state?: IAlertConditionState | null
}

/**
 * Dynamic writeable type for ApiSession removes:
 * can, sudo_user_id
 */
export interface IWriteApiSession {
  /**
   * The id of active workspace for this session
   */
  workspace_id?: string | null
}

/**
 * Dynamic writeable type for BackupConfiguration removes:
 * can, url
 */
export interface IWriteBackupConfiguration {
  /**
   * Type of backup: looker-s3 or custom-s3
   */
  type?: string | null
  /**
   * Name of bucket for custom-s3 backups
   */
  custom_s3_bucket?: string | null
  /**
   * Name of region where the bucket is located
   */
  custom_s3_bucket_region?: string | null
  /**
   * (Write-Only) AWS S3 key used for custom-s3 backups
   */
  custom_s3_key?: string | null
  /**
   * (Write-Only) AWS S3 secret used for custom-s3 backups
   */
  custom_s3_secret?: string | null
}

/**
 * Dynamic writeable type for Board removes:
 * can, content_metadata_id, created_at, board_sections, id, updated_at, user_id, primary_homepage
 */
export interface IWriteBoard {
  /**
   * Date of board deletion
   */
  deleted_at?: Date | null
  /**
   * Description of the board
   */
  description?: string | null
  /**
   * ids of the board sections in the order they should be displayed
   */
  section_order?: string[] | null
  /**
   * Title of the board
   */
  title?: string | null
}

/**
 * Dynamic writeable type for BoardItem removes:
 * can, content_created_by, content_favorite_id, content_metadata_id, content_updated_at, description, favorite_count, id, image_url, location, title, url, view_count, custom_image_url
 */
export interface IWriteBoardItem {
  /**
   * Custom description entered by the user, if present
   */
  custom_description?: string | null
  /**
   * Custom title entered by the user, if present
   */
  custom_title?: string | null
  /**
   * Custom url entered by the user, if present
   */
  custom_url?: string | null
  /**
   * Dashboard to base this item on
   */
  dashboard_id?: string | null
  /**
   * Associated Board Section
   */
  board_section_id?: string | null
  /**
   * Look to base this item on
   */
  look_id?: string | null
  /**
   * LookML Dashboard to base this item on
   */
  lookml_dashboard_id?: string | null
  /**
   * An arbitrary integer representing the sort order within the section
   */
  order?: number | null
  /**
   * Whether the custom description should be used instead of the content description, if the item is associated with content
   */
  use_custom_description?: boolean
  /**
   * Whether the custom title should be used instead of the content title, if the item is associated with content
   */
  use_custom_title?: boolean
  /**
   * Whether the custom url should be used instead of the content url, if the item is associated with content
   */
  use_custom_url?: boolean
  /**
   * (Write-Only) base64 encoded image data
   */
  custom_image_data_base64?: string | null
  /**
   * Whether the custom image should be used instead of the content image, if the item is associated with content
   */
  use_custom_image?: boolean
}

/**
 * Dynamic writeable type for BoardSection removes:
 * can, created_at, board_items, id, visible_item_order, updated_at
 */
export interface IWriteBoardSection {
  /**
   * Time at which this section was deleted.
   */
  deleted_at?: Date | null
  /**
   * Description of the content found in this section.
   */
  description?: string | null
  /**
   * Id reference to parent board
   */
  board_id?: string | null
  /**
   * ids of the board items in the order they should be displayed
   */
  item_order?: string[] | null
  /**
   * Name of row
   */
  title?: string | null
}

/**
 * Dynamic writeable type for ColorCollection removes:
 * id
 */
export interface IWriteColorCollection {
  /**
   * Label of color collection
   */
  label?: string
  /**
   * Array of categorical palette definitions
   */
  categoricalPalettes?: IDiscretePalette[] | null
  /**
   * Array of discrete palette definitions
   */
  sequentialPalettes?: IContinuousPalette[] | null
  /**
   * Array of diverging palette definitions
   */
  divergingPalettes?: IContinuousPalette[] | null
}

/**
 * Dynamic writeable type for ContentFavorite removes:
 * id, look_id, dashboard_id, board_id
 */
export interface IWriteContentFavorite {
  /**
   * User Id which owns this ContentFavorite
   */
  user_id?: string
  /**
   * Content Metadata Id associated with this ContentFavorite
   */
  content_metadata_id?: string
  /**
   * Dynamic writeable type for LookBasic removes:
   * can, content_metadata_id, id, title
   */
  look?: IWriteLookBasic | null
  /**
   * Dynamic writeable type for DashboardBase removes:
   * can, content_favorite_id, content_metadata_id, description, hidden, id, model, query_timezone, readonly, refresh_interval, refresh_interval_to_i, title, user_id, slug, preferred_viewer
   */
  dashboard?: IWriteDashboardBase | null
}

/**
 * Dynamic writeable type for ContentMeta removes:
 * can, id, name, parent_id, dashboard_id, look_id, folder_id, content_type, inheriting_id, slug
 */
export interface IWriteContentMeta {
  /**
   * Whether content inherits its access levels from parent
   */
  inherits?: boolean
}

/**
 * Dynamic writeable type for CreateDashboardFilter removes:
 * id, field
 */
export interface IWriteCreateDashboardFilter {
  /**
   * Id of Dashboard
   */
  dashboard_id: string | null
  /**
   * Name of filter
   */
  name: string | null
  /**
   * Title of filter
   */
  title: string | null
  /**
   * Type of filter: one of date, number, string, or field
   */
  type: string | null
  /**
   * Default value of filter
   */
  default_value?: string | null
  /**
   * Model of filter (required if type = field)
   */
  model?: string | null
  /**
   * Explore of filter (required if type = field)
   */
  explore?: string | null
  /**
   * Dimension of filter (required if type = field)
   */
  dimension?: string | null
  /**
   * Display order of this filter relative to other filters
   */
  row?: number | null
  /**
   * Array of listeners for faceted filters
   */
  listens_to_filters?: string[] | null
  /**
   * Whether the filter allows multiple filter values (deprecated in the latest version of dashboards)
   */
  allow_multiple_values?: boolean
  /**
   * Whether the filter requires a value to run the dashboard
   */
  required?: boolean
  /**
   * The visual configuration for this filter. Used to set up how the UI for this filter should appear.
   */
  ui_config?: IDictionary<any> | null
}

/**
 * Dynamic writeable type for CreateQueryTask removes:
 * can
 */
export interface IWriteCreateQueryTask {
  /**
   * Id of query to run
   */
  query_id: string | null
  /**
   * Desired async query result format. Valid values are: "inline_json", "json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml".
   */
  result_format: ResultFormat | null
  /**
   * Source of query task
   */
  source?: string | null
  /**
   * Create the task but defer execution
   */
  deferred?: boolean
  /**
   * Id of look associated with query.
   */
  look_id?: string | null
  /**
   * Id of dashboard associated with query.
   */
  dashboard_id?: string | null
}

/**
 * Dynamic writeable type for CredentialsEmail removes:
 * can, created_at, user_id, is_disabled, logged_in_at, password_reset_url, account_setup_url, type, url, user_url
 */
export interface IWriteCredentialsEmail {
  /**
   * EMail address used for user login
   */
  email?: string | null
  /**
   * Force the user to change their password upon their next login
   */
  forced_password_reset_at_next_login?: boolean
}

/**
 * Dynamic writeable type for Dashboard removes:
 * can, content_favorite_id, content_metadata_id, id, model, readonly, refresh_interval_to_i, user_id, created_at, dashboard_elements, dashboard_filters, dashboard_layouts, deleted_at, deleter_id, edit_uri, favorite_count, last_accessed_at, last_viewed_at, updated_at, last_updater_id, last_updater_name, user_name, view_count, url
 */
export interface IWriteDashboard {
  /**
   * Description
   */
  description?: string | null
  /**
   * Is Hidden
   */
  hidden?: boolean
  /**
   * Timezone in which the Dashboard will run by default.
   */
  query_timezone?: string | null
  /**
   * Refresh Interval, as a time duration phrase like "2 hours 30 minutes". A number with no time units will be interpreted as whole seconds.
   */
  refresh_interval?: string | null
  /**
   * Dynamic writeable type for FolderBase removes:
   * id, content_metadata_id, created_at, creator_id, child_count, external_id, is_embed, is_embed_shared_root, is_embed_users_root, is_personal, is_personal_descendant, is_shared_root, is_users_root, can
   */
  folder?: IWriteFolderBase | null
  /**
   * Dashboard Title
   */
  title?: string | null
  /**
   * Content Metadata Slug
   */
  slug?: string | null
  /**
   * The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)
   */
  preferred_viewer?: string | null
  /**
   * Enables alerts to keep in sync with dashboard filter changes
   */
  alert_sync_with_dashboard_filter_enabled?: boolean
  /**
   * Background color
   */
  background_color?: string | null
  /**
   * Enables crossfiltering in dashboards - only available in dashboards-next (beta)
   */
  crossfilter_enabled?: boolean
  /**
   * Whether or not a dashboard is 'soft' deleted.
   */
  deleted?: boolean
  /**
   * Allow visualizations to be viewed in full screen mode
   */
  enable_viz_full_screen?: boolean
  /**
   * Sets the default state of the filters bar to collapsed or open
   */
  filters_bar_collapsed?: boolean
  /**
   * Sets the default state of the filters location to top(true) or right(false)
   */
  filters_location_top?: boolean
  /**
   * configuration option that governs how dashboard loading will happen.
   */
  load_configuration?: string | null
  /**
   * Links this dashboard to a particular LookML dashboard such that calling a **sync** operation on that LookML dashboard will update this dashboard to match.
   */
  lookml_link_id?: string | null
  /**
   * Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user's ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://cloud.google.com/looker/docs/r/api/control-access)
   */
  show_filters_bar?: boolean | null
  /**
   * Show title
   */
  show_title?: boolean | null
  /**
   * Id of folder
   */
  folder_id?: string | null
  /**
   * Color of text on text tiles
   */
  text_tile_text_color?: string | null
  /**
   * Tile background color
   */
  tile_background_color?: string | null
  /**
   * Tile text color
   */
  tile_text_color?: string | null
  /**
   * Title color
   */
  title_color?: string | null
  appearance?: IDashboardAppearance | null
}

/**
 * Dynamic writeable type for DashboardBase removes:
 * can, content_favorite_id, content_metadata_id, description, hidden, id, model, query_timezone, readonly, refresh_interval, refresh_interval_to_i, title, user_id, slug, preferred_viewer
 */
export interface IWriteDashboardBase {
  /**
   * Dynamic writeable type for FolderBase removes:
   * id, content_metadata_id, created_at, creator_id, child_count, external_id, is_embed, is_embed_shared_root, is_embed_users_root, is_personal, is_personal_descendant, is_shared_root, is_users_root, can
   */
  folder?: IWriteFolderBase | null
}

/**
 * Dynamic writeable type for DashboardElement removes:
 * can, body_text_as_html, edit_uri, id, lookml_link_id, note_text_as_html, refresh_interval_to_i, alert_count, title_text_as_html, subtitle_text_as_html
 */
export interface IWriteDashboardElement {
  /**
   * Text tile body text
   */
  body_text?: string | null
  /**
   * Id of Dashboard
   */
  dashboard_id?: string | null
  /**
   * Dynamic writeable type for LookWithQuery removes:
   * can, content_metadata_id, id, content_favorite_id, created_at, deleted_at, deleter_id, embed_url, excel_file_url, favorite_count, google_spreadsheet_formula, image_embed_url, last_accessed_at, last_updater_id, last_viewed_at, model, public_slug, public_url, short_url, updated_at, view_count, url
   */
  look?: IWriteLookWithQuery | null
  /**
   * Id Of Look
   */
  look_id?: string | null
  /**
   * ID of merge result
   */
  merge_result_id?: string | null
  /**
   * Note Display
   */
  note_display?: string | null
  /**
   * Note State
   */
  note_state?: string | null
  /**
   * Note Text
   */
  note_text?: string | null
  /**
   * Dynamic writeable type for Query removes:
   * can, id, slug, share_url, expanded_share_url, url, has_table_calculations
   */
  query?: IWriteQuery | null
  /**
   * Id Of Query
   */
  query_id?: string | null
  /**
   * Refresh Interval
   */
  refresh_interval?: string | null
  /**
   * Dynamic writeable type for ResultMakerWithIdVisConfigAndDynamicFields removes:
   * id, dynamic_fields, filterables, sorts, merge_result_id, total, query_id, sql_query_id, vis_config
   */
  result_maker?: IWriteResultMakerWithIdVisConfigAndDynamicFields | null
  /**
   * ID of the ResultMakerLookup entry.
   */
  result_maker_id?: string | null
  /**
   * Text tile subtitle text
   */
  subtitle_text?: string | null
  /**
   * Title of dashboard element
   */
  title?: string | null
  /**
   * Whether title is hidden
   */
  title_hidden?: boolean
  /**
   * Text tile title
   */
  title_text?: string | null
  /**
   * Type
   */
  type?: string | null
  /**
   * JSON with all the properties required for rich editor and buttons elements
   */
  rich_content_json?: string | null
  /**
   * Extension ID
   */
  extension_id?: string | null
}

/**
 * Dynamic writeable type for DashboardFilter removes:
 * can, id, dashboard_id, field
 */
export interface IWriteDashboardFilter {
  /**
   * Name of filter
   */
  name?: string | null
  /**
   * Title of filter
   */
  title?: string | null
  /**
   * Type of filter: one of date, number, string, or field
   */
  type?: string | null
  /**
   * Default value of filter
   */
  default_value?: string | null
  /**
   * Model of filter (required if type = field)
   */
  model?: string | null
  /**
   * Explore of filter (required if type = field)
   */
  explore?: string | null
  /**
   * Dimension of filter (required if type = field)
   */
  dimension?: string | null
  /**
   * Display order of this filter relative to other filters
   */
  row?: number | null
  /**
   * Array of listeners for faceted filters
   */
  listens_to_filters?: string[] | null
  /**
   * Whether the filter allows multiple filter values (deprecated in the latest version of dashboards)
   */
  allow_multiple_values?: boolean
  /**
   * Whether the filter requires a value to run the dashboard
   */
  required?: boolean
  /**
   * The visual configuration for this filter. Used to set up how the UI for this filter should appear.
   */
  ui_config?: IDictionary<any> | null
}

/**
 * Dynamic writeable type for DashboardLayout removes:
 * can, id, deleted, dashboard_title, dashboard_layout_components
 */
export interface IWriteDashboardLayout {
  /**
   * Id of Dashboard
   */
  dashboard_id?: string | null
  /**
   * Type
   */
  type?: string | null
  /**
   * Is Active
   */
  active?: boolean
  /**
   * Column Width
   */
  column_width?: number | null
  /**
   * Width
   */
  width?: number | null
}

/**
 * Dynamic writeable type for DashboardLayoutComponent removes:
 * can, id, deleted, element_title, element_title_hidden, vis_type
 */
export interface IWriteDashboardLayoutComponent {
  /**
   * Id of Dashboard Layout
   */
  dashboard_layout_id?: string | null
  /**
   * Id Of Dashboard Element
   */
  dashboard_element_id?: string | null
  /**
   * Row
   */
  row?: number | null
  /**
   * Column
   */
  column?: number | null
  /**
   * Width
   */
  width?: number | null
  /**
   * Height
   */
  height?: number | null
}

/**
 * Dynamic writeable type for DashboardLookml removes:
 * dashboard_id
 */
export interface IWriteDashboardLookml {
  /**
   * (Write-Only) Id of the folder
   */
  folder_id?: string | null
  /**
   * lookml of UDD
   */
  lookml?: string | null
}

/**
 * Dynamic writeable type for Datagroup removes:
 * can, created_at, id, model_name, name, trigger_check_at, trigger_error, trigger_value
 */
export interface IWriteDatagroup {
  /**
   * UNIX timestamp before which cache entries are considered stale. Cannot be in the future.
   */
  stale_before?: number | null
  /**
   * UNIX timestamp at which this entry became triggered. Cannot be in the future.
   */
  triggered_at?: number | null
}

/**
 * Dynamic writeable type for DBConnection removes:
 * can, dialect, snippets, pdts_enabled, uses_oauth, supports_data_studio_link, created_at, user_id, example, last_regen_at, last_reap_at, managed
 */
export interface IWriteDBConnection {
  /**
   * Name of the connection. Also used as the unique identifier
   */
  name?: string
  /**
   * Host name/address of server; or the string 'localhost' in case of a connection over an SSH tunnel.
   */
  host?: string | null
  /**
   * Port number on server. If the connection is over an SSH tunnel, then the local port associated with the SSH tunnel.
   */
  port?: string | null
  /**
   * Username for server authentication
   */
  username?: string | null
  /**
   * (Write-Only) Password for server authentication
   */
  password?: string | null
  /**
   * (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
   */
  certificate?: string | null
  /**
   * (Write-Only) Certificate keyfile type - .json or .p12
   */
  file_type?: string | null
  /**
   * Database name
   */
  database?: string | null
  /**
   * Time zone of database
   */
  db_timezone?: string | null
  /**
   * Timezone to use in queries
   */
  query_timezone?: string | null
  /**
   * Scheme name
   */
  schema?: string | null
  /**
   * Maximum number of concurrent connection to use
   */
  max_connections?: number | null
  /**
   * Maximum size of query in GBs (BigQuery only, can be a user_attribute name)
   */
  max_billing_gigabytes?: string | null
  /**
   * Use SSL/TLS when connecting to server
   */
  ssl?: boolean
  /**
   * Verify the SSL
   */
  verify_ssl?: boolean
  /**
   * Name of temporary database (if used)
   */
  tmp_db_name?: string | null
  /**
   * Additional params to add to JDBC connection string
   */
  jdbc_additional_params?: string | null
  /**
   * Connection Pool Timeout, in seconds
   */
  pool_timeout?: number | null
  /**
   * (Read/Write) SQL Dialect name
   */
  dialect_name?: string | null
  /**
   * (Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password
   */
  user_db_credentials?: boolean | null
  /**
   * Fields whose values map to user attribute names
   */
  user_attribute_fields?: string[] | null
  /**
   * Cron string specifying when maintenance such as PDT trigger checks and drops should be performed
   */
  maintenance_cron?: string | null
  /**
   * Precache tables in the SQL Runner
   */
  sql_runner_precache_tables?: boolean
  /**
   * Fetch Information Schema For SQL Writing
   */
  sql_writing_with_info_schema?: boolean
  /**
   * SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
   */
  after_connect_statements?: string | null
  /**
   * Dynamic writeable type for DBConnectionOverride removes:
   * has_password
   */
  pdt_context_override?: IWriteDBConnectionOverride | null
  /**
   * This field is only applicable to connections over an SSH Tunnel. The value of this field would be the local port associated with the SSH tunnel if configured manually. Otherwise either enter NULL or exclude this field.
   */
  custom_local_port?: number | null
  /**
   * The Id of the ssh tunnel this connection uses
   */
  tunnel_id?: string | null
  /**
   * Enable Transparent Network Substrate (TNS) connections
   */
  uses_tns?: boolean | null
  /**
   * Maximum number of threads to use to build PDTs in parallel
   */
  pdt_concurrency?: number | null
  /**
   * When disable_context_comment is true comment will not be added to SQL
   */
  disable_context_comment?: boolean | null
  /**
   * An External OAuth Application to use for authenticating to the database
   */
  oauth_application_id?: string | null
  /**
   * When true, error PDTs will be retried every regenerator cycle
   */
  always_retry_failed_builds?: boolean | null
  /**
   * When true, query cost estimate will be displayed in explore.
   */
  cost_estimate_enabled?: boolean | null
  /**
   * PDT builds on this connection can be kicked off and cancelled via API.
   */
  pdt_api_control_enabled?: boolean | null
}

/**
 * Dynamic writeable type for DBConnectionOverride removes:
 * has_password
 */
export interface IWriteDBConnectionOverride {
  /**
   * Context in which to override (`pdt` is the only allowed value)
   */
  context?: string
  /**
   * Host name/address of server
   */
  host?: string | null
  /**
   * Port number on server
   */
  port?: string | null
  /**
   * Username for server authentication
   */
  username?: string | null
  /**
   * (Write-Only) Password for server authentication
   */
  password?: string | null
  /**
   * (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
   */
  certificate?: string | null
  /**
   * (Write-Only) Certificate keyfile type - .json or .p12
   */
  file_type?: string | null
  /**
   * Database name
   */
  database?: string | null
  /**
   * Scheme name
   */
  schema?: string | null
  /**
   * Additional params to add to JDBC connection string
   */
  jdbc_additional_params?: string | null
  /**
   * SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
   */
  after_connect_statements?: string | null
}

/**
 * Dynamic writeable type for EmbedSecret removes:
 * created_at, id, secret, user_id
 */
export interface IWriteEmbedSecret {
  /**
   * Signing algorithm to use with this secret. Either `hmac/sha-256`(default) or `hmac/sha-1`
   */
  algorithm?: string | null
  /**
   * Is this secret currently enabled
   */
  enabled?: boolean
  /**
   * Field to distinguish between SSO secrets and JWT secrets Valid values are: "SSO", "JWT".
   */
  secret_type?: SecretType | null
}

/**
 * Dynamic writeable type for ExternalOauthApplication removes:
 * can, id, created_at
 */
export interface IWriteExternalOauthApplication {
  /**
   * The name of this application.  For Snowflake connections, this should be the name of the host database.
   */
  name?: string
  /**
   * The OAuth Client ID for this application
   */
  client_id?: string
  /**
   * (Write-Only) The OAuth Client Secret for this application
   */
  client_secret?: string
  /**
   * The database dialect for this application.
   */
  dialect_name?: string | null
}

/**
 * Dynamic writeable type for FolderBase removes:
 * id, content_metadata_id, created_at, creator_id, child_count, external_id, is_embed, is_embed_shared_root, is_embed_users_root, is_personal, is_personal_descendant, is_shared_root, is_users_root, can
 */
export interface IWriteFolderBase {
  /**
   * Unique Name
   */
  name: string
  /**
   * Id of Parent. If the parent id is null, this is a root-level entry
   */
  parent_id?: string | null
}

/**
 * Dynamic writeable type for GitBranch removes:
 * can, remote, remote_name, error, message, owner_name, readonly, personal, is_local, is_remote, is_production, ahead_count, behind_count, commit_at, remote_ref
 */
export interface IWriteGitBranch {
  /**
   * The short name on the local. Updating `name` results in `git checkout <new_name>`
   */
  name?: string | null
  /**
   * The resolved ref of this branch. Updating `ref` results in `git reset --hard <new_ref>``.
   */
  ref?: string | null
}

/**
 * Dynamic writeable type for Group removes:
 * can, contains_current_user, external_group_id, externally_managed, id, include_by_default, user_count
 */
export interface IWriteGroup {
  /**
   * Group can be used in content access controls
   */
  can_add_to_content_metadata?: boolean
  /**
   * Name of group
   */
  name?: string | null
}

/**
 * Dynamic writeable type for Integration removes:
 * can, id, integration_hub_id, label, description, supported_formats, supported_action_types, supported_formattings, supported_visualization_formattings, supported_download_settings, icon_url, uses_oauth, required_fields, privacy_link, delegate_oauth
 */
export interface IWriteIntegration {
  /**
   * Whether the integration is available to users.
   */
  enabled?: boolean
  /**
   * Array of params for the integration.
   */
  params?: IIntegrationParam[] | null
  /**
   * Whether the integration is available to users.
   */
  installed_delegate_oauth_targets?: string[] | null
}

/**
 * Dynamic writeable type for IntegrationHub removes:
 * can, id, label, official, fetch_error_message, has_authorization_token, legal_agreement_signed, legal_agreement_required, legal_agreement_text
 */
export interface IWriteIntegrationHub {
  /**
   * URL of the hub.
   */
  url?: string
  /**
   * (Write-Only) An authorization key that will be sent to the integration hub on every request.
   */
  authorization_token?: string | null
}

/**
 * Dynamic writeable type for InternalHelpResources removes:
 * can
 */
export interface IWriteInternalHelpResources {
  /**
   * If true and internal help resources content is not blank then the link for internal help resources will be shown in the help menu and the content displayed within Looker
   */
  enabled?: boolean
}

/**
 * Dynamic writeable type for InternalHelpResourcesContent removes:
 * can
 */
export interface IWriteInternalHelpResourcesContent {
  /**
   * Text to display in the help menu item which will display the internal help resources
   */
  organization_name?: string | null
  /**
   * Content to be displayed in the internal help resources page/modal
   */
  markdown_content?: string | null
}

/**
 * Dynamic writeable type for LDAPConfig removes:
 * can, default_new_user_groups, default_new_user_roles, groups, has_auth_password, modified_at, modified_by, user_attributes, url
 */
export interface IWriteLDAPConfig {
  /**
   * Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
   */
  alternate_email_login_allowed?: boolean
  /**
   * (Write-Only)  Password for the LDAP account used to access the LDAP server
   */
  auth_password?: string | null
  /**
   * Users will not be allowed to login at all unless a role for them is found in LDAP if set to true
   */
  auth_requires_role?: boolean
  /**
   * Distinguished name of LDAP account used to access the LDAP server
   */
  auth_username?: string | null
  /**
   * LDAP server hostname
   */
  connection_host?: string | null
  /**
   * LDAP host port
   */
  connection_port?: string | null
  /**
   * Use Transport Layer Security
   */
  connection_tls?: boolean
  /**
   * Do not verify peer when using TLS
   */
  connection_tls_no_verify?: boolean
  /**
   * (Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP
   */
  default_new_user_group_ids?: string[] | null
  /**
   * (Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP
   */
  default_new_user_role_ids?: string[] | null
  /**
   * Enable/Disable LDAP authentication for the server
   */
  enabled?: boolean
  /**
   * Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it.
   */
  force_no_page?: boolean
  /**
   * Base dn for finding groups in LDAP searches
   */
  groups_base_dn?: string | null
  /**
   * Identifier for a strategy for how Looker will search for groups in the LDAP server
   */
  groups_finder_type?: string | null
  /**
   * LDAP Group attribute that signifies the members of the groups. Most commonly 'member'
   */
  groups_member_attribute?: string | null
  /**
   * Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches
   */
  groups_objectclasses?: string | null
  /**
   * LDAP Group attribute that signifies the user in a group. Most commonly 'dn'
   */
  groups_user_attribute?: string | null
  /**
   * (Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids
   */
  groups_with_role_ids?: ILDAPGroupWrite[] | null
  /**
   * Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user.
   */
  merge_new_users_by_email?: boolean
  /**
   * Set user roles in Looker based on groups from LDAP
   */
  set_roles_from_groups?: boolean
  /**
   * (Write-Only)  Test LDAP user password. For ldap tests only.
   */
  test_ldap_password?: string | null
  /**
   * (Write-Only)  Test LDAP user login id. For ldap tests only.
   */
  test_ldap_user?: string | null
  /**
   * Name of user record attributes used to indicate email address field
   */
  user_attribute_map_email?: string | null
  /**
   * Name of user record attributes used to indicate first name
   */
  user_attribute_map_first_name?: string | null
  /**
   * Name of user record attributes used to indicate last name
   */
  user_attribute_map_last_name?: string | null
  /**
   * Name of user record attributes used to indicate unique record id
   */
  user_attribute_map_ldap_id?: string | null
  /**
   * (Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids
   */
  user_attributes_with_ids?: ILDAPUserAttributeWrite[] | null
  /**
   * Distinguished name of LDAP node used as the base for user searches
   */
  user_bind_base_dn?: string | null
  /**
   * (Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses.
   */
  user_custom_filter?: string | null
  /**
   * Name(s) of user record attributes used for matching user login id (comma separated list)
   */
  user_id_attribute_names?: string | null
  /**
   * (Optional) Name of user record objectclass used for finding user during login id
   */
  user_objectclass?: string | null
  /**
   * Allow LDAP auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
   */
  allow_normal_group_membership?: boolean
  /**
   * LDAP auth'd users will be able to inherit roles from non-reflected Looker groups.
   */
  allow_roles_from_normal_groups?: boolean
  /**
   * Allows roles to be directly assigned to LDAP auth'd users.
   */
  allow_direct_roles?: boolean
}

/**
 * Dynamic writeable type for LegacyFeature removes:
 * can, id, name, description, enabled, disallowed_as_of_version, disable_on_upgrade_to_version, end_of_life_version, documentation_url, approximate_disable_date, approximate_end_of_life_date, has_disabled_on_upgrade
 */
export interface IWriteLegacyFeature {
  /**
   * Whether this feature has been enabled by a user
   */
  enabled_locally?: boolean
}

/**
 * Dynamic writeable type for LookBasic removes:
 * can, content_metadata_id, id, title
 */
export interface IWriteLookBasic {
  /**
   * User Id
   */
  user_id?: string | null
}

/**
 * Dynamic writeable type for LookmlModel removes:
 * can, explores, has_content, label
 */
export interface IWriteLookmlModel {
  /**
   * Array of names of connections this model is allowed to use
   */
  allowed_db_connection_names?: string[] | null
  /**
   * Name of the model. Also used as the unique identifier
   */
  name?: string | null
  /**
   * Name of project containing the model
   */
  project_name?: string | null
  /**
   * Is this model allowed to use all current and future connections
   */
  unlimited_db_connections?: boolean
}

/**
 * Dynamic writeable type for LookWithQuery removes:
 * can, content_metadata_id, id, content_favorite_id, created_at, deleted_at, deleter_id, embed_url, excel_file_url, favorite_count, google_spreadsheet_formula, image_embed_url, last_accessed_at, last_updater_id, last_viewed_at, model, public_slug, public_url, short_url, updated_at, view_count, url
 */
export interface IWriteLookWithQuery {
  /**
   * Look Title
   */
  title?: string | null
  /**
   * User Id
   */
  user_id?: string | null
  /**
   * Whether or not a look is 'soft' deleted.
   */
  deleted?: boolean
  /**
   * Description
   */
  description?: string | null
  /**
   * auto-run query when Look viewed
   */
  is_run_on_load?: boolean
  /**
   * Is Public
   */
  public?: boolean
  /**
   * Query Id
   */
  query_id?: string | null
  /**
   * Dynamic writeable type for FolderBase removes:
   * id, content_metadata_id, created_at, creator_id, child_count, external_id, is_embed, is_embed_shared_root, is_embed_users_root, is_personal, is_personal_descendant, is_shared_root, is_users_root, can
   */
  folder?: IWriteFolderBase | null
  /**
   * Folder Id
   */
  folder_id?: string | null
  /**
   * Dynamic writeable type for Query removes:
   * can, id, slug, share_url, expanded_share_url, url, has_table_calculations
   */
  query?: IWriteQuery | null
}

/**
 * Dynamic writeable type for MergeQuery removes:
 * can, id, result_maker_id
 */
export interface IWriteMergeQuery {
  /**
   * Column Limit
   */
  column_limit?: string | null
  /**
   * Dynamic Fields
   */
  dynamic_fields?: string | null
  /**
   * Pivots
   */
  pivots?: string[] | null
  /**
   * Sorts
   */
  sorts?: string[] | null
  /**
   * Source Queries defining the results to be merged.
   */
  source_queries?: IMergeQuerySourceQuery[] | null
  /**
   * Total
   */
  total?: boolean
  /**
   * Visualization Config
   */
  vis_config?: IDictionary<string> | null
}

/**
 * Dynamic writeable type for MobileToken removes:
 * id
 */
export interface IWriteMobileToken {
  /**
   * Specifies the device token
   */
  device_token: string
  /**
   * Specifies type of device. Valid values are: "android", "ios".
   */
  device_type: DeviceType | null
}

/**
 * Dynamic writeable type for ModelSet removes:
 * can, all_access, built_in, id, url
 */
export interface IWriteModelSet {
  models?: string[] | null
  /**
   * Name of ModelSet
   */
  name?: string | null
}

/**
 * Dynamic writeable type for OauthClientApp removes:
 * can, client_guid, tokens_invalid_before, activated_users
 */
export interface IWriteOauthClientApp {
  /**
   * The uri with which this application will receive an auth code by browser redirect.
   */
  redirect_uri?: string
  /**
   * The application's display name
   */
  display_name?: string
  /**
   * A description of the application that will be displayed to users
   */
  description?: string
  /**
   * When enabled is true, OAuth2 and API requests will be accepted from this app. When false, all requests from this app will be refused. Setting disabled invalidates existing tokens.
   */
  enabled?: boolean
  /**
   * If set, only Looker users who are members of this group can use this web app with Looker. If group_id is not set, any Looker user may use this app to access this Looker instance
   */
  group_id?: string | null
}

/**
 * Dynamic writeable type for OIDCConfig removes:
 * can, default_new_user_groups, default_new_user_roles, groups, modified_at, modified_by, test_slug, user_attributes, url
 */
export interface IWriteOIDCConfig {
  /**
   * Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
   */
  alternate_email_login_allowed?: boolean
  /**
   * OpenID Provider Audience
   */
  audience?: string | null
  /**
   * Users will not be allowed to login at all unless a role for them is found in OIDC if set to true
   */
  auth_requires_role?: boolean
  /**
   * OpenID Provider Authorization Url
   */
  authorization_endpoint?: string | null
  /**
   * (Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC
   */
  default_new_user_group_ids?: string[] | null
  /**
   * (Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC
   */
  default_new_user_role_ids?: string[] | null
  /**
   * Enable/Disable OIDC authentication for the server
   */
  enabled?: boolean
  /**
   * Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
   */
  groups_attribute?: string | null
  /**
   * (Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids
   */
  groups_with_role_ids?: IOIDCGroupWrite[] | null
  /**
   * Relying Party Identifier (provided by OpenID Provider)
   */
  identifier?: string | null
  /**
   * OpenID Provider Issuer
   */
  issuer?: string | null
  /**
   * Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
   */
  new_user_migration_types?: string | null
  /**
   * Array of scopes to request.
   */
  scopes?: string[] | null
  /**
   * (Write-Only) Relying Party Secret (provided by OpenID Provider)
   */
  secret?: string | null
  /**
   * Set user roles in Looker based on groups from OIDC
   */
  set_roles_from_groups?: boolean
  /**
   * OpenID Provider Token Url
   */
  token_endpoint?: string | null
  /**
   * Name of user record attributes used to indicate email address field
   */
  user_attribute_map_email?: string | null
  /**
   * Name of user record attributes used to indicate first name
   */
  user_attribute_map_first_name?: string | null
  /**
   * Name of user record attributes used to indicate last name
   */
  user_attribute_map_last_name?: string | null
  /**
   * (Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids
   */
  user_attributes_with_ids?: IOIDCUserAttributeWrite[] | null
  /**
   * OpenID Provider User Information Url
   */
  userinfo_endpoint?: string | null
  /**
   * Allow OIDC auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
   */
  allow_normal_group_membership?: boolean
  /**
   * OIDC auth'd users will inherit roles from non-reflected Looker groups.
   */
  allow_roles_from_normal_groups?: boolean
  /**
   * Allows roles to be directly assigned to OIDC auth'd users.
   */
  allow_direct_roles?: boolean
}

/**
 * Dynamic writeable type for PasswordConfig removes:
 * can
 */
export interface IWritePasswordConfig {
  /**
   * Minimum number of characters required for a new password.  Must be between 7 and 100
   */
  min_length?: number | null
  /**
   * Require at least one numeric character
   */
  require_numeric?: boolean
  /**
   * Require at least one uppercase and one lowercase letter
   */
  require_upperlower?: boolean
  /**
   * Require at least one special character
   */
  require_special?: boolean
}

/**
 * Dynamic writeable type for PermissionSet removes:
 * can, all_access, built_in, id, url
 */
export interface IWritePermissionSet {
  /**
   * Name of PermissionSet
   */
  name?: string | null
  permissions?: string[] | null
}

/**
 * Dynamic writeable type for PrivatelabelConfiguration removes:
 * logo_url, favicon_url
 */
export interface IWritePrivatelabelConfiguration {
  /**
   * Customer logo image. Expected base64 encoded data (write-only)
   */
  logo_file?: string | null
  /**
   * Custom favicon image. Expected base64 encoded data (write-only)
   */
  favicon_file?: string | null
  /**
   * Default page title
   */
  default_title?: string | null
  /**
   * Boolean to toggle showing help menus
   */
  show_help_menu?: boolean
  /**
   * Boolean to toggle showing docs
   */
  show_docs?: boolean
  /**
   * Boolean to toggle showing email subscription options.
   */
  show_email_sub_options?: boolean
  /**
   * Boolean to toggle mentions of Looker in emails
   */
  allow_looker_mentions?: boolean
  /**
   * Boolean to toggle links to Looker in emails
   */
  allow_looker_links?: boolean
  /**
   * Allow subject line and email heading customization in customized emails”
   */
  custom_welcome_email_advanced?: boolean
  /**
   * Remove the word Looker from appearing in the account setup page
   */
  setup_mentions?: boolean
  /**
   * Remove Looker logo from Alerts
   */
  alerts_logo?: boolean
  /**
   * Remove Looker links from Alerts
   */
  alerts_links?: boolean
  /**
   * Remove Looker mentions in home folder page when you don’t have any items saved
   */
  folders_mentions?: boolean
}

/**
 * Dynamic writeable type for Project removes:
 * can, id, uses_git, is_example
 */
export interface IWriteProject {
  /**
   * Project display name
   */
  name?: string
  /**
   * Git remote repository url
   */
  git_remote_url?: string | null
  /**
   * Git username for HTTPS authentication. (For production only, if using user attributes.)
   */
  git_username?: string | null
  /**
   * (Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)
   */
  git_password?: string | null
  /**
   * Git production branch name. Defaults to master. Supported only in Looker 21.0 and higher.
   */
  git_production_branch_name?: string
  /**
   * If true, the project uses a git cookie for authentication.
   */
  use_git_cookie_auth?: boolean
  /**
   * User attribute name for username in per-user HTTPS authentication.
   */
  git_username_user_attribute?: string | null
  /**
   * User attribute name for password in per-user HTTPS authentication.
   */
  git_password_user_attribute?: string | null
  /**
   * Name of the git service provider
   */
  git_service_name?: string | null
  /**
   * Port that HTTP(S) application server is running on (for PRs, file browsing, etc.)
   */
  git_application_server_http_port?: number | null
  /**
   * Scheme that is running on application server (for PRs, file browsing, etc.)
   */
  git_application_server_http_scheme?: string | null
  /**
   * (Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated.
   */
  deploy_secret?: string | null
  /**
   * (Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint.
   */
  unset_deploy_secret?: boolean
  /**
   * The git pull request policy for this project. Valid values are: "off", "links", "recommended", "required".
   */
  pull_request_mode?: PullRequestMode | null
  /**
   * Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository
   */
  validation_required?: boolean
  /**
   * If true, advanced git release management is enabled for this project
   */
  git_release_mgmt_enabled?: boolean
  /**
   * Validation policy: If true, the project can be committed with warnings when `validation_required` is true. (`allow_warnings` does nothing if `validation_required` is false).
   */
  allow_warnings?: boolean
  /**
   * Status of dependencies in your manifest & lockfile
   */
  dependency_status?: string | null
}

/**
 * Dynamic writeable type for Query removes:
 * can, id, slug, share_url, expanded_share_url, url, has_table_calculations
 */
export interface IWriteQuery {
  /**
   * Model
   */
  model: string
  /**
   * Explore Name
   */
  view: string
  /**
   * Fields
   */
  fields?: string[] | null
  /**
   * Pivots
   */
  pivots?: string[] | null
  /**
   * Fill Fields
   */
  fill_fields?: string[] | null
  /**
   * Filters
   */
  filters?: IDictionary<string> | null
  /**
   * Filter Expression
   */
  filter_expression?: string | null
  /**
   * Sorting for the query results. Use the format `["view.field", ...]` to sort on fields in ascending order. Use the format `["view.field desc", ...]` to sort on fields in descending order. Use `["__UNSORTED__"]` (2 underscores before and after) to disable sorting entirely. Empty sorts `[]` will trigger a default sort.
   */
  sorts?: string[] | null
  /**
   * Limit
   */
  limit?: string | null
  /**
   * Column Limit
   */
  column_limit?: string | null
  /**
   * Total
   */
  total?: boolean | null
  /**
   * Raw Total
   */
  row_total?: string | null
  /**
   * Fields on which to run subtotals
   */
  subtotals?: string[] | null
  /**
   * Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A "type" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
   */
  vis_config?: IDictionary<any> | null
  /**
   * The filter_config represents the state of the filter UI on the explore page for a given query. When running a query via the Looker UI, this parameter takes precedence over "filters". When creating a query or modifying an existing query, "filter_config" should be set to null. Setting it to any other value could cause unexpected filtering behavior. The format should be considered opaque.
   */
  filter_config?: IDictionary<any> | null
  /**
   * Visible UI Sections
   */
  visible_ui_sections?: string | null
  /**
   * Dynamic Fields
   */
  dynamic_fields?: string | null
  /**
   * Client Id: used to generate shortened explore URLs. If set by client, must be a unique 22 character alphanumeric string. Otherwise one will be generated.
   */
  client_id?: string | null
  /**
   * Query Timezone
   */
  query_timezone?: string | null
}

/**
 * Dynamic writeable type for RepositoryCredential removes:
 * can, id, root_project_id, remote_url, is_configured
 */
export interface IWriteRepositoryCredential {
  /**
   * Git username for HTTPS authentication.
   */
  git_username?: string | null
  /**
   * (Write-Only) Git password for HTTPS authentication.
   */
  git_password?: string | null
  /**
   * Public deploy key for SSH authentication.
   */
  ssh_public_key?: string | null
}

/**
 * Dynamic writeable type for ResultMakerWithIdVisConfigAndDynamicFields removes:
 * id, dynamic_fields, filterables, sorts, merge_result_id, total, query_id, sql_query_id, vis_config
 */
export interface IWriteResultMakerWithIdVisConfigAndDynamicFields {
  /**
   * Dynamic writeable type for Query removes:
   * can, id, slug, share_url, expanded_share_url, url, has_table_calculations
   */
  query?: IWriteQuery | null
}

/**
 * Dynamic writeable type for Role removes:
 * can, id, url, users_url
 */
export interface IWriteRole {
  /**
   * Name of Role
   */
  name?: string | null
  /**
   * Dynamic writeable type for PermissionSet removes:
   * can, all_access, built_in, id, url
   */
  permission_set?: IWritePermissionSet | null
  /**
   * (Write-Only) Id of permission set
   */
  permission_set_id?: string | null
  /**
   * Dynamic writeable type for ModelSet removes:
   * can, all_access, built_in, id, url
   */
  model_set?: IWriteModelSet | null
  /**
   * (Write-Only) Id of model set
   */
  model_set_id?: string | null
}

/**
 * Dynamic writeable type for SamlConfig removes:
 * can, test_slug, modified_at, modified_by, default_new_user_roles, default_new_user_groups, groups, user_attributes, url
 */
export interface IWriteSamlConfig {
  /**
   * Enable/Disable Saml authentication for the server
   */
  enabled?: boolean
  /**
   * Identity Provider Certificate (provided by IdP)
   */
  idp_cert?: string | null
  /**
   * Identity Provider Url (provided by IdP)
   */
  idp_url?: string | null
  /**
   * Identity Provider Issuer (provided by IdP)
   */
  idp_issuer?: string | null
  /**
   * Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.
   */
  idp_audience?: string | null
  /**
   * Count of seconds of clock drift to allow when validating timestamps of assertions.
   */
  allowed_clock_drift?: number | null
  /**
   * Name of user record attributes used to indicate email address field
   */
  user_attribute_map_email?: string | null
  /**
   * Name of user record attributes used to indicate first name
   */
  user_attribute_map_first_name?: string | null
  /**
   * Name of user record attributes used to indicate last name
   */
  user_attribute_map_last_name?: string | null
  /**
   * Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
   */
  new_user_migration_types?: string | null
  /**
   * Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
   */
  alternate_email_login_allowed?: boolean
  /**
   * (Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml
   */
  default_new_user_role_ids?: string[] | null
  /**
   * (Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml
   */
  default_new_user_group_ids?: string[] | null
  /**
   * Set user roles in Looker based on groups from Saml
   */
  set_roles_from_groups?: boolean
  /**
   * Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
   */
  groups_attribute?: string | null
  /**
   * (Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids
   */
  groups_with_role_ids?: ISamlGroupWrite[] | null
  /**
   * Users will not be allowed to login at all unless a role for them is found in Saml if set to true
   */
  auth_requires_role?: boolean
  /**
   * (Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids
   */
  user_attributes_with_ids?: ISamlUserAttributeWrite[] | null
  /**
   * Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']
   */
  groups_finder_type?: string | null
  /**
   * Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'
   */
  groups_member_value?: string | null
  /**
   * Bypass the login page when user authentication is required. Redirect to IdP immediately instead.
   */
  bypass_login_page?: boolean
  /**
   * Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
   */
  allow_normal_group_membership?: boolean
  /**
   * SAML auth'd users will inherit roles from non-reflected Looker groups.
   */
  allow_roles_from_normal_groups?: boolean
  /**
   * Allows roles to be directly assigned to SAML auth'd users.
   */
  allow_direct_roles?: boolean
}

/**
 * Dynamic writeable type for ScheduledPlan removes:
 * id, created_at, updated_at, title, user, next_run_at, last_run_at, can
 */
export interface IWriteScheduledPlan {
  /**
   * Name of this scheduled plan
   */
  name?: string | null
  /**
   * User Id which owns this scheduled plan
   */
  user_id?: string | null
  /**
   * Whether schedule is run as recipient (only applicable for email recipients)
   */
  run_as_recipient?: boolean
  /**
   * Whether the ScheduledPlan is enabled
   */
  enabled?: boolean
  /**
   * Id of a look
   */
  look_id?: string | null
  /**
   * Id of a dashboard
   */
  dashboard_id?: string | null
  /**
   * Id of a LookML dashboard
   */
  lookml_dashboard_id?: string | null
  /**
   * Query string to run look or dashboard with
   */
  filters_string?: string | null
  /**
   * (DEPRECATED) Alias for filters_string field
   */
  dashboard_filters?: string | null
  /**
   * Delivery should occur if running the dashboard or look returns results
   */
  require_results?: boolean
  /**
   * Delivery should occur if the dashboard look does not return results
   */
  require_no_results?: boolean
  /**
   * Delivery should occur if data have changed since the last run
   */
  require_change?: boolean
  /**
   * Will run an unlimited query and send all results.
   */
  send_all_results?: boolean
  /**
   * Vixie-Style crontab specification when to run
   */
  crontab?: string | null
  /**
   * Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)
   */
  datagroup?: string | null
  /**
   * Timezone for interpreting the specified crontab (default is Looker instance timezone)
   */
  timezone?: string | null
  /**
   * Query id
   */
  query_id?: string | null
  /**
   * Scheduled plan destinations
   */
  scheduled_plan_destination?: IScheduledPlanDestination[] | null
  /**
   * Whether the plan in question should only be run once (usually for testing)
   */
  run_once?: boolean
  /**
   * Whether links back to Looker should be included in this ScheduledPlan
   */
  include_links?: boolean
  /**
   * Custom url domain for the scheduled entity
   */
  custom_url_base?: string | null
  /**
   * Custom url path and parameters for the scheduled entity
   */
  custom_url_params?: string | null
  /**
   * Custom url label for the scheduled entity
   */
  custom_url_label?: string | null
  /**
   * Whether to show custom link back instead of standard looker link
   */
  show_custom_url?: boolean
  /**
   * The size of paper the PDF should be formatted to fit. Valid values are: "letter", "legal", "tabloid", "a0", "a1", "a2", "a3", "a4", "a5".
   */
  pdf_paper_size?: string | null
  /**
   * Whether the PDF should be formatted for landscape orientation
   */
  pdf_landscape?: boolean
  /**
   * Whether this schedule is in an embed context or not
   */
  embed?: boolean
  /**
   * Color scheme of the dashboard if applicable
   */
  color_theme?: string | null
  /**
   * Whether or not to expand table vis to full length
   */
  long_tables?: boolean
  /**
   * The pixel width at which we render the inline table visualizations
   */
  inline_table_width?: number | null
}

/**
 * Dynamic writeable type for SessionConfig removes:
 * can
 */
export interface IWriteSessionConfig {
  /**
   * Allow users to have persistent sessions when they login
   */
  allow_persistent_sessions?: boolean
  /**
   * Number of minutes for user sessions.  Must be between 5 and 43200
   */
  session_minutes?: number | null
  /**
   * Allow users to have an unbounded number of concurrent sessions (otherwise, users will be limited to only one session at a time).
   */
  unlimited_sessions_per_user?: boolean
  /**
   * Enforce session logout for sessions that are inactive for 15 minutes.
   */
  use_inactivity_based_logout?: boolean
  /**
   * Track location of session when user logs in.
   */
  track_session_location?: boolean
}

/**
 * Dynamic writeable type for Setting
 */
export interface IWriteSetting {
  /**
   * Toggle extension framework on or off
   */
  extension_framework_enabled?: boolean
  /**
   * (DEPRECATED) Toggle extension extension load url on or off. Do not use. This is temporary setting that will eventually become a noop and subsequently deleted.
   */
  extension_load_url_enabled?: boolean
  /**
   * Toggle marketplace auto install on or off. Note that auto install only runs if marketplace is enabled.
   */
  marketplace_auto_install_enabled?: boolean
  /**
   * Toggle marketplace on or off
   */
  marketplace_enabled?: boolean
  /**
   * Dynamic writeable type for PrivatelabelConfiguration removes:
   * logo_url, favicon_url
   */
  privatelabel_configuration?: IWritePrivatelabelConfiguration | null
  custom_welcome_email?: ICustomWelcomeEmail | null
  /**
   * Toggle onboarding on or off
   */
  onboarding_enabled?: boolean
  /**
   * Change instance-wide default timezone
   */
  timezone?: string
  /**
   * Toggle user-specific timezones on or off
   */
  allow_user_timezones?: boolean
  /**
   * Toggle default future connectors on or off
   */
  data_connector_default_enabled?: boolean
  /**
   * Change the base portion of your Looker instance URL setting
   */
  host_url?: string
  /**
   * (Write-Only) If warnings are preventing a host URL change, this parameter allows for overriding warnings to force update the setting. Does not directly change any Looker settings.
   */
  override_warnings?: boolean
  /**
   * An array of Email Domain Allowlist of type string for Scheduled Content
   */
  email_domain_allowlist?: string[] | null
}

/**
 * Dynamic writeable type for SshServer removes:
 * ssh_server_id, finger_print, sha_finger_print, public_key, status
 */
export interface IWriteSshServer {
  /**
   * The name to identify this SSH Server
   */
  ssh_server_name?: string
  /**
   * The hostname or ip address of the SSH Server
   */
  ssh_server_host?: string
  /**
   * The port to connect to on the SSH Server
   */
  ssh_server_port?: number
  /**
   * The username used to connect to the SSH Server
   */
  ssh_server_user?: string
}

/**
 * Dynamic writeable type for SshTunnel removes:
 * tunnel_id, ssh_server_name, ssh_server_host, ssh_server_port, ssh_server_user, last_attempt, status
 */
export interface IWriteSshTunnel {
  /**
   * SSH Server ID
   */
  ssh_server_id?: string
  /**
   * Localhost Port used by the Looker instance to connect to the remote DB
   */
  local_host_port?: number
  /**
   * Hostname or IP Address of the Database Server
   */
  database_host?: string
  /**
   * Port that the Database Server is listening on
   */
  database_port?: number
}

/**
 * Dynamic writeable type for Theme removes:
 * can, id
 */
export interface IWriteTheme {
  /**
   * Timestamp for when this theme becomes active. Null=always
   */
  begin_at?: Date | null
  /**
   * Timestamp for when this theme expires. Null=never
   */
  end_at?: Date | null
  /**
   * Name of theme. Can only be alphanumeric and underscores.
   */
  name?: string
  settings?: IThemeSettings | null
}

/**
 * Dynamic writeable type for User removes:
 * can, avatar_url, avatar_url_without_sizing, credentials_api3, credentials_embed, credentials_google, credentials_ldap, credentials_looker_openid, credentials_oidc, credentials_saml, credentials_totp, display_name, email, embed_group_space_id, group_ids, id, looker_versions, personal_folder_id, presumed_looker_employee, role_ids, sessions, verified_looker_employee, roles_externally_managed, allow_direct_roles, allow_normal_group_membership, allow_roles_from_normal_groups, embed_group_folder_id, url
 */
export interface IWriteUser {
  /**
   * Dynamic writeable type for CredentialsEmail removes:
   * can, created_at, user_id, is_disabled, logged_in_at, password_reset_url, account_setup_url, type, url, user_url
   */
  credentials_email?: IWriteCredentialsEmail | null
  /**
   * First name
   */
  first_name?: string | null
  /**
   * ID string for user's home folder
   */
  home_folder_id?: string | null
  /**
   * Account has been disabled
   */
  is_disabled?: boolean
  /**
   * Last name
   */
  last_name?: string | null
  /**
   * User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example.
   */
  locale?: string | null
  /**
   * User's dev workspace has been checked for presence of applicable production projects
   */
  models_dir_validated?: boolean | null
  /**
   * Per user dictionary of undocumented state information owned by the Looker UI.
   */
  ui_state?: IDictionary<string> | null
}

/**
 * Dynamic writeable type for UserAttribute removes:
 * can, id, is_system, is_permanent
 */
export interface IWriteUserAttribute {
  /**
   * Name of user attribute
   */
  name: string | null
  /**
   * Human-friendly label for user attribute
   */
  label: string | null
  /**
   * Type of user attribute ("string", "number", "datetime", "yesno", "zipcode")
   */
  type: string | null
  /**
   * Default value for when no value is set on the user
   */
  default_value?: string | null
  /**
   * If true, users will not be able to view values of this attribute
   */
  value_is_hidden?: boolean
  /**
   * Non-admin users can see the values of their attributes and use them in filters
   */
  user_can_view?: boolean
  /**
   * Users can change the value of this attribute for themselves
   */
  user_can_edit?: boolean
  /**
   * Destinations to which a hidden attribute may be sent. Once set, cannot be edited.
   */
  hidden_value_domain_whitelist?: string | null
}

/**
 * Dynamic writeable type for UserAttributeWithValue removes:
 * can, name, label, rank, user_id, user_can_edit, value_is_hidden, user_attribute_id, source, hidden_value_domain_whitelist
 */
export interface IWriteUserAttributeWithValue {
  /**
   * Value of attribute for user
   */
  value?: string | null
}

/**
 * Dynamic writeable type for WhitelabelConfiguration removes:
 * id, logo_url, favicon_url
 */
export interface IWriteWhitelabelConfiguration {
  /**
   * Customer logo image. Expected base64 encoded data (write-only)
   */
  logo_file?: string | null
  /**
   * Custom favicon image. Expected base64 encoded data (write-only)
   */
  favicon_file?: string | null
  /**
   * Default page title
   */
  default_title?: string | null
  /**
   * Boolean to toggle showing help menus
   */
  show_help_menu?: boolean
  /**
   * Boolean to toggle showing docs
   */
  show_docs?: boolean
  /**
   * Boolean to toggle showing email subscription options.
   */
  show_email_sub_options?: boolean
  /**
   * Boolean to toggle mentions of Looker in emails
   */
  allow_looker_mentions?: boolean
  /**
   * Boolean to toggle links to Looker in emails
   */
  allow_looker_links?: boolean
  /**
   * Allow subject line and email heading customization in customized emails”
   */
  custom_welcome_email_advanced?: boolean
  /**
   * Remove the word Looker from appearing in the account setup page
   */
  setup_mentions?: boolean
  /**
   * Remove Looker logo from Alerts
   */
  alerts_logo?: boolean
  /**
   * Remove Looker links from Alerts
   */
  alerts_links?: boolean
  /**
   * Remove Looker mentions in home folder page when you don’t have any items saved
   */
  folders_mentions?: boolean
}
