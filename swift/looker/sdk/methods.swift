/**

 MIT License

 Copyright (c) 2019 Looker Data Sciences, Inc.

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.

 */

/**
 * 343 API methods
 */


/// NOTE: Do not edit this file generated by Looker SDK Codegen for Looker 7.10 API 4.0

import Foundation

@available(OSX 10.15, *)
class LookerSDK: APIMethods {

    lazy var stream = LookerSDKStream(authSession)

    /**
     * Accepts the legal agreement for a given integration hub. This only works for integration hubs that have legal_agreement_required set to true and legal_agreement_signed set to false.
     *
     * POST /integration_hubs/{integration_hub_id}/accept_legal_agreement -> IntegrationHub
     */
    func accept_integration_hub_legal_agreement(
        /**
         * @param {Int64} integration_hub_id Id of integration_hub
         */
        _ integration_hub_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<IntegrationHub, SDKError> {
        let path_integration_hub_id = encodeParam(integration_hub_id)
        let result: SDKResponse<IntegrationHub, SDKError> = self.post("/integration_hubs/\(path_integration_hub_id)/accept_legal_agreement", nil, nil, options)
        return result
    }

    /**
     * ### Activate an app for a user
     *
     * Activates a user for a given oauth client app. This indicates the user has been informed that
     * the app will have access to the user's looker data, and that the user has accepted and allowed
     * the app to use their Looker account.
     *
     * Activating a user for an app that the user is already activated with returns a success response.
     *
     * POST /oauth_client_apps/{client_guid}/users/{user_id} -> String
     */
    func activate_app_user(
        /**
         * @param {String} client_guid The unique id of this application
         */
        _ client_guid: String,
        /**
         * @param {Int64} user_id The id of the user to enable use of this app
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_client_guid = encodeParam(client_guid)
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<String, SDKError> = self.post("/oauth_client_apps/\(path_client_guid)/users/\(path_user_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get active themes
     *
     * Returns an array of active themes.
     *
     * If the `name` parameter is specified, it will return an array with one theme if it's active and found.
     *
     * The optional `ts` parameter can specify a different timestamp than "now."
     *
     * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.
     *
     * GET /themes/active -> [Theme]
     */
    func active_themes(
        /**
         * @param {String} name Name of theme
         */
        name: String? = nil,
        /**
         * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
         */
        ts: Date? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Theme], SDKError> {
        let result: SDKResponse<[Theme], SDKError> = self.get("/themes/active", 
            ["name": name, "ts": ts as Any?, "fields": fields], nil, options)
        return result
    }

    /**
     * ### Adds a new group to a group.
     *
     * POST /groups/{group_id}/groups -> LkGroup
     */
    func add_group_group(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {GroupIdForGroupInclusion} body
         */
        _ body: GroupIdForGroupInclusion,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LkGroup, SDKError> {
        let path_group_id = encodeParam(group_id)
        let result: SDKResponse<LkGroup, SDKError> = self.post("/groups/\(path_group_id)/groups", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Adds a new user to a group.
     *
     * POST /groups/{group_id}/users -> User
     */
    func add_group_user(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {GroupIdForGroupUserInclusion} body
         */
        _ body: GroupIdForGroupUserInclusion,
        options: ITransportSettings? = nil
    ) -> SDKResponse<User, SDKError> {
        let path_group_id = encodeParam(group_id)
        let result: SDKResponse<User, SDKError> = self.post("/groups/\(path_group_id)/users", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Get information about all board items.
     *
     * GET /board_items -> [BoardItem]
     */
    func all_board_items(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} board_section_id Filter to a specific board section
         */
        board_section_id: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[BoardItem], SDKError> {
        let result: SDKResponse<[BoardItem], SDKError> = self.get("/board_items", 
            ["fields": fields, "sorts": sorts, "board_section_id": board_section_id], nil, options)
        return result
    }

    /**
     * ### Get information about all board sections.
     *
     * GET /board_sections -> [BoardSection]
     */
    func all_board_sections(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[BoardSection], SDKError> {
        let result: SDKResponse<[BoardSection], SDKError> = self.get("/board_sections", 
            ["fields": fields, "sorts": sorts], nil, options)
        return result
    }

    /**
     * ### Get information about all boards.
     *
     * GET /boards -> [Board]
     */
    func all_boards(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Board], SDKError> {
        let result: SDKResponse<[Board], SDKError> = self.get("/boards", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get an array of all existing Color Collections
     * Get a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)
     *
     * Get all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)
     *
     * Get all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)
     *
     * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.
     *
     * GET /color_collections -> [ColorCollection]
     */
    func all_color_collections(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ColorCollection], SDKError> {
        let result: SDKResponse<[ColorCollection], SDKError> = self.get("/color_collections", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all connections.
     *
     * GET /connections -> [DBConnection]
     */
    func all_connections(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DBConnection], SDKError> {
        let result: SDKResponse<[DBConnection], SDKError> = self.get("/connections", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### All content metadata access records for a content metadata item.
     *
     * GET /content_metadata_access -> [ContentMetaGroupUser]
     */
    func all_content_metadata_accesses(
        /**
         * @param {Int64} content_metadata_id Id of content metadata
         */
        _ content_metadata_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ContentMetaGroupUser], SDKError> {
        let result: SDKResponse<[ContentMetaGroupUser], SDKError> = self.get("/content_metadata_access", 
            ["content_metadata_id": content_metadata_id, "fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all content metadata in a space.
     *
     * GET /content_metadata -> [ContentMeta]
     */
    func all_content_metadatas(
        /**
         * @param {Int64} parent_id Parent space of content.
         */
        _ parent_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ContentMeta], SDKError> {
        let result: SDKResponse<[ContentMeta], SDKError> = self.get("/content_metadata", 
            ["parent_id": parent_id, "fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all active dashboards.
     *
     * Returns an array of **abbreviated dashboard objects**. Dashboards marked as deleted are excluded from this list.
     *
     * Get the **full details** of a specific dashboard by id with [dashboard()](#!/Dashboard/dashboard)
     *
     * Find **deleted dashboards** with [search_dashboards()](#!/Dashboard/search_dashboards)
     *
     * GET /dashboards -> [DashboardBase]
     */
    func all_dashboards(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DashboardBase], SDKError> {
        let result: SDKResponse<[DashboardBase], SDKError> = self.get("/dashboards", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all datagroups.
     *
     * GET /datagroups -> [Datagroup]
     */
    func all_datagroups(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Datagroup], SDKError> {
        let result: SDKResponse<[Datagroup], SDKError> = self.get("/datagroups", nil, nil, options)
        return result
    }

    /**
     * ### Get information about all dialects.
     *
     * GET /dialect_info -> [DialectInfo]
     */
    func all_dialect_infos(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DialectInfo], SDKError> {
        let result: SDKResponse<[DialectInfo], SDKError> = self.get("/dialect_info", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all folders.
     *
     * GET /folders -> [Folder]
     */
    func all_folders(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Folder], SDKError> {
        let result: SDKResponse<[Folder], SDKError> = self.get("/folders", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get All Git Branches
     *
     * Returns a list of git branches in the project repository
     *
     * GET /projects/{project_id}/git_branches -> [GitBranch]
     */
    func all_git_branches(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[GitBranch], SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<[GitBranch], SDKError> = self.get("/projects/\(path_project_id)/git_branches", nil, nil, options)
        return result
    }

    /**
     * ### Get All Git Connection Tests
     *
     * dev mode required.
     *   - Call `update_session` to select the 'dev' workspace.
     *
     * Returns a list of tests which can be run against a project's (or the dependency project for the provided remote_url) git connection. Call [Run Git Connection Test](#!/Project/run_git_connection_test) to execute each test in sequence.
     *
     * Tests are ordered by increasing specificity. Tests should be run in the order returned because later tests require functionality tested by tests earlier in the test list.
     *
     * For example, a late-stage test for write access is meaningless if connecting to the git server (an early test) is failing.
     *
     * GET /projects/{project_id}/git_connection_tests -> [GitConnectionTest]
     */
    func all_git_connection_tests(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
         */
        remote_url: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[GitConnectionTest], SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<[GitConnectionTest], SDKError> = self.get("/projects/\(path_project_id)/git_connection_tests", 
            ["remote_url": remote_url], nil, options)
        return result
    }

    /**
     * ### Get information about all the groups in a group
     *
     * GET /groups/{group_id}/groups -> [LkGroup]
     */
    func all_group_groups(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LkGroup], SDKError> {
        let path_group_id = encodeParam(group_id)
        let result: SDKResponse<[LkGroup], SDKError> = self.get("/groups/\(path_group_id)/groups", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all the users directly included in a group.
     *
     * GET /groups/{group_id}/users -> [User]
     */
    func all_group_users(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[User], SDKError> {
        let path_group_id = encodeParam(group_id)
        let result: SDKResponse<[User], SDKError> = self.get("/groups/\(path_group_id)/users", 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts], nil, options)
        return result
    }

    /**
     * ### Get information about all groups.
     *
     * GET /groups -> [LkGroup]
     */
    func all_groups(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {DelimArray<Int64>} ids Optional of ids to get specific groups.
         */
        ids: DelimArray<Int64>? = nil,
        /**
         * @param {Int64} content_metadata_id Id of content metadata to which groups must have access.
         */
        content_metadata_id: Int64? = nil,
        /**
         * @param {Bool} can_add_to_content_metadata Select only groups that either can/cannot be given access to content.
         */
        can_add_to_content_metadata: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LkGroup], SDKError> {
        let result: SDKResponse<[LkGroup], SDKError> = self.get("/groups", 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts, "ids": ids as Any?, "content_metadata_id": content_metadata_id, "can_add_to_content_metadata": can_add_to_content_metadata as Any?], nil, options)
        return result
    }

    /**
     * ### Get information about all Integration Hubs.
     *
     * GET /integration_hubs -> [IntegrationHub]
     */
    func all_integration_hubs(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[IntegrationHub], SDKError> {
        let result: SDKResponse<[IntegrationHub], SDKError> = self.get("/integration_hubs", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all Integrations.
     *
     * GET /integrations -> [Integration]
     */
    func all_integrations(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} integration_hub_id Filter to a specific provider
         */
        integration_hub_id: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Integration], SDKError> {
        let result: SDKResponse<[Integration], SDKError> = self.get("/integrations", 
            ["fields": fields, "integration_hub_id": integration_hub_id], nil, options)
        return result
    }

    /**
     * ### Get all legacy features.
     *
     * GET /legacy_features -> [LegacyFeature]
     */
    func all_legacy_features(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LegacyFeature], SDKError> {
        let result: SDKResponse<[LegacyFeature], SDKError> = self.get("/legacy_features", nil, nil, options)
        return result
    }

    /**
     * ### Get a list of locales that Looker supports.
     *
     * GET /locales -> [LkLocale]
     */
    func all_locales(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LkLocale], SDKError> {
        let result: SDKResponse<[LkLocale], SDKError> = self.get("/locales", nil, nil, options)
        return result
    }

    /**
     * ### Get information about all lookml models.
     *
     * GET /lookml_models -> [LookmlModel]
     */
    func all_lookml_models(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LookmlModel], SDKError> {
        let result: SDKResponse<[LookmlModel], SDKError> = self.get("/lookml_models", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get All LookML Tests
     *
     * Returns a list of tests which can be run to validate a project's LookML code and/or the underlying data,
     * optionally filtered by the file id.
     * Call [Run LookML Test](#!/Project/run_lookml_test) to execute tests.
     *
     * GET /projects/{project_id}/lookml_tests -> [LookmlTest]
     */
    func all_lookml_tests(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} file_id File Id
         */
        file_id: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LookmlTest], SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<[LookmlTest], SDKError> = self.get("/projects/\(path_project_id)/lookml_tests", 
            ["file_id": file_id], nil, options)
        return result
    }

    /**
     * ### Get information about all active Looks
     *
     * Returns an array of **abbreviated Look objects** describing all the looks that the caller has access to. Soft-deleted Looks are **not** included.
     *
     * Get the **full details** of a specific look by id with [look(id)](#!/Look/look)
     *
     * Find **soft-deleted looks** with [search_looks()](#!/Look/search_looks)
     *
     * GET /looks -> [Look]
     */
    func all_looks(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Look], SDKError> {
        let result: SDKResponse<[Look], SDKError> = self.get("/looks", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all model sets.
     *
     * GET /model_sets -> [ModelSet]
     */
    func all_model_sets(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ModelSet], SDKError> {
        let result: SDKResponse<[ModelSet], SDKError> = self.get("/model_sets", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### List All OAuth Client Apps
     *
     * Lists all applications registered to use OAuth2 login with this Looker instance, including
     * enabled and disabled apps.
     *
     * Results are filtered to include only the apps that the caller (current user)
     * has permission to see.
     *
     * GET /oauth_client_apps -> [OauthClientApp]
     */
    func all_oauth_client_apps(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[OauthClientApp], SDKError> {
        let result: SDKResponse<[OauthClientApp], SDKError> = self.get("/oauth_client_apps", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all permission sets.
     *
     * GET /permission_sets -> [PermissionSet]
     */
    func all_permission_sets(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[PermissionSet], SDKError> {
        let result: SDKResponse<[PermissionSet], SDKError> = self.get("/permission_sets", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get all supported permissions.
     *
     * GET /permissions -> [Permission]
     */
    func all_permissions(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Permission], SDKError> {
        let result: SDKResponse<[Permission], SDKError> = self.get("/permissions", nil, nil, options)
        return result
    }

    /**
     * ### Get All Project Files
     *
     * Returns a list of the files in the project
     *
     * GET /projects/{project_id}/files -> [ProjectFile]
     */
    func all_project_files(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ProjectFile], SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<[ProjectFile], SDKError> = self.get("/projects/\(path_project_id)/files", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get All Projects
     *
     * Returns all projects visible to the current user
     *
     * GET /projects -> [Project]
     */
    func all_projects(
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Project], SDKError> {
        let result: SDKResponse<[Project], SDKError> = self.get("/projects", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all roles.
     *
     * GET /roles -> [Role]
     */
    func all_roles(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {DelimArray<Int64>} ids Optional list of ids to get specific roles.
         */
        ids: DelimArray<Int64>? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Role], SDKError> {
        let result: SDKResponse<[Role], SDKError> = self.get("/roles", 
            ["fields": fields, "ids": ids as Any?], nil, options)
        return result
    }

    /**
     * Get information about all running queries.
     *
     * GET /running_queries -> [RunningQueries]
     */
    func all_running_queries(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[RunningQueries], SDKError> {
        let result: SDKResponse<[RunningQueries], SDKError> = self.get("/running_queries", nil, nil, options)
        return result
    }

    /**
     * ### List All Scheduled Plans
     *
     * Returns all scheduled plans which belong to the caller or given user.
     *
     * If no user_id is provided, this function returns the scheduled plans owned by the caller.
     *
     *
     * To list all schedules for all users, pass `all_users=true`.
     *
     *
     * The caller must have `see_schedules` permission to see other users' scheduled plans.
     *
     * GET /scheduled_plans -> [ScheduledPlan]
     */
    func all_scheduled_plans(
        /**
         * @param {Int64} user_id Return scheduled plans belonging to this user_id. If not provided, returns scheduled plans owned by the caller.
         */
        user_id: Int64? = nil,
        /**
         * @param {String} fields Comma delimited list of field names. If provided, only the fields specified will be included in the response
         */
        fields: String? = nil,
        /**
         * @param {Bool} all_users Return scheduled plans belonging to all users (caller needs see_schedules permission)
         */
        all_users: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ScheduledPlan], SDKError> {
        let result: SDKResponse<[ScheduledPlan], SDKError> = self.get("/scheduled_plans", 
            ["user_id": user_id, "fields": fields, "all_users": all_users as Any?], nil, options)
        return result
    }

    /**
     * ### Get an array of all existing themes
     *
     * Get a **single theme** by id with [Theme](#!/Theme/theme)
     *
     * This method returns an array of all existing themes. The active time for the theme is not considered.
     *
     * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.
     *
     * GET /themes -> [Theme]
     */
    func all_themes(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Theme], SDKError> {
        let result: SDKResponse<[Theme], SDKError> = self.get("/themes", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get a list of timezones that Looker supports (e.g. useful for scheduling tasks).
     *
     * GET /timezones -> [Timezone]
     */
    func all_timezones(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Timezone], SDKError> {
        let result: SDKResponse<[Timezone], SDKError> = self.get("/timezones", nil, nil, options)
        return result
    }

    /**
     * ### Returns all values of a user attribute defined by user groups, in precedence order.
     *
     * A user may be a member of multiple groups which define different values for a given user attribute.
     * The order of group-values in the response determines precedence for selecting which group-value applies
     * to a given user.  For more information, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).
     *
     * Results will only include groups that the caller's user account has permission to see.
     *
     * GET /user_attributes/{user_attribute_id}/group_values -> [UserAttributeGroupValue]
     */
    func all_user_attribute_group_values(
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[UserAttributeGroupValue], SDKError> {
        let path_user_attribute_id = encodeParam(user_attribute_id)
        let result: SDKResponse<[UserAttributeGroupValue], SDKError> = self.get("/user_attributes/\(path_user_attribute_id)/group_values", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all user attributes.
     *
     * GET /user_attributes -> [UserAttribute]
     */
    func all_user_attributes(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} sorts Fields to order the results by. Sortable fields include: name, label
         */
        sorts: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[UserAttribute], SDKError> {
        let result: SDKResponse<[UserAttribute], SDKError> = self.get("/user_attributes", 
            ["fields": fields, "sorts": sorts], nil, options)
        return result
    }

    /**
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     *
     * GET /users/{user_id}/credentials_api3 -> [CredentialsApi3]
     */
    func all_user_credentials_api3s(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[CredentialsApi3], SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<[CredentialsApi3], SDKError> = self.get("/users/\(path_user_id)/credentials_api3", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Embed login information for the specified user.
     *
     * GET /users/{user_id}/credentials_embed -> [CredentialsEmbed]
     */
    func all_user_credentials_embeds(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[CredentialsEmbed], SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<[CredentialsEmbed], SDKError> = self.get("/users/\(path_user_id)/credentials_embed", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get currently locked-out users.
     *
     * GET /user_login_lockouts -> [UserLoginLockout]
     */
    func all_user_login_lockouts(
        /**
         * @param {String} fields Include only these fields in the response
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[UserLoginLockout], SDKError> {
        let result: SDKResponse<[UserLoginLockout], SDKError> = self.get("/user_login_lockouts", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Web login session for the specified user.
     *
     * GET /users/{user_id}/sessions -> [Session]
     */
    func all_user_sessions(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Session], SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<[Session], SDKError> = self.get("/users/\(path_user_id)/sessions", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all users.
     *
     * GET /users -> [User]
     */
    func all_users(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {DelimArray<Int64>} ids Optional list of ids to get specific users.
         */
        ids: DelimArray<Int64>? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[User], SDKError> {
        let result: SDKResponse<[User], SDKError> = self.get("/users", 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts, "ids": ids as Any?], nil, options)
        return result
    }

    /**
     * ### Get All Workspaces
     *
     * Returns all workspaces available to the calling user.
     *
     * GET /workspaces -> [Workspace]
     */
    func all_workspaces(
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Workspace], SDKError> {
        let result: SDKResponse<[Workspace], SDKError> = self.get("/workspaces", nil, nil, options)
        return result
    }

    /**
     * ### Get information about a board.
     *
     * GET /boards/{board_id} -> Board
     */
    func board(
        /**
         * @param {Int64} board_id Id of board
         */
        _ board_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Board, SDKError> {
        let path_board_id = encodeParam(board_id)
        let result: SDKResponse<Board, SDKError> = self.get("/boards/\(path_board_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about a board item.
     *
     * GET /board_items/{board_item_id} -> BoardItem
     */
    func board_item(
        /**
         * @param {Int64} board_item_id Id of board item
         */
        _ board_item_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<BoardItem, SDKError> {
        let path_board_item_id = encodeParam(board_item_id)
        let result: SDKResponse<BoardItem, SDKError> = self.get("/board_items/\(path_board_item_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about a board section.
     *
     * GET /board_sections/{board_section_id} -> BoardSection
     */
    func board_section(
        /**
         * @param {Int64} board_section_id Id of board section
         */
        _ board_section_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<BoardSection, SDKError> {
        let path_board_section_id = encodeParam(board_section_id)
        let result: SDKResponse<BoardSection, SDKError> = self.get("/board_sections/\(path_board_section_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * Get the current Cloud Storage Configuration.
     *
     * GET /cloud_storage -> BackupConfiguration
     */
    func cloud_storage_configuration(
        options: ITransportSettings? = nil
    ) -> SDKResponse<BackupConfiguration, SDKError> {
        let result: SDKResponse<BackupConfiguration, SDKError> = self.get("/cloud_storage", nil, nil, options)
        return result
    }

    /**
     * ### Get a Color Collection by ID
     *
     * Use this to retrieve a specific Color Collection.
     * Get a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)
     *
     * Get all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)
     *
     * Get all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)
     *
     * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.
     *
     * GET /color_collections/{collection_id} -> ColorCollection
     */
    func color_collection(
        /**
         * @param {String} collection_id Id of Color Collection
         */
        _ collection_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ColorCollection, SDKError> {
        let path_collection_id = encodeParam(collection_id)
        let result: SDKResponse<ColorCollection, SDKError> = self.get("/color_collections/\(path_collection_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get an array of all existing **Custom** Color Collections
     * Get a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)
     *
     * Get all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)
     *
     * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.
     *
     * GET /color_collections/custom -> [ColorCollection]
     */
    func color_collections_custom(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ColorCollection], SDKError> {
        let result: SDKResponse<[ColorCollection], SDKError> = self.get("/color_collections/custom", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get an array of all existing **Standard** Color Collections
     * Get a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)
     *
     * Get all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)
     *
     * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.
     *
     * GET /color_collections/standard -> [ColorCollection]
     */
    func color_collections_standard(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ColorCollection], SDKError> {
        let result: SDKResponse<[ColorCollection], SDKError> = self.get("/color_collections/standard", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about a connection.
     *
     * GET /connections/{connection_name} -> DBConnection
     */
    func connection(
        /**
         * @param {String} connection_name Name of connection
         */
        _ connection_name: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DBConnection, SDKError> {
        let path_connection_name = encodeParam(connection_name)
        let result: SDKResponse<DBConnection, SDKError> = self.get("/connections/\(path_connection_name)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get favorite content by its id
     *
     * GET /content_favorite/{content_favorite_id} -> ContentFavorite
     */
    func content_favorite(
        /**
         * @param {Int64} content_favorite_id Id of favorite content
         */
        _ content_favorite_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentFavorite, SDKError> {
        let path_content_favorite_id = encodeParam(content_favorite_id)
        let result: SDKResponse<ContentFavorite, SDKError> = self.get("/content_favorite/\(path_content_favorite_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about an individual content metadata record.
     *
     * GET /content_metadata/{content_metadata_id} -> ContentMeta
     */
    func content_metadata(
        /**
         * @param {Int64} content_metadata_id Id of content metadata
         */
        _ content_metadata_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentMeta, SDKError> {
        let path_content_metadata_id = encodeParam(content_metadata_id)
        let result: SDKResponse<ContentMeta, SDKError> = self.get("/content_metadata/\(path_content_metadata_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Validate All Content
     *
     * Performs validation of all looks and dashboards
     * Returns a list of errors found as well as metadata about the content validation run.
     *
     * GET /content_validation -> ContentValidation
     */
    func content_validation(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentValidation, SDKError> {
        let result: SDKResponse<ContentValidation, SDKError> = self.get("/content_validation", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Create a new board.
     *
     * POST /boards -> Board
     */
    func create_board(
        /**
         * @param {WriteBoard} body
         */
        _ body: WriteBoard,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Board, SDKError> {
        let result: SDKResponse<Board, SDKError> = self.post("/boards", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a new board item.
     *
     * POST /board_items -> BoardItem
     */
    func create_board_item(
        /**
         * @param {WriteBoardItem} body
         */
        _ body: WriteBoardItem,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<BoardItem, SDKError> {
        let result: SDKResponse<BoardItem, SDKError> = self.post("/board_items", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a new board section.
     *
     * POST /board_sections -> BoardSection
     */
    func create_board_section(
        /**
         * @param {WriteBoardSection} body
         */
        _ body: WriteBoardSection,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<BoardSection, SDKError> {
        let result: SDKResponse<BoardSection, SDKError> = self.post("/board_sections", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a custom color collection with the specified information
     *
     * Creates a new custom color collection object, returning the details, including the created id.
     *
     * **Update** an existing color collection with [Update Color Collection](#!/ColorCollection/update_color_collection)
     *
     * **Permanently delete** an existing custom color collection with [Delete Color Collection](#!/ColorCollection/delete_color_collection)
     *
     * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.
     *
     * POST /color_collections -> ColorCollection
     */
    func create_color_collection(
        /**
         * @param {WriteColorCollection} body
         */
        _ body: WriteColorCollection,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ColorCollection, SDKError> {
        let result: SDKResponse<ColorCollection, SDKError> = self.post("/color_collections", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a new command.
     * # Required fields: [:name, :linked_content_id, :linked_content_type]
     * #
     *
     * POST /commands -> Command
     */
    func create_command(
        /**
         * @param {WriteCommand} body
         */
        _ body: WriteCommand,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Command, SDKError> {
        let result: SDKResponse<Command, SDKError> = self.post("/commands", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a connection using the specified configuration.
     *
     * POST /connections -> DBConnection
     */
    func create_connection(
        /**
         * @param {WriteDBConnection} body
         */
        _ body: WriteDBConnection,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DBConnection, SDKError> {
        let result: SDKResponse<DBConnection, SDKError> = self.post("/connections", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create favorite content
     *
     * POST /content_favorite -> ContentFavorite
     */
    func create_content_favorite(
        /**
         * @param {WriteContentFavorite} body
         */
        _ body: WriteContentFavorite,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentFavorite, SDKError> {
        let result: SDKResponse<ContentFavorite, SDKError> = self.post("/content_favorite", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create content metadata access.
     *
     * POST /content_metadata_access -> ContentMetaGroupUser
     */
    func create_content_metadata_access(
        /**
         * @param {ContentMetaGroupUser} body
         */
        _ body: ContentMetaGroupUser,
        /**
         * @param {Bool} send_boards_notification_email Optionally sends notification email when granting access to a board.
         */
        send_boards_notification_email: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentMetaGroupUser, SDKError> {
        let result: SDKResponse<ContentMetaGroupUser, SDKError> = self.post("/content_metadata_access", 
            ["send_boards_notification_email": send_boards_notification_email as Any?], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a new dashboard
     *
     * Creates a new dashboard object and returns the details of the newly created dashboard.
     *
     * `Title`, `user_id`, and `space_id` are all required fields.
     * `Space_id` and `user_id` must contain the id of an existing space or user, respectively.
     * A dashboard's `title` must be unique within the space in which it resides.
     *
     * If you receive a 422 error response when creating a dashboard, be sure to look at the
     * response body for information about exactly which fields are missing or contain invalid data.
     *
     * You can **update** an existing dashboard with [update_dashboard()](#!/Dashboard/update_dashboard)
     *
     * You can **permanently delete** an existing dashboard with [delete_dashboard()](#!/Dashboard/delete_dashboard)
     *
     * POST /dashboards -> Dashboard
     */
    func create_dashboard(
        /**
         * @param {WriteDashboard} body
         */
        _ body: WriteDashboard,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Dashboard, SDKError> {
        let result: SDKResponse<Dashboard, SDKError> = self.post("/dashboards", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a dashboard element on the dashboard with a specific id.
     *
     * POST /dashboard_elements -> DashboardElement
     */
    func create_dashboard_element(
        /**
         * @param {WriteDashboardElement} body
         */
        _ body: WriteDashboardElement,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardElement, SDKError> {
        let result: SDKResponse<DashboardElement, SDKError> = self.post("/dashboard_elements", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a dashboard filter on the dashboard with a specific id.
     *
     * POST /dashboard_filters -> DashboardFilter
     */
    func create_dashboard_filter(
        /**
         * @param {WriteCreateDashboardFilter} body
         */
        _ body: WriteCreateDashboardFilter,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardFilter, SDKError> {
        let result: SDKResponse<DashboardFilter, SDKError> = self.post("/dashboard_filters", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a dashboard layout on the dashboard with a specific id.
     *
     * POST /dashboard_layouts -> DashboardLayout
     */
    func create_dashboard_layout(
        /**
         * @param {WriteDashboardLayout} body
         */
        _ body: WriteDashboardLayout,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardLayout, SDKError> {
        let result: SDKResponse<DashboardLayout, SDKError> = self.post("/dashboard_layouts", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a new task to render a dashboard to a document or image.
     *
     * Returns a render task object.
     * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).
     * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).
     *
     * POST /render_tasks/dashboards/{dashboard_id}/{result_format} -> RenderTask
     */
    func create_dashboard_render_task(
        /**
         * @param {String} dashboard_id Id of dashboard to render. The ID can be a LookML dashboard also.
         */
        _ dashboard_id: String,
        /**
         * @param {String} result_format Output type: pdf, png, or jpg
         */
        _ result_format: String,
        /**
         * @param {CreateDashboardRenderTask} body
         */
        _ body: CreateDashboardRenderTask,
        /**
         * @param {Int64} width Output width in pixels
         */
        _ width: Int64,
        /**
         * @param {Int64} height Output height in pixels
         */
        _ height: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} pdf_paper_size Paper size for pdf. Value can be one of: ["letter","legal","tabloid","a0","a1","a2","a3","a4","a5"]
         */
        pdf_paper_size: String? = nil,
        /**
         * @param {Bool} pdf_landscape Whether to render pdf in landscape paper orientation
         */
        pdf_landscape: Bool? = nil,
        /**
         * @param {Bool} long_tables Whether or not to expand table vis to full length
         */
        long_tables: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<RenderTask, SDKError> {
        let path_dashboard_id = encodeParam(dashboard_id)
        let path_result_format = encodeParam(result_format)
        let result: SDKResponse<RenderTask, SDKError> = self.post("/render_tasks/dashboards/\(path_dashboard_id)/\(path_result_format)", 
            ["width": width, "height": height, "fields": fields, "pdf_paper_size": pdf_paper_size, "pdf_landscape": pdf_landscape as Any?, "long_tables": long_tables as Any?], try! self.encode(body), options)
        return result
    }

    /**
     * ### Trigger the generation of digest email records and send them to Looker's internal system. This does not send
     * any actual emails, it generates records containing content which may be of interest for users who have become inactive.
     * Emails will be sent at a later time from Looker's internal system if the Digest Emails feature is enabled in settings.
     *
     * POST /digest_email_send -> DigestEmailSend
     */
    func create_digest_email_send(
        options: ITransportSettings? = nil
    ) -> SDKResponse<DigestEmailSend, SDKError> {
        let result: SDKResponse<DigestEmailSend, SDKError> = self.post("/digest_email_send", nil, nil, options)
        return result
    }

    /**
     * ### Create an Embed URL
     *
     * Creates an embed URL that runs as the Looker user making this API call. ("Embed as me")
     * This embed URL can then be used to instantiate a Looker embed session in a
     * "Powered by Looker" (PBL) web application.
     *
     * An embed URL can only be used once, and must be used within 5 minutes of being created. After it
     * has been used to request a page from the Looker server, the URL is invalid. Future requests using
     * the same URL will fail. This is to prevent 'replay attacks'.
     *
     * The `target_url` property must be a complete URL of a Looker UI page - scheme, hostname, path and query params.
     * To load a dashboard with id 56 and with a filter of `Date=1 years`, the looker URL would look like `https://myname.looker.com/dashboards/56?Date=1%20years`.
     * The best way to obtain this target_url is to navigate to the desired Looker page in your web browser,
     * copy the URL shown in the browser address bar and paste it into the `target_url` property as a quoted string value in this API request.
     *
     * #### Security Note
     * Protect this embed URL as you would an access token or password credentials - do not write
     * it to disk, do not pass it to a third party, and only pass it through a secure HTTPS
     * encrypted transport.
     *
     * POST /embed/token_url/me -> EmbedUrlResponse
     */
    func create_embed_url_as_me(
        /**
         * @param {EmbedParams} body
         */
        _ body: EmbedParams,
        options: ITransportSettings? = nil
    ) -> SDKResponse<EmbedUrlResponse, SDKError> {
        let result: SDKResponse<EmbedUrlResponse, SDKError> = self.post("/embed/token_url/me", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a folder with specified information.
     *
     * Caller must have permission to edit the parent folder and to create folders, otherwise the request
     * returns 404 Not Found.
     *
     * POST /folders -> Folder
     */
    func create_folder(
        /**
         * @param {CreateFolder} body
         */
        _ body: CreateFolder,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Folder, SDKError> {
        let result: SDKResponse<Folder, SDKError> = self.post("/folders", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create and Checkout a Git Branch
     *
     * Creates and checks out a new branch in the given project repository
     * Only allowed in development mode
     *   - Call `update_session` to select the 'dev' workspace.
     *
     * Optionally specify a branch name, tag name or commit SHA as the start point in the ref field.
     *   If no ref is specified, HEAD of the current branch will be used as the start point for the new branch.
     *
     * POST /projects/{project_id}/git_branch -> GitBranch
     */
    func create_git_branch(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {WriteGitBranch} body
         */
        _ body: WriteGitBranch,
        options: ITransportSettings? = nil
    ) -> SDKResponse<GitBranch, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<GitBranch, SDKError> = self.post("/projects/\(path_project_id)/git_branch", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create Git Deploy Key
     *
     * Create a public/private key pair for authenticating ssh git requests from Looker to a remote git repository
     * for a particular Looker project.
     *
     * Returns the public key of the generated ssh key pair.
     *
     * Copy this public key to your remote git repository's ssh keys configuration so that the remote git service can
     * validate and accept git requests from the Looker server.
     *
     * POST /projects/{project_id}/git/deploy_key -> String
     */
    func create_git_deploy_key(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<String, SDKError> = self.post("/projects/\(path_project_id)/git/deploy_key", nil, nil, options)
        return result
    }

    /**
     * ### Creates a new group (admin only).
     *
     * POST /groups -> LkGroup
     */
    func create_group(
        /**
         * @param {WriteGroup} body
         */
        _ body: WriteGroup,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LkGroup, SDKError> {
        let result: SDKResponse<LkGroup, SDKError> = self.post("/groups", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a new Integration Hub.
     *
     * This API is rate limited to prevent it from being used for SSRF attacks
     *
     * POST /integration_hubs -> IntegrationHub
     */
    func create_integration_hub(
        /**
         * @param {WriteIntegrationHub} body
         */
        _ body: WriteIntegrationHub,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<IntegrationHub, SDKError> {
        let result: SDKResponse<IntegrationHub, SDKError> = self.post("/integration_hubs", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a Look
     *
     * To create a look to display query data, first create the query with [create_query()](#!/Query/create_query)
     * then assign the query's id to the `query_id` property in the call to `create_look()`.
     *
     * To place the look into a particular space, assign the space's id to the `space_id` property
     * in the call to `create_look()`.
     *
     * POST /looks -> LookWithQuery
     */
    func create_look(
        /**
         * @param {WriteLookWithQuery} body
         */
        _ body: WriteLookWithQuery,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookWithQuery, SDKError> {
        let result: SDKResponse<LookWithQuery, SDKError> = self.post("/looks", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a new task to render a look to an image.
     *
     * Returns a render task object.
     * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).
     * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).
     *
     * POST /render_tasks/looks/{look_id}/{result_format} -> RenderTask
     */
    func create_look_render_task(
        /**
         * @param {Int64} look_id Id of look to render
         */
        _ look_id: Int64,
        /**
         * @param {String} result_format Output type: png, or jpg
         */
        _ result_format: String,
        /**
         * @param {Int64} width Output width in pixels
         */
        _ width: Int64,
        /**
         * @param {Int64} height Output height in pixels
         */
        _ height: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<RenderTask, SDKError> {
        let path_look_id = encodeParam(look_id)
        let path_result_format = encodeParam(result_format)
        let result: SDKResponse<RenderTask, SDKError> = self.post("/render_tasks/looks/\(path_look_id)/\(path_result_format)", 
            ["width": width, "height": height, "fields": fields], nil, options)
        return result
    }

    /**
     * ### Create a lookml model using the specified configuration.
     *
     * POST /lookml_models -> LookmlModel
     */
    func create_lookml_model(
        /**
         * @param {WriteLookmlModel} body
         */
        _ body: WriteLookmlModel,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookmlModel, SDKError> {
        let result: SDKResponse<LookmlModel, SDKError> = self.post("/lookml_models", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create Merge Query
     *
     * Creates a new merge query object.
     *
     * A merge query takes the results of one or more queries and combines (merges) the results
     * according to field mapping definitions. The result is similar to a SQL left outer join.
     *
     * A merge query can merge results of queries from different SQL databases.
     *
     * The order that queries are defined in the source_queries array property is significant. The
     * first query in the array defines the primary key into which the results of subsequent
     * queries will be merged.
     *
     * Like model/view query objects, merge queries are immutable and have structural identity - if
     * you make a request to create a new merge query that is identical to an existing merge query,
     * the existing merge query will be returned instead of creating a duplicate. Conversely, any
     * change to the contents of a merge query will produce a new object with a new id.
     *
     * POST /merge_queries -> MergeQuery
     */
    func create_merge_query(
        /**
         * @param {WriteMergeQuery} body
         */
        body: WriteMergeQuery?,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<MergeQuery, SDKError> {
        let result: SDKResponse<MergeQuery, SDKError> = self.post("/merge_queries", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a model set with the specified information. Model sets are used by Roles.
     *
     * POST /model_sets -> ModelSet
     */
    func create_model_set(
        /**
         * @param {WriteModelSet} body
         */
        _ body: WriteModelSet,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ModelSet, SDKError> {
        let result: SDKResponse<ModelSet, SDKError> = self.post("/model_sets", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a OIDC test configuration.
     *
     * POST /oidc_test_configs -> OIDCConfig
     */
    func create_oidc_test_config(
        /**
         * @param {WriteOIDCConfig} body
         */
        _ body: WriteOIDCConfig,
        options: ITransportSettings? = nil
    ) -> SDKResponse<OIDCConfig, SDKError> {
        let result: SDKResponse<OIDCConfig, SDKError> = self.post("/oidc_test_configs", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a permission set with the specified information. Permission sets are used by Roles.
     *
     * POST /permission_sets -> PermissionSet
     */
    func create_permission_set(
        /**
         * @param {WritePermissionSet} body
         */
        _ body: WritePermissionSet,
        options: ITransportSettings? = nil
    ) -> SDKResponse<PermissionSet, SDKError> {
        let result: SDKResponse<PermissionSet, SDKError> = self.post("/permission_sets", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create A Project
     *
     * dev mode required.
     * - Call `update_session` to select the 'dev' workspace.
     *
     * `name` is required.
     * `git_remote_url` is not allowed. To configure Git for the newly created project, follow the instructions in `update_project`.
     *
     * POST /projects -> Project
     */
    func create_project(
        /**
         * @param {WriteProject} body
         */
        _ body: WriteProject,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Project, SDKError> {
        let result: SDKResponse<Project, SDKError> = self.post("/projects", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a query.
     *
     * This allows you to create a new query that you can later run. Looker queries are immutable once created
     * and are not deleted. If you create a query that is exactly like an existing query then the existing query
     * will be returned and no new query will be created. Whether a new query is created or not, you can use
     * the 'id' in the returned query with the 'run' method.
     *
     * The query parameters are passed as json in the body of the request.
     *
     * POST /queries -> Query
     */
    func create_query(
        /**
         * @param {WriteQuery} body
         */
        _ body: WriteQuery,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Query, SDKError> {
        let result: SDKResponse<Query, SDKError> = self.post("/queries", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a new task to render an existing query to an image.
     *
     * Returns a render task object.
     * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).
     * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).
     *
     * POST /render_tasks/queries/{query_id}/{result_format} -> RenderTask
     */
    func create_query_render_task(
        /**
         * @param {Int64} query_id Id of the query to render
         */
        _ query_id: Int64,
        /**
         * @param {String} result_format Output type: png or jpg
         */
        _ result_format: String,
        /**
         * @param {Int64} width Output width in pixels
         */
        _ width: Int64,
        /**
         * @param {Int64} height Output height in pixels
         */
        _ height: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<RenderTask, SDKError> {
        let path_query_id = encodeParam(query_id)
        let path_result_format = encodeParam(result_format)
        let result: SDKResponse<RenderTask, SDKError> = self.post("/render_tasks/queries/\(path_query_id)/\(path_result_format)", 
            ["width": width, "height": height, "fields": fields], nil, options)
        return result
    }

    /**
     * ### Create an async query task
     *
     * Creates a query task (job) to run a previously created query asynchronously. Returns a Query Task ID.
     *
     * Use [query_task(query_task_id)](#!/Query/query_task) to check the execution status of the query task.
     * After the query task status reaches "Complete", use [query_task_results(query_task_id)](#!/Query/query_task_results) to fetch the results of the query.
     *
     * POST /query_tasks -> QueryTask
     */
    func create_query_task(
        /**
         * @param {WriteCreateQueryTask} body
         */
        _ body: WriteCreateQueryTask,
        /**
         * @param {Int64} limit Row limit (may override the limit in the saved query).
         */
        limit: Int64? = nil,
        /**
         * @param {Bool} apply_formatting Apply model-specified formatting to each result.
         */
        apply_formatting: Bool? = nil,
        /**
         * @param {Bool} apply_vis Apply visualization options to results.
         */
        apply_vis: Bool? = nil,
        /**
         * @param {Bool} cache Get results from cache if available.
         */
        cache: Bool? = nil,
        /**
         * @param {Int64} image_width Render width for image formats.
         */
        image_width: Int64? = nil,
        /**
         * @param {Int64} image_height Render height for image formats.
         */
        image_height: Int64? = nil,
        /**
         * @param {Bool} generate_drill_links Generate drill links (only applicable to 'json_detail' format.
         */
        generate_drill_links: Bool? = nil,
        /**
         * @param {Bool} force_production Force use of production models even if the user is in development mode.
         */
        force_production: Bool? = nil,
        /**
         * @param {Bool} cache_only Retrieve any results from cache even if the results have expired.
         */
        cache_only: Bool? = nil,
        /**
         * @param {String} path_prefix Prefix to use for drill links (url encoded).
         */
        path_prefix: String? = nil,
        /**
         * @param {Bool} rebuild_pdts Rebuild PDTS used in query.
         */
        rebuild_pdts: Bool? = nil,
        /**
         * @param {Bool} server_table_calcs Perform table calculations on query results
         */
        server_table_calcs: Bool? = nil,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<QueryTask, SDKError> {
        let result: SDKResponse<QueryTask, SDKError> = self.post("/query_tasks", 
            ["limit": limit, "apply_formatting": apply_formatting as Any?, "apply_vis": apply_vis as Any?, "cache": cache as Any?, "image_width": image_width, "image_height": image_height, "generate_drill_links": generate_drill_links as Any?, "force_production": force_production as Any?, "cache_only": cache_only as Any?, "path_prefix": path_prefix, "rebuild_pdts": rebuild_pdts as Any?, "server_table_calcs": server_table_calcs as Any?, "fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a role with the specified information.
     *
     * POST /roles -> Role
     */
    func create_role(
        /**
         * @param {WriteRole} body
         */
        _ body: WriteRole,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Role, SDKError> {
        let result: SDKResponse<Role, SDKError> = self.post("/roles", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a SAML test configuration.
     *
     * POST /saml_test_configs -> SamlConfig
     */
    func create_saml_test_config(
        /**
         * @param {WriteSamlConfig} body
         */
        _ body: WriteSamlConfig,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SamlConfig, SDKError> {
        let result: SDKResponse<SamlConfig, SDKError> = self.post("/saml_test_configs", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a Scheduled Plan
     *
     * Create a scheduled plan to render a Look or Dashboard on a recurring schedule.
     *
     * To create a scheduled plan, you MUST provide values for the following fields:
     * `name`
     * and
     * `look_id`, `dashboard_id`, `lookml_dashboard_id`, or `query_id`
     * and
     * `cron_tab` or `datagroup`
     * and
     * at least one scheduled_plan_destination
     *
     * A scheduled plan MUST have at least one scheduled_plan_destination defined.
     *
     * When `look_id` is set, `require_no_results`, `require_results`, and `require_change` are all required.
     *
     * If `create_scheduled_plan` fails with a 422 error, be sure to look at the error messages in the response which will explain exactly what fields are missing or values that are incompatible.
     *
     * The queries that provide the data for the look or dashboard are run in the context of user account that owns the scheduled plan.
     *
     * When `run_as_recipient` is `false` or not specified, the queries that provide the data for the
     * look or dashboard are run in the context of user account that owns the scheduled plan.
     *
     * When `run_as_recipient` is `true` and all the email recipients are Looker user accounts, the
     * queries are run in the context of each recipient, so different recipients may see different
     * data from the same scheduled render of a look or dashboard. For more details, see [Run As Recipient](https://looker.com/docs/r/admin/run-as-recipient).
     *
     * Admins can create and modify scheduled plans on behalf of other users by specifying a user id.
     * Non-admin users may not create or modify scheduled plans by or for other users.
     *
     * #### Email Permissions:
     *
     * For details about permissions required to schedule delivery to email and the safeguards
     * Looker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).
     *
     *
     * #### Scheduled Plan Destination Formats
     *
     * Scheduled plan destinations must specify the data format to produce and send to the destination.
     *
     * Formats:
     *
     * | format | Description
     * | :-----------: | :--- |
     * | json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.
     * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query
     * | inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.
     * | csv | Comma separated values with a header
     * | txt | Tab separated values with a header
     * | html | Simple html
     * | xlsx | MS Excel spreadsheet
     * | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document
     * | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document
     * | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image
     * ||
     *
     * Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.
     *
     * POST /scheduled_plans -> ScheduledPlan
     */
    func create_scheduled_plan(
        /**
         * @param {WriteScheduledPlan} body
         */
        _ body: WriteScheduledPlan,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ScheduledPlan, SDKError> {
        let result: SDKResponse<ScheduledPlan, SDKError> = self.post("/scheduled_plans", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a SQL Runner Query
     *
     * Either the `connection_name` or `model_name` parameter MUST be provided.
     *
     * POST /sql_queries -> SqlQuery
     */
    func create_sql_query(
        /**
         * @param {SqlQueryCreate} body
         */
        _ body: SqlQueryCreate,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SqlQuery, SDKError> {
        let result: SDKResponse<SqlQuery, SDKError> = self.post("/sql_queries", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create SSO Embed URL
     *
     * Creates an SSO embed URL and cryptographically signs it with an embed secret.
     * This signed URL can then be used to instantiate a Looker embed session in a PBL web application.
     * Do not make any modifications to this URL - any change may invalidate the signature and
     * cause the URL to fail to load a Looker embed session.
     *
     * A signed SSO embed URL can only be used once. After it has been used to request a page from the
     * Looker server, the URL is invalid. Future requests using the same URL will fail. This is to prevent
     * 'replay attacks'.
     *
     * The `target_url` property must be a complete URL of a Looker UI page - scheme, hostname, path and query params.
     * To load a dashboard with id 56 and with a filter of `Date=1 years`, the looker URL would look like `https:/myname.looker.com/dashboards/56?Date=1%20years`.
     * The best way to obtain this target_url is to navigate to the desired Looker page in your web browser,
     * copy the URL shown in the browser address bar and paste it into the `target_url` property as a quoted string value in this API request.
     *
     * Permissions for the embed user are defined by the groups in which the embed user is a member (group_ids property)
     * and the lists of models and permissions assigned to the embed user.
     * At a minimum, you must provide values for either the group_ids property, or both the models and permissions properties.
     * These properties are additive; an embed user can be a member of certain groups AND be granted access to models and permissions.
     *
     * The embed user's access is the union of permissions granted by the group_ids, models, and permissions properties.
     *
     * This function does not strictly require all group_ids, user attribute names, or model names to exist at the moment the
     * SSO embed url is created. Unknown group_id, user attribute names or model names will be passed through to the output URL.
     * To diagnose potential problems with an SSO embed URL, you can copy the signed URL into the Embed URI Validator text box in `<your looker instance>/admin/embed`.
     *
     * The `secret_id` parameter is optional. If specified, its value must be the id of an active secret defined in the Looker instance.
     * if not specified, the URL will be signed using the newest active secret defined in the Looker instance.
     *
     * #### Security Note
     * Protect this signed URL as you would an access token or password credentials - do not write
     * it to disk, do not pass it to a third party, and only pass it through a secure HTTPS
     * encrypted transport.
     *
     * POST /embed/sso_url -> EmbedUrlResponse
     */
    func create_sso_embed_url(
        /**
         * @param {EmbedSsoParams} body
         */
        _ body: EmbedSsoParams,
        options: ITransportSettings? = nil
    ) -> SDKResponse<EmbedUrlResponse, SDKError> {
        let result: SDKResponse<EmbedUrlResponse, SDKError> = self.post("/embed/sso_url", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a theme
     *
     * Creates a new theme object, returning the theme details, including the created id.
     *
     * If `settings` are not specified, the default theme settings will be copied into the new theme.
     *
     * The theme `name` can only contain alphanumeric characters or underscores. Theme names should not contain any confidential information, such as customer names.
     *
     * **Update** an existing theme with [Update Theme](#!/Theme/update_theme)
     *
     * **Permanently delete** an existing theme with [Delete Theme](#!/Theme/delete_theme)
     *
     * For more information, see [Creating and Applying Themes](https://looker.com/docs/r/admin/themes).
     *
     * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.
     *
     * POST /themes -> Theme
     */
    func create_theme(
        /**
         * @param {WriteTheme} body
         */
        _ body: WriteTheme,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Theme, SDKError> {
        let result: SDKResponse<Theme, SDKError> = self.post("/themes", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a user with the specified information.
     *
     * POST /users -> User
     */
    func create_user(
        /**
         * @param {WriteUser} body
         */
        body: WriteUser?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<User, SDKError> {
        let result: SDKResponse<User, SDKError> = self.post("/users", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a new user attribute
     *
     * Permission information for a user attribute is conveyed through the `can` and `user_can_edit` fields.
     * The `user_can_edit` field indicates whether an attribute is user-editable _anywhere_ in the application.
     * The `can` field gives more granular access information, with the `set_value` child field indicating whether
     * an attribute's value can be set by [Setting the User Attribute User Value](#!/User/set_user_attribute_user_value).
     *
     * Note: `name` and `label` fields must be unique across all user attributes in the Looker instance.
     * Attempting to create a new user attribute with a name or label that duplicates an existing
     * user attribute will fail with a 422 error.
     *
     * POST /user_attributes -> UserAttribute
     */
    func create_user_attribute(
        /**
         * @param {WriteUserAttribute} body
         */
        _ body: WriteUserAttribute,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<UserAttribute, SDKError> {
        let result: SDKResponse<UserAttribute, SDKError> = self.post("/user_attributes", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     *
     * POST /users/{user_id}/credentials_api3 -> CredentialsApi3
     */
    func create_user_credentials_api3(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {CredentialsApi3} body
         */
        body: CredentialsApi3?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsApi3, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<CredentialsApi3, SDKError> = self.post("/users/\(path_user_id)/credentials_api3", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Email/password login information for the specified user.
     *
     * POST /users/{user_id}/credentials_email -> CredentialsEmail
     */
    func create_user_credentials_email(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {WriteCredentialsEmail} body
         */
        _ body: WriteCredentialsEmail,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsEmail, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<CredentialsEmail, SDKError> = self.post("/users/\(path_user_id)/credentials_email", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Create a password reset token.
     * This will create a cryptographically secure random password reset token for the user.
     * If the user already has a password reset token then this invalidates the old token and creates a new one.
     * The token is expressed as the 'password_reset_url' of the user's email/password credential object.
     * This takes an optional 'expires' param to indicate if the new token should be an expiring token.
     * Tokens that expire are typically used for self-service password resets for existing users.
     * Invitation emails for new users typically are not set to expire.
     * The expire period is always 60 minutes when expires is enabled.
     * This method can be called with an empty body.
     *
     * POST /users/{user_id}/credentials_email/password_reset -> CredentialsEmail
     */
    func create_user_credentials_email_password_reset(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Bool} expires Expiring token.
         */
        expires: Bool? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsEmail, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<CredentialsEmail, SDKError> = self.post("/users/\(path_user_id)/credentials_email/password_reset", 
            ["expires": expires as Any?, "fields": fields], nil, options)
        return result
    }

    /**
     * ### Two-factor login information for the specified user.
     *
     * POST /users/{user_id}/credentials_totp -> CredentialsTotp
     */
    func create_user_credentials_totp(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {CredentialsTotp} body
         */
        body: CredentialsTotp?,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsTotp, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<CredentialsTotp, SDKError> = self.post("/users/\(path_user_id)/credentials_totp", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Get the current status and content of custom welcome emails
     *
     * GET /custom_welcome_email -> CustomWelcomeEmail
     */
    func custom_welcome_email(
        options: ITransportSettings? = nil
    ) -> SDKResponse<CustomWelcomeEmail, SDKError> {
        let result: SDKResponse<CustomWelcomeEmail, SDKError> = self.get("/custom_welcome_email", nil, nil, options)
        return result
    }

    /**
     * ### Get information about a dashboard
     *
     * Returns the full details of the identified dashboard object
     *
     * Get a **summary list** of all active dashboards with [all_dashboards()](#!/Dashboard/all_dashboards)
     *
     * You can **Search** for dashboards with [search_dashboards()](#!/Dashboard/search_dashboards)
     *
     * GET /dashboards/{dashboard_id} -> Dashboard
     */
    func dashboard(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Dashboard, SDKError> {
        let path_dashboard_id = encodeParam(dashboard_id)
        let result: SDKResponse<Dashboard, SDKError> = self.get("/dashboards/\(path_dashboard_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get Aggregate Table LookML for Each Query on a Dahboard
     *
     * Returns a JSON object that contains the dashboard id and Aggregate Table lookml
     *
     * GET /dashboards/aggregate_table_lookml/{dashboard_id} -> DashboardAggregateTableLookml
     */
    func dashboard_aggregate_table_lookml(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardAggregateTableLookml, SDKError> {
        let path_dashboard_id = encodeParam(dashboard_id)
        let result: SDKResponse<DashboardAggregateTableLookml, SDKError> = self.get("/dashboards/aggregate_table_lookml/\(path_dashboard_id)", nil, nil, options)
        return result
    }

    /**
     * ### Get information about all the dashboard elements on a dashboard with a specific id.
     *
     * GET /dashboards/{dashboard_id}/dashboard_elements -> [DashboardElement]
     */
    func dashboard_dashboard_elements(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DashboardElement], SDKError> {
        let path_dashboard_id = encodeParam(dashboard_id)
        let result: SDKResponse<[DashboardElement], SDKError> = self.get("/dashboards/\(path_dashboard_id)/dashboard_elements", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all the dashboard filters on a dashboard with a specific id.
     *
     * GET /dashboards/{dashboard_id}/dashboard_filters -> [DashboardFilter]
     */
    func dashboard_dashboard_filters(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DashboardFilter], SDKError> {
        let path_dashboard_id = encodeParam(dashboard_id)
        let result: SDKResponse<[DashboardFilter], SDKError> = self.get("/dashboards/\(path_dashboard_id)/dashboard_filters", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all the dashboard elements on a dashboard with a specific id.
     *
     * GET /dashboards/{dashboard_id}/dashboard_layouts -> [DashboardLayout]
     */
    func dashboard_dashboard_layouts(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DashboardLayout], SDKError> {
        let path_dashboard_id = encodeParam(dashboard_id)
        let result: SDKResponse<[DashboardLayout], SDKError> = self.get("/dashboards/\(path_dashboard_id)/dashboard_layouts", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about the dashboard element with a specific id.
     *
     * GET /dashboard_elements/{dashboard_element_id} -> DashboardElement
     */
    func dashboard_element(
        /**
         * @param {String} dashboard_element_id Id of dashboard element
         */
        _ dashboard_element_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardElement, SDKError> {
        let path_dashboard_element_id = encodeParam(dashboard_element_id)
        let result: SDKResponse<DashboardElement, SDKError> = self.get("/dashboard_elements/\(path_dashboard_element_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about the dashboard filters with a specific id.
     *
     * GET /dashboard_filters/{dashboard_filter_id} -> DashboardFilter
     */
    func dashboard_filter(
        /**
         * @param {String} dashboard_filter_id Id of dashboard filters
         */
        _ dashboard_filter_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardFilter, SDKError> {
        let path_dashboard_filter_id = encodeParam(dashboard_filter_id)
        let result: SDKResponse<DashboardFilter, SDKError> = self.get("/dashboard_filters/\(path_dashboard_filter_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about the dashboard layouts with a specific id.
     *
     * GET /dashboard_layouts/{dashboard_layout_id} -> DashboardLayout
     */
    func dashboard_layout(
        /**
         * @param {String} dashboard_layout_id Id of dashboard layouts
         */
        _ dashboard_layout_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardLayout, SDKError> {
        let path_dashboard_layout_id = encodeParam(dashboard_layout_id)
        let result: SDKResponse<DashboardLayout, SDKError> = self.get("/dashboard_layouts/\(path_dashboard_layout_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about the dashboard elements with a specific id.
     *
     * GET /dashboard_layout_components/{dashboard_layout_component_id} -> DashboardLayoutComponent
     */
    func dashboard_layout_component(
        /**
         * @param {String} dashboard_layout_component_id Id of dashboard layout component
         */
        _ dashboard_layout_component_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardLayoutComponent, SDKError> {
        let path_dashboard_layout_component_id = encodeParam(dashboard_layout_component_id)
        let result: SDKResponse<DashboardLayoutComponent, SDKError> = self.get("/dashboard_layout_components/\(path_dashboard_layout_component_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all the dashboard layout components for a dashboard layout with a specific id.
     *
     * GET /dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components -> [DashboardLayoutComponent]
     */
    func dashboard_layout_dashboard_layout_components(
        /**
         * @param {String} dashboard_layout_id Id of dashboard layout component
         */
        _ dashboard_layout_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DashboardLayoutComponent], SDKError> {
        let path_dashboard_layout_id = encodeParam(dashboard_layout_id)
        let result: SDKResponse<[DashboardLayoutComponent], SDKError> = self.get("/dashboard_layouts/\(path_dashboard_layout_id)/dashboard_layout_components", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get lookml of a UDD
     *
     * Returns a JSON object that contains the dashboard id and the full lookml
     *
     * GET /dashboards/lookml/{dashboard_id} -> DashboardLookml
     */
    func dashboard_lookml(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardLookml, SDKError> {
        let path_dashboard_id = encodeParam(dashboard_id)
        let result: SDKResponse<DashboardLookml, SDKError> = self.get("/dashboards/lookml/\(path_dashboard_id)", nil, nil, options)
        return result
    }

    /**
     * ### Get information about a datagroup.
     *
     * GET /datagroups/{datagroup_id} -> Datagroup
     */
    func datagroup(
        /**
         * @param {Int64} datagroup_id ID of datagroup.
         */
        _ datagroup_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Datagroup, SDKError> {
        let path_datagroup_id = encodeParam(datagroup_id)
        let result: SDKResponse<Datagroup, SDKError> = self.get("/datagroups/\(path_datagroup_id)", nil, nil, options)
        return result
    }

    /**
     * ### Deactivate an app for a user
     *
     * Deactivate a user for a given oauth client app. All tokens issued to the app for
     * this user will be invalid immediately. Before the user can use the app with their
     * Looker account, the user will have to read and accept an account use disclosure statement for the app.
     *
     * Admin users can deactivate other users, but non-admin users can only deactivate themselves.
     *
     * As with most REST DELETE operations, this endpoint does not return an error if the indicated
     * resource (app or user) does not exist or has already been deactivated.
     *
     * DELETE /oauth_client_apps/{client_guid}/users/{user_id} -> String
     */
    func deactivate_app_user(
        /**
         * @param {String} client_guid The unique id of this application
         */
        _ client_guid: String,
        /**
         * @param {Int64} user_id The id of the user to enable use of this app
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_client_guid = encodeParam(client_guid)
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<String, SDKError> = self.delete("/oauth_client_apps/\(path_client_guid)/users/\(path_user_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get the default color collection
     *
     * Use this to retrieve the default Color Collection.
     *
     * Set the default color collection with [ColorCollection](#!/ColorCollection/set_default_color_collection)
     *
     * GET /color_collections/default -> ColorCollection
     */
    func default_color_collection(
        options: ITransportSettings? = nil
    ) -> SDKResponse<ColorCollection, SDKError> {
        let result: SDKResponse<ColorCollection, SDKError> = self.get("/color_collections/default", nil, nil, options)
        return result
    }

    /**
     * ### Get the default theme
     *
     * Returns the active theme object set as the default.
     *
     * The **default** theme name can be set in the UI on the Admin|Theme UI page
     *
     * The optional `ts` parameter can specify a different timestamp than "now." If specified, it returns the default theme at the time indicated.
     *
     * GET /themes/default -> Theme
     */
    func default_theme(
        /**
         * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
         */
        ts: Date? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Theme, SDKError> {
        let result: SDKResponse<Theme, SDKError> = self.get("/themes/default", 
            ["ts": ts as Any?], nil, options)
        return result
    }

    /**
     * ### Delete a board.
     *
     * DELETE /boards/{board_id} -> String
     */
    func delete_board(
        /**
         * @param {Int64} board_id Id of board
         */
        _ board_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_board_id = encodeParam(board_id)
        let result: SDKResponse<String, SDKError> = self.delete("/boards/\(path_board_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a board item.
     *
     * DELETE /board_items/{board_item_id} -> String
     */
    func delete_board_item(
        /**
         * @param {Int64} board_item_id Id of board_item
         */
        _ board_item_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_board_item_id = encodeParam(board_item_id)
        let result: SDKResponse<String, SDKError> = self.delete("/board_items/\(path_board_item_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a board section.
     *
     * DELETE /board_sections/{board_section_id} -> String
     */
    func delete_board_section(
        /**
         * @param {Int64} board_section_id Id of board section
         */
        _ board_section_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_board_section_id = encodeParam(board_section_id)
        let result: SDKResponse<String, SDKError> = self.delete("/board_sections/\(path_board_section_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a custom color collection by id
     *
     * This operation permanently deletes the identified **Custom** color collection.
     *
     * **Standard** color collections cannot be deleted
     *
     * Because multiple color collections can have the same label, they must be deleted by ID, not name.
     * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.
     *
     * DELETE /color_collections/{collection_id} -> String
     */
    func delete_color_collection(
        /**
         * @param {String} collection_id Id of Color Collection
         */
        _ collection_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_collection_id = encodeParam(collection_id)
        let result: SDKResponse<String, SDKError> = self.delete("/color_collections/\(path_collection_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete an existing custom command.
     *
     * DELETE /commands/{command_id} -> Voidable
     */
    func delete_command(
        /**
         * @param {Int64} command_id ID of a command
         */
        _ command_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Voidable, SDKError> {
        let path_command_id = encodeParam(command_id)
        let result: SDKResponse<Voidable, SDKError> = self.delete("/commands/\(path_command_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a connection.
     *
     * DELETE /connections/{connection_name} -> String
     */
    func delete_connection(
        /**
         * @param {String} connection_name Name of connection
         */
        _ connection_name: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_connection_name = encodeParam(connection_name)
        let result: SDKResponse<String, SDKError> = self.delete("/connections/\(path_connection_name)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a connection override.
     *
     * DELETE /connections/{connection_name}/connection_override/{override_context} -> String
     */
    func delete_connection_override(
        /**
         * @param {String} connection_name Name of connection
         */
        _ connection_name: String,
        /**
         * @param {String} override_context Context of connection override
         */
        _ override_context: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_connection_name = encodeParam(connection_name)
        let path_override_context = encodeParam(override_context)
        let result: SDKResponse<String, SDKError> = self.delete("/connections/\(path_connection_name)/connection_override/\(path_override_context)", nil, nil, options)
        return result
    }

    /**
     * ### Delete favorite content
     *
     * DELETE /content_favorite/{content_favorite_id} -> String
     */
    func delete_content_favorite(
        /**
         * @param {Int64} content_favorite_id Id of favorite content
         */
        _ content_favorite_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_content_favorite_id = encodeParam(content_favorite_id)
        let result: SDKResponse<String, SDKError> = self.delete("/content_favorite/\(path_content_favorite_id)", nil, nil, options)
        return result
    }

    /**
     * ### Remove content metadata access.
     *
     * DELETE /content_metadata_access/{content_metadata_access_id} -> String
     */
    func delete_content_metadata_access(
        /**
         * @param {Int64} content_metadata_access_id Id of content metadata access
         */
        _ content_metadata_access_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_content_metadata_access_id = encodeParam(content_metadata_access_id)
        let result: SDKResponse<String, SDKError> = self.delete("/content_metadata_access/\(path_content_metadata_access_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete the dashboard with the specified id
     *
     * Permanently **deletes** a dashboard. (The dashboard cannot be recovered after this operation.)
     *
     * "Soft" delete or hide a dashboard by setting its `deleted` status to `True` with [update_dashboard()](#!/Dashboard/update_dashboard).
     *
     * Note: When a dashboard is deleted in the UI, it is soft deleted. Use this API call to permanently remove it, if desired.
     *
     * DELETE /dashboards/{dashboard_id} -> String
     */
    func delete_dashboard(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_dashboard_id = encodeParam(dashboard_id)
        let result: SDKResponse<String, SDKError> = self.delete("/dashboards/\(path_dashboard_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a dashboard element with a specific id.
     *
     * DELETE /dashboard_elements/{dashboard_element_id} -> String
     */
    func delete_dashboard_element(
        /**
         * @param {String} dashboard_element_id Id of dashboard element
         */
        _ dashboard_element_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_dashboard_element_id = encodeParam(dashboard_element_id)
        let result: SDKResponse<String, SDKError> = self.delete("/dashboard_elements/\(path_dashboard_element_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a dashboard filter with a specific id.
     *
     * DELETE /dashboard_filters/{dashboard_filter_id} -> String
     */
    func delete_dashboard_filter(
        /**
         * @param {String} dashboard_filter_id Id of dashboard filter
         */
        _ dashboard_filter_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_dashboard_filter_id = encodeParam(dashboard_filter_id)
        let result: SDKResponse<String, SDKError> = self.delete("/dashboard_filters/\(path_dashboard_filter_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a dashboard layout with a specific id.
     *
     * DELETE /dashboard_layouts/{dashboard_layout_id} -> String
     */
    func delete_dashboard_layout(
        /**
         * @param {String} dashboard_layout_id Id of dashboard layout
         */
        _ dashboard_layout_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_dashboard_layout_id = encodeParam(dashboard_layout_id)
        let result: SDKResponse<String, SDKError> = self.delete("/dashboard_layouts/\(path_dashboard_layout_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete the folder with a specific id including any children folders.
     * **DANGER** this will delete all looks and dashboards in the folder.
     *
     * DELETE /folders/{folder_id} -> String
     */
    func delete_folder(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_folder_id = encodeParam(folder_id)
        let result: SDKResponse<String, SDKError> = self.delete("/folders/\(path_folder_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete the specified Git Branch
     *
     * Delete git branch specified in branch_name path param from local and remote of specified project repository
     *
     * DELETE /projects/{project_id}/git_branch/{branch_name} -> String
     */
    func delete_git_branch(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} branch_name Branch Name
         */
        _ branch_name: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_project_id = encodeParam(project_id)
        let path_branch_name = encodeParam(branch_name)
        let result: SDKResponse<String, SDKError> = self.delete("/projects/\(path_project_id)/git_branch/\(path_branch_name)", nil, nil, options)
        return result
    }

    /**
     * ### Deletes a group (admin only).
     *
     * DELETE /groups/{group_id} -> String
     */
    func delete_group(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_group_id = encodeParam(group_id)
        let result: SDKResponse<String, SDKError> = self.delete("/groups/\(path_group_id)", nil, nil, options)
        return result
    }

    /**
     * ### Removes a group from a group.
     *
     * DELETE /groups/{group_id}/groups/{deleting_group_id} -> Voidable
     */
    func delete_group_from_group(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {Int64} deleting_group_id Id of group to delete
         */
        _ deleting_group_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Voidable, SDKError> {
        let path_group_id = encodeParam(group_id)
        let path_deleting_group_id = encodeParam(deleting_group_id)
        let result: SDKResponse<Voidable, SDKError> = self.delete("/groups/\(path_group_id)/groups/\(path_deleting_group_id)", nil, nil, options)
        return result
    }

    /**
     * ### Removes a user from a group.
     *
     * DELETE /groups/{group_id}/users/{user_id} -> Voidable
     */
    func delete_group_user(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {Int64} user_id Id of user to remove from group
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Voidable, SDKError> {
        let path_group_id = encodeParam(group_id)
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<Voidable, SDKError> = self.delete("/groups/\(path_group_id)/users/\(path_user_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a Integration Hub.
     *
     * DELETE /integration_hubs/{integration_hub_id} -> String
     */
    func delete_integration_hub(
        /**
         * @param {Int64} integration_hub_id Id of integration_hub
         */
        _ integration_hub_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_integration_hub_id = encodeParam(integration_hub_id)
        let result: SDKResponse<String, SDKError> = self.delete("/integration_hubs/\(path_integration_hub_id)", nil, nil, options)
        return result
    }

    /**
     * ### Permanently Delete a Look
     *
     * This operation **permanently** removes a look from the Looker database.
     *
     * NOTE: There is no "undo" for this kind of delete.
     *
     * For information about soft-delete (which can be undone) see [update_look()](#!/Look/update_look).
     *
     * DELETE /looks/{look_id} -> String
     */
    func delete_look(
        /**
         * @param {Int64} look_id Id of look
         */
        _ look_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_look_id = encodeParam(look_id)
        let result: SDKResponse<String, SDKError> = self.delete("/looks/\(path_look_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a lookml model.
     *
     * DELETE /lookml_models/{lookml_model_name} -> String
     */
    func delete_lookml_model(
        /**
         * @param {String} lookml_model_name Name of lookml model.
         */
        _ lookml_model_name: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_lookml_model_name = encodeParam(lookml_model_name)
        let result: SDKResponse<String, SDKError> = self.delete("/lookml_models/\(path_lookml_model_name)", nil, nil, options)
        return result
    }

    /**
     * ### Delete the model set with a specific id.
     *
     * DELETE /model_sets/{model_set_id} -> String
     */
    func delete_model_set(
        /**
         * @param {Int64} model_set_id id of model set
         */
        _ model_set_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_model_set_id = encodeParam(model_set_id)
        let result: SDKResponse<String, SDKError> = self.delete("/model_sets/\(path_model_set_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete OAuth Client App
     *
     * Deletes the registration info of the app with the matching client_guid.
     * All active sessions and tokens issued for this app will immediately become invalid.
     *
     * ### Note: this deletion cannot be undone.
     *
     * DELETE /oauth_client_apps/{client_guid} -> String
     */
    func delete_oauth_client_app(
        /**
         * @param {String} client_guid The unique id of this application
         */
        _ client_guid: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_client_guid = encodeParam(client_guid)
        let result: SDKResponse<String, SDKError> = self.delete("/oauth_client_apps/\(path_client_guid)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a OIDC test configuration.
     *
     * DELETE /oidc_test_configs/{test_slug} -> String
     */
    func delete_oidc_test_config(
        /**
         * @param {String} test_slug Slug of test config
         */
        _ test_slug: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_test_slug = encodeParam(test_slug)
        let result: SDKResponse<String, SDKError> = self.delete("/oidc_test_configs/\(path_test_slug)", nil, nil, options)
        return result
    }

    /**
     * ### Delete the permission set with a specific id.
     *
     * DELETE /permission_sets/{permission_set_id} -> String
     */
    func delete_permission_set(
        /**
         * @param {Int64} permission_set_id Id of permission set
         */
        _ permission_set_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_permission_set_id = encodeParam(permission_set_id)
        let result: SDKResponse<String, SDKError> = self.delete("/permission_sets/\(path_permission_set_id)", nil, nil, options)
        return result
    }

    /**
     * ### Repository Credential for a remote dependency
     *
     * Admin required.
     *
     * `root_project_id` is required.
     * `credential_id` is required.
     *
     * DELETE /projects/{root_project_id}/credential/{credential_id} -> String
     */
    func delete_repository_credential(
        /**
         * @param {String} root_project_id Root Project Id
         */
        _ root_project_id: String,
        /**
         * @param {String} credential_id Credential Id
         */
        _ credential_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_root_project_id = encodeParam(root_project_id)
        let path_credential_id = encodeParam(credential_id)
        let result: SDKResponse<String, SDKError> = self.delete("/projects/\(path_root_project_id)/credential/\(path_credential_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete the role with a specific id.
     *
     * DELETE /roles/{role_id} -> String
     */
    func delete_role(
        /**
         * @param {Int64} role_id id of role
         */
        _ role_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_role_id = encodeParam(role_id)
        let result: SDKResponse<String, SDKError> = self.delete("/roles/\(path_role_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a SAML test configuration.
     *
     * DELETE /saml_test_configs/{test_slug} -> String
     */
    func delete_saml_test_config(
        /**
         * @param {String} test_slug Slug of test config
         */
        _ test_slug: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_test_slug = encodeParam(test_slug)
        let result: SDKResponse<String, SDKError> = self.delete("/saml_test_configs/\(path_test_slug)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a Scheduled Plan
     *
     * Normal users can only delete their own scheduled plans.
     * Admins can delete other users' scheduled plans.
     * This delete cannot be undone.
     *
     * DELETE /scheduled_plans/{scheduled_plan_id} -> String
     */
    func delete_scheduled_plan(
        /**
         * @param {Int64} scheduled_plan_id Scheduled Plan Id
         */
        _ scheduled_plan_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_scheduled_plan_id = encodeParam(scheduled_plan_id)
        let result: SDKResponse<String, SDKError> = self.delete("/scheduled_plans/\(path_scheduled_plan_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a specific theme by id
     *
     * This operation permanently deletes the identified theme from the database.
     *
     * Because multiple themes can have the same name (with different activation time spans) themes can only be deleted by ID.
     *
     * All IDs associated with a theme name can be retrieved by searching for the theme name with [Theme Search](#!/Theme/search).
     *
     * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.
     *
     * DELETE /themes/{theme_id} -> String
     */
    func delete_theme(
        /**
         * @param {String} theme_id Id of theme
         */
        _ theme_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_theme_id = encodeParam(theme_id)
        let result: SDKResponse<String, SDKError> = self.delete("/themes/\(path_theme_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete the user with a specific id.
     *
     * **DANGER** this will delete the user and all looks and other information owned by the user.
     *
     * DELETE /users/{user_id} -> String
     */
    func delete_user(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(path_user_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a user attribute (admin only).
     *
     * DELETE /user_attributes/{user_attribute_id} -> String
     */
    func delete_user_attribute(
        /**
         * @param {Int64} user_attribute_id Id of user_attribute
         */
        _ user_attribute_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_user_attribute_id = encodeParam(user_attribute_id)
        let result: SDKResponse<String, SDKError> = self.delete("/user_attributes/\(path_user_attribute_id)", nil, nil, options)
        return result
    }

    /**
     * ### Remove a user attribute value from a group.
     *
     * DELETE /groups/{group_id}/attribute_values/{user_attribute_id} -> Voidable
     */
    func delete_user_attribute_group_value(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Voidable, SDKError> {
        let path_group_id = encodeParam(group_id)
        let path_user_attribute_id = encodeParam(user_attribute_id)
        let result: SDKResponse<Voidable, SDKError> = self.delete("/groups/\(path_group_id)/attribute_values/\(path_user_attribute_id)", nil, nil, options)
        return result
    }

    /**
     * ### Delete a user attribute value from a user's account settings.
     *
     * After the user attribute value is deleted from the user's account settings, subsequent requests
     * for the user attribute value for this user will draw from the user's groups or the default
     * value of the user attribute. See [Get User Attribute Values](#!/User/user_attribute_user_values) for more
     * information about how user attribute values are resolved.
     *
     * DELETE /users/{user_id}/attribute_values/{user_attribute_id} -> Voidable
     */
    func delete_user_attribute_user_value(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Voidable, SDKError> {
        let path_user_id = encodeParam(user_id)
        let path_user_attribute_id = encodeParam(user_attribute_id)
        let result: SDKResponse<Voidable, SDKError> = self.delete("/users/\(path_user_id)/attribute_values/\(path_user_attribute_id)", nil, nil, options)
        return result
    }

    /**
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     *
     * DELETE /users/{user_id}/credentials_api3/{credentials_api3_id} -> String
     */
    func delete_user_credentials_api3(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} credentials_api3_id id of API 3 Credential
         */
        _ credentials_api3_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_user_id = encodeParam(user_id)
        let path_credentials_api3_id = encodeParam(credentials_api3_id)
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(path_user_id)/credentials_api3/\(path_credentials_api3_id)", nil, nil, options)
        return result
    }

    /**
     * ### Email/password login information for the specified user.
     *
     * DELETE /users/{user_id}/credentials_email -> String
     */
    func delete_user_credentials_email(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(path_user_id)/credentials_email", nil, nil, options)
        return result
    }

    /**
     * ### Embed login information for the specified user.
     *
     * DELETE /users/{user_id}/credentials_embed/{credentials_embed_id} -> String
     */
    func delete_user_credentials_embed(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} credentials_embed_id id of Embedding Credential
         */
        _ credentials_embed_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_user_id = encodeParam(user_id)
        let path_credentials_embed_id = encodeParam(credentials_embed_id)
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(path_user_id)/credentials_embed/\(path_credentials_embed_id)", nil, nil, options)
        return result
    }

    /**
     * ### Google authentication login information for the specified user.
     *
     * DELETE /users/{user_id}/credentials_google -> String
     */
    func delete_user_credentials_google(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(path_user_id)/credentials_google", nil, nil, options)
        return result
    }

    /**
     * ### LDAP login information for the specified user.
     *
     * DELETE /users/{user_id}/credentials_ldap -> String
     */
    func delete_user_credentials_ldap(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(path_user_id)/credentials_ldap", nil, nil, options)
        return result
    }

    /**
     * ### Looker Openid login information for the specified user. Used by Looker Analysts.
     *
     * DELETE /users/{user_id}/credentials_looker_openid -> String
     */
    func delete_user_credentials_looker_openid(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(path_user_id)/credentials_looker_openid", nil, nil, options)
        return result
    }

    /**
     * ### OpenID Connect (OIDC) authentication login information for the specified user.
     *
     * DELETE /users/{user_id}/credentials_oidc -> String
     */
    func delete_user_credentials_oidc(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(path_user_id)/credentials_oidc", nil, nil, options)
        return result
    }

    /**
     * ### Saml authentication login information for the specified user.
     *
     * DELETE /users/{user_id}/credentials_saml -> String
     */
    func delete_user_credentials_saml(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(path_user_id)/credentials_saml", nil, nil, options)
        return result
    }

    /**
     * ### Two-factor login information for the specified user.
     *
     * DELETE /users/{user_id}/credentials_totp -> String
     */
    func delete_user_credentials_totp(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(path_user_id)/credentials_totp", nil, nil, options)
        return result
    }

    /**
     * ### Removes login lockout for the associated user.
     *
     * DELETE /user_login_lockout/{key} -> String
     */
    func delete_user_login_lockout(
        /**
         * @param {String} key The key associated with the locked user
         */
        _ key: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_key = encodeParam(key)
        let result: SDKResponse<String, SDKError> = self.delete("/user_login_lockout/\(path_key)", nil, nil, options)
        return result
    }

    /**
     * ### Web login session for the specified user.
     *
     * DELETE /users/{user_id}/sessions/{session_id} -> String
     */
    func delete_user_session(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} session_id id of Web Login Session
         */
        _ session_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_user_id = encodeParam(user_id)
        let path_session_id = encodeParam(session_id)
        let result: SDKResponse<String, SDKError> = self.delete("/users/\(path_user_id)/sessions/\(path_session_id)", nil, nil, options)
        return result
    }

    /**
     * ### Deploy LookML from this Development Mode Project to Production
     *
     * Git must have been configured, must be in dev mode and deploy permission required
     *
     * Deploy is a two / three step process:
     *
     * 1. Push commits in current branch of dev mode project to the production branch (origin/master).
     *    Note a. This step is skipped in read-only projects.
     *    Note b. If this step is unsuccessful for any reason (e.g. rejected non-fastforward because production branch has
     *              commits not in current branch), subsequent steps will be skipped.
     * 2. If this is the first deploy of this project, create the production project with git repository.
     * 3. Pull the production branch into the production project.
     *
     * POST /projects/{project_id}/deploy_to_production -> String
     */
    func deploy_to_production(
        /**
         * @param {String} project_id Id of project
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<String, SDKError> = self.post("/projects/\(path_project_id)/deploy_to_production", nil, nil, options)
        return result
    }

    /**
     * ### Retrieve the value for whether or not digest emails is enabled
     *
     * GET /digest_emails_enabled -> DigestEmails
     */
    func digest_emails_enabled(
        options: ITransportSettings? = nil
    ) -> SDKResponse<DigestEmails, SDKError> {
        let result: SDKResponse<DigestEmails, SDKError> = self.get("/digest_emails_enabled", nil, nil, options)
        return result
    }

    /**
     * ### Fetch the given url and parse it as a SAML IdP metadata document and return the result.
     * Note that this requires that the url be public or at least at a location where the Looker instance
     * can fetch it without requiring any special authentication.
     *
     * POST /fetch_and_parse_saml_idp_metadata -> SamlMetadataParseResult
     */
    func fetch_and_parse_saml_idp_metadata(
        /**
         * @param {String} body
         */
        _ body: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SamlMetadataParseResult, SDKError> {
        let result: SDKResponse<SamlMetadataParseResult, SDKError> = self.post("/fetch_and_parse_saml_idp_metadata", nil, try! self.encode(body), options)
        return result
    }

    /**
     * Returns the Integration form for presentation to the user.
     *
     * POST /integrations/{integration_id}/form -> DataActionForm
     */
    func fetch_integration_form(
        /**
         * @param {String} integration_id Id of integration
         */
        _ integration_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DataActionForm, SDKError> {
        let path_integration_id = encodeParam(integration_id)
        let result: SDKResponse<DataActionForm, SDKError> = self.post("/integrations/\(path_integration_id)/form", nil, nil, options)
        return result
    }

    /**
     * For some data actions, the remote server may supply a form requesting further user input. This endpoint takes a data action, asks the remote server to generate a form for it, and returns that form to you for presentation to the user.
     *
     * POST /data_actions/form -> DataActionForm
     */
    func fetch_remote_data_action_form(
        /**
         * @param {StringDictionary<AnyCodable>} body
         */
        _ body: StringDictionary<AnyCodable>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DataActionForm, SDKError> {
        let result: SDKResponse<DataActionForm, SDKError> = self.post("/data_actions/form", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Get the specified Git Branch
     *
     * Returns the git branch specified in branch_name path param if it exists in the given project repository
     *
     * GET /projects/{project_id}/git_branch/{branch_name} -> GitBranch
     */
    func find_git_branch(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} branch_name Branch Name
         */
        _ branch_name: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<GitBranch, SDKError> {
        let path_project_id = encodeParam(project_id)
        let path_branch_name = encodeParam(branch_name)
        let result: SDKResponse<GitBranch, SDKError> = self.get("/projects/\(path_project_id)/git_branch/\(path_branch_name)", nil, nil, options)
        return result
    }

    /**
     * ### Get information about the folder with a specific id.
     *
     * GET /folders/{folder_id} -> Folder
     */
    func folder(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Folder, SDKError> {
        let path_folder_id = encodeParam(folder_id)
        let result: SDKResponse<Folder, SDKError> = self.get("/folders/\(path_folder_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get the ancestors of a folder
     *
     * GET /folders/{folder_id}/ancestors -> [Folder]
     */
    func folder_ancestors(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Folder], SDKError> {
        let path_folder_id = encodeParam(folder_id)
        let result: SDKResponse<[Folder], SDKError> = self.get("/folders/\(path_folder_id)/ancestors", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get the children of a folder.
     *
     * GET /folders/{folder_id}/children -> [Folder]
     */
    func folder_children(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Folder], SDKError> {
        let path_folder_id = encodeParam(folder_id)
        let result: SDKResponse<[Folder], SDKError> = self.get("/folders/\(path_folder_id)/children", 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts], nil, options)
        return result
    }

    /**
     * ### Search the children of a folder
     *
     * GET /folders/{folder_id}/children/search -> [Folder]
     */
    func folder_children_search(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} name Match folder name.
         */
        name: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Folder], SDKError> {
        let path_folder_id = encodeParam(folder_id)
        let result: SDKResponse<[Folder], SDKError> = self.get("/folders/\(path_folder_id)/children/search", 
            ["fields": fields, "sorts": sorts, "name": name], nil, options)
        return result
    }

    /**
     * ### Get the dashboards in a folder
     *
     * GET /folders/{folder_id}/dashboards -> [Dashboard]
     */
    func folder_dashboards(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Dashboard], SDKError> {
        let path_folder_id = encodeParam(folder_id)
        let result: SDKResponse<[Dashboard], SDKError> = self.get("/folders/\(path_folder_id)/dashboards", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get the looks in a folder
     *
     * GET /folders/{folder_id}/looks -> [LookWithQuery]
     */
    func folder_looks(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LookWithQuery], SDKError> {
        let path_folder_id = encodeParam(folder_id)
        let result: SDKResponse<[LookWithQuery], SDKError> = self.get("/folders/\(path_folder_id)/looks", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get the parent of a folder
     *
     * GET /folders/{folder_id}/parent -> Folder
     */
    func folder_parent(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Folder, SDKError> {
        let path_folder_id = encodeParam(folder_id)
        let result: SDKResponse<Folder, SDKError> = self.get("/folders/\(path_folder_id)/parent", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Force all credentials_email users to reset their login passwords upon their next login.
     *
     * PUT /password_config/force_password_reset_at_next_login_for_all_users -> String
     */
    func force_password_reset_at_next_login_for_all_users(
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.put("/password_config/force_password_reset_at_next_login_for_all_users", nil, nil, options)
        return result
    }

    /**
     * ### Get All Commands.
     *
     * GET /commands -> [Command]
     */
    func get_all_commands(
        /**
         * @param {String} content_id Id of the associated content. This must be accompanied with content_type.
         */
        content_id: String? = nil,
        /**
         * @param {String} content_type Type of the associated content. This must be accompanied with content_id.
         */
        content_type: String? = nil,
        /**
         * @param {Int64} limit Number of results to return.
         */
        limit: Int64? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Command], SDKError> {
        let result: SDKResponse<[Command], SDKError> = self.get("/commands", 
            ["content_id": content_id, "content_type": content_type, "limit": limit], nil, options)
        return result
    }

    /**
     * ### Get all Repository Credentials for a project
     *
     * `root_project_id` is required.
     *
     * GET /projects/{root_project_id}/credentials -> [RepositoryCredential]
     */
    func get_all_repository_credentials(
        /**
         * @param {String} root_project_id Root Project Id
         */
        _ root_project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[RepositoryCredential], SDKError> {
        let path_root_project_id = encodeParam(root_project_id)
        let result: SDKResponse<[RepositoryCredential], SDKError> = self.get("/projects/\(path_root_project_id)/credentials", nil, nil, options)
        return result
    }

    /**
     * ### Get the Current Git Branch
     *
     * Returns the git branch currently checked out in the given project repository
     *
     * GET /projects/{project_id}/git_branch -> GitBranch
     */
    func git_branch(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<GitBranch, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<GitBranch, SDKError> = self.get("/projects/\(path_project_id)/git_branch", nil, nil, options)
        return result
    }

    /**
     * ### Git Deploy Key
     *
     * Returns the ssh public key previously created for a project's git repository.
     *
     * GET /projects/{project_id}/git/deploy_key -> String
     */
    func git_deploy_key(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<String, SDKError> = self.get("/projects/\(path_project_id)/git/deploy_key", nil, nil, options)
        return result
    }

    /**
     * ### Get information about a group.
     *
     * GET /groups/{group_id} -> LkGroup
     */
    func group(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LkGroup, SDKError> {
        let path_group_id = encodeParam(group_id)
        let result: SDKResponse<LkGroup, SDKError> = self.get("/groups/\(path_group_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Import a LookML dashboard to a space as a UDD
     * Creates a UDD (a dashboard which exists in the Looker database rather than as a LookML file) from the LookML dashboard
     * and puts it in the space specified. The created UDD will have a lookml_link_id which links to the original LookML dashboard.
     *
     * To give the imported dashboard specify a (e.g. title: "my title") in the body of your request, otherwise the imported
     * dashboard will have the same title as the original LookML dashboard.
     *
     * For this operation to succeed the user must have permission to see the LookML dashboard in question, and have permission to
     * create content in the space the dashboard is being imported to.
     *
     * **Sync** a linked UDD with [sync_lookml_dashboard()](#!/Dashboard/sync_lookml_dashboard)
     * **Unlink** a linked UDD by setting lookml_link_id to null with [update_dashboard()](#!/Dashboard/update_dashboard)
     *
     * POST /dashboards/{lookml_dashboard_id}/import/{space_id} -> Dashboard
     */
    func import_lookml_dashboard(
        /**
         * @param {String} lookml_dashboard_id Id of LookML dashboard
         */
        _ lookml_dashboard_id: String,
        /**
         * @param {String} space_id Id of space to import the dashboard to
         */
        _ space_id: String,
        /**
         * @param {WriteDashboard} body
         */
        body: WriteDashboard?,
        /**
         * @param {Bool} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
         */
        raw_locale: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Dashboard, SDKError> {
        let path_lookml_dashboard_id = encodeParam(lookml_dashboard_id)
        let path_space_id = encodeParam(space_id)
        let result: SDKResponse<Dashboard, SDKError> = self.post("/dashboards/\(path_lookml_dashboard_id)/import/\(path_space_id)", 
            ["raw_locale": raw_locale as Any?], try! self.encode(body), options)
        return result
    }

    /**
     * ### Get information about a Integration.
     *
     * GET /integrations/{integration_id} -> Integration
     */
    func integration(
        /**
         * @param {String} integration_id Id of integration
         */
        _ integration_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Integration, SDKError> {
        let path_integration_id = encodeParam(integration_id)
        let result: SDKResponse<Integration, SDKError> = self.get("/integrations/\(path_integration_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about a Integration Hub.
     *
     * GET /integration_hubs/{integration_hub_id} -> IntegrationHub
     */
    func integration_hub(
        /**
         * @param {Int64} integration_hub_id Id of Integration Hub
         */
        _ integration_hub_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<IntegrationHub, SDKError> {
        let path_integration_hub_id = encodeParam(integration_hub_id)
        let result: SDKResponse<IntegrationHub, SDKError> = self.get("/integration_hubs/\(path_integration_hub_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get and set the options for internal help resources
     *
     * GET /internal_help_resources_enabled -> InternalHelpResources
     */
    func internal_help_resources(
        options: ITransportSettings? = nil
    ) -> SDKResponse<InternalHelpResources, SDKError> {
        let result: SDKResponse<InternalHelpResources, SDKError> = self.get("/internal_help_resources_enabled", nil, nil, options)
        return result
    }

    /**
     * ### Set the menu item name and content for internal help resources
     *
     * GET /internal_help_resources_content -> InternalHelpResourcesContent
     */
    func internal_help_resources_content(
        options: ITransportSettings? = nil
    ) -> SDKResponse<InternalHelpResourcesContent, SDKError> {
        let result: SDKResponse<InternalHelpResourcesContent, SDKError> = self.get("/internal_help_resources_content", nil, nil, options)
        return result
    }

    /**
     * ### Invalidate All Issued Tokens
     *
     * Immediately invalidates all auth codes, sessions, access tokens and refresh tokens issued for
     * this app for ALL USERS of this app.
     *
     * DELETE /oauth_client_apps/{client_guid}/tokens -> String
     */
    func invalidate_tokens(
        /**
         * @param {String} client_guid The unique id of the application
         */
        _ client_guid: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_client_guid = encodeParam(client_guid)
        let result: SDKResponse<String, SDKError> = self.delete("/oauth_client_apps/\(path_client_guid)/tokens", nil, nil, options)
        return result
    }

    /**
     * Kill a query with a specific query_task_id.
     *
     * DELETE /running_queries/{query_task_id} -> String
     */
    func kill_query(
        /**
         * @param {String} query_task_id Query task id.
         */
        _ query_task_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_query_task_id = encodeParam(query_task_id)
        let result: SDKResponse<String, SDKError> = self.delete("/running_queries/\(path_query_task_id)", nil, nil, options)
        return result
    }

    /**
     * ### Get the LDAP configuration.
     *
     * Looker can be optionally configured to authenticate users against an Active Directory or other LDAP directory server.
     * LDAP setup requires coordination with an administrator of that directory server.
     *
     * Only Looker administrators can read and update the LDAP configuration.
     *
     * Configuring LDAP impacts authentication for all users. This configuration should be done carefully.
     *
     * Looker maintains a single LDAP configuration. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).
     *
     * LDAP is enabled or disabled for Looker using the **enabled** field.
     *
     * Looker will never return an **auth_password** field. That value can be set, but never retrieved.
     *
     * See the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup) for additional information.
     *
     * GET /ldap_config -> LDAPConfig
     */
    func ldap_config(
        options: ITransportSettings? = nil
    ) -> SDKResponse<LDAPConfig, SDKError> {
        let result: SDKResponse<LDAPConfig, SDKError> = self.get("/ldap_config", nil, nil, options)
        return result
    }

    /**
     * ### Get information about the legacy feature with a specific id.
     *
     * GET /legacy_features/{legacy_feature_id} -> LegacyFeature
     */
    func legacy_feature(
        /**
         * @param {String} legacy_feature_id id of legacy feature
         */
        _ legacy_feature_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LegacyFeature, SDKError> {
        let path_legacy_feature_id = encodeParam(legacy_feature_id)
        let result: SDKResponse<LegacyFeature, SDKError> = self.get("/legacy_features/\(path_legacy_feature_id)", nil, nil, options)
        return result
    }

    /**
     * ### Generate Lockfile for All LookML Dependencies
     *
     *       Git must have been configured, must be in dev mode and deploy permission required
     *
     *       Install_all is a two step process
     *       1. For each remote_dependency in a project the dependency manager will resolve any ambiguous ref.
     *       2. The project will then write out a lockfile including each remote_dependency with its resolved ref.
     *
     * POST /projects/{project_id}/manifest/lock_all -> String
     */
    func lock_all(
        /**
         * @param {String} project_id Id of project
         */
        _ project_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<String, SDKError> = self.post("/projects/\(path_project_id)/manifest/lock_all", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Present client credentials to obtain an authorization token
     *
     * Looker API implements the OAuth2 [Resource Owner Password Credentials Grant](https://looker.com/docs/r/api/outh2_resource_owner_pc) pattern.
     * The client credentials required for this login must be obtained by creating an API3 key on a user account
     * in the Looker Admin console. The API3 key consists of a public `client_id` and a private `client_secret`.
     *
     * The access token returned by `login` must be used in the HTTP Authorization header of subsequent
     * API requests, like this:
     * ```
     * Authorization: token 4QDkCyCtZzYgj4C2p2cj3csJH7zqS5RzKs2kTnG4
     * ```
     * Replace "4QDkCy..." with the `access_token` value returned by `login`.
     * The word `token` is a string literal and must be included exactly as shown.
     *
     * This function can accept `client_id` and `client_secret` parameters as URL query params or as www-form-urlencoded params in the body of the HTTP request. Since there is a small risk that URL parameters may be visible to intermediate nodes on the network route (proxies, routers, etc), passing credentials in the body of the request is considered more secure than URL params.
     *
     * Example of passing credentials in the HTTP request body:
     * ````
     * POST HTTP /login
     * Content-Type: application/x-www-form-urlencoded
     *
     * client_id=CGc9B7v7J48dQSJvxxx&client_secret=nNVS9cSS3xNpSC9JdsBvvvvv
     * ````
     *
     * ### Best Practice:
     * Always pass credentials in body params. Pass credentials in URL query params **only** when you cannot pass body params due to application, tool, or other limitations.
     *
     * For more information and detailed examples of Looker API authorization, see [How to Authenticate to Looker API3](https://github.com/looker/looker-sdk-ruby/blob/master/authentication.md).
     *
     * POST /login -> AccessToken
     */
    func login(
        /**
         * @param {String} client_id client_id part of API3 Key.
         */
        client_id: String? = nil,
        /**
         * @param {String} client_secret client_secret part of API3 Key.
         */
        client_secret: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<AccessToken, SDKError> {
        let result: SDKResponse<AccessToken, SDKError> = self.post("/login", 
            ["client_id": client_id, "client_secret": client_secret], nil, options)
        return result
    }

    /**
     * ### Create an access token that runs as a given user.
     *
     * This can only be called by an authenticated admin user. It allows that admin to generate a new
     * authentication token for the user with the given user id. That token can then be used for subsequent
     * API calls - which are then performed *as* that target user.
     *
     * The target user does *not* need to have a pre-existing API client_id/client_secret pair. And, no such
     * credentials are created by this call.
     *
     * This allows for building systems where api user authentication for an arbitrary number of users is done
     * outside of Looker and funneled through a single 'service account' with admin permissions. Note that a
     * new access token is generated on each call. If target users are going to be making numerous API
     * calls in a short period then it is wise to cache this authentication token rather than call this before
     * each of those API calls.
     *
     * See 'login' for more detail on the access token and how to use it.
     *
     * POST /login/{user_id} -> AccessToken
     */
    func login_user(
        /**
         * @param {Int64} user_id Id of user.
         */
        _ user_id: Int64,
        /**
         * @param {Bool} associative When true (default), API calls using the returned access_token are attributed to the admin user who created the access_token. When false, API activity is attributed to the user the access_token runs as. False requires a looker license.
         */
        associative: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<AccessToken, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<AccessToken, SDKError> = self.post("/login/\(path_user_id)", 
            ["associative": associative as Any?], nil, options)
        return result
    }

    /**
     * ### Logout of the API and invalidate the current access token.
     *
     * DELETE /logout -> String
     */
    func logout(
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let result: SDKResponse<String, SDKError> = self.delete("/logout", nil, nil, options)
        return result
    }

    /**
     * ### Get a Look.
     *
     * Returns detailed information about a Look and its associated Query.
     *
     * GET /looks/{look_id} -> LookWithQuery
     */
    func look(
        /**
         * @param {Int64} look_id Id of look
         */
        _ look_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookWithQuery, SDKError> {
        let path_look_id = encodeParam(look_id)
        let result: SDKResponse<LookWithQuery, SDKError> = self.get("/looks/\(path_look_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about a lookml model.
     *
     * GET /lookml_models/{lookml_model_name} -> LookmlModel
     */
    func lookml_model(
        /**
         * @param {String} lookml_model_name Name of lookml model.
         */
        _ lookml_model_name: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookmlModel, SDKError> {
        let path_lookml_model_name = encodeParam(lookml_model_name)
        let result: SDKResponse<LookmlModel, SDKError> = self.get("/lookml_models/\(path_lookml_model_name)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about a lookml model explore.
     *
     * GET /lookml_models/{lookml_model_name}/explores/{explore_name} -> LookmlModelExplore
     */
    func lookml_model_explore(
        /**
         * @param {String} lookml_model_name Name of lookml model.
         */
        _ lookml_model_name: String,
        /**
         * @param {String} explore_name Name of explore.
         */
        _ explore_name: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookmlModelExplore, SDKError> {
        let path_lookml_model_name = encodeParam(lookml_model_name)
        let path_explore_name = encodeParam(explore_name)
        let result: SDKResponse<LookmlModelExplore, SDKError> = self.get("/lookml_models/\(path_lookml_model_name)/explores/\(path_explore_name)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get A Projects Manifest object
     *
     * Returns the project with the given project id
     *
     * GET /projects/{project_id}/manifest -> Manifest
     */
    func manifest(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Manifest, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<Manifest, SDKError> = self.get("/projects/\(path_project_id)/manifest", nil, nil, options)
        return result
    }

    /**
     * ### Get information about the current user; i.e. the user account currently calling the API.
     *
     * GET /user -> User
     */
    func me(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<User, SDKError> {
        let result: SDKResponse<User, SDKError> = self.get("/user", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get Merge Query
     *
     * Returns a merge query object given its id.
     *
     * GET /merge_queries/{merge_query_id} -> MergeQuery
     */
    func merge_query(
        /**
         * @param {String} merge_query_id Merge Query Id
         */
        _ merge_query_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<MergeQuery, SDKError> {
        let path_merge_query_id = encodeParam(merge_query_id)
        let result: SDKResponse<MergeQuery, SDKError> = self.get("/merge_queries/\(path_merge_query_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about the model set with a specific id.
     *
     * GET /model_sets/{model_set_id} -> ModelSet
     */
    func model_set(
        /**
         * @param {Int64} model_set_id Id of model set
         */
        _ model_set_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ModelSet, SDKError> {
        let path_model_set_id = encodeParam(model_set_id)
        let result: SDKResponse<ModelSet, SDKError> = self.get("/model_sets/\(path_model_set_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get Oauth Client App
     *
     * Returns the registered app client with matching client_guid.
     *
     * GET /oauth_client_apps/{client_guid} -> OauthClientApp
     */
    func oauth_client_app(
        /**
         * @param {String} client_guid The unique id of this application
         */
        _ client_guid: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<OauthClientApp, SDKError> {
        let path_client_guid = encodeParam(client_guid)
        let result: SDKResponse<OauthClientApp, SDKError> = self.get("/oauth_client_apps/\(path_client_guid)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get the OIDC configuration.
     *
     * Looker can be optionally configured to authenticate users against an OpenID Connect (OIDC)
     * authentication server. OIDC setup requires coordination with an administrator of that server.
     *
     * Only Looker administrators can read and update the OIDC configuration.
     *
     * Configuring OIDC impacts authentication for all users. This configuration should be done carefully.
     *
     * Looker maintains a single OIDC configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).
     *
     * OIDC is enabled or disabled for Looker using the **enabled** field.
     *
     * GET /oidc_config -> OIDCConfig
     */
    func oidc_config(
        options: ITransportSettings? = nil
    ) -> SDKResponse<OIDCConfig, SDKError> {
        let result: SDKResponse<OIDCConfig, SDKError> = self.get("/oidc_config", nil, nil, options)
        return result
    }

    /**
     * ### Get a OIDC test configuration by test_slug.
     *
     * GET /oidc_test_configs/{test_slug} -> OIDCConfig
     */
    func oidc_test_config(
        /**
         * @param {String} test_slug Slug of test config
         */
        _ test_slug: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<OIDCConfig, SDKError> {
        let path_test_slug = encodeParam(test_slug)
        let result: SDKResponse<OIDCConfig, SDKError> = self.get("/oidc_test_configs/\(path_test_slug)", nil, nil, options)
        return result
    }

    /**
     * ### Parse the given xml as a SAML IdP metadata document and return the result.
     *
     * POST /parse_saml_idp_metadata -> SamlMetadataParseResult
     */
    func parse_saml_idp_metadata(
        /**
         * @param {String} body
         */
        _ body: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SamlMetadataParseResult, SDKError> {
        let result: SDKResponse<SamlMetadataParseResult, SDKError> = self.post("/parse_saml_idp_metadata", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Get password config.
     *
     * GET /password_config -> PasswordConfig
     */
    func password_config(
        options: ITransportSettings? = nil
    ) -> SDKResponse<PasswordConfig, SDKError> {
        let result: SDKResponse<PasswordConfig, SDKError> = self.get("/password_config", nil, nil, options)
        return result
    }

    /**
     * Perform a data action. The data action object can be obtained from query results, and used to perform an arbitrary action.
     *
     * POST /data_actions -> DataActionResponse
     */
    func perform_data_action(
        /**
         * @param {DataActionRequest} body
         */
        _ body: DataActionRequest,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DataActionResponse, SDKError> {
        let result: SDKResponse<DataActionResponse, SDKError> = self.post("/data_actions", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Get information about the permission set with a specific id.
     *
     * GET /permission_sets/{permission_set_id} -> PermissionSet
     */
    func permission_set(
        /**
         * @param {Int64} permission_set_id Id of permission set
         */
        _ permission_set_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<PermissionSet, SDKError> {
        let path_permission_set_id = encodeParam(permission_set_id)
        let result: SDKResponse<PermissionSet, SDKError> = self.get("/permission_sets/\(path_permission_set_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get A Project
     *
     * Returns the project with the given project id
     *
     * GET /projects/{project_id} -> Project
     */
    func project(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Project, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<Project, SDKError> = self.get("/projects/\(path_project_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get Project File Info
     *
     * Returns information about a file in the project
     *
     * GET /projects/{project_id}/files/file -> ProjectFile
     */
    func project_file(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} file_id File Id
         */
        _ file_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ProjectFile, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<ProjectFile, SDKError> = self.get("/projects/\(path_project_id)/files/file", 
            ["file_id": file_id, "fields": fields], nil, options)
        return result
    }

    /**
     * ### Get Cached Project Validation Results
     *
     * Returns the cached results of a previous project validation calculation, if any.
     * Returns http status 204 No Content if no validation results exist.
     *
     * Validating the content of all the files in a project can be computationally intensive
     * for large projects. Use this API to simply fetch the results of the most recent
     * project validation rather than revalidating the entire project from scratch.
     *
     * A value of `"stale": true` in the response indicates that the project has changed since
     * the cached validation results were computed. The cached validation results may no longer
     * reflect the current state of the project.
     *
     * GET /projects/{project_id}/validate -> ProjectValidationCache
     */
    func project_validation_results(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ProjectValidationCache, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<ProjectValidationCache, SDKError> = self.get("/projects/\(path_project_id)/validate", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get Project Workspace
     *
     * Returns information about the state of the project files in the currently selected workspace
     *
     * GET /projects/{project_id}/current_workspace -> ProjectWorkspace
     */
    func project_workspace(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ProjectWorkspace, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<ProjectWorkspace, SDKError> = self.get("/projects/\(path_project_id)/current_workspace", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get a previously created query by id.
     *
     * A Looker query object includes the various parameters that define a database query that has been run or
     * could be run in the future. These parameters include: model, view, fields, filters, pivots, etc.
     * Query *results* are not part of the query object.
     *
     * Query objects are unique and immutable. Query objects are created automatically in Looker as users explore data.
     * Looker does not delete them; they become part of the query history. When asked to create a query for
     * any given set of parameters, Looker will first try to find an existing query object with matching
     * parameters and will only create a new object when an appropriate object can not be found.
     *
     * This 'get' method is used to get the details about a query for a given id. See the other methods here
     * to 'create' and 'run' queries.
     *
     * Note that some fields like 'filter_config' and 'vis_config' etc are specific to how the Looker UI
     * builds queries and visualizations and are not generally useful for API use. They are not required when
     * creating new queries and can usually just be ignored.
     *
     * GET /queries/{query_id} -> Query
     */
    func query(
        /**
         * @param {Int64} query_id Id of query
         */
        _ query_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Query, SDKError> {
        let path_query_id = encodeParam(query_id)
        let result: SDKResponse<Query, SDKError> = self.get("/queries/\(path_query_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get the query for a given query slug.
     *
     * This returns the query for the 'slug' in a query share URL.
     *
     * The 'slug' is a randomly chosen short string that is used as an alternative to the query's id value
     * for use in URLs etc. This method exists as a convenience to help you use the API to 'find' queries that
     * have been created using the Looker UI.
     *
     * You can use the Looker explore page to build a query and then choose the 'Share' option to
     * show the share url for the query. Share urls generally look something like 'https://looker.yourcompany/x/vwGSbfc'.
     * The trailing 'vwGSbfc' is the share slug. You can pass that string to this api method to get details about the query.
     * Those details include the 'id' that you can use to run the query. Or, you can copy the query body
     * (perhaps with your own modification) and use that as the basis to make/run new queries.
     *
     * This will also work with slugs from Looker explore urls like
     * 'https://looker.yourcompany/explore/ecommerce/orders?qid=aogBgL6o3cKK1jN3RoZl5s'. In this case
     * 'aogBgL6o3cKK1jN3RoZl5s' is the slug.
     *
     * GET /queries/slug/{slug} -> Query
     */
    func query_for_slug(
        /**
         * @param {String} slug Slug of query
         */
        _ slug: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Query, SDKError> {
        let path_slug = encodeParam(slug)
        let result: SDKResponse<Query, SDKError> = self.get("/queries/slug/\(path_slug)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get Query Task details
     *
     * Use this function to check the status of an async query task. After the status
     * reaches "Complete", you can call [query_task_results(query_task_id)](#!/Query/query_task_results) to
     * retrieve the results of the query.
     *
     * Use [create_query_task()](#!/Query/create_query_task) to create an async query task.
     *
     * GET /query_tasks/{query_task_id} -> QueryTask
     */
    func query_task(
        /**
         * @param {String} query_task_id ID of the Query Task
         */
        _ query_task_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<QueryTask, SDKError> {
        let path_query_task_id = encodeParam(query_task_id)
        let result: SDKResponse<QueryTask, SDKError> = self.get("/query_tasks/\(path_query_task_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Fetch results of multiple async queries
     *
     * Returns the results of multiple async queries in one request.
     *
     * For Query Tasks that are not completed, the response will include the execution status of the Query Task but will not include query results.
     * Query Tasks whose results have expired will have a status of 'expired'.
     * If the user making the API request does not have sufficient privileges to view a Query Task result, the result will have a status of 'missing'
     *
     * GET /query_tasks/multi_results -> StringDictionary<AnyCodable>
     */
    func query_task_multi_results(
        /**
         * @param {DelimArray<String>} query_task_ids List of Query Task IDs
         */
        _ query_task_ids: DelimArray<String>,
        options: ITransportSettings? = nil
    ) -> SDKResponse<StringDictionary<AnyCodable>, SDKError> {
        let result: SDKResponse<StringDictionary<AnyCodable>, SDKError> = self.get("/query_tasks/multi_results", 
            ["query_task_ids": query_task_ids as Any?], nil, options)
        return result
    }

    /**
     * ### Get Async Query Results
     *
     * Returns the results of an async query task if the query has completed.
     *
     * If the query task is still running or waiting to run, this function returns 204 No Content.
     *
     * If the query task ID is invalid or the cached results of the query task have expired, this function returns 404 Not Found.
     *
     * Use [query_task(query_task_id)](#!/Query/query_task) to check the execution status of the query task
     * Call query_task_results only after the query task status reaches "Complete".
     *
     * You can also use [query_task_multi_results()](#!/Query/query_task_multi_results) retrieve the
     * results of multiple async query tasks at the same time.
     *
     * #### SQL Error Handling:
     * If the query fails due to a SQL db error, how this is communicated depends on the result_format you requested in `create_query_task()`.
     *
     * For `json_detail` result_format: `query_task_results()` will respond with HTTP status '200 OK' and db SQL error info
     * will be in the `errors` property of the response object. The 'data' property will be empty.
     *
     * For all other result formats: `query_task_results()` will respond with HTTP status `400 Bad Request` and some db SQL error info
     * will be in the message of the 400 error response, but not as detailed as expressed in `json_detail.errors`.
     * These data formats can only carry row data, and error info is not row data.
     *
     * GET /query_tasks/{query_task_id}/results -> String
     */
    func query_task_results(
        /**
         * @param {String} query_task_id ID of the Query Task
         */
        _ query_task_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_query_task_id = encodeParam(query_task_id)
        let result: SDKResponse<String, SDKError> = self.get("/query_tasks/\(path_query_task_id)/results", nil, nil, options)
        return result
    }

    /**
     * ### Register an OAuth2 Client App
     *
     * Registers details identifying an external web app or native app as an OAuth2 login client of the Looker instance.
     * The app registration must provide a unique client_guid and redirect_uri that the app will present
     * in OAuth login requests. If the client_guid and redirect_uri parameters in the login request do not match
     * the app details registered with the Looker instance, the request is assumed to be a forgery and is rejected.
     *
     * POST /oauth_client_apps/{client_guid} -> OauthClientApp
     */
    func register_oauth_client_app(
        /**
         * @param {String} client_guid The unique id of this application
         */
        _ client_guid: String,
        /**
         * @param {WriteOauthClientApp} body
         */
        _ body: WriteOauthClientApp,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<OauthClientApp, SDKError> {
        let path_client_guid = encodeParam(client_guid)
        let result: SDKResponse<OauthClientApp, SDKError> = self.post("/oauth_client_apps/\(path_client_guid)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Get information about a render task.
     *
     * Returns a render task object.
     * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).
     * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).
     *
     * GET /render_tasks/{render_task_id} -> RenderTask
     */
    func render_task(
        /**
         * @param {String} render_task_id Id of render task
         */
        _ render_task_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<RenderTask, SDKError> {
        let path_render_task_id = encodeParam(render_task_id)
        let result: SDKResponse<RenderTask, SDKError> = self.get("/render_tasks/\(path_render_task_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get the document or image produced by a completed render task.
     *
     * Note that the PDF or image result will be a binary blob in the HTTP response, as indicated by the
     * Content-Type in the response headers. This may require specialized (or at least different) handling than text
     * responses such as JSON. You may need to tell your HTTP client that the response is binary so that it does not
     * attempt to parse the binary data as text.
     *
     * If the render task exists but has not finished rendering the results, the response HTTP status will be
     * **202 Accepted**, the response body will be empty, and the response will have a Retry-After header indicating
     * that the caller should repeat the request at a later time.
     *
     * Returns 404 if the render task cannot be found, if the cached result has expired, or if the caller
     * does not have permission to view the results.
     *
     * For detailed information about the status of the render task, use [Render Task](#!/RenderTask/render_task).
     * Polling loops waiting for completion of a render task would be better served by polling **render_task(id)** until
     * the task status reaches completion (or error) instead of polling **render_task_results(id)** alone.
     *
     * GET /render_tasks/{render_task_id}/results -> String
     *
     * **Note**: Binary content is returned by this method.
     */
    func render_task_results(
        /**
         * @param {String} render_task_id Id of render task
         */
        _ render_task_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_render_task_id = encodeParam(render_task_id)
        let result: SDKResponse<String, SDKError> = self.get("/render_tasks/\(path_render_task_id)/results", nil, nil, options)
        return result
    }

    /**
     * ### Reset a project to the revision of the project that is in production.
     *
     * **DANGER** this will delete any changes that have not been pushed to a remote repository.
     *
     * POST /projects/{project_id}/reset_to_production -> String
     */
    func reset_project_to_production(
        /**
         * @param {String} project_id Id of project
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<String, SDKError> = self.post("/projects/\(path_project_id)/reset_to_production", nil, nil, options)
        return result
    }

    /**
     * ### Reset a project development branch to the revision of the project that is on the remote.
     *
     * **DANGER** this will delete any changes that have not been pushed to a remote repository.
     *
     * POST /projects/{project_id}/reset_to_remote -> String
     */
    func reset_project_to_remote(
        /**
         * @param {String} project_id Id of project
         */
        _ project_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<String, SDKError> = self.post("/projects/\(path_project_id)/reset_to_remote", nil, nil, options)
        return result
    }

    /**
     * ### Get information about the role with a specific id.
     *
     * GET /roles/{role_id} -> Role
     */
    func role(
        /**
         * @param {Int64} role_id id of role
         */
        _ role_id: Int64,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Role, SDKError> {
        let path_role_id = encodeParam(role_id)
        let result: SDKResponse<Role, SDKError> = self.get("/roles/\(path_role_id)", nil, nil, options)
        return result
    }

    /**
     * ### Get information about all the groups with the role that has a specific id.
     *
     * GET /roles/{role_id}/groups -> [LkGroup]
     */
    func role_groups(
        /**
         * @param {Int64} role_id id of role
         */
        _ role_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LkGroup], SDKError> {
        let path_role_id = encodeParam(role_id)
        let result: SDKResponse<[LkGroup], SDKError> = self.get("/roles/\(path_role_id)/groups", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about all the users with the role that has a specific id.
     *
     * GET /roles/{role_id}/users -> [User]
     */
    func role_users(
        /**
         * @param {Int64} role_id id of user
         */
        _ role_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} direct_association_only Get only users associated directly with the role: exclude those only associated through groups.
         */
        direct_association_only: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[User], SDKError> {
        let path_role_id = encodeParam(role_id)
        let result: SDKResponse<[User], SDKError> = self.get("/roles/\(path_role_id)/users", 
            ["fields": fields, "direct_association_only": direct_association_only as Any?], nil, options)
        return result
    }

    /**
     * ### Run a git connection test
     *
     * Run the named test on the git service used by this project (or the dependency project for the provided remote_url) and return the result. This
     * is intended to help debug git connections when things do not work properly, to give
     * more helpful information about why a git url is not working with Looker.
     *
     * Tests should be run in the order they are returned by [Get All Git Connection Tests](#!/Project/all_git_connection_tests).
     *
     * GET /projects/{project_id}/git_connection_tests/{test_id} -> GitConnectionTestResult
     */
    func run_git_connection_test(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} test_id Test Id
         */
        _ test_id: String,
        /**
         * @param {String} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
         */
        remote_url: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<GitConnectionTestResult, SDKError> {
        let path_project_id = encodeParam(project_id)
        let path_test_id = encodeParam(test_id)
        let result: SDKResponse<GitConnectionTestResult, SDKError> = self.get("/projects/\(path_project_id)/git_connection_tests/\(path_test_id)", 
            ["remote_url": remote_url], nil, options)
        return result
    }

    /**
     * ### Run the query that is specified inline in the posted body.
     *
     * This allows running a query as defined in json in the posted body. This combines
     * the two actions of posting & running a query into one step.
     *
     * Here is an example body in json:
     * ```
     * {
     *   "model":"thelook",
     *   "view":"inventory_items",
     *   "fields":["category.name","inventory_items.days_in_inventory_tier","products.count"],
     *   "filters":{"category.name":"socks"},
     *   "sorts":["products.count desc 0"],
     *   "limit":"500",
     *   "query_timezone":"America/Los_Angeles"
     * }
     * ```
     *
     * When using the Ruby SDK this would be passed as a Ruby hash like:
     * ```
     * {
     *  :model=>"thelook",
     *  :view=>"inventory_items",
     *  :fields=>
     *   ["category.name",
     *    "inventory_items.days_in_inventory_tier",
     *    "products.count"],
     *  :filters=>{:"category.name"=>"socks"},
     *  :sorts=>["products.count desc 0"],
     *  :limit=>"500",
     *  :query_timezone=>"America/Los_Angeles",
     * }
     * ```
     *
     * This will return the result of running the query in the format specified by the 'result_format' parameter.
     *
     * Supported formats:
     *
     * | result_format | Description
     * | :-----------: | :--- |
     * | json | Plain json
     * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query
     * | csv | Comma separated values with a header
     * | txt | Tab separated values with a header
     * | html | Simple html
     * | md | Simple markdown
     * | xlsx | MS Excel spreadsheet
     * | sql | Returns the generated SQL rather than running the query
     * | png | A PNG image of the visualization of the query
     * | jpg | A JPG image of the visualization of the query
     *
     * POST /queries/run/{result_format} -> String
     *
     * **Note**: Binary content may be returned by this method.
     */
    func run_inline_query(
        /**
         * @param {String} result_format Format of result
         */
        _ result_format: String,
        /**
         * @param {WriteQuery} body
         */
        _ body: WriteQuery,
        /**
         * @param {Int64} limit Row limit (may override the limit in the saved query).
         */
        limit: Int64? = nil,
        /**
         * @param {Bool} apply_formatting Apply model-specified formatting to each result.
         */
        apply_formatting: Bool? = nil,
        /**
         * @param {Bool} apply_vis Apply visualization options to results.
         */
        apply_vis: Bool? = nil,
        /**
         * @param {Bool} cache Get results from cache if available.
         */
        cache: Bool? = nil,
        /**
         * @param {Int64} image_width Render width for image formats.
         */
        image_width: Int64? = nil,
        /**
         * @param {Int64} image_height Render height for image formats.
         */
        image_height: Int64? = nil,
        /**
         * @param {Bool} generate_drill_links Generate drill links (only applicable to 'json_detail' format.
         */
        generate_drill_links: Bool? = nil,
        /**
         * @param {Bool} force_production Force use of production models even if the user is in development mode.
         */
        force_production: Bool? = nil,
        /**
         * @param {Bool} cache_only Retrieve any results from cache even if the results have expired.
         */
        cache_only: Bool? = nil,
        /**
         * @param {String} path_prefix Prefix to use for drill links (url encoded).
         */
        path_prefix: String? = nil,
        /**
         * @param {Bool} rebuild_pdts Rebuild PDTS used in query.
         */
        rebuild_pdts: Bool? = nil,
        /**
         * @param {Bool} server_table_calcs Perform table calculations on query results
         */
        server_table_calcs: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_result_format = encodeParam(result_format)
        let result: SDKResponse<String, SDKError> = self.post("/queries/run/\(path_result_format)", 
            ["limit": limit, "apply_formatting": apply_formatting as Any?, "apply_vis": apply_vis as Any?, "cache": cache as Any?, "image_width": image_width, "image_height": image_height, "generate_drill_links": generate_drill_links as Any?, "force_production": force_production as Any?, "cache_only": cache_only as Any?, "path_prefix": path_prefix, "rebuild_pdts": rebuild_pdts as Any?, "server_table_calcs": server_table_calcs as Any?], try! self.encode(body), options)
        return result
    }

    /**
     * ### Run a Look
     *
     * Runs a given look's query and returns the results in the requested format.
     *
     * Supported formats:
     *
     * | result_format | Description
     * | :-----------: | :--- |
     * | json | Plain json
     * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query
     * | csv | Comma separated values with a header
     * | txt | Tab separated values with a header
     * | html | Simple html
     * | md | Simple markdown
     * | xlsx | MS Excel spreadsheet
     * | sql | Returns the generated SQL rather than running the query
     * | png | A PNG image of the visualization of the query
     * | jpg | A JPG image of the visualization of the query
     *
     * GET /looks/{look_id}/run/{result_format} -> String
     *
     * **Note**: Binary content may be returned by this method.
     */
    func run_look(
        /**
         * @param {Int64} look_id Id of look
         */
        _ look_id: Int64,
        /**
         * @param {String} result_format Format of result
         */
        _ result_format: String,
        /**
         * @param {Int64} limit Row limit (may override the limit in the saved query).
         */
        limit: Int64? = nil,
        /**
         * @param {Bool} apply_formatting Apply model-specified formatting to each result.
         */
        apply_formatting: Bool? = nil,
        /**
         * @param {Bool} apply_vis Apply visualization options to results.
         */
        apply_vis: Bool? = nil,
        /**
         * @param {Bool} cache Get results from cache if available.
         */
        cache: Bool? = nil,
        /**
         * @param {Int64} image_width Render width for image formats.
         */
        image_width: Int64? = nil,
        /**
         * @param {Int64} image_height Render height for image formats.
         */
        image_height: Int64? = nil,
        /**
         * @param {Bool} generate_drill_links Generate drill links (only applicable to 'json_detail' format.
         */
        generate_drill_links: Bool? = nil,
        /**
         * @param {Bool} force_production Force use of production models even if the user is in development mode.
         */
        force_production: Bool? = nil,
        /**
         * @param {Bool} cache_only Retrieve any results from cache even if the results have expired.
         */
        cache_only: Bool? = nil,
        /**
         * @param {String} path_prefix Prefix to use for drill links (url encoded).
         */
        path_prefix: String? = nil,
        /**
         * @param {Bool} rebuild_pdts Rebuild PDTS used in query.
         */
        rebuild_pdts: Bool? = nil,
        /**
         * @param {Bool} server_table_calcs Perform table calculations on query results
         */
        server_table_calcs: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_look_id = encodeParam(look_id)
        let path_result_format = encodeParam(result_format)
        let result: SDKResponse<String, SDKError> = self.get("/looks/\(path_look_id)/run/\(path_result_format)", 
            ["limit": limit, "apply_formatting": apply_formatting as Any?, "apply_vis": apply_vis as Any?, "cache": cache as Any?, "image_width": image_width, "image_height": image_height, "generate_drill_links": generate_drill_links as Any?, "force_production": force_production as Any?, "cache_only": cache_only as Any?, "path_prefix": path_prefix, "rebuild_pdts": rebuild_pdts as Any?, "server_table_calcs": server_table_calcs as Any?], nil, options)
        return result
    }

    /**
     * ### Run LookML Tests
     *
     * Runs all tests in the project, optionally filtered by file, test, and/or model.
     *
     * GET /projects/{project_id}/lookml_tests/run -> [LookmlTestResult]
     */
    func run_lookml_test(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} file_id File Name
         */
        file_id: String? = nil,
        /**
         * @param {String} test Test Name
         */
        test: String? = nil,
        /**
         * @param {String} model Model Name
         */
        model: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LookmlTestResult], SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<[LookmlTestResult], SDKError> = self.get("/projects/\(path_project_id)/lookml_tests/run", 
            ["file_id": file_id, "test": test, "model": model], nil, options)
        return result
    }

    /**
     * ### Run a saved query.
     *
     * This runs a previously saved query. You can use this on a query that was generated in the Looker UI
     * or one that you have explicitly created using the API. You can also use a query 'id' from a saved 'Look'.
     *
     * The 'result_format' parameter specifies the desired structure and format of the response.
     *
     * Supported formats:
     *
     * | result_format | Description
     * | :-----------: | :--- |
     * | json | Plain json
     * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query
     * | csv | Comma separated values with a header
     * | txt | Tab separated values with a header
     * | html | Simple html
     * | md | Simple markdown
     * | xlsx | MS Excel spreadsheet
     * | sql | Returns the generated SQL rather than running the query
     * | png | A PNG image of the visualization of the query
     * | jpg | A JPG image of the visualization of the query
     *
     * GET /queries/{query_id}/run/{result_format} -> String
     *
     * **Note**: Binary content may be returned by this method.
     */
    func run_query(
        /**
         * @param {Int64} query_id Id of query
         */
        _ query_id: Int64,
        /**
         * @param {String} result_format Format of result
         */
        _ result_format: String,
        /**
         * @param {Int64} limit Row limit (may override the limit in the saved query).
         */
        limit: Int64? = nil,
        /**
         * @param {Bool} apply_formatting Apply model-specified formatting to each result.
         */
        apply_formatting: Bool? = nil,
        /**
         * @param {Bool} apply_vis Apply visualization options to results.
         */
        apply_vis: Bool? = nil,
        /**
         * @param {Bool} cache Get results from cache if available.
         */
        cache: Bool? = nil,
        /**
         * @param {Int64} image_width Render width for image formats.
         */
        image_width: Int64? = nil,
        /**
         * @param {Int64} image_height Render height for image formats.
         */
        image_height: Int64? = nil,
        /**
         * @param {Bool} generate_drill_links Generate drill links (only applicable to 'json_detail' format.
         */
        generate_drill_links: Bool? = nil,
        /**
         * @param {Bool} force_production Force use of production models even if the user is in development mode.
         */
        force_production: Bool? = nil,
        /**
         * @param {Bool} cache_only Retrieve any results from cache even if the results have expired.
         */
        cache_only: Bool? = nil,
        /**
         * @param {String} path_prefix Prefix to use for drill links (url encoded).
         */
        path_prefix: String? = nil,
        /**
         * @param {Bool} rebuild_pdts Rebuild PDTS used in query.
         */
        rebuild_pdts: Bool? = nil,
        /**
         * @param {Bool} server_table_calcs Perform table calculations on query results
         */
        server_table_calcs: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_query_id = encodeParam(query_id)
        let path_result_format = encodeParam(result_format)
        let result: SDKResponse<String, SDKError> = self.get("/queries/\(path_query_id)/run/\(path_result_format)", 
            ["limit": limit, "apply_formatting": apply_formatting as Any?, "apply_vis": apply_vis as Any?, "cache": cache as Any?, "image_width": image_width, "image_height": image_height, "generate_drill_links": generate_drill_links as Any?, "force_production": force_production as Any?, "cache_only": cache_only as Any?, "path_prefix": path_prefix, "rebuild_pdts": rebuild_pdts as Any?, "server_table_calcs": server_table_calcs as Any?], nil, options)
        return result
    }

    /**
     * Execute a SQL Runner query in a given result_format.
     *
     * POST /sql_queries/{slug}/run/{result_format} -> String
     *
     * **Note**: Binary content may be returned by this method.
     */
    func run_sql_query(
        /**
         * @param {String} slug slug of query
         */
        _ slug: String,
        /**
         * @param {String} result_format Format of result, options are: ["inline_json", "json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml", "json_label"]
         */
        _ result_format: String,
        /**
         * @param {String} download Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.
         */
        download: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_slug = encodeParam(slug)
        let path_result_format = encodeParam(result_format)
        let result: SDKResponse<String, SDKError> = self.post("/sql_queries/\(path_slug)/run/\(path_result_format)", 
            ["download": download], nil, options)
        return result
    }

    /**
     * ### Run an URL encoded query.
     *
     * This requires the caller to encode the specifiers for the query into the URL query part using
     * Looker-specific syntax as explained below.
     *
     * Generally, you would want to use one of the methods that takes the parameters as json in the POST body
     * for creating and/or running queries. This method exists for cases where one really needs to encode the
     * parameters into the URL of a single 'GET' request. This matches the way that the Looker UI formats
     * 'explore' URLs etc.
     *
     * The parameters here are very similar to the json body formatting except that the filter syntax is
     * tricky. Unfortunately, this format makes this method not currently callible via the 'Try it out!' button
     * in this documentation page. But, this is callable  when creating URLs manually or when using the Looker SDK.
     *
     * Here is an example inline query URL:
     *
     * ```
     * https://looker.mycompany.com:19999/api/3.0/queries/models/thelook/views/inventory_items/run/json?fields=category.name,inventory_items.days_in_inventory_tier,products.count&f[category.name]=socks&sorts=products.count+desc+0&limit=500&query_timezone=America/Los_Angeles
     * ```
     *
     * When invoking this endpoint with the Ruby SDK, pass the query parameter parts as a hash. The hash to match the above would look like:
     *
     * ```ruby
     * query_params =
     * {
     *   :fields => "category.name,inventory_items.days_in_inventory_tier,products.count",
     *   :"f[category.name]" => "socks",
     *   :sorts => "products.count desc 0",
     *   :limit => "500",
     *   :query_timezone => "America/Los_Angeles"
     * }
     * response = ruby_sdk.run_url_encoded_query('thelook','inventory_items','json', query_params)
     *
     * ```
     *
     * Again, it is generally easier to use the variant of this method that passes the full query in the POST body.
     * This method is available for cases where other alternatives won't fit the need.
     *
     * Supported formats:
     *
     * | result_format | Description
     * | :-----------: | :--- |
     * | json | Plain json
     * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query
     * | csv | Comma separated values with a header
     * | txt | Tab separated values with a header
     * | html | Simple html
     * | md | Simple markdown
     * | xlsx | MS Excel spreadsheet
     * | sql | Returns the generated SQL rather than running the query
     * | png | A PNG image of the visualization of the query
     * | jpg | A JPG image of the visualization of the query
     *
     * GET /queries/models/{model_name}/views/{view_name}/run/{result_format} -> String
     *
     * **Note**: Binary content may be returned by this method.
     */
    func run_url_encoded_query(
        /**
         * @param {String} model_name Model name
         */
        _ model_name: String,
        /**
         * @param {String} view_name View name
         */
        _ view_name: String,
        /**
         * @param {String} result_format Format of result
         */
        _ result_format: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_model_name = encodeParam(model_name)
        let path_view_name = encodeParam(view_name)
        let path_result_format = encodeParam(result_format)
        let result: SDKResponse<String, SDKError> = self.get("/queries/models/\(path_model_name)/views/\(path_view_name)/run/\(path_result_format)", nil, nil, options)
        return result
    }

    /**
     * ### Get the SAML configuration.
     *
     * Looker can be optionally configured to authenticate users against a SAML authentication server.
     * SAML setup requires coordination with an administrator of that server.
     *
     * Only Looker administrators can read and update the SAML configuration.
     *
     * Configuring SAML impacts authentication for all users. This configuration should be done carefully.
     *
     * Looker maintains a single SAML configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).
     *
     * SAML is enabled or disabled for Looker using the **enabled** field.
     *
     * GET /saml_config -> SamlConfig
     */
    func saml_config(
        options: ITransportSettings? = nil
    ) -> SDKResponse<SamlConfig, SDKError> {
        let result: SDKResponse<SamlConfig, SDKError> = self.get("/saml_config", nil, nil, options)
        return result
    }

    /**
     * ### Get a SAML test configuration by test_slug.
     *
     * GET /saml_test_configs/{test_slug} -> SamlConfig
     */
    func saml_test_config(
        /**
         * @param {String} test_slug Slug of test config
         */
        _ test_slug: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SamlConfig, SDKError> {
        let path_test_slug = encodeParam(test_slug)
        let result: SDKResponse<SamlConfig, SDKError> = self.get("/saml_test_configs/\(path_test_slug)", nil, nil, options)
        return result
    }

    /**
     * ### Get Information About a Scheduled Plan
     *
     * Admins can fetch information about other users' Scheduled Plans.
     *
     * GET /scheduled_plans/{scheduled_plan_id} -> ScheduledPlan
     */
    func scheduled_plan(
        /**
         * @param {Int64} scheduled_plan_id Scheduled Plan Id
         */
        _ scheduled_plan_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ScheduledPlan, SDKError> {
        let path_scheduled_plan_id = encodeParam(scheduled_plan_id)
        let result: SDKResponse<ScheduledPlan, SDKError> = self.get("/scheduled_plans/\(path_scheduled_plan_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Run a Scheduled Plan Immediately
     *
     * Create a scheduled plan that runs only once, and immediately.
     *
     * This can be useful for testing a Scheduled Plan before committing to a production schedule.
     *
     * Admins can create scheduled plans on behalf of other users by specifying a user id.
     *
     * This API is rate limited to prevent it from being used for relay spam or DoS attacks
     *
     * #### Email Permissions:
     *
     * For details about permissions required to schedule delivery to email and the safeguards
     * Looker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).
     *
     *
     * #### Scheduled Plan Destination Formats
     *
     * Scheduled plan destinations must specify the data format to produce and send to the destination.
     *
     * Formats:
     *
     * | format | Description
     * | :-----------: | :--- |
     * | json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.
     * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query
     * | inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.
     * | csv | Comma separated values with a header
     * | txt | Tab separated values with a header
     * | html | Simple html
     * | xlsx | MS Excel spreadsheet
     * | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document
     * | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document
     * | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image
     * ||
     *
     * Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.
     *
     * POST /scheduled_plans/run_once -> ScheduledPlan
     */
    func scheduled_plan_run_once(
        /**
         * @param {WriteScheduledPlan} body
         */
        _ body: WriteScheduledPlan,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ScheduledPlan, SDKError> {
        let result: SDKResponse<ScheduledPlan, SDKError> = self.post("/scheduled_plans/run_once", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Run a Scheduled Plan By Id Immediately
     * This function creates a run-once schedule plan based on an existing scheduled plan,
     * applies modifications (if any) to the new scheduled plan, and runs the new schedule plan immediately.
     * This can be useful for testing modifications to an existing scheduled plan before committing to a production schedule.
     *
     * This function internally performs the following operations:
     *
     * 1. Copies the properties of the existing scheduled plan into a new scheduled plan
     * 2. Copies any properties passed in the JSON body of this request into the new scheduled plan (replacing the original values)
     * 3. Creates the new scheduled plan
     * 4. Runs the new scheduled plan
     *
     * The original scheduled plan is not modified by this operation.
     * Admins can create, modify, and run scheduled plans on behalf of other users by specifying a user id.
     * Non-admins can only create, modify, and run their own scheduled plans.
     *
     * #### Email Permissions:
     *
     * For details about permissions required to schedule delivery to email and the safeguards
     * Looker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).
     *
     *
     * #### Scheduled Plan Destination Formats
     *
     * Scheduled plan destinations must specify the data format to produce and send to the destination.
     *
     * Formats:
     *
     * | format | Description
     * | :-----------: | :--- |
     * | json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.
     * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query
     * | inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.
     * | csv | Comma separated values with a header
     * | txt | Tab separated values with a header
     * | html | Simple html
     * | xlsx | MS Excel spreadsheet
     * | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document
     * | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document
     * | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image
     * ||
     *
     * Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.
     *
     *
     *
     * This API is rate limited to prevent it from being used for relay spam or DoS attacks
     *
     * POST /scheduled_plans/{scheduled_plan_id}/run_once -> ScheduledPlan
     */
    func scheduled_plan_run_once_by_id(
        /**
         * @param {Int64} scheduled_plan_id Id of schedule plan to copy and run
         */
        _ scheduled_plan_id: Int64,
        /**
         * @param {WriteScheduledPlan} body
         */
        body: WriteScheduledPlan?,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ScheduledPlan, SDKError> {
        let path_scheduled_plan_id = encodeParam(scheduled_plan_id)
        let result: SDKResponse<ScheduledPlan, SDKError> = self.post("/scheduled_plans/\(path_scheduled_plan_id)/run_once", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Get Scheduled Plans for a Dashboard
     *
     * Returns all scheduled plans for a dashboard which belong to the caller or given user.
     *
     * If no user_id is provided, this function returns the scheduled plans owned by the caller.
     *
     *
     * To list all schedules for all users, pass `all_users=true`.
     *
     *
     * The caller must have `see_schedules` permission to see other users' scheduled plans.
     *
     * GET /scheduled_plans/dashboard/{dashboard_id} -> [ScheduledPlan]
     */
    func scheduled_plans_for_dashboard(
        /**
         * @param {Int64} dashboard_id Dashboard Id
         */
        _ dashboard_id: Int64,
        /**
         * @param {Int64} user_id User Id (default is requesting user if not specified)
         */
        user_id: Int64? = nil,
        /**
         * @param {Bool} all_users Return scheduled plans belonging to all users for the dashboard
         */
        all_users: Bool? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ScheduledPlan], SDKError> {
        let path_dashboard_id = encodeParam(dashboard_id)
        let result: SDKResponse<[ScheduledPlan], SDKError> = self.get("/scheduled_plans/dashboard/\(path_dashboard_id)", 
            ["user_id": user_id, "all_users": all_users as Any?, "fields": fields], nil, options)
        return result
    }

    /**
     * ### Get Scheduled Plans for a Look
     *
     * Returns all scheduled plans for a look which belong to the caller or given user.
     *
     * If no user_id is provided, this function returns the scheduled plans owned by the caller.
     *
     *
     * To list all schedules for all users, pass `all_users=true`.
     *
     *
     * The caller must have `see_schedules` permission to see other users' scheduled plans.
     *
     * GET /scheduled_plans/look/{look_id} -> [ScheduledPlan]
     */
    func scheduled_plans_for_look(
        /**
         * @param {Int64} look_id Look Id
         */
        _ look_id: Int64,
        /**
         * @param {Int64} user_id User Id (default is requesting user if not specified)
         */
        user_id: Int64? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} all_users Return scheduled plans belonging to all users for the look
         */
        all_users: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ScheduledPlan], SDKError> {
        let path_look_id = encodeParam(look_id)
        let result: SDKResponse<[ScheduledPlan], SDKError> = self.get("/scheduled_plans/look/\(path_look_id)", 
            ["user_id": user_id, "fields": fields, "all_users": all_users as Any?], nil, options)
        return result
    }

    /**
     * ### Get Scheduled Plans for a LookML Dashboard
     *
     * Returns all scheduled plans for a LookML Dashboard which belong to the caller or given user.
     *
     * If no user_id is provided, this function returns the scheduled plans owned by the caller.
     *
     *
     * To list all schedules for all users, pass `all_users=true`.
     *
     *
     * The caller must have `see_schedules` permission to see other users' scheduled plans.
     *
     * GET /scheduled_plans/lookml_dashboard/{lookml_dashboard_id} -> [ScheduledPlan]
     */
    func scheduled_plans_for_lookml_dashboard(
        /**
         * @param {Int64} lookml_dashboard_id LookML Dashboard Id
         */
        _ lookml_dashboard_id: Int64,
        /**
         * @param {Int64} user_id User Id (default is requesting user if not specified)
         */
        user_id: Int64? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} all_users Return scheduled plans belonging to all users for the dashboard
         */
        all_users: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ScheduledPlan], SDKError> {
        let path_lookml_dashboard_id = encodeParam(lookml_dashboard_id)
        let result: SDKResponse<[ScheduledPlan], SDKError> = self.get("/scheduled_plans/lookml_dashboard/\(path_lookml_dashboard_id)", 
            ["user_id": user_id, "fields": fields, "all_users": all_users as Any?], nil, options)
        return result
    }

    /**
     * ### Get Scheduled Plans for a Space
     *
     * Returns scheduled plans owned by the caller for a given space id.
     *
     * GET /scheduled_plans/space/{space_id} -> [ScheduledPlan]
     */
    func scheduled_plans_for_space(
        /**
         * @param {Int64} space_id Space Id
         */
        _ space_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ScheduledPlan], SDKError> {
        let path_space_id = encodeParam(space_id)
        let result: SDKResponse<[ScheduledPlan], SDKError> = self.get("/scheduled_plans/space/\(path_space_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Search Boards
     *
     * If multiple search params are given and `filter_or` is FALSE or not specified,
     * search params are combined in a logical AND operation.
     * Only rows that match *all* search param criteria will be returned.
     *
     * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
     * Results will include rows that match **any** of the search criteria.
     *
     * String search params use case-insensitive matching.
     * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
     * example="dan%" will match "danger" and "Danzig" but not "David"
     * example="D_m%" will match "Damage" and "dump"
     *
     * Integer search params can accept a single value or a comma separated list of values. The multiple
     * values will be combined under a logical OR operation - results will match at least one of
     * the given values.
     *
     * Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
     * or exclude (respectively) rows where the column is null.
     *
     * Boolean search params accept only "true" and "false" as values.
     *
     * GET /boards/search -> [Board]
     */
    func search_boards(
        /**
         * @param {String} title Matches board title.
         */
        title: String? = nil,
        /**
         * @param {String} created_at Matches the timestamp for when the board was created.
         */
        created_at: String? = nil,
        /**
         * @param {String} first_name The first name of the user who created this board.
         */
        first_name: String? = nil,
        /**
         * @param {String} last_name The last name of the user who created this board.
         */
        last_name: String? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} favorited Return favorited boards when true.
         */
        favorited: Bool? = nil,
        /**
         * @param {String} creator_id Filter on boards created by a particular user.
         */
        creator_id: String? = nil,
        /**
         * @param {String} sorts The fields to sort the results by
         */
        sorts: String? = nil,
        /**
         * @param {Int64} page The page to return.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page The number of items in the returned page.
         */
        per_page: Int64? = nil,
        /**
         * @param {Int64} offset The number of items to skip before returning any. (used with limit and takes priority over page and per_page)
         */
        offset: Int64? = nil,
        /**
         * @param {Int64} limit The maximum number of items to return. (used with offset and takes priority over page and per_page)
         */
        limit: Int64? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Board], SDKError> {
        let result: SDKResponse<[Board], SDKError> = self.get("/boards/search", 
            ["title": title, "created_at": created_at, "first_name": first_name, "last_name": last_name, "fields": fields, "favorited": favorited as Any?, "creator_id": creator_id, "sorts": sorts, "page": page, "per_page": per_page, "offset": offset, "limit": limit, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * ### Search Favorite Content
     *
     * If multiple search params are given and `filter_or` is FALSE or not specified,
     * search params are combined in a logical AND operation.
     * Only rows that match *all* search param criteria will be returned.
     *
     * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
     * Results will include rows that match **any** of the search criteria.
     *
     * String search params use case-insensitive matching.
     * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
     * example="dan%" will match "danger" and "Danzig" but not "David"
     * example="D_m%" will match "Damage" and "dump"
     *
     * Integer search params can accept a single value or a comma separated list of values. The multiple
     * values will be combined under a logical OR operation - results will match at least one of
     * the given values.
     *
     * Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
     * or exclude (respectively) rows where the column is null.
     *
     * Boolean search params accept only "true" and "false" as values.
     *
     * GET /content_favorite/search -> [ContentFavorite]
     */
    func search_content_favorites(
        /**
         * @param {Int64} id Match content favorite id(s)
         */
        `id`: Int64? = nil,
        /**
         * @param {String} user_id Match user id(s).To create a list of multiple ids, use commas as separators
         */
        user_id: String? = nil,
        /**
         * @param {String} content_metadata_id Match content metadata id(s).To create a list of multiple ids, use commas as separators
         */
        content_metadata_id: String? = nil,
        /**
         * @param {String} dashboard_id Match dashboard id(s).To create a list of multiple ids, use commas as separators
         */
        dashboard_id: String? = nil,
        /**
         * @param {String} look_id Match look id(s).To create a list of multiple ids, use commas as separators
         */
        look_id: String? = nil,
        /**
         * @param {String} board_id Match board id(s).To create a list of multiple ids, use commas as separators
         */
        board_id: String? = nil,
        /**
         * @param {Int64} limit Number of results to return. (used with offset)
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any. (used with limit)
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ContentFavorite], SDKError> {
        let result: SDKResponse<[ContentFavorite], SDKError> = self.get("/content_favorite/search", 
            ["id": id, "user_id": user_id, "content_metadata_id": content_metadata_id, "dashboard_id": dashboard_id, "look_id": look_id, "board_id": board_id, "limit": limit, "offset": offset, "sorts": sorts, "fields": fields, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * ### Search Content Views
     *
     * If multiple search params are given and `filter_or` is FALSE or not specified,
     * search params are combined in a logical AND operation.
     * Only rows that match *all* search param criteria will be returned.
     *
     * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
     * Results will include rows that match **any** of the search criteria.
     *
     * String search params use case-insensitive matching.
     * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
     * example="dan%" will match "danger" and "Danzig" but not "David"
     * example="D_m%" will match "Damage" and "dump"
     *
     * Integer search params can accept a single value or a comma separated list of values. The multiple
     * values will be combined under a logical OR operation - results will match at least one of
     * the given values.
     *
     * Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
     * or exclude (respectively) rows where the column is null.
     *
     * Boolean search params accept only "true" and "false" as values.
     *
     * GET /content_view/search -> [ContentView]
     */
    func search_content_views(
        /**
         * @param {String} view_count Match view count
         */
        view_count: String? = nil,
        /**
         * @param {String} group_id Match Group Id
         */
        group_id: String? = nil,
        /**
         * @param {String} look_id Match look_id
         */
        look_id: String? = nil,
        /**
         * @param {String} dashboard_id Match dashboard_id
         */
        dashboard_id: String? = nil,
        /**
         * @param {String} content_metadata_id Match content metadata id
         */
        content_metadata_id: String? = nil,
        /**
         * @param {String} start_of_week_date Match start of week date
         */
        start_of_week_date: String? = nil,
        /**
         * @param {Bool} all_time True if only all time view records should be returned
         */
        all_time: Bool? = nil,
        /**
         * @param {String} user_id Match user id
         */
        user_id: String? = nil,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        /**
         * @param {Int64} limit Number of results to return. Use with `offset` to manage pagination of results
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning data
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by
         */
        sorts: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ContentView], SDKError> {
        let result: SDKResponse<[ContentView], SDKError> = self.get("/content_view/search", 
            ["view_count": view_count, "group_id": group_id, "look_id": look_id, "dashboard_id": dashboard_id, "content_metadata_id": content_metadata_id, "start_of_week_date": start_of_week_date, "all_time": all_time as Any?, "user_id": user_id, "fields": fields, "limit": limit, "offset": offset, "sorts": sorts, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * ### Search Dashboard Elements
     *
     * Returns an **array of DashboardElement objects** that match the specified search criteria.
     *
     * If multiple search params are given and `filter_or` is FALSE or not specified,
     * search params are combined in a logical AND operation.
     * Only rows that match *all* search param criteria will be returned.
     *
     * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
     * Results will include rows that match **any** of the search criteria.
     *
     * String search params use case-insensitive matching.
     * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
     * example="dan%" will match "danger" and "Danzig" but not "David"
     * example="D_m%" will match "Damage" and "dump"
     *
     * Integer search params can accept a single value or a comma separated list of values. The multiple
     * values will be combined under a logical OR operation - results will match at least one of
     * the given values.
     *
     * Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
     * or exclude (respectively) rows where the column is null.
     *
     * Boolean search params accept only "true" and "false" as values.
     *
     * GET /dashboard_elements/search -> [DashboardElement]
     */
    func search_dashboard_elements(
        /**
         * @param {Int64} dashboard_id Select elements that refer to a given dashboard id
         */
        dashboard_id: Int64? = nil,
        /**
         * @param {Int64} look_id Select elements that refer to a given look id
         */
        look_id: Int64? = nil,
        /**
         * @param {String} title Match the title of element
         */
        title: String? = nil,
        /**
         * @param {Bool} deleted Select soft-deleted dashboard elements
         */
        deleted: Bool? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        /**
         * @param {String} sorts Fields to sort by. Sortable fields: [:look_id, :dashboard_id, :deleted, :title]
         */
        sorts: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DashboardElement], SDKError> {
        let result: SDKResponse<[DashboardElement], SDKError> = self.get("/dashboard_elements/search", 
            ["dashboard_id": dashboard_id, "look_id": look_id, "title": title, "deleted": deleted as Any?, "fields": fields, "filter_or": filter_or as Any?, "sorts": sorts], nil, options)
        return result
    }

    /**
     * ### Search Dashboards
     *
     * Returns an **array of dashboard objects** that match the specified search criteria.
     *
     * If multiple search params are given and `filter_or` is FALSE or not specified,
     * search params are combined in a logical AND operation.
     * Only rows that match *all* search param criteria will be returned.
     *
     * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
     * Results will include rows that match **any** of the search criteria.
     *
     * String search params use case-insensitive matching.
     * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
     * example="dan%" will match "danger" and "Danzig" but not "David"
     * example="D_m%" will match "Damage" and "dump"
     *
     * Integer search params can accept a single value or a comma separated list of values. The multiple
     * values will be combined under a logical OR operation - results will match at least one of
     * the given values.
     *
     * Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
     * or exclude (respectively) rows where the column is null.
     *
     * Boolean search params accept only "true" and "false" as values.
     *
     *
     * The parameters `limit`, and `offset` are recommended for fetching results in page-size chunks.
     *
     * Get a **single dashboard** by id with [dashboard()](#!/Dashboard/dashboard)
     *
     * GET /dashboards/search -> [Dashboard]
     */
    func search_dashboards(
        /**
         * @param {String} id Match dashboard id.
         */
        `id`: String? = nil,
        /**
         * @param {String} slug Match dashboard slug.
         */
        slug: String? = nil,
        /**
         * @param {String} title Match Dashboard title.
         */
        title: String? = nil,
        /**
         * @param {String} description Match Dashboard description.
         */
        description: String? = nil,
        /**
         * @param {String} content_favorite_id Filter on a content favorite id.
         */
        content_favorite_id: String? = nil,
        /**
         * @param {String} folder_id Filter on a particular space.
         */
        folder_id: String? = nil,
        /**
         * @param {String} deleted Filter on dashboards deleted status.
         */
        deleted: String? = nil,
        /**
         * @param {String} user_id Filter on dashboards created by a particular user.
         */
        user_id: String? = nil,
        /**
         * @param {String} view_count Filter on a particular value of view_count
         */
        view_count: String? = nil,
        /**
         * @param {String} content_metadata_id Filter on a content favorite id.
         */
        content_metadata_id: String? = nil,
        /**
         * @param {Bool} curate Exclude items that exist only in personal spaces other than the users
         */
        curate: Bool? = nil,
        /**
         * @param {String} last_viewed_at Select dashboards based on when they were last viewed
         */
        last_viewed_at: String? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {Int64} limit Number of results to return. (used with offset and takes priority over page and per_page)
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts One or more fields to sort by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :folder_id, :description, :view_count, :favorite_count, :slug, :content_favorite_id, :content_metadata_id, :deleted, :deleted_at, :last_viewed_at, :last_accessed_at]
         */
        sorts: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Dashboard], SDKError> {
        let result: SDKResponse<[Dashboard], SDKError> = self.get("/dashboards/search", 
            ["id": id, "slug": slug, "title": title, "description": description, "content_favorite_id": content_favorite_id, "folder_id": folder_id, "deleted": deleted, "user_id": user_id, "view_count": view_count, "content_metadata_id": content_metadata_id, "curate": curate as Any?, "last_viewed_at": last_viewed_at, "fields": fields, "page": page, "per_page": per_page, "limit": limit, "offset": offset, "sorts": sorts, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * Search for folders by creator id, parent id, name, etc
     *
     * GET /folders/search -> [Folder]
     */
    func search_folders(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {Int64} limit Number of results to return. (used with offset and takes priority over page and per_page)
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} name Match Space title.
         */
        name: String? = nil,
        /**
         * @param {Int64} id Match Space id
         */
        `id`: Int64? = nil,
        /**
         * @param {String} parent_id Filter on a children of a particular folder.
         */
        parent_id: String? = nil,
        /**
         * @param {String} creator_id Filter on folder created by a particular user.
         */
        creator_id: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Folder], SDKError> {
        let result: SDKResponse<[Folder], SDKError> = self.get("/folders/search", 
            ["fields": fields, "page": page, "per_page": per_page, "limit": limit, "offset": offset, "sorts": sorts, "name": name, "id": id, "parent_id": parent_id, "creator_id": creator_id, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * ### Search groups
     *
     * Returns all group records that match the given search criteria.
     *
     * If multiple search params are given and `filter_or` is FALSE or not specified,
     * search params are combined in a logical AND operation.
     * Only rows that match *all* search param criteria will be returned.
     *
     * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
     * Results will include rows that match **any** of the search criteria.
     *
     * String search params use case-insensitive matching.
     * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
     * example="dan%" will match "danger" and "Danzig" but not "David"
     * example="D_m%" will match "Damage" and "dump"
     *
     * Integer search params can accept a single value or a comma separated list of values. The multiple
     * values will be combined under a logical OR operation - results will match at least one of
     * the given values.
     *
     * Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
     * or exclude (respectively) rows where the column is null.
     *
     * Boolean search params accept only "true" and "false" as values.
     *
     * GET /groups/search -> [GroupSearch]
     */
    func search_groups(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} limit Number of results to return (used with `offset`).
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any (used with `limit`).
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        /**
         * @param {Int64} id Match group id.
         */
        `id`: Int64? = nil,
        /**
         * @param {String} name Match group name.
         */
        name: String? = nil,
        /**
         * @param {String} external_group_id Match group external_group_id.
         */
        external_group_id: String? = nil,
        /**
         * @param {Bool} externally_managed Match group externally_managed.
         */
        externally_managed: Bool? = nil,
        /**
         * @param {Bool} externally_orphaned Match group externally_orphaned.
         */
        externally_orphaned: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[GroupSearch], SDKError> {
        let result: SDKResponse<[GroupSearch], SDKError> = self.get("/groups/search", 
            ["fields": fields, "limit": limit, "offset": offset, "sorts": sorts, "filter_or": filter_or as Any?, "id": id, "name": name, "external_group_id": external_group_id, "externally_managed": externally_managed as Any?, "externally_orphaned": externally_orphaned as Any?], nil, options)
        return result
    }

    /**
     * ### Search Looks
     *
     * Returns an **array of Look objects** that match the specified search criteria.
     *
     * If multiple search params are given and `filter_or` is FALSE or not specified,
     * search params are combined in a logical AND operation.
     * Only rows that match *all* search param criteria will be returned.
     *
     * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
     * Results will include rows that match **any** of the search criteria.
     *
     * String search params use case-insensitive matching.
     * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
     * example="dan%" will match "danger" and "Danzig" but not "David"
     * example="D_m%" will match "Damage" and "dump"
     *
     * Integer search params can accept a single value or a comma separated list of values. The multiple
     * values will be combined under a logical OR operation - results will match at least one of
     * the given values.
     *
     * Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
     * or exclude (respectively) rows where the column is null.
     *
     * Boolean search params accept only "true" and "false" as values.
     *
     *
     * Get a **single look** by id with [look(id)](#!/Look/look)
     *
     * GET /looks/search -> [Look]
     */
    func search_looks(
        /**
         * @param {String} id Match look id.
         */
        `id`: String? = nil,
        /**
         * @param {String} title Match Look title.
         */
        title: String? = nil,
        /**
         * @param {String} description Match Look description.
         */
        description: String? = nil,
        /**
         * @param {String} content_favorite_id Select looks with a particular content favorite id
         */
        content_favorite_id: String? = nil,
        /**
         * @param {String} folder_id Select looks in a particular folder.
         */
        folder_id: String? = nil,
        /**
         * @param {String} user_id Select looks created by a particular user.
         */
        user_id: String? = nil,
        /**
         * @param {String} view_count Select looks with particular view_count value
         */
        view_count: String? = nil,
        /**
         * @param {Bool} deleted Select soft-deleted looks
         */
        deleted: Bool? = nil,
        /**
         * @param {Int64} query_id Select looks that reference a particular query by query_id
         */
        query_id: Int64? = nil,
        /**
         * @param {Bool} curate Exclude items that exist only in personal spaces other than the users
         */
        curate: Bool? = nil,
        /**
         * @param {String} last_viewed_at Select looks based on when they were last viewed
         */
        last_viewed_at: String? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Requested page.
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Results per page.
         */
        per_page: Int64? = nil,
        /**
         * @param {Int64} limit Number of results to return. (used with offset and takes priority over page and per_page)
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts One or more fields to sort results by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :folder_id, :description, :updated_at, :last_updater_id, :view_count, :favorite_count, :content_favorite_id, :deleted, :deleted_at, :last_viewed_at, :last_accessed_at, :query_id]
         */
        sorts: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Look], SDKError> {
        let result: SDKResponse<[Look], SDKError> = self.get("/looks/search", 
            ["id": id, "title": title, "description": description, "content_favorite_id": content_favorite_id, "folder_id": folder_id, "user_id": user_id, "view_count": view_count, "deleted": deleted as Any?, "query_id": query_id, "curate": curate as Any?, "last_viewed_at": last_viewed_at, "fields": fields, "page": page, "per_page": per_page, "limit": limit, "offset": offset, "sorts": sorts, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * ### Search model sets
     * Returns all model set records that match the given search criteria.
     * If multiple search params are given and `filter_or` is FALSE or not specified,
     * search params are combined in a logical AND operation.
     * Only rows that match *all* search param criteria will be returned.
     *
     * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
     * Results will include rows that match **any** of the search criteria.
     *
     * String search params use case-insensitive matching.
     * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
     * example="dan%" will match "danger" and "Danzig" but not "David"
     * example="D_m%" will match "Damage" and "dump"
     *
     * Integer search params can accept a single value or a comma separated list of values. The multiple
     * values will be combined under a logical OR operation - results will match at least one of
     * the given values.
     *
     * Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
     * or exclude (respectively) rows where the column is null.
     *
     * Boolean search params accept only "true" and "false" as values.
     *
     * GET /model_sets/search -> [ModelSet]
     */
    func search_model_sets(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} limit Number of results to return (used with `offset`).
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any (used with `limit`).
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {Int64} id Match model set id.
         */
        `id`: Int64? = nil,
        /**
         * @param {String} name Match model set name.
         */
        name: String? = nil,
        /**
         * @param {Bool} all_access Match model sets by all_access status.
         */
        all_access: Bool? = nil,
        /**
         * @param {Bool} built_in Match model sets by built_in status.
         */
        built_in: Bool? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression.
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[ModelSet], SDKError> {
        let result: SDKResponse<[ModelSet], SDKError> = self.get("/model_sets/search", 
            ["fields": fields, "limit": limit, "offset": offset, "sorts": sorts, "id": id, "name": name, "all_access": all_access as Any?, "built_in": built_in as Any?, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * ### Search permission sets
     * Returns all permission set records that match the given search criteria.
     * If multiple search params are given and `filter_or` is FALSE or not specified,
     * search params are combined in a logical AND operation.
     * Only rows that match *all* search param criteria will be returned.
     *
     * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
     * Results will include rows that match **any** of the search criteria.
     *
     * String search params use case-insensitive matching.
     * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
     * example="dan%" will match "danger" and "Danzig" but not "David"
     * example="D_m%" will match "Damage" and "dump"
     *
     * Integer search params can accept a single value or a comma separated list of values. The multiple
     * values will be combined under a logical OR operation - results will match at least one of
     * the given values.
     *
     * Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
     * or exclude (respectively) rows where the column is null.
     *
     * Boolean search params accept only "true" and "false" as values.
     *
     * GET /permission_sets/search -> [PermissionSet]
     */
    func search_permission_sets(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} limit Number of results to return (used with `offset`).
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any (used with `limit`).
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {Int64} id Match permission set id.
         */
        `id`: Int64? = nil,
        /**
         * @param {String} name Match permission set name.
         */
        name: String? = nil,
        /**
         * @param {Bool} all_access Match permission sets by all_access status.
         */
        all_access: Bool? = nil,
        /**
         * @param {Bool} built_in Match permission sets by built_in status.
         */
        built_in: Bool? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression.
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[PermissionSet], SDKError> {
        let result: SDKResponse<[PermissionSet], SDKError> = self.get("/permission_sets/search", 
            ["fields": fields, "limit": limit, "offset": offset, "sorts": sorts, "id": id, "name": name, "all_access": all_access as Any?, "built_in": built_in as Any?, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * ### Search roles
     *
     * Returns all role records that match the given search criteria.
     *
     * If multiple search params are given and `filter_or` is FALSE or not specified,
     * search params are combined in a logical AND operation.
     * Only rows that match *all* search param criteria will be returned.
     *
     * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
     * Results will include rows that match **any** of the search criteria.
     *
     * String search params use case-insensitive matching.
     * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
     * example="dan%" will match "danger" and "Danzig" but not "David"
     * example="D_m%" will match "Damage" and "dump"
     *
     * Integer search params can accept a single value or a comma separated list of values. The multiple
     * values will be combined under a logical OR operation - results will match at least one of
     * the given values.
     *
     * Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
     * or exclude (respectively) rows where the column is null.
     *
     * Boolean search params accept only "true" and "false" as values.
     *
     * GET /roles/search -> [Role]
     */
    func search_roles(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Int64} limit Number of results to return (used with `offset`).
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any (used with `limit`).
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {Int64} id Match role id.
         */
        `id`: Int64? = nil,
        /**
         * @param {String} name Match role name.
         */
        name: String? = nil,
        /**
         * @param {Bool} built_in Match roles by built_in status.
         */
        built_in: Bool? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression.
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Role], SDKError> {
        let result: SDKResponse<[Role], SDKError> = self.get("/roles/search", 
            ["fields": fields, "limit": limit, "offset": offset, "sorts": sorts, "id": id, "name": name, "built_in": built_in as Any?, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * ### Search all themes for matching criteria.
     *
     * Returns an **array of theme objects** that match the specified search criteria.
     *
     * | Search Parameters | Description
     * | :-------------------: | :------ |
     * | `begin_at` only | Find themes active at or after `begin_at`
     * | `end_at` only | Find themes active at or before `end_at`
     * | both set | Find themes with an active inclusive period between `begin_at` and `end_at`
     *
     * Note: Range matching requires boolean AND logic.
     * When using `begin_at` and `end_at` together, do not use `filter_or`=TRUE
     *
     * If multiple search params are given and `filter_or` is FALSE or not specified,
     * search params are combined in a logical AND operation.
     * Only rows that match *all* search param criteria will be returned.
     *
     * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
     * Results will include rows that match **any** of the search criteria.
     *
     * String search params use case-insensitive matching.
     * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
     * example="dan%" will match "danger" and "Danzig" but not "David"
     * example="D_m%" will match "Damage" and "dump"
     *
     * Integer search params can accept a single value or a comma separated list of values. The multiple
     * values will be combined under a logical OR operation - results will match at least one of
     * the given values.
     *
     * Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
     * or exclude (respectively) rows where the column is null.
     *
     * Boolean search params accept only "true" and "false" as values.
     *
     *
     * Get a **single theme** by id with [Theme](#!/Theme/theme)
     *
     * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.
     *
     * GET /themes/search -> [Theme]
     */
    func search_themes(
        /**
         * @param {Int64} id Match theme id.
         */
        `id`: Int64? = nil,
        /**
         * @param {String} name Match theme name.
         */
        name: String? = nil,
        /**
         * @param {Date} begin_at Timestamp for activation.
         */
        begin_at: Date? = nil,
        /**
         * @param {Date} end_at Timestamp for expiration.
         */
        end_at: Date? = nil,
        /**
         * @param {Int64} limit Number of results to return (used with `offset`).
         */
        limit: Int64? = nil,
        /**
         * @param {Int64} offset Number of results to skip before returning any (used with `limit`).
         */
        offset: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Theme], SDKError> {
        let result: SDKResponse<[Theme], SDKError> = self.get("/themes/search", 
            ["id": id, "name": name, "begin_at": begin_at as Any?, "end_at": end_at as Any?, "limit": limit, "offset": offset, "sorts": sorts, "fields": fields, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * ### Search currently locked-out users.
     *
     * GET /user_login_lockouts/search -> [UserLoginLockout]
     */
    func search_user_login_lockouts(
        /**
         * @param {String} fields Include only these fields in the response
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Return only page N of paginated results
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Return N rows of data per page
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} auth_type Auth type user is locked out for (email, ldap, totp, api)
         */
        auth_type: String? = nil,
        /**
         * @param {String} full_name Match name
         */
        full_name: String? = nil,
        /**
         * @param {String} email Match email
         */
        email: String? = nil,
        /**
         * @param {String} remote_id Match remote LDAP ID
         */
        remote_id: String? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[UserLoginLockout], SDKError> {
        let result: SDKResponse<[UserLoginLockout], SDKError> = self.get("/user_login_lockouts/search", 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts, "auth_type": auth_type, "full_name": full_name, "email": email, "remote_id": remote_id, "filter_or": filter_or as Any?], nil, options)
        return result
    }

    /**
     * ### Search users
     *
     * Returns all<sup>*</sup> user records that match the given search criteria.
     *
     * If multiple search params are given and `filter_or` is FALSE or not specified,
     * search params are combined in a logical AND operation.
     * Only rows that match *all* search param criteria will be returned.
     *
     * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
     * Results will include rows that match **any** of the search criteria.
     *
     * String search params use case-insensitive matching.
     * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
     * example="dan%" will match "danger" and "Danzig" but not "David"
     * example="D_m%" will match "Damage" and "dump"
     *
     * Integer search params can accept a single value or a comma separated list of values. The multiple
     * values will be combined under a logical OR operation - results will match at least one of
     * the given values.
     *
     * Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
     * or exclude (respectively) rows where the column is null.
     *
     * Boolean search params accept only "true" and "false" as values.
     *
     *
     * (<sup>*</sup>) Results are always filtered to the level of information the caller is permitted to view.
     * Looker admins can see all user details; normal users in an open system can see
     * names of other users but no details; normal users in a closed system can only see
     * names of other users who are members of the same group as the user.
     *
     * GET /users/search -> [User]
     */
    func search_users(
        /**
         * @param {String} fields Include only these fields in the response
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Return only page N of paginated results
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Return N rows of data per page
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by.
         */
        sorts: String? = nil,
        /**
         * @param {String} id Match User Id.
         */
        `id`: String? = nil,
        /**
         * @param {String} first_name Match First name.
         */
        first_name: String? = nil,
        /**
         * @param {String} last_name Match Last name.
         */
        last_name: String? = nil,
        /**
         * @param {Bool} verified_looker_employee Search for user accounts associated with Looker employees
         */
        verified_looker_employee: Bool? = nil,
        /**
         * @param {String} email Search for the user with this email address
         */
        email: String? = nil,
        /**
         * @param {Bool} is_disabled Search for disabled user accounts
         */
        is_disabled: Bool? = nil,
        /**
         * @param {Bool} filter_or Combine given search criteria in a boolean OR expression
         */
        filter_or: Bool? = nil,
        /**
         * @param {String} content_metadata_id Search for users who have access to this content_metadata item
         */
        content_metadata_id: String? = nil,
        /**
         * @param {String} group_id Search for users who are direct members of this group
         */
        group_id: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[User], SDKError> {
        let result: SDKResponse<[User], SDKError> = self.get("/users/search", 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts, "id": id, "first_name": first_name, "last_name": last_name, "verified_looker_employee": verified_looker_employee as Any?, "email": email, "is_disabled": is_disabled as Any?, "filter_or": filter_or as Any?, "content_metadata_id": content_metadata_id, "group_id": group_id], nil, options)
        return result
    }

    /**
     * ### Search for user accounts by name
     *
     * Returns all user accounts where `first_name` OR `last_name` OR `email` field values match a pattern.
     * The pattern can contain `%` and `_` wildcards as in SQL LIKE expressions.
     *
     * Any additional search params will be combined into a logical AND expression.
     *
     * GET /users/search/names/{pattern} -> [User]
     */
    func search_users_names(
        /**
         * @param {String} pattern Pattern to match
         */
        _ pattern: String,
        /**
         * @param {String} fields Include only these fields in the response
         */
        fields: String? = nil,
        /**
         * @param {Int64} page Return only page N of paginated results
         */
        page: Int64? = nil,
        /**
         * @param {Int64} per_page Return N rows of data per page
         */
        per_page: Int64? = nil,
        /**
         * @param {String} sorts Fields to sort by
         */
        sorts: String? = nil,
        /**
         * @param {Int64} id Match User Id
         */
        `id`: Int64? = nil,
        /**
         * @param {String} first_name Match First name
         */
        first_name: String? = nil,
        /**
         * @param {String} last_name Match Last name
         */
        last_name: String? = nil,
        /**
         * @param {Bool} verified_looker_employee Match Verified Looker employee
         */
        verified_looker_employee: Bool? = nil,
        /**
         * @param {String} email Match Email Address
         */
        email: String? = nil,
        /**
         * @param {Bool} is_disabled Include or exclude disabled accounts in the results
         */
        is_disabled: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[User], SDKError> {
        let path_pattern = encodeParam(pattern)
        let result: SDKResponse<[User], SDKError> = self.get("/users/search/names/\(path_pattern)", 
            ["fields": fields, "page": page, "per_page": per_page, "sorts": sorts, "id": id, "first_name": first_name, "last_name": last_name, "verified_looker_employee": verified_looker_employee as Any?, "email": email, "is_disabled": is_disabled as Any?], nil, options)
        return result
    }

    /**
     * ### Get API Session
     *
     * Returns information about the current API session, such as which workspace is selected for the session.
     *
     * GET /session -> ApiSession
     */
    func session(
        options: ITransportSettings? = nil
    ) -> SDKResponse<ApiSession, SDKError> {
        let result: SDKResponse<ApiSession, SDKError> = self.get("/session", nil, nil, options)
        return result
    }

    /**
     * ### Get session config.
     *
     * GET /session_config -> SessionConfig
     */
    func session_config(
        options: ITransportSettings? = nil
    ) -> SDKResponse<SessionConfig, SDKError> {
        let result: SDKResponse<SessionConfig, SDKError> = self.get("/session_config", nil, nil, options)
        return result
    }

    /**
     * ### Set the global default Color Collection by ID
     *
     * Returns the new specified default Color Collection object.
     * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.
     *
     * PUT /color_collections/default -> ColorCollection
     */
    func set_default_color_collection(
        /**
         * @param {String} collection_id ID of color collection to set as default
         */
        _ collection_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ColorCollection, SDKError> {
        let result: SDKResponse<ColorCollection, SDKError> = self.put("/color_collections/default", 
            ["collection_id": collection_id], nil, options)
        return result
    }

    /**
     * ### Set the global default theme by theme name
     *
     * Only Admin users can call this function.
     *
     * Only an active theme with no expiration (`end_at` not set) can be assigned as the default theme. As long as a theme has an active record with no expiration, it can be set as the default.
     *
     * [Create Theme](#!/Theme/create) has detailed information on rules for default and active themes
     *
     * Returns the new specified default theme object.
     *
     * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.
     *
     * PUT /themes/default -> Theme
     */
    func set_default_theme(
        /**
         * @param {String} name Name of theme to set as default
         */
        _ name: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Theme, SDKError> {
        let result: SDKResponse<Theme, SDKError> = self.put("/themes/default", 
            ["name": name], nil, options)
        return result
    }

    /**
     * ### Set all groups for a role, removing all existing group associations from that role.
     *
     * PUT /roles/{role_id}/groups -> [LkGroup]
     */
    func set_role_groups(
        /**
         * @param {Int64} role_id Id of Role
         */
        _ role_id: Int64,
        /**
         * @param {[Int64]} body
         */
        _ body: [Int64],
        options: ITransportSettings? = nil
    ) -> SDKResponse<[LkGroup], SDKError> {
        let path_role_id = encodeParam(role_id)
        let result: SDKResponse<[LkGroup], SDKError> = self.put("/roles/\(path_role_id)/groups", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Set all the users of the role with a specific id.
     *
     * PUT /roles/{role_id}/users -> [User]
     */
    func set_role_users(
        /**
         * @param {Int64} role_id id of role
         */
        _ role_id: Int64,
        /**
         * @param {[Int64]} body
         */
        _ body: [Int64],
        options: ITransportSettings? = nil
    ) -> SDKResponse<[User], SDKError> {
        let path_role_id = encodeParam(role_id)
        let result: SDKResponse<[User], SDKError> = self.put("/roles/\(path_role_id)/users", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Define values for a user attribute across a set of groups, in priority order.
     *
     * This function defines all values for a user attribute defined by user groups. This is a global setting, potentially affecting
     * all users in the system. This function replaces any existing group value definitions for the indicated user attribute.
     *
     * The value of a user attribute for a given user is determined by searching the following locations, in this order:
     *
     * 1. the user's account settings
     * 2. the groups that the user is a member of
     * 3. the default value of the user attribute, if any
     *
     * The user may be a member of multiple groups which define different values for that user attribute. The order of items in the group_values parameter
     * determines which group takes priority for that user. Lowest array index wins.
     *
     * An alternate method to indicate the selection precedence of group-values is to assign numbers to the 'rank' property of each
     * group-value object in the array. Lowest 'rank' value wins. If you use this technique, you must assign a
     * rank value to every group-value object in the array.
     *
     *   To set a user attribute value for a single user, see [Set User Attribute User Value](#!/User/set_user_attribute_user_value).
     * To set a user attribute value for all members of a group, see [Set User Attribute Group Value](#!/Group/update_user_attribute_group_value).
     *
     * POST /user_attributes/{user_attribute_id}/group_values -> [UserAttributeGroupValue]
     */
    func set_user_attribute_group_values(
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        /**
         * @param {[UserAttributeGroupValue]} body
         */
        _ body: [UserAttributeGroupValue],
        options: ITransportSettings? = nil
    ) -> SDKResponse<[UserAttributeGroupValue], SDKError> {
        let path_user_attribute_id = encodeParam(user_attribute_id)
        let result: SDKResponse<[UserAttributeGroupValue], SDKError> = self.post("/user_attributes/\(path_user_attribute_id)/group_values", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Store a custom value for a user attribute in a user's account settings.
     *
     * Per-user user attribute values take precedence over group or default values.
     *
     * PATCH /users/{user_id}/attribute_values/{user_attribute_id} -> UserAttributeWithValue
     */
    func set_user_attribute_user_value(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        /**
         * @param {WriteUserAttributeWithValue} body
         */
        _ body: WriteUserAttributeWithValue,
        options: ITransportSettings? = nil
    ) -> SDKResponse<UserAttributeWithValue, SDKError> {
        let path_user_id = encodeParam(user_id)
        let path_user_attribute_id = encodeParam(user_attribute_id)
        let result: SDKResponse<UserAttributeWithValue, SDKError> = self.patch("/users/\(path_user_id)/attribute_values/\(path_user_attribute_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Set roles of the user with a specific id.
     *
     * PUT /users/{user_id}/roles -> [Role]
     */
    func set_user_roles(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {[Int64]} body
         */
        _ body: [Int64],
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Role], SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<[Role], SDKError> = self.put("/users/\(path_user_id)/roles", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * Get a SQL Runner query.
     *
     * GET /sql_queries/{slug} -> SqlQuery
     */
    func sql_query(
        /**
         * @param {String} slug slug of query
         */
        _ slug: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SqlQuery, SDKError> {
        let path_slug = encodeParam(slug)
        let result: SDKResponse<SqlQuery, SDKError> = self.get("/sql_queries/\(path_slug)", nil, nil, options)
        return result
    }

    /**
     * ### Update all linked dashboards to match the specified LookML dashboard.
     *
     * Any UDD (a dashboard which exists in the Looker database rather than as a LookML file) which has a `lookml_link_id`
     * property value referring to a LookML dashboard's id (model::dashboardname) will be updated so that it matches the current state of the LookML dashboard.
     *
     * For this operation to succeed the user must have permission to view the LookML dashboard, and only linked dashboards
     * that the user has permission to update will be synced.
     *
     * To **link** or **unlink** a UDD set the `lookml_link_id` property with [update_dashboard()](#!/Dashboard/update_dashboard)
     *
     * PATCH /dashboards/{lookml_dashboard_id}/sync -> [Int64]
     */
    func sync_lookml_dashboard(
        /**
         * @param {String} lookml_dashboard_id Id of LookML dashboard, in the form 'model::dashboardname'
         */
        _ lookml_dashboard_id: String,
        /**
         * @param {WriteDashboard} body
         */
        _ body: WriteDashboard,
        /**
         * @param {Bool} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
         */
        raw_locale: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Int64], SDKError> {
        let path_lookml_dashboard_id = encodeParam(lookml_dashboard_id)
        let result: SDKResponse<[Int64], SDKError> = self.patch("/dashboards/\(path_lookml_dashboard_id)/sync", 
            ["raw_locale": raw_locale as Any?], try! self.encode(body), options)
        return result
    }

    /**
     * ### Test an existing connection.
     *
     * Note that a connection's 'dialect' property has a 'connection_tests' property that lists the
     * specific types of tests that the connection supports.
     *
     * This API is rate limited.
     *
     * Unsupported tests in the request will be ignored.
     *
     * PUT /connections/{connection_name}/test -> [DBConnectionTestResult]
     */
    func test_connection(
        /**
         * @param {String} connection_name Name of connection
         */
        _ connection_name: String,
        /**
         * @param {DelimArray<String>} tests Array of names of tests to run
         */
        tests: DelimArray<String>? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DBConnectionTestResult], SDKError> {
        let path_connection_name = encodeParam(connection_name)
        let result: SDKResponse<[DBConnectionTestResult], SDKError> = self.put("/connections/\(path_connection_name)/test", 
            ["tests": tests as Any?], nil, options)
        return result
    }

    /**
     * ### Test a connection configuration.
     *
     * Note that a connection's 'dialect' property has a 'connection_tests' property that lists the
     * specific types of tests that the connection supports.
     *
     * This API is rate limited.
     *
     * Unsupported tests in the request will be ignored.
     *
     * PUT /connections/test -> [DBConnectionTestResult]
     */
    func test_connection_config(
        /**
         * @param {WriteDBConnection} body
         */
        _ body: WriteDBConnection,
        /**
         * @param {DelimArray<String>} tests Array of names of tests to run
         */
        tests: DelimArray<String>? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[DBConnectionTestResult], SDKError> {
        let result: SDKResponse<[DBConnectionTestResult], SDKError> = self.put("/connections/test", 
            ["tests": tests as Any?], try! self.encode(body), options)
        return result
    }

    /**
     * Tests the integration to make sure all the settings are working.
     *
     * POST /integrations/{integration_id}/test -> IntegrationTestResult
     */
    func test_integration(
        /**
         * @param {String} integration_id Id of integration
         */
        _ integration_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<IntegrationTestResult, SDKError> {
        let path_integration_id = encodeParam(integration_id)
        let result: SDKResponse<IntegrationTestResult, SDKError> = self.post("/integrations/\(path_integration_id)/test", nil, nil, options)
        return result
    }

    /**
     * ### Test the connection authentication settings for an LDAP configuration.
     *
     * This tests that the connection is possible and that a 'server' account to be used by Looker can       authenticate to the LDAP server given connection and authentication information.
     *
     * **connection_host**, **connection_port**, and **auth_username**, are required.       **connection_tls** and **auth_password** are optional.
     *
     * Example:
     * ```json
     * {
     *   "connection_host": "ldap.example.com",
     *   "connection_port": "636",
     *   "connection_tls": true,
     *   "auth_username": "cn=looker,dc=example,dc=com",
     *   "auth_password": "secret"
     * }
     * ```
     *
     * Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.
     *
     * The active LDAP settings are not modified.
     *
     * PUT /ldap_config/test_auth -> LDAPConfigTestResult
     */
    func test_ldap_config_auth(
        /**
         * @param {WriteLDAPConfig} body
         */
        _ body: WriteLDAPConfig,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LDAPConfigTestResult, SDKError> {
        let result: SDKResponse<LDAPConfigTestResult, SDKError> = self.put("/ldap_config/test_auth", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Test the connection settings for an LDAP configuration.
     *
     * This tests that the connection is possible given a connection_host and connection_port.
     *
     * **connection_host** and **connection_port** are required. **connection_tls** is optional.
     *
     * Example:
     * ```json
     * {
     *   "connection_host": "ldap.example.com",
     *   "connection_port": "636",
     *   "connection_tls": true
     * }
     * ```
     *
     * No authentication to the LDAP server is attempted.
     *
     * The active LDAP settings are not modified.
     *
     * PUT /ldap_config/test_connection -> LDAPConfigTestResult
     */
    func test_ldap_config_connection(
        /**
         * @param {WriteLDAPConfig} body
         */
        _ body: WriteLDAPConfig,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LDAPConfigTestResult, SDKError> {
        let result: SDKResponse<LDAPConfigTestResult, SDKError> = self.put("/ldap_config/test_connection", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Test the user authentication settings for an LDAP configuration.
     *
     * This test accepts a full LDAP configuration along with a username/password pair and attempts to       authenticate the user with the LDAP server. The configuration is validated before attempting the       authentication.
     *
     * Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.
     *
     * **test_ldap_user** and **test_ldap_password** are required.
     *
     * The active LDAP settings are not modified.
     *
     * PUT /ldap_config/test_user_auth -> LDAPConfigTestResult
     */
    func test_ldap_config_user_auth(
        /**
         * @param {WriteLDAPConfig} body
         */
        _ body: WriteLDAPConfig,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LDAPConfigTestResult, SDKError> {
        let result: SDKResponse<LDAPConfigTestResult, SDKError> = self.put("/ldap_config/test_user_auth", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Test the user authentication settings for an LDAP configuration without authenticating the user.
     *
     * This test will let you easily test the mapping for user properties and roles for any user without      needing to authenticate as that user.
     *
     * This test accepts a full LDAP configuration along with a username and attempts to find the full info      for the user from the LDAP server without actually authenticating the user. So, user password is not      required.The configuration is validated before attempting to contact the server.
     *
     * **test_ldap_user** is required.
     *
     * The active LDAP settings are not modified.
     *
     * PUT /ldap_config/test_user_info -> LDAPConfigTestResult
     */
    func test_ldap_config_user_info(
        /**
         * @param {WriteLDAPConfig} body
         */
        _ body: WriteLDAPConfig,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LDAPConfigTestResult, SDKError> {
        let result: SDKResponse<LDAPConfigTestResult, SDKError> = self.put("/ldap_config/test_user_info", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Get a theme by ID
     *
     * Use this to retrieve a specific theme, whether or not it's currently active.
     *
     * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.
     *
     * GET /themes/{theme_id} -> Theme
     */
    func theme(
        /**
         * @param {Int64} theme_id Id of theme
         */
        _ theme_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Theme, SDKError> {
        let path_theme_id = encodeParam(theme_id)
        let result: SDKResponse<Theme, SDKError> = self.get("/themes/\(path_theme_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get the named theme if it's active. Otherwise, return the default theme
     *
     * The optional `ts` parameter can specify a different timestamp than "now."
     * Note: API users with `show` ability can call this function
     *
     * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.
     *
     * GET /themes/theme_or_default -> Theme
     */
    func theme_or_default(
        /**
         * @param {String} name Name of theme
         */
        _ name: String,
        /**
         * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
         */
        ts: Date? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Theme, SDKError> {
        let result: SDKResponse<Theme, SDKError> = self.get("/themes/theme_or_default", 
            ["name": name, "ts": ts as Any?], nil, options)
        return result
    }

    /**
     * ### Update a board definition.
     *
     * PATCH /boards/{board_id} -> Board
     */
    func update_board(
        /**
         * @param {Int64} board_id Id of board
         */
        _ board_id: Int64,
        /**
         * @param {WriteBoard} body
         */
        _ body: WriteBoard,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Board, SDKError> {
        let path_board_id = encodeParam(board_id)
        let result: SDKResponse<Board, SDKError> = self.patch("/boards/\(path_board_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Update a board item definition.
     *
     * PATCH /board_items/{board_item_id} -> BoardItem
     */
    func update_board_item(
        /**
         * @param {Int64} board_item_id Id of board item
         */
        _ board_item_id: Int64,
        /**
         * @param {WriteBoardItem} body
         */
        _ body: WriteBoardItem,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<BoardItem, SDKError> {
        let path_board_item_id = encodeParam(board_item_id)
        let result: SDKResponse<BoardItem, SDKError> = self.patch("/board_items/\(path_board_item_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Update a board section definition.
     *
     * PATCH /board_sections/{board_section_id} -> BoardSection
     */
    func update_board_section(
        /**
         * @param {Int64} board_section_id Id of board section
         */
        _ board_section_id: Int64,
        /**
         * @param {WriteBoardSection} body
         */
        _ body: WriteBoardSection,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<BoardSection, SDKError> {
        let path_board_section_id = encodeParam(board_section_id)
        let result: SDKResponse<BoardSection, SDKError> = self.patch("/board_sections/\(path_board_section_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * Update the current Cloud Storage Configuration.
     *
     * PATCH /cloud_storage -> BackupConfiguration
     */
    func update_cloud_storage_configuration(
        /**
         * @param {WriteBackupConfiguration} body
         */
        _ body: WriteBackupConfiguration,
        options: ITransportSettings? = nil
    ) -> SDKResponse<BackupConfiguration, SDKError> {
        let result: SDKResponse<BackupConfiguration, SDKError> = self.patch("/cloud_storage", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update a custom color collection by id.
     * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.
     *
     * PATCH /color_collections/{collection_id} -> ColorCollection
     */
    func update_color_collection(
        /**
         * @param {String} collection_id Id of Custom Color Collection
         */
        _ collection_id: String,
        /**
         * @param {WriteColorCollection} body
         */
        _ body: WriteColorCollection,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ColorCollection, SDKError> {
        let path_collection_id = encodeParam(collection_id)
        let result: SDKResponse<ColorCollection, SDKError> = self.patch("/color_collections/\(path_collection_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update a connection using the specified configuration.
     *
     * PATCH /connections/{connection_name} -> DBConnection
     */
    func update_connection(
        /**
         * @param {String} connection_name Name of connection
         */
        _ connection_name: String,
        /**
         * @param {WriteDBConnection} body
         */
        _ body: WriteDBConnection,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DBConnection, SDKError> {
        let path_connection_name = encodeParam(connection_name)
        let result: SDKResponse<DBConnection, SDKError> = self.patch("/connections/\(path_connection_name)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Move a piece of content.
     *
     * PATCH /content_metadata/{content_metadata_id} -> ContentMeta
     */
    func update_content_metadata(
        /**
         * @param {Int64} content_metadata_id Id of content metadata
         */
        _ content_metadata_id: Int64,
        /**
         * @param {WriteContentMeta} body
         */
        _ body: WriteContentMeta,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentMeta, SDKError> {
        let path_content_metadata_id = encodeParam(content_metadata_id)
        let result: SDKResponse<ContentMeta, SDKError> = self.patch("/content_metadata/\(path_content_metadata_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update type of access for content metadata.
     *
     * PUT /content_metadata_access/{content_metadata_access_id} -> ContentMetaGroupUser
     */
    func update_content_metadata_access(
        /**
         * @param {String} content_metadata_access_id Id of content metadata access
         */
        _ content_metadata_access_id: String,
        /**
         * @param {ContentMetaGroupUser} body
         */
        _ body: ContentMetaGroupUser,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ContentMetaGroupUser, SDKError> {
        let path_content_metadata_access_id = encodeParam(content_metadata_access_id)
        let result: SDKResponse<ContentMetaGroupUser, SDKError> = self.put("/content_metadata_access/\(path_content_metadata_access_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * Update custom welcome email setting and values. Optionally send a test email with the new content to the currently logged in user.
     *
     * PATCH /custom_welcome_email -> CustomWelcomeEmail
     */
    func update_custom_welcome_email(
        /**
         * @param {WriteCustomWelcomeEmail} body
         */
        _ body: WriteCustomWelcomeEmail,
        /**
         * @param {Bool} send_test_welcome_email If true a test email with the content from the request will be sent to the current user after saving
         */
        send_test_welcome_email: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CustomWelcomeEmail, SDKError> {
        let result: SDKResponse<CustomWelcomeEmail, SDKError> = self.patch("/custom_welcome_email", 
            ["send_test_welcome_email": send_test_welcome_email as Any?], try! self.encode(body), options)
        return result
    }

    /**
     * Requests to this endpoint will send a welcome email with the custom content provided in the body to the currently logged in user.
     *
     * PUT /custom_welcome_email_test -> WelcomeEmailTest
     */
    func update_custom_welcome_email_test(
        /**
         * @param {WelcomeEmailTest} body
         */
        _ body: WelcomeEmailTest,
        options: ITransportSettings? = nil
    ) -> SDKResponse<WelcomeEmailTest, SDKError> {
        let result: SDKResponse<WelcomeEmailTest, SDKError> = self.put("/custom_welcome_email_test", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update a dashboard
     *
     * You can use this function to change the string and integer properties of
     * a dashboard. Nested objects such as filters, dashboard elements, or dashboard layout components
     * cannot be modified by this function - use the update functions for the respective
     * nested object types (like [update_dashboard_filter()](#!/3.1/Dashboard/update_dashboard_filter) to change a filter)
     * to modify nested objects referenced by a dashboard.
     *
     * If you receive a 422 error response when updating a dashboard, be sure to look at the
     * response body for information about exactly which fields are missing or contain invalid data.
     *
     * PATCH /dashboards/{dashboard_id} -> Dashboard
     */
    func update_dashboard(
        /**
         * @param {String} dashboard_id Id of dashboard
         */
        _ dashboard_id: String,
        /**
         * @param {WriteDashboard} body
         */
        _ body: WriteDashboard,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Dashboard, SDKError> {
        let path_dashboard_id = encodeParam(dashboard_id)
        let result: SDKResponse<Dashboard, SDKError> = self.patch("/dashboards/\(path_dashboard_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update the dashboard element with a specific id.
     *
     * PATCH /dashboard_elements/{dashboard_element_id} -> DashboardElement
     */
    func update_dashboard_element(
        /**
         * @param {String} dashboard_element_id Id of dashboard element
         */
        _ dashboard_element_id: String,
        /**
         * @param {WriteDashboardElement} body
         */
        _ body: WriteDashboardElement,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardElement, SDKError> {
        let path_dashboard_element_id = encodeParam(dashboard_element_id)
        let result: SDKResponse<DashboardElement, SDKError> = self.patch("/dashboard_elements/\(path_dashboard_element_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Update the dashboard filter with a specific id.
     *
     * PATCH /dashboard_filters/{dashboard_filter_id} -> DashboardFilter
     */
    func update_dashboard_filter(
        /**
         * @param {String} dashboard_filter_id Id of dashboard filter
         */
        _ dashboard_filter_id: String,
        /**
         * @param {WriteDashboardFilter} body
         */
        _ body: WriteDashboardFilter,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardFilter, SDKError> {
        let path_dashboard_filter_id = encodeParam(dashboard_filter_id)
        let result: SDKResponse<DashboardFilter, SDKError> = self.patch("/dashboard_filters/\(path_dashboard_filter_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Update the dashboard layout with a specific id.
     *
     * PATCH /dashboard_layouts/{dashboard_layout_id} -> DashboardLayout
     */
    func update_dashboard_layout(
        /**
         * @param {String} dashboard_layout_id Id of dashboard layout
         */
        _ dashboard_layout_id: String,
        /**
         * @param {WriteDashboardLayout} body
         */
        _ body: WriteDashboardLayout,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardLayout, SDKError> {
        let path_dashboard_layout_id = encodeParam(dashboard_layout_id)
        let result: SDKResponse<DashboardLayout, SDKError> = self.patch("/dashboard_layouts/\(path_dashboard_layout_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Update the dashboard element with a specific id.
     *
     * PATCH /dashboard_layout_components/{dashboard_layout_component_id} -> DashboardLayoutComponent
     */
    func update_dashboard_layout_component(
        /**
         * @param {String} dashboard_layout_component_id Id of dashboard layout component
         */
        _ dashboard_layout_component_id: String,
        /**
         * @param {WriteDashboardLayoutComponent} body
         */
        _ body: WriteDashboardLayoutComponent,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DashboardLayoutComponent, SDKError> {
        let path_dashboard_layout_component_id = encodeParam(dashboard_layout_component_id)
        let result: SDKResponse<DashboardLayoutComponent, SDKError> = self.patch("/dashboard_layout_components/\(path_dashboard_layout_component_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Update a datagroup using the specified params.
     *
     * PATCH /datagroups/{datagroup_id} -> Datagroup
     */
    func update_datagroup(
        /**
         * @param {Int64} datagroup_id ID of datagroup.
         */
        _ datagroup_id: Int64,
        /**
         * @param {WriteDatagroup} body
         */
        _ body: WriteDatagroup,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Datagroup, SDKError> {
        let path_datagroup_id = encodeParam(datagroup_id)
        let result: SDKResponse<Datagroup, SDKError> = self.patch("/datagroups/\(path_datagroup_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update the setting for enabling/disabling digest emails
     *
     * PATCH /digest_emails_enabled -> DigestEmails
     */
    func update_digest_emails_enabled(
        /**
         * @param {DigestEmails} body
         */
        _ body: DigestEmails,
        options: ITransportSettings? = nil
    ) -> SDKResponse<DigestEmails, SDKError> {
        let result: SDKResponse<DigestEmails, SDKError> = self.patch("/digest_emails_enabled", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update the folder with a specific id.
     *
     * PATCH /folders/{folder_id} -> Folder
     */
    func update_folder(
        /**
         * @param {String} folder_id Id of folder
         */
        _ folder_id: String,
        /**
         * @param {UpdateFolder} body
         */
        _ body: UpdateFolder,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Folder, SDKError> {
        let path_folder_id = encodeParam(folder_id)
        let result: SDKResponse<Folder, SDKError> = self.patch("/folders/\(path_folder_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Checkout and/or reset --hard an existing Git Branch
     *
     * Only allowed in development mode
     *   - Call `update_session` to select the 'dev' workspace.
     *
     * Checkout an existing branch if name field is different from the name of the currently checked out branch.
     *
     * Optionally specify a branch name, tag name or commit SHA to which the branch should be reset.
     *   **DANGER** hard reset will be force pushed to the remote. Unsaved changes and commits may be permanently lost.
     *
     * PUT /projects/{project_id}/git_branch -> GitBranch
     */
    func update_git_branch(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {WriteGitBranch} body
         */
        _ body: WriteGitBranch,
        options: ITransportSettings? = nil
    ) -> SDKResponse<GitBranch, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<GitBranch, SDKError> = self.put("/projects/\(path_project_id)/git_branch", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Updates the a group (admin only).
     *
     * PATCH /groups/{group_id} -> LkGroup
     */
    func update_group(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {WriteGroup} body
         */
        _ body: WriteGroup,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LkGroup, SDKError> {
        let path_group_id = encodeParam(group_id)
        let result: SDKResponse<LkGroup, SDKError> = self.patch("/groups/\(path_group_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Update parameters on a Integration.
     *
     * PATCH /integrations/{integration_id} -> Integration
     */
    func update_integration(
        /**
         * @param {String} integration_id Id of integration
         */
        _ integration_id: String,
        /**
         * @param {WriteIntegration} body
         */
        _ body: WriteIntegration,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Integration, SDKError> {
        let path_integration_id = encodeParam(integration_id)
        let result: SDKResponse<Integration, SDKError> = self.patch("/integrations/\(path_integration_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Update a Integration Hub definition.
     *
     * This API is rate limited to prevent it from being used for SSRF attacks
     *
     * PATCH /integration_hubs/{integration_hub_id} -> IntegrationHub
     */
    func update_integration_hub(
        /**
         * @param {Int64} integration_hub_id Id of Integration Hub
         */
        _ integration_hub_id: Int64,
        /**
         * @param {WriteIntegrationHub} body
         */
        _ body: WriteIntegrationHub,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<IntegrationHub, SDKError> {
        let path_integration_hub_id = encodeParam(integration_hub_id)
        let result: SDKResponse<IntegrationHub, SDKError> = self.patch("/integration_hubs/\(path_integration_hub_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * Update internal help resources settings
     *
     * PATCH /internal_help_resources -> InternalHelpResources
     */
    func update_internal_help_resources(
        /**
         * @param {WriteInternalHelpResources} body
         */
        _ body: WriteInternalHelpResources,
        options: ITransportSettings? = nil
    ) -> SDKResponse<InternalHelpResources, SDKError> {
        let result: SDKResponse<InternalHelpResources, SDKError> = self.patch("/internal_help_resources", nil, try! self.encode(body), options)
        return result
    }

    /**
     * Update internal help resources content
     *
     * PATCH /internal_help_resources_content -> InternalHelpResourcesContent
     */
    func update_internal_help_resources_content(
        /**
         * @param {WriteInternalHelpResourcesContent} body
         */
        _ body: WriteInternalHelpResourcesContent,
        options: ITransportSettings? = nil
    ) -> SDKResponse<InternalHelpResourcesContent, SDKError> {
        let result: SDKResponse<InternalHelpResourcesContent, SDKError> = self.patch("/internal_help_resources_content", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update the LDAP configuration.
     *
     * Configuring LDAP impacts authentication for all users. This configuration should be done carefully.
     *
     * Only Looker administrators can read and update the LDAP configuration.
     *
     * LDAP is enabled or disabled for Looker using the **enabled** field.
     *
     * It is **highly** recommended that any LDAP setting changes be tested using the APIs below before being set globally.
     *
     * See the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup) for additional information.
     *
     * PATCH /ldap_config -> LDAPConfig
     */
    func update_ldap_config(
        /**
         * @param {WriteLDAPConfig} body
         */
        _ body: WriteLDAPConfig,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LDAPConfig, SDKError> {
        let result: SDKResponse<LDAPConfig, SDKError> = self.patch("/ldap_config", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update information about the legacy feature with a specific id.
     *
     * PATCH /legacy_features/{legacy_feature_id} -> LegacyFeature
     */
    func update_legacy_feature(
        /**
         * @param {String} legacy_feature_id id of legacy feature
         */
        _ legacy_feature_id: String,
        /**
         * @param {WriteLegacyFeature} body
         */
        _ body: WriteLegacyFeature,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LegacyFeature, SDKError> {
        let path_legacy_feature_id = encodeParam(legacy_feature_id)
        let result: SDKResponse<LegacyFeature, SDKError> = self.patch("/legacy_features/\(path_legacy_feature_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Modify a Look
     *
     * Use this function to modify parts of a look. Property values given in a call to `update_look` are
     * applied to the existing look, so there's no need to include properties whose values are not changing.
     * It's best to specify only the properties you want to change and leave everything else out
     * of your `update_look` call. **Look properties marked 'read-only' will be ignored.**
     *
     * When a user deletes a look in the Looker UI, the look data remains in the database but is
     * marked with a deleted flag ("soft-deleted"). Soft-deleted looks can be undeleted (by an admin)
     * if the delete was in error.
     *
     * To soft-delete a look via the API, use [update_look()](#!/Look/update_look) to change the look's `deleted` property to `true`.
     * You can undelete a look by calling `update_look` to change the look's `deleted` property to `false`.
     *
     * Soft-deleted looks are excluded from the results of [all_looks()](#!/Look/all_looks) and [search_looks()](#!/Look/search_looks), so they
     * essentially disappear from view even though they still reside in the db.
     * In API 3.1 and later, you can pass `deleted: true` as a parameter to [search_looks()](#!/3.1/Look/search_looks) to list soft-deleted looks.
     *
     * NOTE: [delete_look()](#!/Look/delete_look) performs a "hard delete" - the look data is removed from the Looker
     * database and destroyed. There is no "undo" for `delete_look()`.
     *
     * PATCH /looks/{look_id} -> LookWithQuery
     */
    func update_look(
        /**
         * @param {Int64} look_id Id of look
         */
        _ look_id: Int64,
        /**
         * @param {WriteLookWithQuery} body
         */
        _ body: WriteLookWithQuery,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookWithQuery, SDKError> {
        let path_look_id = encodeParam(look_id)
        let result: SDKResponse<LookWithQuery, SDKError> = self.patch("/looks/\(path_look_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Update a lookml model using the specified configuration.
     *
     * PATCH /lookml_models/{lookml_model_name} -> LookmlModel
     */
    func update_lookml_model(
        /**
         * @param {String} lookml_model_name Name of lookml model.
         */
        _ lookml_model_name: String,
        /**
         * @param {WriteLookmlModel} body
         */
        _ body: WriteLookmlModel,
        options: ITransportSettings? = nil
    ) -> SDKResponse<LookmlModel, SDKError> {
        let path_lookml_model_name = encodeParam(lookml_model_name)
        let result: SDKResponse<LookmlModel, SDKError> = self.patch("/lookml_models/\(path_lookml_model_name)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update information about the model set with a specific id.
     *
     * PATCH /model_sets/{model_set_id} -> ModelSet
     */
    func update_model_set(
        /**
         * @param {Int64} model_set_id id of model set
         */
        _ model_set_id: Int64,
        /**
         * @param {WriteModelSet} body
         */
        _ body: WriteModelSet,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ModelSet, SDKError> {
        let path_model_set_id = encodeParam(model_set_id)
        let result: SDKResponse<ModelSet, SDKError> = self.patch("/model_sets/\(path_model_set_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update OAuth2 Client App Details
     *
     * Modifies the details a previously registered OAuth2 login client app.
     *
     * PATCH /oauth_client_apps/{client_guid} -> OauthClientApp
     */
    func update_oauth_client_app(
        /**
         * @param {String} client_guid The unique id of this application
         */
        _ client_guid: String,
        /**
         * @param {WriteOauthClientApp} body
         */
        _ body: WriteOauthClientApp,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<OauthClientApp, SDKError> {
        let path_client_guid = encodeParam(client_guid)
        let result: SDKResponse<OauthClientApp, SDKError> = self.patch("/oauth_client_apps/\(path_client_guid)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Update the OIDC configuration.
     *
     * Configuring OIDC impacts authentication for all users. This configuration should be done carefully.
     *
     * Only Looker administrators can read and update the OIDC configuration.
     *
     * OIDC is enabled or disabled for Looker using the **enabled** field.
     *
     * It is **highly** recommended that any OIDC setting changes be tested using the APIs below before being set globally.
     *
     * PATCH /oidc_config -> OIDCConfig
     */
    func update_oidc_config(
        /**
         * @param {WriteOIDCConfig} body
         */
        _ body: WriteOIDCConfig,
        options: ITransportSettings? = nil
    ) -> SDKResponse<OIDCConfig, SDKError> {
        let result: SDKResponse<OIDCConfig, SDKError> = self.patch("/oidc_config", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update password config.
     *
     * PATCH /password_config -> PasswordConfig
     */
    func update_password_config(
        /**
         * @param {WritePasswordConfig} body
         */
        _ body: WritePasswordConfig,
        options: ITransportSettings? = nil
    ) -> SDKResponse<PasswordConfig, SDKError> {
        let result: SDKResponse<PasswordConfig, SDKError> = self.patch("/password_config", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update information about the permission set with a specific id.
     *
     * PATCH /permission_sets/{permission_set_id} -> PermissionSet
     */
    func update_permission_set(
        /**
         * @param {Int64} permission_set_id id of permission set
         */
        _ permission_set_id: Int64,
        /**
         * @param {WritePermissionSet} body
         */
        _ body: WritePermissionSet,
        options: ITransportSettings? = nil
    ) -> SDKResponse<PermissionSet, SDKError> {
        let path_permission_set_id = encodeParam(permission_set_id)
        let result: SDKResponse<PermissionSet, SDKError> = self.patch("/permission_sets/\(path_permission_set_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update Project Configuration
     *
     * Apply changes to a project's configuration.
     *
     *
     * #### Configuring Git for a Project
     *
     * To set up a Looker project with a remote git repository, follow these steps:
     *
     * 1. Call `update_session` to select the 'dev' workspace.
     * 1. Call `create_git_deploy_key` to create a new deploy key for the project
     * 1. Copy the deploy key text into the remote git repository's ssh key configuration
     * 1. Call `update_project` to set project's `git_remote_url` ()and `git_service_name`, if necessary).
     *
     * When you modify a project's `git_remote_url`, Looker connects to the remote repository to fetch
     * metadata. The remote git repository MUST be configured with the Looker-generated deploy
     * key for this project prior to setting the project's `git_remote_url`.
     *
     * To set up a Looker project with a git repository residing on the Looker server (a 'bare' git repo):
     *
     * 1. Call `update_session` to select the 'dev' workspace.
     * 1. Call `update_project` setting `git_remote_url` to null and `git_service_name` to "bare".
     *
     * PATCH /projects/{project_id} -> Project
     */
    func update_project(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {WriteProject} body
         */
        _ body: WriteProject,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Project, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<Project, SDKError> = self.patch("/projects/\(path_project_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Configure Repository Credential for a remote dependency
     *
     * Admin required.
     *
     * `root_project_id` is required.
     * `credential_id` is required.
     *
     * PUT /projects/{root_project_id}/credential/{credential_id} -> RepositoryCredential
     */
    func update_repository_credential(
        /**
         * @param {String} root_project_id Root Project Id
         */
        _ root_project_id: String,
        /**
         * @param {String} credential_id Credential Id
         */
        _ credential_id: String,
        /**
         * @param {WriteRepositoryCredential} body
         */
        _ body: WriteRepositoryCredential,
        options: ITransportSettings? = nil
    ) -> SDKResponse<RepositoryCredential, SDKError> {
        let path_root_project_id = encodeParam(root_project_id)
        let path_credential_id = encodeParam(credential_id)
        let result: SDKResponse<RepositoryCredential, SDKError> = self.put("/projects/\(path_root_project_id)/credential/\(path_credential_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update information about the role with a specific id.
     *
     * PATCH /roles/{role_id} -> Role
     */
    func update_role(
        /**
         * @param {Int64} role_id id of role
         */
        _ role_id: Int64,
        /**
         * @param {WriteRole} body
         */
        _ body: WriteRole,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Role, SDKError> {
        let path_role_id = encodeParam(role_id)
        let result: SDKResponse<Role, SDKError> = self.patch("/roles/\(path_role_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update the SAML configuration.
     *
     * Configuring SAML impacts authentication for all users. This configuration should be done carefully.
     *
     * Only Looker administrators can read and update the SAML configuration.
     *
     * SAML is enabled or disabled for Looker using the **enabled** field.
     *
     * It is **highly** recommended that any SAML setting changes be tested using the APIs below before being set globally.
     *
     * PATCH /saml_config -> SamlConfig
     */
    func update_saml_config(
        /**
         * @param {WriteSamlConfig} body
         */
        _ body: WriteSamlConfig,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SamlConfig, SDKError> {
        let result: SDKResponse<SamlConfig, SDKError> = self.patch("/saml_config", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update a Scheduled Plan
     *
     * Admins can update other users' Scheduled Plans.
     *
     * Note: Any scheduled plan destinations specified in an update will **replace** all scheduled plan destinations
     * currently defined for the scheduled plan.
     *
     * For Example: If a scheduled plan has destinations A, B, and C, and you call update on this scheduled plan
     * specifying only B in the destinations, then destinations A and C will be deleted by the update.
     *
     * Updating a scheduled plan to assign null or an empty array to the scheduled_plan_destinations property is an error, as a scheduled plan must always have at least one destination.
     *
     * If you omit the scheduled_plan_destinations property from the object passed to update, then the destinations
     * defined on the original scheduled plan will remain unchanged.
     *
     * #### Email Permissions:
     *
     * For details about permissions required to schedule delivery to email and the safeguards
     * Looker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).
     *
     *
     * #### Scheduled Plan Destination Formats
     *
     * Scheduled plan destinations must specify the data format to produce and send to the destination.
     *
     * Formats:
     *
     * | format | Description
     * | :-----------: | :--- |
     * | json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.
     * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query
     * | inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.
     * | csv | Comma separated values with a header
     * | txt | Tab separated values with a header
     * | html | Simple html
     * | xlsx | MS Excel spreadsheet
     * | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document
     * | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document
     * | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image
     * ||
     *
     * Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.
     *
     * PATCH /scheduled_plans/{scheduled_plan_id} -> ScheduledPlan
     */
    func update_scheduled_plan(
        /**
         * @param {Int64} scheduled_plan_id Scheduled Plan Id
         */
        _ scheduled_plan_id: Int64,
        /**
         * @param {WriteScheduledPlan} body
         */
        _ body: WriteScheduledPlan,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ScheduledPlan, SDKError> {
        let path_scheduled_plan_id = encodeParam(scheduled_plan_id)
        let result: SDKResponse<ScheduledPlan, SDKError> = self.patch("/scheduled_plans/\(path_scheduled_plan_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update API Session
     *
     * #### API Session Workspace
     *
     * You can use this endpoint to change the active workspace for the current API session.
     *
     * Only one workspace can be active in a session. The active workspace can be changed
     * any number of times in a session.
     *
     * The default workspace for API sessions is the "production" workspace.
     *
     * All Looker APIs that use projects or lookml models (such as running queries) will
     * use the version of project and model files defined by this workspace for the lifetime of the
     * current API session or until the session workspace is changed again.
     *
     * An API session has the same lifetime as the access_token used to authenticate API requests. Each successful
     * API login generates a new access_token and a new API session.
     *
     * If your Looker API client application needs to work in a dev workspace across multiple
     * API sessions, be sure to select the dev workspace after each login.
     *
     * PATCH /session -> ApiSession
     */
    func update_session(
        /**
         * @param {WriteApiSession} body
         */
        _ body: WriteApiSession,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ApiSession, SDKError> {
        let result: SDKResponse<ApiSession, SDKError> = self.patch("/session", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update session config.
     *
     * PATCH /session_config -> SessionConfig
     */
    func update_session_config(
        /**
         * @param {WriteSessionConfig} body
         */
        _ body: WriteSessionConfig,
        options: ITransportSettings? = nil
    ) -> SDKResponse<SessionConfig, SDKError> {
        let result: SDKResponse<SessionConfig, SDKError> = self.patch("/session_config", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update the theme by id.
     *
     * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.
     *
     * PATCH /themes/{theme_id} -> Theme
     */
    func update_theme(
        /**
         * @param {Int64} theme_id Id of theme
         */
        _ theme_id: Int64,
        /**
         * @param {WriteTheme} body
         */
        _ body: WriteTheme,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Theme, SDKError> {
        let path_theme_id = encodeParam(theme_id)
        let result: SDKResponse<Theme, SDKError> = self.patch("/themes/\(path_theme_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Update information about the user with a specific id.
     *
     * PATCH /users/{user_id} -> User
     */
    func update_user(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {WriteUser} body
         */
        _ body: WriteUser,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<User, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<User, SDKError> = self.patch("/users/\(path_user_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Update a user attribute definition.
     *
     * PATCH /user_attributes/{user_attribute_id} -> UserAttribute
     */
    func update_user_attribute(
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        /**
         * @param {WriteUserAttribute} body
         */
        _ body: WriteUserAttribute,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<UserAttribute, SDKError> {
        let path_user_attribute_id = encodeParam(user_attribute_id)
        let result: SDKResponse<UserAttribute, SDKError> = self.patch("/user_attributes/\(path_user_attribute_id)", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Set the value of a user attribute for a group.
     *
     * For information about how user attribute values are calculated, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).
     *
     * PATCH /groups/{group_id}/attribute_values/{user_attribute_id} -> UserAttributeGroupValue
     */
    func update_user_attribute_group_value(
        /**
         * @param {Int64} group_id Id of group
         */
        _ group_id: Int64,
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        /**
         * @param {UserAttributeGroupValue} body
         */
        _ body: UserAttributeGroupValue,
        options: ITransportSettings? = nil
    ) -> SDKResponse<UserAttributeGroupValue, SDKError> {
        let path_group_id = encodeParam(group_id)
        let path_user_attribute_id = encodeParam(user_attribute_id)
        let result: SDKResponse<UserAttributeGroupValue, SDKError> = self.patch("/groups/\(path_group_id)/attribute_values/\(path_user_attribute_id)", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Email/password login information for the specified user.
     *
     * PATCH /users/{user_id}/credentials_email -> CredentialsEmail
     */
    func update_user_credentials_email(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {WriteCredentialsEmail} body
         */
        _ body: WriteCredentialsEmail,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsEmail, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<CredentialsEmail, SDKError> = self.patch("/users/\(path_user_id)/credentials_email", 
            ["fields": fields], try! self.encode(body), options)
        return result
    }

    /**
     * ### Update the whitelabel configuration
     *
     * PUT /whitelabel_configuration -> WhitelabelConfiguration
     */
    func update_whitelabel_configuration(
        /**
         * @param {WriteWhitelabelConfiguration} body
         */
        _ body: WriteWhitelabelConfiguration,
        options: ITransportSettings? = nil
    ) -> SDKResponse<WhitelabelConfiguration, SDKError> {
        let result: SDKResponse<WhitelabelConfiguration, SDKError> = self.put("/whitelabel_configuration", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Get information about the user with a specific id.
     *
     * If the caller is an admin or the caller is the user being specified, then full user information will
     * be returned. Otherwise, a minimal 'public' variant of the user information will be returned. This contains
     * The user name and avatar url, but no sensitive information.
     *
     * GET /users/{user_id} -> User
     */
    func user(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<User, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<User, SDKError> = self.get("/users/\(path_user_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about a user attribute.
     *
     * GET /user_attributes/{user_attribute_id} -> UserAttribute
     */
    func user_attribute(
        /**
         * @param {Int64} user_attribute_id Id of user attribute
         */
        _ user_attribute_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<UserAttribute, SDKError> {
        let path_user_attribute_id = encodeParam(user_attribute_id)
        let result: SDKResponse<UserAttribute, SDKError> = self.get("/user_attributes/\(path_user_attribute_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get user attribute values for a given user.
     *
     * Returns the values of specified user attributes (or all user attributes) for a certain user.
     *
     * A value for each user attribute is searched for in the following locations, in this order:
     *
     * 1. in the user's account information
     * 1. in groups that the user is a member of
     * 1. the default value of the user attribute
     *
     * If more than one group has a value defined for a user attribute, the group with the lowest rank wins.
     *
     * The response will only include user attributes for which values were found. Use `include_unset=true` to include
     * empty records for user attributes with no value.
     *
     * The value of all hidden user attributes will be blank.
     *
     * GET /users/{user_id}/attribute_values -> [UserAttributeWithValue]
     */
    func user_attribute_user_values(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {DelimArray<Int64>} user_attribute_ids Specific user attributes to request. Omit or leave blank to request all user attributes.
         */
        user_attribute_ids: DelimArray<Int64>? = nil,
        /**
         * @param {Bool} all_values If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence.
         */
        all_values: Bool? = nil,
        /**
         * @param {Bool} include_unset If true, returns an empty record for each requested attribute that has no user, group, or default value.
         */
        include_unset: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[UserAttributeWithValue], SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<[UserAttributeWithValue], SDKError> = self.get("/users/\(path_user_id)/attribute_values", 
            ["fields": fields, "user_attribute_ids": user_attribute_ids as Any?, "all_values": all_values as Any?, "include_unset": include_unset as Any?], nil, options)
        return result
    }

    /**
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     *
     * GET /users/{user_id}/credentials_api3/{credentials_api3_id} -> CredentialsApi3
     */
    func user_credentials_api3(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} credentials_api3_id Id of API 3 Credential
         */
        _ credentials_api3_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsApi3, SDKError> {
        let path_user_id = encodeParam(user_id)
        let path_credentials_api3_id = encodeParam(credentials_api3_id)
        let result: SDKResponse<CredentialsApi3, SDKError> = self.get("/users/\(path_user_id)/credentials_api3/\(path_credentials_api3_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Email/password login information for the specified user.
     *
     * GET /users/{user_id}/credentials_email -> CredentialsEmail
     */
    func user_credentials_email(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsEmail, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<CredentialsEmail, SDKError> = self.get("/users/\(path_user_id)/credentials_email", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Embed login information for the specified user.
     *
     * GET /users/{user_id}/credentials_embed/{credentials_embed_id} -> CredentialsEmbed
     */
    func user_credentials_embed(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} credentials_embed_id Id of Embedding Credential
         */
        _ credentials_embed_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsEmbed, SDKError> {
        let path_user_id = encodeParam(user_id)
        let path_credentials_embed_id = encodeParam(credentials_embed_id)
        let result: SDKResponse<CredentialsEmbed, SDKError> = self.get("/users/\(path_user_id)/credentials_embed/\(path_credentials_embed_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Google authentication login information for the specified user.
     *
     * GET /users/{user_id}/credentials_google -> CredentialsGoogle
     */
    func user_credentials_google(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsGoogle, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<CredentialsGoogle, SDKError> = self.get("/users/\(path_user_id)/credentials_google", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### LDAP login information for the specified user.
     *
     * GET /users/{user_id}/credentials_ldap -> CredentialsLDAP
     */
    func user_credentials_ldap(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsLDAP, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<CredentialsLDAP, SDKError> = self.get("/users/\(path_user_id)/credentials_ldap", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Looker Openid login information for the specified user. Used by Looker Analysts.
     *
     * GET /users/{user_id}/credentials_looker_openid -> CredentialsLookerOpenid
     */
    func user_credentials_looker_openid(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsLookerOpenid, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<CredentialsLookerOpenid, SDKError> = self.get("/users/\(path_user_id)/credentials_looker_openid", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### OpenID Connect (OIDC) authentication login information for the specified user.
     *
     * GET /users/{user_id}/credentials_oidc -> CredentialsOIDC
     */
    func user_credentials_oidc(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsOIDC, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<CredentialsOIDC, SDKError> = self.get("/users/\(path_user_id)/credentials_oidc", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Saml authentication login information for the specified user.
     *
     * GET /users/{user_id}/credentials_saml -> CredentialsSaml
     */
    func user_credentials_saml(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsSaml, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<CredentialsSaml, SDKError> = self.get("/users/\(path_user_id)/credentials_saml", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Two-factor login information for the specified user.
     *
     * GET /users/{user_id}/credentials_totp -> CredentialsTotp
     */
    func user_credentials_totp(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<CredentialsTotp, SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<CredentialsTotp, SDKError> = self.get("/users/\(path_user_id)/credentials_totp", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about the user with a credential of given type with specific id.
     *
     * This is used to do things like find users by their embed external_user_id. Or, find the user with
     * a given api3 client_id, etc. The 'credential_type' matchs the 'type' name of the various credential
     * types. It must be one of the values listed in the table below. The 'credential_id' is your unique Id
     * for the user and is specific to each type of credential.
     *
     * An example using the Ruby sdk might look like:
     *
     * `sdk.user_for_credential('embed', 'customer-4959425')`
     *
     * This table shows the supported 'Credential Type' strings. The right column is for reference; it shows
     * which field in the given credential type is actually searched when finding a user with the supplied
     * 'credential_id'.
     *
     * | Credential Types | Id Field Matched |
     * | ---------------- | ---------------- |
     * | email            | email            |
     * | google           | google_user_id   |
     * | saml             | saml_user_id     |
     * | oidc             | oidc_user_id     |
     * | ldap             | ldap_id          |
     * | api              | token            |
     * | api3             | client_id        |
     * | embed            | external_user_id |
     * | looker_openid    | email            |
     *
     * NOTE: The 'api' credential type was only used with the legacy Looker query API and is no longer supported. The credential type for API you are currently looking at is 'api3'.
     *
     * GET /users/credential/{credential_type}/{credential_id} -> User
     */
    func user_for_credential(
        /**
         * @param {String} credential_type Type name of credential
         */
        _ credential_type: String,
        /**
         * @param {String} credential_id Id of credential
         */
        _ credential_id: String,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<User, SDKError> {
        let path_credential_type = encodeParam(credential_type)
        let path_credential_id = encodeParam(credential_id)
        let result: SDKResponse<User, SDKError> = self.get("/users/credential/\(path_credential_type)/\(path_credential_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get information about roles of a given user
     *
     * GET /users/{user_id}/roles -> [Role]
     */
    func user_roles(
        /**
         * @param {Int64} user_id id of user
         */
        _ user_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        /**
         * @param {Bool} direct_association_only Get only roles associated directly with the user: exclude those only associated through groups.
         */
        direct_association_only: Bool? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<[Role], SDKError> {
        let path_user_id = encodeParam(user_id)
        let result: SDKResponse<[Role], SDKError> = self.get("/users/\(path_user_id)/roles", 
            ["fields": fields, "direct_association_only": direct_association_only as Any?], nil, options)
        return result
    }

    /**
     * ### Web login session for the specified user.
     *
     * GET /users/{user_id}/sessions/{session_id} -> Session
     */
    func user_session(
        /**
         * @param {Int64} user_id Id of user
         */
        _ user_id: Int64,
        /**
         * @param {Int64} session_id Id of Web Login Session
         */
        _ session_id: Int64,
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Session, SDKError> {
        let path_user_id = encodeParam(user_id)
        let path_session_id = encodeParam(session_id)
        let result: SDKResponse<Session, SDKError> = self.get("/users/\(path_user_id)/sessions/\(path_session_id)", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Validate Project
     *
     * Performs lint validation of all lookml files in the project.
     * Returns a list of errors found, if any.
     *
     * Validating the content of all the files in a project can be computationally intensive
     * for large projects. For best performance, call `validate_project(project_id)` only
     * when you really want to recompute project validation. To quickly display the results of
     * the most recent project validation (without recomputing), use `project_validation_results(project_id)`
     *
     * POST /projects/{project_id}/validate -> ProjectValidation
     */
    func validate_project(
        /**
         * @param {String} project_id Project Id
         */
        _ project_id: String,
        /**
         * @param {String} fields Requested fields
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ProjectValidation, SDKError> {
        let path_project_id = encodeParam(project_id)
        let result: SDKResponse<ProjectValidation, SDKError> = self.post("/projects/\(path_project_id)/validate", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Validate a theme with the specified information
     *
     * Validates all values set for the theme, returning any errors encountered, or 200 OK if valid
     *
     * See [Create Theme](#!/Theme/create_theme) for constraints
     *
     * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.
     *
     * POST /themes/validate -> ValidationError
     */
    func validate_theme(
        /**
         * @param {WriteTheme} body
         */
        _ body: WriteTheme,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ValidationError, SDKError> {
        let result: SDKResponse<ValidationError, SDKError> = self.post("/themes/validate", nil, try! self.encode(body), options)
        return result
    }

    /**
     * ### Get a vector image representing the contents of a dashboard or look.
     *
     * The returned thumbnail is an abstract representation of the contents of a dashbord or look and does not
     * reflect the actual data displayed in the respective visualizations.
     *
     * GET /vector_thumbnail/{type}/{resource_id} -> String
     */
    func vector_thumbnail(
        /**
         * @param {String} type Either dashboard or look
         */
        _ `type`: String,
        /**
         * @param {String} resource_id ID of the dashboard or look to render
         */
        _ resource_id: String,
        /**
         * @param {String} reload Whether or not to refresh the rendered image with the latest content
         */
        reload: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<String, SDKError> {
        let path_type = encodeParam(type)
        let path_resource_id = encodeParam(resource_id)
        let result: SDKResponse<String, SDKError> = self.get("/vector_thumbnail/\(path_type)/\(path_resource_id)", 
            ["reload": reload], nil, options)
        return result
    }

    /**
     * ### Get information about all API versions supported by this Looker instance.
     *
     * GET /versions -> ApiVersion
     */
    func versions(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<ApiVersion, SDKError> {
        let result: SDKResponse<ApiVersion, SDKError> = self.get("/versions", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### This feature is enabled only by special license.
     * ### Gets the whitelabel configuration, which includes hiding documentation links, custom favicon uploading, etc.
     *
     * GET /whitelabel_configuration -> WhitelabelConfiguration
     */
    func whitelabel_configuration(
        /**
         * @param {String} fields Requested fields.
         */
        fields: String? = nil,
        options: ITransportSettings? = nil
    ) -> SDKResponse<WhitelabelConfiguration, SDKError> {
        let result: SDKResponse<WhitelabelConfiguration, SDKError> = self.get("/whitelabel_configuration", 
            ["fields": fields], nil, options)
        return result
    }

    /**
     * ### Get A Workspace
     *
     * Returns information about a workspace such as the git status and selected branches
     * of all projects available to the caller's user account.
     *
     * A workspace defines which versions of project files will be used to evaluate expressions
     * and operations that use model definitions - operations such as running queries or rendering dashboards.
     * Each project has its own git repository, and each project in a workspace may be configured to reference
     * particular branch or revision within their respective repositories.
     *
     * There are two predefined workspaces available: "production" and "dev".
     *
     * The production workspace is shared across all Looker users. Models in the production workspace are read-only.
     * Changing files in production is accomplished by modifying files in a git branch and using Pull Requests
     * to merge the changes from the dev branch into the production branch, and then telling
     * Looker to sync with production.
     *
     * The dev workspace is local to each Looker user. Changes made to project/model files in the dev workspace only affect
     * that user, and only when the dev workspace is selected as the active workspace for the API session.
     * (See set_session_workspace()).
     *
     * The dev workspace is NOT unique to an API session. Two applications accessing the Looker API using
     * the same user account will see the same files in the dev workspace. To avoid collisions between
     * API clients it's best to have each client login with API3 credentials for a different user account.
     *
     * Changes made to files in a dev workspace are persistent across API sessions. It's a good
     * idea to commit any changes you've made to the git repository, but not strictly required. Your modified files
     * reside in a special user-specific directory on the Looker server and will still be there when you login in again
     * later and use update_session(workspace_id: "dev") to select the dev workspace for the new API session.
     *
     * GET /workspaces/{workspace_id} -> Workspace
     */
    func workspace(
        /**
         * @param {String} workspace_id Id of the workspace
         */
        _ workspace_id: String,
        options: ITransportSettings? = nil
    ) -> SDKResponse<Workspace, SDKError> {
        let path_workspace_id = encodeParam(workspace_id)
        let result: SDKResponse<Workspace, SDKError> = self.get("/workspaces/\(path_workspace_id)", nil, nil, options)
        return result
    }

}