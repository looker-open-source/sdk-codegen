// 337 API methods

// NOTE: Do not edit this file generated by Looker SDK Codegen for Looker 7.0 API 3.1
package com.looker.sdk

import com.looker.rtl.*
import com.looker.rtl.UserSession
import java.util.*

class LookerSDK(authSession: UserSession) : APIMethods(authSession) {


  /**
   * POST /integration_hubs/{integration_hub_id}/accept_legal_agreement -> IntegrationHub
   */
  fun accept_integration_hub_legal_agreement(
    /**
     * @param {Long} integration_hub_id Id of integration_hub
     */
    integration_hub_id: Long) : SDKResponse {
    return this.post<IntegrationHub>("/integration_hubs/${integration_hub_id}/accept_legal_agreement", mapOf())
  }

  /**
   * GET /themes/active -> Array<Theme>
   */
  @JvmOverloads fun active_themes(
    /**
     * @param {String} name Name of theme
     */
    name: String? = null,
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts: Date? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Theme>>("/themes/active", 
      mapOf("name" to name, "ts" to ts, "fields" to fields))
  }

  /**
   * POST /groups/{group_id}/groups -> Group
   */
  fun add_group_group(
    /**
     * @param {Long} group_id Id of group
     */
    group_id: Long,
    /**
     * @param {GroupIdForGroupInclusion} body
     */
    body: GroupIdForGroupInclusion) : SDKResponse {
    return this.post<Group>("/groups/${group_id}/groups", mapOf(), body)
  }

  /**
   * POST /groups/{group_id}/users -> User
   */
  fun add_group_user(
    /**
     * @param {Long} group_id Id of group
     */
    group_id: Long,
    /**
     * @param {GroupIdForGroupUserInclusion} body
     */
    body: GroupIdForGroupUserInclusion) : SDKResponse {
    return this.post<User>("/groups/${group_id}/users", mapOf(), body)
  }

  /**
   * GET /color_collections -> Array<ColorCollection>
   */
  @JvmOverloads fun all_color_collections(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<ColorCollection>>("/color_collections", 
      mapOf("fields" to fields))
  }

  /**
   * GET /connections -> Array<DBConnection>
   */
  @JvmOverloads fun all_connections(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<DBConnection>>("/connections", 
      mapOf("fields" to fields))
  }

  /**
   * GET /content_metadata_access -> Array<ContentMetaGroupUser>
   */
  @JvmOverloads fun all_content_metadata_accesses(
    /**
     * @param {Long} content_metadata_id Id of content metadata
     */
    content_metadata_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<ContentMetaGroupUser>>("/content_metadata_access", 
      mapOf("content_metadata_id" to content_metadata_id, "fields" to fields))
  }

  /**
   * GET /content_metadata -> Array<ContentMeta>
   */
  @JvmOverloads fun all_content_metadatas(
    /**
     * @param {Long} parent_id Parent space of content.
     */
    parent_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<ContentMeta>>("/content_metadata", 
      mapOf("parent_id" to parent_id, "fields" to fields))
  }

  /**
   * GET /dashboards -> Array<DashboardBase>
   */
  @JvmOverloads fun all_dashboards(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<DashboardBase>>("/dashboards", 
      mapOf("fields" to fields))
  }

  /**
   * GET /datagroups -> Array<Datagroup>
   */
  fun all_datagroups() : SDKResponse {
    return this.get<Array<Datagroup>>("/datagroups", mapOf())
  }

  /**
   * GET /dialect_info -> Array<DialectInfo>
   */
  @JvmOverloads fun all_dialect_infos(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<DialectInfo>>("/dialect_info", 
      mapOf("fields" to fields))
  }

  /**
   * GET /folders -> Array<Folder>
   */
  @JvmOverloads fun all_folders(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Folder>>("/folders", 
      mapOf("fields" to fields))
  }

  /**
   * GET /projects/{project_id}/git_branches -> Array<GitBranch>
   */
  fun all_git_branches(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String) : SDKResponse {
    return this.get<Array<GitBranch>>("/projects/${project_id}/git_branches", mapOf())
  }

  /**
   * GET /projects/{project_id}/git_connection_tests -> Array<GitConnectionTest>
   */
  @JvmOverloads fun all_git_connection_tests(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {String} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
     */
    remote_url: String? = null) : SDKResponse {
    return this.get<Array<GitConnectionTest>>("/projects/${project_id}/git_connection_tests", 
      mapOf("remote_url" to remote_url))
  }

  /**
   * GET /groups/{group_id}/groups -> Array<Group>
   */
  @JvmOverloads fun all_group_groups(
    /**
     * @param {Long} group_id Id of group
     */
    group_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Group>>("/groups/${group_id}/groups", 
      mapOf("fields" to fields))
  }

  /**
   * GET /groups/{group_id}/users -> Array<User>
   */
  @JvmOverloads fun all_group_users(
    /**
     * @param {Long} group_id Id of group
     */
    group_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} page Requested page.
     */
    page: Long? = null,
    /**
     * @param {Long} per_page Results per page.
     */
    per_page: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null) : SDKResponse {
    return this.get<Array<User>>("/groups/${group_id}/users", 
      mapOf("fields" to fields, "page" to page, "per_page" to per_page, "sorts" to sorts))
  }

  /**
   * GET /groups -> Array<Group>
   */
  @JvmOverloads fun all_groups(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} page Requested page.
     */
    page: Long? = null,
    /**
     * @param {Long} per_page Results per page.
     */
    per_page: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {DelimArray<Long>} ids Optional of ids to get specific groups.
     */
    ids: DelimArray<Long>? = null,
    /**
     * @param {Long} content_metadata_id Id of content metadata to which groups must have access.
     */
    content_metadata_id: Long? = null,
    /**
     * @param {Boolean} can_add_to_content_metadata Select only groups that either can/cannot be given access to content.
     */
    can_add_to_content_metadata: Boolean? = null) : SDKResponse {
    return this.get<Array<Group>>("/groups", 
      mapOf("fields" to fields, "page" to page, "per_page" to per_page, "sorts" to sorts, "ids" to ids, "content_metadata_id" to content_metadata_id, "can_add_to_content_metadata" to can_add_to_content_metadata))
  }

  /**
   * GET /homepage_items -> Array<HomepageItem>
   */
  @JvmOverloads fun all_homepage_items(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {String} homepage_section_id Filter to a specific homepage section
     */
    homepage_section_id: String? = null) : SDKResponse {
    return this.get<Array<HomepageItem>>("/homepage_items", 
      mapOf("fields" to fields, "sorts" to sorts, "homepage_section_id" to homepage_section_id))
  }

  /**
   * GET /homepage_sections -> Array<HomepageSection>
   */
  @JvmOverloads fun all_homepage_sections(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null) : SDKResponse {
    return this.get<Array<HomepageSection>>("/homepage_sections", 
      mapOf("fields" to fields, "sorts" to sorts))
  }

  /**
   * GET /homepages -> Array<Homepage>
   */
  @JvmOverloads fun all_homepages(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Homepage>>("/homepages", 
      mapOf("fields" to fields))
  }

  /**
   * GET /integration_hubs -> Array<IntegrationHub>
   */
  @JvmOverloads fun all_integration_hubs(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<IntegrationHub>>("/integration_hubs", 
      mapOf("fields" to fields))
  }

  /**
   * GET /integrations -> Array<Integration>
   */
  @JvmOverloads fun all_integrations(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {String} integration_hub_id Filter to a specific provider
     */
    integration_hub_id: String? = null) : SDKResponse {
    return this.get<Array<Integration>>("/integrations", 
      mapOf("fields" to fields, "integration_hub_id" to integration_hub_id))
  }

  /**
   * GET /legacy_features -> Array<LegacyFeature>
   */
  fun all_legacy_features() : SDKResponse {
    return this.get<Array<LegacyFeature>>("/legacy_features", mapOf())
  }

  /**
   * GET /locales -> Array<Locale>
   */
  fun all_locales() : SDKResponse {
    return this.get<Array<Locale>>("/locales", mapOf())
  }

  /**
   * GET /lookml_models -> Array<LookmlModel>
   */
  @JvmOverloads fun all_lookml_models(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<LookmlModel>>("/lookml_models", 
      mapOf("fields" to fields))
  }

  /**
   * GET /projects/{project_id}/lookml_tests -> Array<LookmlTest>
   */
  @JvmOverloads fun all_lookml_tests(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {String} file_id File Id
     */
    file_id: String? = null) : SDKResponse {
    return this.get<Array<LookmlTest>>("/projects/${project_id}/lookml_tests", 
      mapOf("file_id" to file_id))
  }

  /**
   * GET /looks -> Array<Look>
   */
  @JvmOverloads fun all_looks(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Look>>("/looks", 
      mapOf("fields" to fields))
  }

  /**
   * GET /model_sets -> Array<ModelSet>
   */
  @JvmOverloads fun all_model_sets(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<ModelSet>>("/model_sets", 
      mapOf("fields" to fields))
  }

  /**
   * GET /permission_sets -> Array<PermissionSet>
   */
  @JvmOverloads fun all_permission_sets(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<PermissionSet>>("/permission_sets", 
      mapOf("fields" to fields))
  }

  /**
   * GET /permissions -> Array<Permission>
   */
  fun all_permissions() : SDKResponse {
    return this.get<Array<Permission>>("/permissions", mapOf())
  }

  /**
   * GET /projects/{project_id}/files -> Array<ProjectFile>
   */
  @JvmOverloads fun all_project_files(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<ProjectFile>>("/projects/${project_id}/files", 
      mapOf("fields" to fields))
  }

  /**
   * GET /projects -> Array<Project>
   */
  @JvmOverloads fun all_projects(
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Project>>("/projects", 
      mapOf("fields" to fields))
  }

  /**
   * GET /roles -> Array<Role>
   */
  @JvmOverloads fun all_roles(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {DelimArray<Long>} ids Optional list of ids to get specific roles.
     */
    ids: DelimArray<Long>? = null) : SDKResponse {
    return this.get<Array<Role>>("/roles", 
      mapOf("fields" to fields, "ids" to ids))
  }

  /**
   * GET /running_queries -> Array<RunningQueries>
   */
  fun all_running_queries() : SDKResponse {
    return this.get<Array<RunningQueries>>("/running_queries", mapOf())
  }

  /**
   * GET /scheduled_plans -> Array<ScheduledPlan>
   */
  @JvmOverloads fun all_scheduled_plans(
    /**
     * @param {Long} user_id Return scheduled plans belonging to this user_id. If not provided, returns scheduled plans owned by the caller.
     */
    user_id: Long? = null,
    /**
     * @param {String} fields Comma delimited list of field names. If provided, only the fields specified will be included in the response
     */
    fields: String? = null,
    /**
     * @param {Boolean} all_users Return scheduled plans belonging to all users (caller needs see_schedules permission)
     */
    all_users: Boolean? = null) : SDKResponse {
    return this.get<Array<ScheduledPlan>>("/scheduled_plans", 
      mapOf("user_id" to user_id, "fields" to fields, "all_users" to all_users))
  }

  /**
   * GET /spaces -> Array<SpaceBase>
   */
  @JvmOverloads fun all_spaces(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<SpaceBase>>("/spaces", 
      mapOf("fields" to fields))
  }

  /**
   * GET /themes -> Array<Theme>
   */
  @JvmOverloads fun all_themes(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Theme>>("/themes", 
      mapOf("fields" to fields))
  }

  /**
   * GET /timezones -> Array<Timezone>
   */
  fun all_timezones() : SDKResponse {
    return this.get<Array<Timezone>>("/timezones", mapOf())
  }

  /**
   * GET /user_attributes/{user_attribute_id}/group_values -> Array<UserAttributeGroupValue>
   */
  @JvmOverloads fun all_user_attribute_group_values(
    /**
     * @param {Long} user_attribute_id Id of user attribute
     */
    user_attribute_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<UserAttributeGroupValue>>("/user_attributes/${user_attribute_id}/group_values", 
      mapOf("fields" to fields))
  }

  /**
   * GET /user_attributes -> Array<UserAttribute>
   */
  @JvmOverloads fun all_user_attributes(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {String} sorts Fields to order the results by. Sortable fields include: name, label
     */
    sorts: String? = null) : SDKResponse {
    return this.get<Array<UserAttribute>>("/user_attributes", 
      mapOf("fields" to fields, "sorts" to sorts))
  }

  /**
   * GET /users/{user_id}/credentials_api3 -> Array<CredentialsApi3>
   */
  @JvmOverloads fun all_user_credentials_api3s(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<CredentialsApi3>>("/users/${user_id}/credentials_api3", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/{user_id}/credentials_embed -> Array<CredentialsEmbed>
   */
  @JvmOverloads fun all_user_credentials_embeds(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<CredentialsEmbed>>("/users/${user_id}/credentials_embed", 
      mapOf("fields" to fields))
  }

  /**
   * GET /user_login_lockouts -> Array<UserLoginLockout>
   */
  @JvmOverloads fun all_user_login_lockouts(
    /**
     * @param {String} fields Include only these fields in the response
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<UserLoginLockout>>("/user_login_lockouts", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/{user_id}/sessions -> Array<Session>
   */
  @JvmOverloads fun all_user_sessions(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Session>>("/users/${user_id}/sessions", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users -> Array<User>
   */
  @JvmOverloads fun all_users(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} page Requested page.
     */
    page: Long? = null,
    /**
     * @param {Long} per_page Results per page.
     */
    per_page: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {DelimArray<Long>} ids Optional list of ids to get specific users.
     */
    ids: DelimArray<Long>? = null) : SDKResponse {
    return this.get<Array<User>>("/users", 
      mapOf("fields" to fields, "page" to page, "per_page" to per_page, "sorts" to sorts, "ids" to ids))
  }

  /**
   * GET /workspaces -> Array<Workspace>
   */
  fun all_workspaces() : SDKResponse {
    return this.get<Array<Workspace>>("/workspaces", mapOf())
  }

  /**
   * GET /backup_configuration -> BackupConfiguration
   */
  fun backup_configuration() : SDKResponse {
    return this.get<BackupConfiguration>("/backup_configuration", mapOf())
  }

  /**
   * GET /color_collections/{collection_id} -> ColorCollection
   */
  @JvmOverloads fun color_collection(
    /**
     * @param {String} collection_id Id of Color Collection
     */
    collection_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<ColorCollection>("/color_collections/${collection_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /color_collections/custom -> Array<ColorCollection>
   */
  @JvmOverloads fun color_collections_custom(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<ColorCollection>>("/color_collections/custom", 
      mapOf("fields" to fields))
  }

  /**
   * GET /color_collections/standard -> Array<ColorCollection>
   */
  @JvmOverloads fun color_collections_standard(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<ColorCollection>>("/color_collections/standard", 
      mapOf("fields" to fields))
  }

  /**
   * GET /connections/{connection_name} -> DBConnection
   */
  @JvmOverloads fun connection(
    /**
     * @param {String} connection_name Name of connection
     */
    connection_name: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<DBConnection>("/connections/${connection_name}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /content_favorite/{content_favorite_id} -> ContentFavorite
   */
  @JvmOverloads fun content_favorite(
    /**
     * @param {Long} content_favorite_id Id of favorite content
     */
    content_favorite_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<ContentFavorite>("/content_favorite/${content_favorite_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /content_metadata/{content_metadata_id} -> ContentMeta
   */
  @JvmOverloads fun content_metadata(
    /**
     * @param {Long} content_metadata_id Id of content metadata
     */
    content_metadata_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<ContentMeta>("/content_metadata/${content_metadata_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /content_validation -> ContentValidation
   */
  @JvmOverloads fun content_validation(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<ContentValidation>("/content_validation", 
      mapOf("fields" to fields))
  }

  /**
   * POST /color_collections -> ColorCollection
   */
  fun create_color_collection(
    /**
     * @param {WriteColorCollection} body
     */
    body: WriteColorCollection) : SDKResponse {
    return this.post<ColorCollection>("/color_collections", mapOf(), body)
  }

  /**
   * POST /connections -> DBConnection
   */
  fun create_connection(
    /**
     * @param {WriteDBConnection} body
     */
    body: WriteDBConnection) : SDKResponse {
    return this.post<DBConnection>("/connections", mapOf(), body)
  }

  /**
   * POST /content_favorite -> ContentFavorite
   */
  fun create_content_favorite(
    /**
     * @param {WriteContentFavorite} body
     */
    body: WriteContentFavorite) : SDKResponse {
    return this.post<ContentFavorite>("/content_favorite", mapOf(), body)
  }

  /**
   * POST /content_metadata_access -> ContentMetaGroupUser
   */
  @JvmOverloads fun create_content_metadata_access(
    /**
     * @param {ContentMetaGroupUser} body
     */
    body: ContentMetaGroupUser,
    /**
     * @param {Boolean} send_boards_notification_email Optionally sends notification email when granting access to a board.
     */
    send_boards_notification_email: Boolean? = null) : SDKResponse {
    return this.post<ContentMetaGroupUser>("/content_metadata_access", 
      mapOf("send_boards_notification_email" to send_boards_notification_email), body)
  }

  /**
   * POST /dashboards -> Dashboard
   */
  fun create_dashboard(
    /**
     * @param {WriteDashboard} body
     */
    body: WriteDashboard) : SDKResponse {
    return this.post<Dashboard>("/dashboards", mapOf(), body)
  }

  /**
   * POST /dashboard_elements -> DashboardElement
   */
  @JvmOverloads fun create_dashboard_element(
    /**
     * @param {WriteDashboardElement} body
     */
    body: WriteDashboardElement,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<DashboardElement>("/dashboard_elements", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /dashboard_filters -> DashboardFilter
   */
  @JvmOverloads fun create_dashboard_filter(
    /**
     * @param {WriteCreateDashboardFilter} body
     */
    body: WriteCreateDashboardFilter,
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null) : SDKResponse {
    return this.post<DashboardFilter>("/dashboard_filters", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /dashboard_layouts -> DashboardLayout
   */
  @JvmOverloads fun create_dashboard_layout(
    /**
     * @param {WriteDashboardLayout} body
     */
    body: WriteDashboardLayout,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<DashboardLayout>("/dashboard_layouts", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /render_tasks/dashboards/{dashboard_id}/{result_format} -> RenderTask
   */
  @JvmOverloads fun create_dashboard_render_task(
    /**
     * @param {Long} dashboard_id Id of dashboard to render
     */
    dashboard_id: Long,
    /**
     * @param {String} result_format Output type: pdf, png, or jpg
     */
    result_format: String,
    /**
     * @param {CreateDashboardRenderTask} body
     */
    body: CreateDashboardRenderTask,
    /**
     * @param {Long} width Output width in pixels
     */
    width: Long,
    /**
     * @param {Long} height Output height in pixels
     */
    height: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {String} pdf_paper_size Paper size for pdf
     */
    pdf_paper_size: String? = null,
    /**
     * @param {Boolean} pdf_landscape Whether to render pdf in landscape
     */
    pdf_landscape: Boolean? = null) : SDKResponse {
    return this.post<RenderTask>("/render_tasks/dashboards/${dashboard_id}/${result_format}", 
      mapOf("width" to width, "height" to height, "fields" to fields, "pdf_paper_size" to pdf_paper_size, "pdf_landscape" to pdf_landscape), body)
  }

  /**
   * POST /folders -> Folder
   */
  fun create_folder(
    /**
     * @param {WriteCreateFolder} body
     */
    body: WriteCreateFolder) : SDKResponse {
    return this.post<Folder>("/folders", mapOf(), body)
  }

  /**
   * POST /projects/{project_id}/git_branch -> GitBranch
   */
  fun create_git_branch(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {WriteGitBranch} body
     */
    body: WriteGitBranch) : SDKResponse {
    return this.post<GitBranch>("/projects/${project_id}/git_branch", mapOf(), body)
  }

  /**
   * POST /projects/{project_id}/git/deploy_key -> String
   */
  fun create_git_deploy_key(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String) : SDKResponse {
    return this.post<String>("/projects/${project_id}/git/deploy_key", mapOf())
  }

  /**
   * POST /groups -> Group
   */
  @JvmOverloads fun create_group(
    /**
     * @param {WriteGroup} body
     */
    body: WriteGroup,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<Group>("/groups", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /homepages -> Homepage
   */
  @JvmOverloads fun create_homepage(
    /**
     * @param {WriteHomepage} body
     */
    body: WriteHomepage,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<Homepage>("/homepages", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /homepage_items -> HomepageItem
   */
  @JvmOverloads fun create_homepage_item(
    /**
     * @param {WriteHomepageItem} body
     */
    body: WriteHomepageItem,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<HomepageItem>("/homepage_items", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /homepage_sections -> HomepageSection
   */
  @JvmOverloads fun create_homepage_section(
    /**
     * @param {WriteHomepageSection} body
     */
    body: WriteHomepageSection,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<HomepageSection>("/homepage_sections", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /integration_hubs -> IntegrationHub
   */
  @JvmOverloads fun create_integration_hub(
    /**
     * @param {WriteIntegrationHub} body
     */
    body: WriteIntegrationHub,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<IntegrationHub>("/integration_hubs", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /looks -> LookWithQuery
   */
  @JvmOverloads fun create_look(
    /**
     * @param {WriteLookWithQuery} body
     */
    body: WriteLookWithQuery,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<LookWithQuery>("/looks", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /render_tasks/looks/{look_id}/{result_format} -> RenderTask
   */
  @JvmOverloads fun create_look_render_task(
    /**
     * @param {Long} look_id Id of look to render
     */
    look_id: Long,
    /**
     * @param {String} result_format Output type: png, or jpg
     */
    result_format: String,
    /**
     * @param {Long} width Output width in pixels
     */
    width: Long,
    /**
     * @param {Long} height Output height in pixels
     */
    height: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<RenderTask>("/render_tasks/looks/${look_id}/${result_format}", 
      mapOf("width" to width, "height" to height, "fields" to fields))
  }

  /**
   * POST /render_tasks/lookml_dashboards/{dashboard_id}/{result_format} -> RenderTask
   */
  @JvmOverloads fun create_lookml_dashboard_render_task(
    /**
     * @param {String} dashboard_id Id of lookml dashboard to render
     */
    dashboard_id: String,
    /**
     * @param {String} result_format Output type: pdf, png, or jpg
     */
    result_format: String,
    /**
     * @param {CreateDashboardRenderTask} body
     */
    body: CreateDashboardRenderTask,
    /**
     * @param {Long} width Output width in pixels
     */
    width: Long,
    /**
     * @param {Long} height Output height in pixels
     */
    height: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {String} pdf_paper_size Paper size for pdf
     */
    pdf_paper_size: String? = null,
    /**
     * @param {Boolean} pdf_landscape Whether to render pdf in landscape
     */
    pdf_landscape: Boolean? = null) : SDKResponse {
    return this.post<RenderTask>("/render_tasks/lookml_dashboards/${dashboard_id}/${result_format}", 
      mapOf("width" to width, "height" to height, "fields" to fields, "pdf_paper_size" to pdf_paper_size, "pdf_landscape" to pdf_landscape), body)
  }

  /**
   * POST /lookml_models -> LookmlModel
   */
  fun create_lookml_model(
    /**
     * @param {WriteLookmlModel} body
     */
    body: WriteLookmlModel) : SDKResponse {
    return this.post<LookmlModel>("/lookml_models", mapOf(), body)
  }

  /**
   * POST /merge_queries -> MergeQuery
   */
  @JvmOverloads fun create_merge_query(
    /**
     * @param {WriteMergeQuery} body
     */
    body: WriteMergeQuery? = null,
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null) : SDKResponse {
    return this.post<MergeQuery>("/merge_queries", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /model_sets -> ModelSet
   */
  fun create_model_set(
    /**
     * @param {WriteModelSet} body
     */
    body: WriteModelSet) : SDKResponse {
    return this.post<ModelSet>("/model_sets", mapOf(), body)
  }

  /**
   * POST /oidc_test_configs -> OIDCConfig
   */
  fun create_oidc_test_config(
    /**
     * @param {WriteOIDCConfig} body
     */
    body: WriteOIDCConfig) : SDKResponse {
    return this.post<OIDCConfig>("/oidc_test_configs", mapOf(), body)
  }

  /**
   * POST /permission_sets -> PermissionSet
   */
  fun create_permission_set(
    /**
     * @param {WritePermissionSet} body
     */
    body: WritePermissionSet) : SDKResponse {
    return this.post<PermissionSet>("/permission_sets", mapOf(), body)
  }

  /**
   * POST /projects -> Project
   */
  fun create_project(
    /**
     * @param {WriteProject} body
     */
    body: WriteProject) : SDKResponse {
    return this.post<Project>("/projects", mapOf(), body)
  }

  /**
   * POST /queries -> Query
   */
  @JvmOverloads fun create_query(
    /**
     * @param {WriteQuery} body
     */
    body: WriteQuery,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<Query>("/queries", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /render_tasks/queries/{query_id}/{result_format} -> RenderTask
   */
  @JvmOverloads fun create_query_render_task(
    /**
     * @param {Long} query_id Id of the query to render
     */
    query_id: Long,
    /**
     * @param {String} result_format Output type: png or jpg
     */
    result_format: String,
    /**
     * @param {Long} width Output width in pixels
     */
    width: Long,
    /**
     * @param {Long} height Output height in pixels
     */
    height: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<RenderTask>("/render_tasks/queries/${query_id}/${result_format}", 
      mapOf("width" to width, "height" to height, "fields" to fields))
  }

  /**
   * POST /query_tasks -> QueryTask
   */
  @JvmOverloads fun create_query_task(
    /**
     * @param {WriteCreateQueryTask} body
     */
    body: WriteCreateQueryTask,
    /**
     * @param {Long} limit Row limit (may override the limit in the saved query).
     */
    limit: Long? = null,
    /**
     * @param {Boolean} apply_formatting Apply model-specified formatting to each result.
     */
    apply_formatting: Boolean? = null,
    /**
     * @param {Boolean} apply_vis Apply visualization options to results.
     */
    apply_vis: Boolean? = null,
    /**
     * @param {Boolean} cache Get results from cache if available.
     */
    cache: Boolean? = null,
    /**
     * @param {Long} image_width Render width for image formats.
     */
    image_width: Long? = null,
    /**
     * @param {Long} image_height Render height for image formats.
     */
    image_height: Long? = null,
    /**
     * @param {Boolean} generate_drill_links Generate drill links (only applicable to 'json_detail' format.
     */
    generate_drill_links: Boolean? = null,
    /**
     * @param {Boolean} force_production Force use of production models even if the user is in development mode.
     */
    force_production: Boolean? = null,
    /**
     * @param {Boolean} cache_only Retrieve any results from cache even if the results have expired.
     */
    cache_only: Boolean? = null,
    /**
     * @param {String} path_prefix Prefix to use for drill links (url encoded).
     */
    path_prefix: String? = null,
    /**
     * @param {Boolean} rebuild_pdts Rebuild PDTS used in query.
     */
    rebuild_pdts: Boolean? = null,
    /**
     * @param {Boolean} server_table_calcs Perform table calculations on query results
     */
    server_table_calcs: Boolean? = null,
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null) : SDKResponse {
    return this.post<QueryTask>("/query_tasks", 
      mapOf("limit" to limit, "apply_formatting" to apply_formatting, "apply_vis" to apply_vis, "cache" to cache, "image_width" to image_width, "image_height" to image_height, "generate_drill_links" to generate_drill_links, "force_production" to force_production, "cache_only" to cache_only, "path_prefix" to path_prefix, "rebuild_pdts" to rebuild_pdts, "server_table_calcs" to server_table_calcs, "fields" to fields), body)
  }

  /**
   * POST /roles -> Role
   */
  fun create_role(
    /**
     * @param {WriteRole} body
     */
    body: WriteRole) : SDKResponse {
    return this.post<Role>("/roles", mapOf(), body)
  }

  /**
   * POST /saml_test_configs -> SamlConfig
   */
  fun create_saml_test_config(
    /**
     * @param {WriteSamlConfig} body
     */
    body: WriteSamlConfig) : SDKResponse {
    return this.post<SamlConfig>("/saml_test_configs", mapOf(), body)
  }

  /**
   * POST /scheduled_plans -> ScheduledPlan
   */
  fun create_scheduled_plan(
    /**
     * @param {WriteScheduledPlan} body
     */
    body: WriteScheduledPlan) : SDKResponse {
    return this.post<ScheduledPlan>("/scheduled_plans", mapOf(), body)
  }

  /**
   * POST /spaces -> Space
   */
  fun create_space(
    /**
     * @param {WriteCreateSpace} body
     */
    body: WriteCreateSpace) : SDKResponse {
    return this.post<Space>("/spaces", mapOf(), body)
  }

  /**
   * POST /sql_queries -> SqlQuery
   */
  fun create_sql_query(
    /**
     * @param {WriteSqlQueryCreate} body
     */
    body: WriteSqlQueryCreate) : SDKResponse {
    return this.post<SqlQuery>("/sql_queries", mapOf(), body)
  }

  /**
   * POST /embed/sso_url -> EmbedSsoUrl
   */
  fun create_sso_embed_url(
    /**
     * @param {WriteEmbedSsoUrlParams} body
     */
    body: WriteEmbedSsoUrlParams) : SDKResponse {
    return this.post<EmbedSsoUrl>("/embed/sso_url", mapOf(), body)
  }

  /**
   * POST /themes -> Theme
   */
  fun create_theme(
    /**
     * @param {WriteTheme} body
     */
    body: WriteTheme) : SDKResponse {
    return this.post<Theme>("/themes", mapOf(), body)
  }

  /**
   * POST /users -> User
   */
  @JvmOverloads fun create_user(
    /**
     * @param {WriteUser} body
     */
    body: WriteUser? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<User>("/users", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /user_attributes -> UserAttribute
   */
  @JvmOverloads fun create_user_attribute(
    /**
     * @param {WriteUserAttribute} body
     */
    body: WriteUserAttribute,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<UserAttribute>("/user_attributes", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /users/{user_id}/credentials_api3 -> CredentialsApi3
   */
  @JvmOverloads fun create_user_credentials_api3(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {CredentialsApi3} body
     */
    body: CredentialsApi3? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<CredentialsApi3>("/users/${user_id}/credentials_api3", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /users/{user_id}/credentials_email -> CredentialsEmail
   */
  @JvmOverloads fun create_user_credentials_email(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {WriteCredentialsEmail} body
     */
    body: WriteCredentialsEmail,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<CredentialsEmail>("/users/${user_id}/credentials_email", 
      mapOf("fields" to fields), body)
  }

  /**
   * POST /users/{user_id}/credentials_email/password_reset -> CredentialsEmail
   */
  @JvmOverloads fun create_user_credentials_email_password_reset(
    /**
     * @param {Long} user_id Id of user
     */
    user_id: Long,
    /**
     * @param {Boolean} expires Expiring token.
     */
    expires: Boolean? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<CredentialsEmail>("/users/${user_id}/credentials_email/password_reset", 
      mapOf("expires" to expires, "fields" to fields))
  }

  /**
   * POST /users/{user_id}/credentials_totp -> CredentialsTotp
   */
  @JvmOverloads fun create_user_credentials_totp(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {CredentialsTotp} body
     */
    body: CredentialsTotp? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.post<CredentialsTotp>("/users/${user_id}/credentials_totp", 
      mapOf("fields" to fields), body)
  }

  /**
   * GET /custom_welcome_email -> CustomWelcomeEmail
   */
  fun custom_welcome_email() : SDKResponse {
    return this.get<CustomWelcomeEmail>("/custom_welcome_email", mapOf())
  }

  /**
   * GET /dashboards/{dashboard_id} -> Dashboard
   */
  @JvmOverloads fun dashboard(
    /**
     * @param {String} dashboard_id Id of dashboard
     */
    dashboard_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Dashboard>("/dashboards/${dashboard_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /dashboards/{dashboard_id}/dashboard_elements -> Array<DashboardElement>
   */
  @JvmOverloads fun dashboard_dashboard_elements(
    /**
     * @param {String} dashboard_id Id of dashboard
     */
    dashboard_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<DashboardElement>>("/dashboards/${dashboard_id}/dashboard_elements", 
      mapOf("fields" to fields))
  }

  /**
   * GET /dashboards/{dashboard_id}/dashboard_filters -> Array<DashboardFilter>
   */
  @JvmOverloads fun dashboard_dashboard_filters(
    /**
     * @param {String} dashboard_id Id of dashboard
     */
    dashboard_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<DashboardFilter>>("/dashboards/${dashboard_id}/dashboard_filters", 
      mapOf("fields" to fields))
  }

  /**
   * GET /dashboards/{dashboard_id}/dashboard_layouts -> Array<DashboardLayout>
   */
  @JvmOverloads fun dashboard_dashboard_layouts(
    /**
     * @param {String} dashboard_id Id of dashboard
     */
    dashboard_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<DashboardLayout>>("/dashboards/${dashboard_id}/dashboard_layouts", 
      mapOf("fields" to fields))
  }

  /**
   * GET /dashboard_elements/{dashboard_element_id} -> DashboardElement
   */
  @JvmOverloads fun dashboard_element(
    /**
     * @param {String} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<DashboardElement>("/dashboard_elements/${dashboard_element_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /dashboard_filters/{dashboard_filter_id} -> DashboardFilter
   */
  @JvmOverloads fun dashboard_filter(
    /**
     * @param {String} dashboard_filter_id Id of dashboard filters
     */
    dashboard_filter_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<DashboardFilter>("/dashboard_filters/${dashboard_filter_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /dashboard_layouts/{dashboard_layout_id} -> DashboardLayout
   */
  @JvmOverloads fun dashboard_layout(
    /**
     * @param {String} dashboard_layout_id Id of dashboard layouts
     */
    dashboard_layout_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<DashboardLayout>("/dashboard_layouts/${dashboard_layout_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /dashboard_layout_components/{dashboard_layout_component_id} -> DashboardLayoutComponent
   */
  @JvmOverloads fun dashboard_layout_component(
    /**
     * @param {String} dashboard_layout_component_id Id of dashboard layout component
     */
    dashboard_layout_component_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<DashboardLayoutComponent>("/dashboard_layout_components/${dashboard_layout_component_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components -> Array<DashboardLayoutComponent>
   */
  @JvmOverloads fun dashboard_layout_dashboard_layout_components(
    /**
     * @param {String} dashboard_layout_id Id of dashboard layout component
     */
    dashboard_layout_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<DashboardLayoutComponent>>("/dashboard_layouts/${dashboard_layout_id}/dashboard_layout_components", 
      mapOf("fields" to fields))
  }

  /**
   * GET /datagroups/{datagroup_id} -> Datagroup
   */
  fun datagroup(
    /**
     * @param {String} datagroup_id ID of datagroup.
     */
    datagroup_id: String) : SDKResponse {
    return this.get<Datagroup>("/datagroups/${datagroup_id}", mapOf())
  }

  /**
   * GET /color_collections/default -> ColorCollection
   */
  fun default_color_collection() : SDKResponse {
    return this.get<ColorCollection>("/color_collections/default", mapOf())
  }

  /**
   * GET /themes/default -> Theme
   */
  @JvmOverloads fun default_theme(
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts: Date? = null) : SDKResponse {
    return this.get<Theme>("/themes/default", 
      mapOf("ts" to ts))
  }

  /**
   * DELETE /color_collections/{collection_id} -> String
   */
  fun delete_color_collection(
    /**
     * @param {String} collection_id Id of Color Collection
     */
    collection_id: String) : SDKResponse {
    return this.delete<String>("/color_collections/${collection_id}", mapOf())
  }

  /**
   * DELETE /connections/{connection_name} -> String
   */
  fun delete_connection(
    /**
     * @param {String} connection_name Name of connection
     */
    connection_name: String) : SDKResponse {
    return this.delete<String>("/connections/${connection_name}", mapOf())
  }

  /**
   * DELETE /connections/{connection_name}/connection_override/{override_context} -> String
   */
  fun delete_connection_override(
    /**
     * @param {String} connection_name Name of connection
     */
    connection_name: String,
    /**
     * @param {String} override_context Context of connection override
     */
    override_context: String) : SDKResponse {
    return this.delete<String>("/connections/${connection_name}/connection_override/${override_context}", mapOf())
  }

  /**
   * DELETE /content_favorite/{content_favorite_id} -> String
   */
  fun delete_content_favorite(
    /**
     * @param {Long} content_favorite_id Id of favorite content
     */
    content_favorite_id: Long) : SDKResponse {
    return this.delete<String>("/content_favorite/${content_favorite_id}", mapOf())
  }

  /**
   * DELETE /content_metadata_access/{content_metadata_access_id} -> String
   */
  fun delete_content_metadata_access(
    /**
     * @param {Long} content_metadata_access_id Id of content metadata access
     */
    content_metadata_access_id: Long) : SDKResponse {
    return this.delete<String>("/content_metadata_access/${content_metadata_access_id}", mapOf())
  }

  /**
   * DELETE /dashboards/{dashboard_id} -> String
   */
  fun delete_dashboard(
    /**
     * @param {String} dashboard_id Id of dashboard
     */
    dashboard_id: String) : SDKResponse {
    return this.delete<String>("/dashboards/${dashboard_id}", mapOf())
  }

  /**
   * DELETE /dashboard_elements/{dashboard_element_id} -> String
   */
  fun delete_dashboard_element(
    /**
     * @param {String} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id: String) : SDKResponse {
    return this.delete<String>("/dashboard_elements/${dashboard_element_id}", mapOf())
  }

  /**
   * DELETE /dashboard_filters/{dashboard_filter_id} -> String
   */
  fun delete_dashboard_filter(
    /**
     * @param {String} dashboard_filter_id Id of dashboard filter
     */
    dashboard_filter_id: String) : SDKResponse {
    return this.delete<String>("/dashboard_filters/${dashboard_filter_id}", mapOf())
  }

  /**
   * DELETE /dashboard_layouts/{dashboard_layout_id} -> String
   */
  fun delete_dashboard_layout(
    /**
     * @param {String} dashboard_layout_id Id of dashboard layout
     */
    dashboard_layout_id: String) : SDKResponse {
    return this.delete<String>("/dashboard_layouts/${dashboard_layout_id}", mapOf())
  }

  /**
   * DELETE /folders/{folder_id} -> String
   */
  fun delete_folder(
    /**
     * @param {String} folder_id Id of folder
     */
    folder_id: String) : SDKResponse {
    return this.delete<String>("/folders/${folder_id}", mapOf())
  }

  /**
   * DELETE /projects/{project_id}/git_branch/{branch_name} -> String
   */
  fun delete_git_branch(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {String} branch_name Branch Name
     */
    branch_name: String) : SDKResponse {
    return this.delete<String>("/projects/${project_id}/git_branch/${branch_name}", mapOf())
  }

  /**
   * DELETE /groups/{group_id} -> String
   */
  fun delete_group(
    /**
     * @param {Long} group_id Id of group
     */
    group_id: Long) : SDKResponse {
    return this.delete<String>("/groups/${group_id}", mapOf())
  }

  /**
   * DELETE /groups/{group_id}/groups/{deleting_group_id} -> Void
   */
  fun delete_group_from_group(
    /**
     * @param {Long} group_id Id of group
     */
    group_id: Long,
    /**
     * @param {Long} deleting_group_id Id of group to delete
     */
    deleting_group_id: Long) : SDKResponse {
    return this.delete<Void>("/groups/${group_id}/groups/${deleting_group_id}", mapOf())
  }

  /**
   * DELETE /groups/{group_id}/users/{user_id} -> Void
   */
  fun delete_group_user(
    /**
     * @param {Long} group_id Id of group
     */
    group_id: Long,
    /**
     * @param {Long} user_id Id of user to remove from group
     */
    user_id: Long) : SDKResponse {
    return this.delete<Void>("/groups/${group_id}/users/${user_id}", mapOf())
  }

  /**
   * DELETE /homepages/{homepage_id} -> String
   */
  fun delete_homepage(
    /**
     * @param {Long} homepage_id Id of homepage
     */
    homepage_id: Long) : SDKResponse {
    return this.delete<String>("/homepages/${homepage_id}", mapOf())
  }

  /**
   * DELETE /homepage_items/{homepage_item_id} -> String
   */
  fun delete_homepage_item(
    /**
     * @param {Long} homepage_item_id Id of homepage_item
     */
    homepage_item_id: Long) : SDKResponse {
    return this.delete<String>("/homepage_items/${homepage_item_id}", mapOf())
  }

  /**
   * DELETE /homepage_sections/{homepage_section_id} -> String
   */
  fun delete_homepage_section(
    /**
     * @param {Long} homepage_section_id Id of homepage_section
     */
    homepage_section_id: Long) : SDKResponse {
    return this.delete<String>("/homepage_sections/${homepage_section_id}", mapOf())
  }

  /**
   * DELETE /integration_hubs/{integration_hub_id} -> String
   */
  fun delete_integration_hub(
    /**
     * @param {Long} integration_hub_id Id of integration_hub
     */
    integration_hub_id: Long) : SDKResponse {
    return this.delete<String>("/integration_hubs/${integration_hub_id}", mapOf())
  }

  /**
   * DELETE /looks/{look_id} -> String
   */
  fun delete_look(
    /**
     * @param {Long} look_id Id of look
     */
    look_id: Long) : SDKResponse {
    return this.delete<String>("/looks/${look_id}", mapOf())
  }

  /**
   * DELETE /lookml_models/{lookml_model_name} -> String
   */
  fun delete_lookml_model(
    /**
     * @param {String} lookml_model_name Name of lookml model.
     */
    lookml_model_name: String) : SDKResponse {
    return this.delete<String>("/lookml_models/${lookml_model_name}", mapOf())
  }

  /**
   * DELETE /model_sets/{model_set_id} -> String
   */
  fun delete_model_set(
    /**
     * @param {Long} model_set_id id of model set
     */
    model_set_id: Long) : SDKResponse {
    return this.delete<String>("/model_sets/${model_set_id}", mapOf())
  }

  /**
   * DELETE /oidc_test_configs/{test_slug} -> String
   */
  fun delete_oidc_test_config(
    /**
     * @param {String} test_slug Slug of test config
     */
    test_slug: String) : SDKResponse {
    return this.delete<String>("/oidc_test_configs/${test_slug}", mapOf())
  }

  /**
   * DELETE /permission_sets/{permission_set_id} -> String
   */
  fun delete_permission_set(
    /**
     * @param {Long} permission_set_id Id of permission set
     */
    permission_set_id: Long) : SDKResponse {
    return this.delete<String>("/permission_sets/${permission_set_id}", mapOf())
  }

  /**
   * DELETE /projects/{root_project_id}/credential/{credential_id} -> String
   */
  fun delete_repository_credential(
    /**
     * @param {String} root_project_id Root Project Id
     */
    root_project_id: String,
    /**
     * @param {String} credential_id Credential Id
     */
    credential_id: String) : SDKResponse {
    return this.delete<String>("/projects/${root_project_id}/credential/${credential_id}", mapOf())
  }

  /**
   * DELETE /roles/{role_id} -> String
   */
  fun delete_role(
    /**
     * @param {Long} role_id id of role
     */
    role_id: Long) : SDKResponse {
    return this.delete<String>("/roles/${role_id}", mapOf())
  }

  /**
   * DELETE /saml_test_configs/{test_slug} -> String
   */
  fun delete_saml_test_config(
    /**
     * @param {String} test_slug Slug of test config
     */
    test_slug: String) : SDKResponse {
    return this.delete<String>("/saml_test_configs/${test_slug}", mapOf())
  }

  /**
   * DELETE /scheduled_plans/{scheduled_plan_id} -> String
   */
  fun delete_scheduled_plan(
    /**
     * @param {Long} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id: Long) : SDKResponse {
    return this.delete<String>("/scheduled_plans/${scheduled_plan_id}", mapOf())
  }

  /**
   * DELETE /spaces/{space_id} -> String
   */
  fun delete_space(
    /**
     * @param {String} space_id Id of space
     */
    space_id: String) : SDKResponse {
    return this.delete<String>("/spaces/${space_id}", mapOf())
  }

  /**
   * DELETE /themes/{theme_id} -> String
   */
  fun delete_theme(
    /**
     * @param {String} theme_id Id of theme
     */
    theme_id: String) : SDKResponse {
    return this.delete<String>("/themes/${theme_id}", mapOf())
  }

  /**
   * DELETE /users/{user_id} -> String
   */
  fun delete_user(
    /**
     * @param {Long} user_id Id of user
     */
    user_id: Long) : SDKResponse {
    return this.delete<String>("/users/${user_id}", mapOf())
  }

  /**
   * DELETE /user_attributes/{user_attribute_id} -> String
   */
  fun delete_user_attribute(
    /**
     * @param {Long} user_attribute_id Id of user_attribute
     */
    user_attribute_id: Long) : SDKResponse {
    return this.delete<String>("/user_attributes/${user_attribute_id}", mapOf())
  }

  /**
   * DELETE /groups/{group_id}/attribute_values/{user_attribute_id} -> Void
   */
  fun delete_user_attribute_group_value(
    /**
     * @param {Long} group_id Id of group
     */
    group_id: Long,
    /**
     * @param {Long} user_attribute_id Id of user attribute
     */
    user_attribute_id: Long) : SDKResponse {
    return this.delete<Void>("/groups/${group_id}/attribute_values/${user_attribute_id}", mapOf())
  }

  /**
   * DELETE /users/{user_id}/attribute_values/{user_attribute_id} -> Void
   */
  fun delete_user_attribute_user_value(
    /**
     * @param {Long} user_id Id of user
     */
    user_id: Long,
    /**
     * @param {Long} user_attribute_id Id of user attribute
     */
    user_attribute_id: Long) : SDKResponse {
    return this.delete<Void>("/users/${user_id}/attribute_values/${user_attribute_id}", mapOf())
  }

  /**
   * DELETE /users/{user_id}/credentials_api3/{credentials_api3_id} -> String
   */
  fun delete_user_credentials_api3(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {Long} credentials_api3_id id of API 3 Credential
     */
    credentials_api3_id: Long) : SDKResponse {
    return this.delete<String>("/users/${user_id}/credentials_api3/${credentials_api3_id}", mapOf())
  }

  /**
   * DELETE /users/{user_id}/credentials_email -> String
   */
  fun delete_user_credentials_email(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long) : SDKResponse {
    return this.delete<String>("/users/${user_id}/credentials_email", mapOf())
  }

  /**
   * DELETE /users/{user_id}/credentials_embed/{credentials_embed_id} -> String
   */
  fun delete_user_credentials_embed(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {Long} credentials_embed_id id of Embedding Credential
     */
    credentials_embed_id: Long) : SDKResponse {
    return this.delete<String>("/users/${user_id}/credentials_embed/${credentials_embed_id}", mapOf())
  }

  /**
   * DELETE /users/{user_id}/credentials_google -> String
   */
  fun delete_user_credentials_google(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long) : SDKResponse {
    return this.delete<String>("/users/${user_id}/credentials_google", mapOf())
  }

  /**
   * DELETE /users/{user_id}/credentials_ldap -> String
   */
  fun delete_user_credentials_ldap(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long) : SDKResponse {
    return this.delete<String>("/users/${user_id}/credentials_ldap", mapOf())
  }

  /**
   * DELETE /users/{user_id}/credentials_looker_openid -> String
   */
  fun delete_user_credentials_looker_openid(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long) : SDKResponse {
    return this.delete<String>("/users/${user_id}/credentials_looker_openid", mapOf())
  }

  /**
   * DELETE /users/{user_id}/credentials_oidc -> String
   */
  fun delete_user_credentials_oidc(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long) : SDKResponse {
    return this.delete<String>("/users/${user_id}/credentials_oidc", mapOf())
  }

  /**
   * DELETE /users/{user_id}/credentials_saml -> String
   */
  fun delete_user_credentials_saml(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long) : SDKResponse {
    return this.delete<String>("/users/${user_id}/credentials_saml", mapOf())
  }

  /**
   * DELETE /users/{user_id}/credentials_totp -> String
   */
  fun delete_user_credentials_totp(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long) : SDKResponse {
    return this.delete<String>("/users/${user_id}/credentials_totp", mapOf())
  }

  /**
   * DELETE /user_login_lockout/{key} -> String
   */
  fun delete_user_login_lockout(
    /**
     * @param {String} key The key associated with the locked user
     */
    key: String) : SDKResponse {
    return this.delete<String>("/user_login_lockout/${key}", mapOf())
  }

  /**
   * DELETE /users/{user_id}/sessions/{session_id} -> String
   */
  fun delete_user_session(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {Long} session_id id of Web Login Session
     */
    session_id: Long) : SDKResponse {
    return this.delete<String>("/users/${user_id}/sessions/${session_id}", mapOf())
  }

  /**
   * POST /projects/{project_id}/deploy_to_production -> String
   */
  fun deploy_to_production(
    /**
     * @param {String} project_id Id of project
     */
    project_id: String) : SDKResponse {
    return this.post<String>("/projects/${project_id}/deploy_to_production", mapOf())
  }

  /**
   * POST /fetch_and_parse_saml_idp_metadata -> SamlMetadataParseResult
   */
  fun fetch_and_parse_saml_idp_metadata(
    /**
     * @param {String} body
     */
    body: String) : SDKResponse {
    return this.post<SamlMetadataParseResult>("/fetch_and_parse_saml_idp_metadata", mapOf(), body)
  }

  /**
   * POST /integrations/{integration_id}/form -> DataActionForm
   */
  fun fetch_integration_form(
    /**
     * @param {Long} integration_id Id of Integration
     */
    integration_id: Long) : SDKResponse {
    return this.post<DataActionForm>("/integrations/${integration_id}/form", mapOf())
  }

  /**
   * POST /data_actions/form -> DataActionForm
   */
  fun fetch_remote_data_action_form(
    /**
     * @param {Map<String,Any>} body
     */
    body: Map<String,Any>) : SDKResponse {
    return this.post<DataActionForm>("/data_actions/form", mapOf(), body)
  }

  /**
   * GET /projects/{project_id}/git_branch/{branch_name} -> GitBranch
   */
  fun find_git_branch(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {String} branch_name Branch Name
     */
    branch_name: String) : SDKResponse {
    return this.get<GitBranch>("/projects/${project_id}/git_branch/${branch_name}", mapOf())
  }

  /**
   * GET /folders/{folder_id} -> Folder
   */
  @JvmOverloads fun folder(
    /**
     * @param {String} folder_id Id of folder
     */
    folder_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Folder>("/folders/${folder_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /folders/{folder_id}/ancestors -> Array<Folder>
   */
  @JvmOverloads fun folder_ancestors(
    /**
     * @param {String} folder_id Id of folder
     */
    folder_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Folder>>("/folders/${folder_id}/ancestors", 
      mapOf("fields" to fields))
  }

  /**
   * GET /folders/{folder_id}/children -> Array<Folder>
   */
  @JvmOverloads fun folder_children(
    /**
     * @param {String} folder_id Id of folder
     */
    folder_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} page Requested page.
     */
    page: Long? = null,
    /**
     * @param {Long} per_page Results per page.
     */
    per_page: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null) : SDKResponse {
    return this.get<Array<Folder>>("/folders/${folder_id}/children", 
      mapOf("fields" to fields, "page" to page, "per_page" to per_page, "sorts" to sorts))
  }

  /**
   * GET /folders/{folder_id}/children/search -> Array<Folder>
   */
  @JvmOverloads fun folder_children_search(
    /**
     * @param {String} folder_id Id of folder
     */
    folder_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {String} name Match folder name.
     */
    name: String? = null) : SDKResponse {
    return this.get<Array<Folder>>("/folders/${folder_id}/children/search", 
      mapOf("fields" to fields, "sorts" to sorts, "name" to name))
  }

  /**
   * GET /folders/{folder_id}/dashboards -> Array<Dashboard>
   */
  @JvmOverloads fun folder_dashboards(
    /**
     * @param {String} folder_id Id of folder
     */
    folder_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Dashboard>>("/folders/${folder_id}/dashboards", 
      mapOf("fields" to fields))
  }

  /**
   * GET /folders/{folder_id}/looks -> Array<LookWithQuery>
   */
  @JvmOverloads fun folder_looks(
    /**
     * @param {String} folder_id Id of folder
     */
    folder_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<LookWithQuery>>("/folders/${folder_id}/looks", 
      mapOf("fields" to fields))
  }

  /**
   * GET /folders/{folder_id}/parent -> Folder
   */
  @JvmOverloads fun folder_parent(
    /**
     * @param {String} folder_id Id of folder
     */
    folder_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Folder>("/folders/${folder_id}/parent", 
      mapOf("fields" to fields))
  }

  /**
   * PUT /password_config/force_password_reset_at_next_login_for_all_users -> String
   */
  fun force_password_reset_at_next_login_for_all_users() : SDKResponse {
    return this.put<String>("/password_config/force_password_reset_at_next_login_for_all_users", mapOf())
  }

  /**
   * GET /projects/{root_project_id}/credentials -> Array<RepositoryCredential>
   */
  fun get_all_repository_credentials(
    /**
     * @param {String} root_project_id Root Project Id
     */
    root_project_id: String) : SDKResponse {
    return this.get<Array<RepositoryCredential>>("/projects/${root_project_id}/credentials", mapOf())
  }

  /**
   * GET /projects/{project_id}/git_branch -> GitBranch
   */
  fun git_branch(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String) : SDKResponse {
    return this.get<GitBranch>("/projects/${project_id}/git_branch", mapOf())
  }

  /**
   * GET /projects/{project_id}/git/deploy_key -> String
   */
  fun git_deploy_key(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String) : SDKResponse {
    return this.get<String>("/projects/${project_id}/git/deploy_key", mapOf())
  }

  /**
   * GET /groups/{group_id} -> Group
   */
  @JvmOverloads fun group(
    /**
     * @param {Long} group_id Id of group
     */
    group_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Group>("/groups/${group_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /homepages/{homepage_id} -> Homepage
   */
  @JvmOverloads fun homepage(
    /**
     * @param {Long} homepage_id Id of homepage
     */
    homepage_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Homepage>("/homepages/${homepage_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /homepage_items/{homepage_item_id} -> HomepageItem
   */
  @JvmOverloads fun homepage_item(
    /**
     * @param {Long} homepage_item_id Id of homepage item
     */
    homepage_item_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<HomepageItem>("/homepage_items/${homepage_item_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /homepage_sections/{homepage_section_id} -> HomepageSection
   */
  @JvmOverloads fun homepage_section(
    /**
     * @param {Long} homepage_section_id Id of homepage section
     */
    homepage_section_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<HomepageSection>("/homepage_sections/${homepage_section_id}", 
      mapOf("fields" to fields))
  }

  /**
   * POST /dashboards/{lookml_dashboard_id}/import/{space_id} -> Dashboard
   */
  @JvmOverloads fun import_lookml_dashboard(
    /**
     * @param {String} lookml_dashboard_id Id of LookML dashboard
     */
    lookml_dashboard_id: String,
    /**
     * @param {String} space_id Id of space to import the dashboard to
     */
    space_id: String,
    /**
     * @param {WriteDashboard} body
     */
    body: WriteDashboard? = null,
    /**
     * @param {Boolean} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
     */
    raw_locale: Boolean? = null) : SDKResponse {
    return this.post<Dashboard>("/dashboards/${lookml_dashboard_id}/import/${space_id}", 
      mapOf("raw_locale" to raw_locale), body)
  }

  /**
   * GET /integrations/{integration_id} -> Integration
   */
  @JvmOverloads fun integration(
    /**
     * @param {Long} integration_id Id of Integration
     */
    integration_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Integration>("/integrations/${integration_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /integration_hubs/{integration_hub_id} -> IntegrationHub
   */
  @JvmOverloads fun integration_hub(
    /**
     * @param {Long} integration_hub_id Id of Integration Hub
     */
    integration_hub_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<IntegrationHub>("/integration_hubs/${integration_hub_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /internal_help_resources_enabled -> InternalHelpResources
   */
  fun internal_help_resources() : SDKResponse {
    return this.get<InternalHelpResources>("/internal_help_resources_enabled", mapOf())
  }

  /**
   * GET /internal_help_resources_content -> InternalHelpResourcesContent
   */
  fun internal_help_resources_content() : SDKResponse {
    return this.get<InternalHelpResourcesContent>("/internal_help_resources_content", mapOf())
  }

  /**
   * DELETE /running_queries/{query_task_id} -> String
   */
  fun kill_query(
    /**
     * @param {String} query_task_id Query task id.
     */
    query_task_id: String) : SDKResponse {
    return this.delete<String>("/running_queries/${query_task_id}", mapOf())
  }

  /**
   * GET /ldap_config -> LDAPConfig
   */
  fun ldap_config() : SDKResponse {
    return this.get<LDAPConfig>("/ldap_config", mapOf())
  }

  /**
   * GET /legacy_features/{legacy_feature_id} -> LegacyFeature
   */
  fun legacy_feature(
    /**
     * @param {Long} legacy_feature_id id of legacy feature
     */
    legacy_feature_id: Long) : SDKResponse {
    return this.get<LegacyFeature>("/legacy_features/${legacy_feature_id}", mapOf())
  }

  /**
   * POST /login -> AccessToken
   */
  @JvmOverloads fun login(
    /**
     * @param {String} client_id client_id part of API3 Key.
     */
    client_id: String? = null,
    /**
     * @param {String} client_secret client_secret part of API3 Key.
     */
    client_secret: String? = null) : SDKResponse {
    return this.post<AccessToken>("/login", 
      mapOf("client_id" to client_id, "client_secret" to client_secret))
  }

  /**
   * POST /login/{user_id} -> AccessToken
   */
  fun login_user(
    /**
     * @param {Long} user_id Id of user.
     */
    user_id: Long) : SDKResponse {
    return this.post<AccessToken>("/login/${user_id}", mapOf())
  }

  /**
   * DELETE /logout -> String
   */
  fun logout() : SDKResponse {
    return this.delete<String>("/logout", mapOf())
  }

  /**
   * GET /looks/{look_id} -> LookWithQuery
   */
  @JvmOverloads fun look(
    /**
     * @param {Long} look_id Id of look
     */
    look_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<LookWithQuery>("/looks/${look_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /lookml_models/{lookml_model_name} -> LookmlModel
   */
  @JvmOverloads fun lookml_model(
    /**
     * @param {String} lookml_model_name Name of lookml model.
     */
    lookml_model_name: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<LookmlModel>("/lookml_models/${lookml_model_name}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /lookml_models/{lookml_model_name}/explores/{explore_name} -> LookmlModelExplore
   */
  @JvmOverloads fun lookml_model_explore(
    /**
     * @param {String} lookml_model_name Name of lookml model.
     */
    lookml_model_name: String,
    /**
     * @param {String} explore_name Name of explore.
     */
    explore_name: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<LookmlModelExplore>("/lookml_models/${lookml_model_name}/explores/${explore_name}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /projects/{project_id}/manifest -> Manifest
   */
  fun manifest(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String) : SDKResponse {
    return this.get<Manifest>("/projects/${project_id}/manifest", mapOf())
  }

  /**
   * GET /user -> User
   */
  @JvmOverloads fun me(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<User>("/user", 
      mapOf("fields" to fields))
  }

  /**
   * GET /merge_queries/{merge_query_id} -> MergeQuery
   */
  @JvmOverloads fun merge_query(
    /**
     * @param {String} merge_query_id Merge Query Id
     */
    merge_query_id: String,
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null) : SDKResponse {
    return this.get<MergeQuery>("/merge_queries/${merge_query_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /model_sets/{model_set_id} -> ModelSet
   */
  @JvmOverloads fun model_set(
    /**
     * @param {Long} model_set_id Id of model set
     */
    model_set_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<ModelSet>("/model_sets/${model_set_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /oidc_config -> OIDCConfig
   */
  fun oidc_config() : SDKResponse {
    return this.get<OIDCConfig>("/oidc_config", mapOf())
  }

  /**
   * GET /oidc_test_configs/{test_slug} -> OIDCConfig
   */
  fun oidc_test_config(
    /**
     * @param {String} test_slug Slug of test config
     */
    test_slug: String) : SDKResponse {
    return this.get<OIDCConfig>("/oidc_test_configs/${test_slug}", mapOf())
  }

  /**
   * POST /parse_saml_idp_metadata -> SamlMetadataParseResult
   */
  fun parse_saml_idp_metadata(
    /**
     * @param {String} body
     */
    body: String) : SDKResponse {
    return this.post<SamlMetadataParseResult>("/parse_saml_idp_metadata", mapOf(), body)
  }

  /**
   * GET /password_config -> PasswordConfig
   */
  fun password_config() : SDKResponse {
    return this.get<PasswordConfig>("/password_config", mapOf())
  }

  /**
   * POST /data_actions -> DataActionResponse
   */
  fun perform_data_action(
    /**
     * @param {WriteDataActionRequest} body
     */
    body: WriteDataActionRequest) : SDKResponse {
    return this.post<DataActionResponse>("/data_actions", mapOf(), body)
  }

  /**
   * GET /permission_sets/{permission_set_id} -> PermissionSet
   */
  @JvmOverloads fun permission_set(
    /**
     * @param {Long} permission_set_id Id of permission set
     */
    permission_set_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<PermissionSet>("/permission_sets/${permission_set_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /projects/{project_id} -> Project
   */
  @JvmOverloads fun project(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null) : SDKResponse {
    return this.get<Project>("/projects/${project_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /projects/{project_id}/files/file -> ProjectFile
   */
  @JvmOverloads fun project_file(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {String} file_id File Id
     */
    file_id: String,
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null) : SDKResponse {
    return this.get<ProjectFile>("/projects/${project_id}/files/file", 
      mapOf("file_id" to file_id, "fields" to fields))
  }

  /**
   * GET /projects/{project_id}/validate -> ProjectValidationCache
   */
  @JvmOverloads fun project_validation_results(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null) : SDKResponse {
    return this.get<ProjectValidationCache>("/projects/${project_id}/validate", 
      mapOf("fields" to fields))
  }

  /**
   * GET /projects/{project_id}/current_workspace -> ProjectWorkspace
   */
  @JvmOverloads fun project_workspace(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null) : SDKResponse {
    return this.get<ProjectWorkspace>("/projects/${project_id}/current_workspace", 
      mapOf("fields" to fields))
  }

  /**
   * GET /queries/{query_id} -> Query
   */
  @JvmOverloads fun query(
    /**
     * @param {Long} query_id Id of query
     */
    query_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Query>("/queries/${query_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /queries/slug/{slug} -> Query
   */
  @JvmOverloads fun query_for_slug(
    /**
     * @param {String} slug Slug of query
     */
    slug: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Query>("/queries/slug/${slug}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /query_tasks/{query_task_id} -> QueryTask
   */
  @JvmOverloads fun query_task(
    /**
     * @param {String} query_task_id ID of the Query Task
     */
    query_task_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<QueryTask>("/query_tasks/${query_task_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /query_tasks/multi_results -> Map<String,Any>
   */
  fun query_task_multi_results(
    /**
     * @param {DelimArray<String>} query_task_ids List of Query Task IDs
     */
    query_task_ids: DelimArray<String>) : SDKResponse {
    return this.get<Map<String,Any>>("/query_tasks/multi_results", 
      mapOf("query_task_ids" to query_task_ids))
  }

  /**
   * GET /query_tasks/{query_task_id}/results -> Map<String,Any>
   */
  fun query_task_results(
    /**
     * @param {String} query_task_id ID of the Query Task
     */
    query_task_id: String) : SDKResponse {
    return this.get<Map<String,Any>>("/query_tasks/${query_task_id}/results", mapOf())
  }

  /**
   * GET /render_tasks/{render_task_id} -> RenderTask
   */
  @JvmOverloads fun render_task(
    /**
     * @param {String} render_task_id Id of render task
     */
    render_task_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<RenderTask>("/render_tasks/${render_task_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /render_tasks/{render_task_id}/results -> String
   * 
   * **Note**: Binary content is returned by this method.
   */
  fun render_task_results(
    /**
     * @param {String} render_task_id Id of render task
     */
    render_task_id: String) : SDKResponse {
    return this.get<String>("/render_tasks/${render_task_id}/results", mapOf())
  }

  /**
   * POST /projects/{project_id}/reset_to_production -> String
   */
  fun reset_project_to_production(
    /**
     * @param {String} project_id Id of project
     */
    project_id: String) : SDKResponse {
    return this.post<String>("/projects/${project_id}/reset_to_production", mapOf())
  }

  /**
   * POST /projects/{project_id}/reset_to_remote -> String
   */
  fun reset_project_to_remote(
    /**
     * @param {String} project_id Id of project
     */
    project_id: String) : SDKResponse {
    return this.post<String>("/projects/${project_id}/reset_to_remote", mapOf())
  }

  /**
   * GET /roles/{role_id} -> Role
   */
  fun role(
    /**
     * @param {Long} role_id id of role
     */
    role_id: Long) : SDKResponse {
    return this.get<Role>("/roles/${role_id}", mapOf())
  }

  /**
   * GET /roles/{role_id}/groups -> Array<Group>
   */
  @JvmOverloads fun role_groups(
    /**
     * @param {Long} role_id id of role
     */
    role_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Group>>("/roles/${role_id}/groups", 
      mapOf("fields" to fields))
  }

  /**
   * GET /roles/{role_id}/users -> Array<User>
   */
  @JvmOverloads fun role_users(
    /**
     * @param {Long} role_id id of user
     */
    role_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Boolean} direct_association_only Get only users associated directly with the role: exclude those only associated through groups.
     */
    direct_association_only: Boolean? = null) : SDKResponse {
    return this.get<Array<User>>("/roles/${role_id}/users", 
      mapOf("fields" to fields, "direct_association_only" to direct_association_only))
  }

  /**
   * GET /projects/{project_id}/git_connection_tests/{test_id} -> GitConnectionTestResult
   */
  @JvmOverloads fun run_git_connection_test(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {String} test_id Test Id
     */
    test_id: String,
    /**
     * @param {String} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
     */
    remote_url: String? = null) : SDKResponse {
    return this.get<GitConnectionTestResult>("/projects/${project_id}/git_connection_tests/${test_id}", 
      mapOf("remote_url" to remote_url))
  }

  /**
   * POST /queries/run/{result_format} -> String
   * 
   * **Note**: Binary content may be returned by this method.
   */
  @JvmOverloads fun run_inline_query(
    /**
     * @param {String} result_format Format of result
     */
    result_format: String,
    /**
     * @param {WriteQuery} body
     */
    body: WriteQuery,
    /**
     * @param {Long} limit Row limit (may override the limit in the saved query).
     */
    limit: Long? = null,
    /**
     * @param {Boolean} apply_formatting Apply model-specified formatting to each result.
     */
    apply_formatting: Boolean? = null,
    /**
     * @param {Boolean} apply_vis Apply visualization options to results.
     */
    apply_vis: Boolean? = null,
    /**
     * @param {Boolean} cache Get results from cache if available.
     */
    cache: Boolean? = null,
    /**
     * @param {Long} image_width Render width for image formats.
     */
    image_width: Long? = null,
    /**
     * @param {Long} image_height Render height for image formats.
     */
    image_height: Long? = null,
    /**
     * @param {Boolean} generate_drill_links Generate drill links (only applicable to 'json_detail' format.
     */
    generate_drill_links: Boolean? = null,
    /**
     * @param {Boolean} force_production Force use of production models even if the user is in development mode.
     */
    force_production: Boolean? = null,
    /**
     * @param {Boolean} cache_only Retrieve any results from cache even if the results have expired.
     */
    cache_only: Boolean? = null,
    /**
     * @param {String} path_prefix Prefix to use for drill links (url encoded).
     */
    path_prefix: String? = null,
    /**
     * @param {Boolean} rebuild_pdts Rebuild PDTS used in query.
     */
    rebuild_pdts: Boolean? = null,
    /**
     * @param {Boolean} server_table_calcs Perform table calculations on query results
     */
    server_table_calcs: Boolean? = null) : SDKResponse {
    return this.post<String>("/queries/run/${result_format}", 
      mapOf("limit" to limit, "apply_formatting" to apply_formatting, "apply_vis" to apply_vis, "cache" to cache, "image_width" to image_width, "image_height" to image_height, "generate_drill_links" to generate_drill_links, "force_production" to force_production, "cache_only" to cache_only, "path_prefix" to path_prefix, "rebuild_pdts" to rebuild_pdts, "server_table_calcs" to server_table_calcs), body)
  }

  /**
   * GET /looks/{look_id}/run/{result_format} -> String
   * 
   * **Note**: Binary content may be returned by this method.
   */
  @JvmOverloads fun run_look(
    /**
     * @param {Long} look_id Id of look
     */
    look_id: Long,
    /**
     * @param {String} result_format Format of result
     */
    result_format: String,
    /**
     * @param {Long} limit Row limit (may override the limit in the saved query).
     */
    limit: Long? = null,
    /**
     * @param {Boolean} apply_formatting Apply model-specified formatting to each result.
     */
    apply_formatting: Boolean? = null,
    /**
     * @param {Boolean} apply_vis Apply visualization options to results.
     */
    apply_vis: Boolean? = null,
    /**
     * @param {Boolean} cache Get results from cache if available.
     */
    cache: Boolean? = null,
    /**
     * @param {Long} image_width Render width for image formats.
     */
    image_width: Long? = null,
    /**
     * @param {Long} image_height Render height for image formats.
     */
    image_height: Long? = null,
    /**
     * @param {Boolean} generate_drill_links Generate drill links (only applicable to 'json_detail' format.
     */
    generate_drill_links: Boolean? = null,
    /**
     * @param {Boolean} force_production Force use of production models even if the user is in development mode.
     */
    force_production: Boolean? = null,
    /**
     * @param {Boolean} cache_only Retrieve any results from cache even if the results have expired.
     */
    cache_only: Boolean? = null,
    /**
     * @param {String} path_prefix Prefix to use for drill links (url encoded).
     */
    path_prefix: String? = null,
    /**
     * @param {Boolean} rebuild_pdts Rebuild PDTS used in query.
     */
    rebuild_pdts: Boolean? = null,
    /**
     * @param {Boolean} server_table_calcs Perform table calculations on query results
     */
    server_table_calcs: Boolean? = null) : SDKResponse {
    return this.get<String>("/looks/${look_id}/run/${result_format}", 
      mapOf("limit" to limit, "apply_formatting" to apply_formatting, "apply_vis" to apply_vis, "cache" to cache, "image_width" to image_width, "image_height" to image_height, "generate_drill_links" to generate_drill_links, "force_production" to force_production, "cache_only" to cache_only, "path_prefix" to path_prefix, "rebuild_pdts" to rebuild_pdts, "server_table_calcs" to server_table_calcs))
  }

  /**
   * GET /projects/{project_id}/lookml_tests/run -> Array<LookmlTestResult>
   */
  @JvmOverloads fun run_lookml_test(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {String} file_id File Name
     */
    file_id: String? = null,
    /**
     * @param {String} test Test Name
     */
    test: String? = null,
    /**
     * @param {String} model Model Name
     */
    model: String? = null) : SDKResponse {
    return this.get<Array<LookmlTestResult>>("/projects/${project_id}/lookml_tests/run", 
      mapOf("file_id" to file_id, "test" to test, "model" to model))
  }

  /**
   * GET /queries/{query_id}/run/{result_format} -> String
   * 
   * **Note**: Binary content may be returned by this method.
   */
  @JvmOverloads fun run_query(
    /**
     * @param {Long} query_id Id of query
     */
    query_id: Long,
    /**
     * @param {String} result_format Format of result
     */
    result_format: String,
    /**
     * @param {Long} limit Row limit (may override the limit in the saved query).
     */
    limit: Long? = null,
    /**
     * @param {Boolean} apply_formatting Apply model-specified formatting to each result.
     */
    apply_formatting: Boolean? = null,
    /**
     * @param {Boolean} apply_vis Apply visualization options to results.
     */
    apply_vis: Boolean? = null,
    /**
     * @param {Boolean} cache Get results from cache if available.
     */
    cache: Boolean? = null,
    /**
     * @param {Long} image_width Render width for image formats.
     */
    image_width: Long? = null,
    /**
     * @param {Long} image_height Render height for image formats.
     */
    image_height: Long? = null,
    /**
     * @param {Boolean} generate_drill_links Generate drill links (only applicable to 'json_detail' format.
     */
    generate_drill_links: Boolean? = null,
    /**
     * @param {Boolean} force_production Force use of production models even if the user is in development mode.
     */
    force_production: Boolean? = null,
    /**
     * @param {Boolean} cache_only Retrieve any results from cache even if the results have expired.
     */
    cache_only: Boolean? = null,
    /**
     * @param {String} path_prefix Prefix to use for drill links (url encoded).
     */
    path_prefix: String? = null,
    /**
     * @param {Boolean} rebuild_pdts Rebuild PDTS used in query.
     */
    rebuild_pdts: Boolean? = null,
    /**
     * @param {Boolean} server_table_calcs Perform table calculations on query results
     */
    server_table_calcs: Boolean? = null) : SDKResponse {
    return this.get<String>("/queries/${query_id}/run/${result_format}", 
      mapOf("limit" to limit, "apply_formatting" to apply_formatting, "apply_vis" to apply_vis, "cache" to cache, "image_width" to image_width, "image_height" to image_height, "generate_drill_links" to generate_drill_links, "force_production" to force_production, "cache_only" to cache_only, "path_prefix" to path_prefix, "rebuild_pdts" to rebuild_pdts, "server_table_calcs" to server_table_calcs))
  }

  /**
   * POST /sql_queries/{slug}/run/{result_format} -> String
   * 
   * **Note**: Binary content may be returned by this method.
   */
  @JvmOverloads fun run_sql_query(
    /**
     * @param {String} slug slug of query
     */
    slug: String,
    /**
     * @param {String} result_format Format of result, options are: ["json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml", "json_label"]
     */
    result_format: String,
    /**
     * @param {String} download Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.
     */
    download: String? = null) : SDKResponse {
    return this.post<String>("/sql_queries/${slug}/run/${result_format}", 
      mapOf("download" to download))
  }

  /**
   * GET /queries/models/{model_name}/views/{view_name}/run/{result_format} -> String
   * 
   * **Note**: Binary content may be returned by this method.
   */
  fun run_url_encoded_query(
    /**
     * @param {String} model_name Model name
     */
    model_name: String,
    /**
     * @param {String} view_name View name
     */
    view_name: String,
    /**
     * @param {String} result_format Format of result
     */
    result_format: String) : SDKResponse {
    return this.get<String>("/queries/models/${model_name}/views/${view_name}/run/${result_format}", mapOf())
  }

  /**
   * GET /saml_config -> SamlConfig
   */
  fun saml_config() : SDKResponse {
    return this.get<SamlConfig>("/saml_config", mapOf())
  }

  /**
   * GET /saml_test_configs/{test_slug} -> SamlConfig
   */
  fun saml_test_config(
    /**
     * @param {String} test_slug Slug of test config
     */
    test_slug: String) : SDKResponse {
    return this.get<SamlConfig>("/saml_test_configs/${test_slug}", mapOf())
  }

  /**
   * GET /scheduled_plans/{scheduled_plan_id} -> ScheduledPlan
   */
  @JvmOverloads fun scheduled_plan(
    /**
     * @param {Long} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<ScheduledPlan>("/scheduled_plans/${scheduled_plan_id}", 
      mapOf("fields" to fields))
  }

  /**
   * POST /scheduled_plans/run_once -> ScheduledPlan
   */
  fun scheduled_plan_run_once(
    /**
     * @param {WriteScheduledPlan} body
     */
    body: WriteScheduledPlan) : SDKResponse {
    return this.post<ScheduledPlan>("/scheduled_plans/run_once", mapOf(), body)
  }

  /**
   * POST /scheduled_plans/{scheduled_plan_id}/run_once -> ScheduledPlan
   */
  @JvmOverloads fun scheduled_plan_run_once_by_id(
    /**
     * @param {Long} scheduled_plan_id Id of schedule plan to copy and run
     */
    scheduled_plan_id: Long,
    /**
     * @param {WriteWriteScheduledPlan} body
     */
    body: WriteWriteScheduledPlan? = null) : SDKResponse {
    return this.post<ScheduledPlan>("/scheduled_plans/${scheduled_plan_id}/run_once", mapOf(), body)
  }

  /**
   * GET /scheduled_plans/dashboard/{dashboard_id} -> Array<ScheduledPlan>
   */
  @JvmOverloads fun scheduled_plans_for_dashboard(
    /**
     * @param {Long} dashboard_id Dashboard Id
     */
    dashboard_id: Long,
    /**
     * @param {Long} user_id User Id (default is requesting user if not specified)
     */
    user_id: Long? = null,
    /**
     * @param {Boolean} all_users Return scheduled plans belonging to all users for the dashboard
     */
    all_users: Boolean? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<ScheduledPlan>>("/scheduled_plans/dashboard/${dashboard_id}", 
      mapOf("user_id" to user_id, "all_users" to all_users, "fields" to fields))
  }

  /**
   * GET /scheduled_plans/look/{look_id} -> Array<ScheduledPlan>
   */
  @JvmOverloads fun scheduled_plans_for_look(
    /**
     * @param {Long} look_id Look Id
     */
    look_id: Long,
    /**
     * @param {Long} user_id User Id (default is requesting user if not specified)
     */
    user_id: Long? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Boolean} all_users Return scheduled plans belonging to all users for the look
     */
    all_users: Boolean? = null) : SDKResponse {
    return this.get<Array<ScheduledPlan>>("/scheduled_plans/look/${look_id}", 
      mapOf("user_id" to user_id, "fields" to fields, "all_users" to all_users))
  }

  /**
   * GET /scheduled_plans/lookml_dashboard/{lookml_dashboard_id} -> Array<ScheduledPlan>
   */
  @JvmOverloads fun scheduled_plans_for_lookml_dashboard(
    /**
     * @param {Long} lookml_dashboard_id LookML Dashboard Id
     */
    lookml_dashboard_id: Long,
    /**
     * @param {Long} user_id User Id (default is requesting user if not specified)
     */
    user_id: Long? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Boolean} all_users Return scheduled plans belonging to all users for the dashboard
     */
    all_users: Boolean? = null) : SDKResponse {
    return this.get<Array<ScheduledPlan>>("/scheduled_plans/lookml_dashboard/${lookml_dashboard_id}", 
      mapOf("user_id" to user_id, "fields" to fields, "all_users" to all_users))
  }

  /**
   * GET /scheduled_plans/space/{space_id} -> Array<ScheduledPlan>
   */
  @JvmOverloads fun scheduled_plans_for_space(
    /**
     * @param {Long} space_id Space Id
     */
    space_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<ScheduledPlan>>("/scheduled_plans/space/${space_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /content_favorite/search -> Array<ContentFavorite>
   */
  @JvmOverloads fun search_content_favorites(
    /**
     * @param {Long} id Match content favorite id(s)
     */
    id: Long? = null,
    /**
     * @param {Long} user_id Match user id(s)
     */
    user_id: Long? = null,
    /**
     * @param {Long} content_metadata_id Match content metadata id(s)
     */
    content_metadata_id: Long? = null,
    /**
     * @param {Long} dashboard_id Match dashboard id(s)
     */
    dashboard_id: Long? = null,
    /**
     * @param {Long} look_id Match look id(s)
     */
    look_id: Long? = null,
    /**
     * @param {Long} limit Number of results to return. (used with offset)
     */
    limit: Long? = null,
    /**
     * @param {Long} offset Number of results to skip before returning any. (used with limit)
     */
    offset: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression
     */
    filter_or: Boolean? = null) : SDKResponse {
    return this.get<Array<ContentFavorite>>("/content_favorite/search", 
      mapOf("id" to id, "user_id" to user_id, "content_metadata_id" to content_metadata_id, "dashboard_id" to dashboard_id, "look_id" to look_id, "limit" to limit, "offset" to offset, "sorts" to sorts, "fields" to fields, "filter_or" to filter_or))
  }

  /**
   * GET /content_view/search -> Array<ContentView>
   */
  @JvmOverloads fun search_content_views(
    /**
     * @param {Long} view_count Match view count
     */
    view_count: Long? = null,
    /**
     * @param {Long} group_id Match Group Id
     */
    group_id: Long? = null,
    /**
     * @param {String} look_id Match look_id
     */
    look_id: String? = null,
    /**
     * @param {String} dashboard_id Match dashboard_id
     */
    dashboard_id: String? = null,
    /**
     * @param {Long} content_metadata_id Match content metadata id
     */
    content_metadata_id: Long? = null,
    /**
     * @param {String} start_of_week_date Match start of week date
     */
    start_of_week_date: String? = null,
    /**
     * @param {Boolean} all_time True if only all time view records should be returned
     */
    all_time: Boolean? = null,
    /**
     * @param {Long} user_id Match user id
     */
    user_id: Long? = null,
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null,
    /**
     * @param {Long} limit Number of results to return. Use with `offset` to manage pagination of results
     */
    limit: Long? = null,
    /**
     * @param {Long} offset Number of results to skip before returning data
     */
    offset: Long? = null,
    /**
     * @param {String} sorts Fields to sort by
     */
    sorts: String? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression
     */
    filter_or: Boolean? = null) : SDKResponse {
    return this.get<Array<ContentView>>("/content_view/search", 
      mapOf("view_count" to view_count, "group_id" to group_id, "look_id" to look_id, "dashboard_id" to dashboard_id, "content_metadata_id" to content_metadata_id, "start_of_week_date" to start_of_week_date, "all_time" to all_time, "user_id" to user_id, "fields" to fields, "limit" to limit, "offset" to offset, "sorts" to sorts, "filter_or" to filter_or))
  }

  /**
   * GET /dashboard_elements/search -> Array<DashboardElement>
   */
  @JvmOverloads fun search_dashboard_elements(
    /**
     * @param {Long} dashboard_id Select elements that refer to a given dashboard id
     */
    dashboard_id: Long? = null,
    /**
     * @param {Long} look_id Select elements that refer to a given look id
     */
    look_id: Long? = null,
    /**
     * @param {String} title Match the title of element
     */
    title: String? = null,
    /**
     * @param {Boolean} deleted Select soft-deleted dashboard elements
     */
    deleted: Boolean? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression
     */
    filter_or: Boolean? = null,
    /**
     * @param {String} sorts Fields to sort by. Sortable fields: [:look_id, :dashboard_id, :deleted, :title]
     */
    sorts: String? = null) : SDKResponse {
    return this.get<Array<DashboardElement>>("/dashboard_elements/search", 
      mapOf("dashboard_id" to dashboard_id, "look_id" to look_id, "title" to title, "deleted" to deleted, "fields" to fields, "filter_or" to filter_or, "sorts" to sorts))
  }

  /**
   * GET /dashboards/search -> Array<Dashboard>
   */
  @JvmOverloads fun search_dashboards(
    /**
     * @param {Long} id Match dashboard id.
     */
    id: Long? = null,
    /**
     * @param {String} slug Match dashboard slug.
     */
    slug: String? = null,
    /**
     * @param {String} title Match Dashboard title.
     */
    title: String? = null,
    /**
     * @param {String} description Match Dashboard description.
     */
    description: String? = null,
    /**
     * @param {Long} content_favorite_id Filter on a content favorite id.
     */
    content_favorite_id: Long? = null,
    /**
     * @param {String} space_id Filter on a particular space.
     */
    space_id: String? = null,
    /**
     * @param {String} deleted Filter on dashboards deleted status.
     */
    deleted: String? = null,
    /**
     * @param {String} user_id Filter on dashboards created by a particular user.
     */
    user_id: String? = null,
    /**
     * @param {String} view_count Filter on a particular value of view_count
     */
    view_count: String? = null,
    /**
     * @param {Long} content_metadata_id Filter on a content favorite id.
     */
    content_metadata_id: Long? = null,
    /**
     * @param {Boolean} curate Exclude items that exist only in personal spaces other than the users
     */
    curate: Boolean? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} page Requested page.
     */
    page: Long? = null,
    /**
     * @param {Long} per_page Results per page.
     */
    per_page: Long? = null,
    /**
     * @param {Long} limit Number of results to return. (used with offset and takes priority over page and per_page)
     */
    limit: Long? = null,
    /**
     * @param {Long} offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
     */
    offset: Long? = null,
    /**
     * @param {String} sorts One or more fields to sort by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :description, :view_count, :favorite_count, :slug, :content_favorite_id, :content_metadata_id, :deleted, :deleted_at, :last_viewed_at]
     */
    sorts: String? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression
     */
    filter_or: Boolean? = null) : SDKResponse {
    return this.get<Array<Dashboard>>("/dashboards/search", 
      mapOf("id" to id, "slug" to slug, "title" to title, "description" to description, "content_favorite_id" to content_favorite_id, "space_id" to space_id, "deleted" to deleted, "user_id" to user_id, "view_count" to view_count, "content_metadata_id" to content_metadata_id, "curate" to curate, "fields" to fields, "page" to page, "per_page" to per_page, "limit" to limit, "offset" to offset, "sorts" to sorts, "filter_or" to filter_or))
  }

  /**
   * GET /folders/search -> Array<Folder>
   */
  @JvmOverloads fun search_folders(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} page Requested page.
     */
    page: Long? = null,
    /**
     * @param {Long} per_page Results per page.
     */
    per_page: Long? = null,
    /**
     * @param {Long} limit Number of results to return. (used with offset and takes priority over page and per_page)
     */
    limit: Long? = null,
    /**
     * @param {Long} offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
     */
    offset: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {String} name Match Space title.
     */
    name: String? = null,
    /**
     * @param {Long} id Match Space id
     */
    id: Long? = null,
    /**
     * @param {String} parent_id Filter on a children of a particular folder.
     */
    parent_id: String? = null,
    /**
     * @param {String} creator_id Filter on folder created by a particular user.
     */
    creator_id: String? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression
     */
    filter_or: Boolean? = null) : SDKResponse {
    return this.get<Array<Folder>>("/folders/search", 
      mapOf("fields" to fields, "page" to page, "per_page" to per_page, "limit" to limit, "offset" to offset, "sorts" to sorts, "name" to name, "id" to id, "parent_id" to parent_id, "creator_id" to creator_id, "filter_or" to filter_or))
  }

  /**
   * GET /groups/search -> Array<Group>
   */
  @JvmOverloads fun search_groups(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} limit Number of results to return (used with `offset`).
     */
    limit: Long? = null,
    /**
     * @param {Long} offset Number of results to skip before returning any (used with `limit`).
     */
    offset: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression
     */
    filter_or: Boolean? = null,
    /**
     * @param {Long} id Match group id.
     */
    id: Long? = null,
    /**
     * @param {String} name Match group name.
     */
    name: String? = null,
    /**
     * @param {Boolean} external_group_id Match group external_group_id.
     */
    external_group_id: Boolean? = null,
    /**
     * @param {Boolean} externally_managed Match group externally_managed.
     */
    externally_managed: Boolean? = null,
    /**
     * @param {Boolean} externally_orphaned Match group externally_orphaned.
     */
    externally_orphaned: Boolean? = null) : SDKResponse {
    return this.get<Array<Group>>("/groups/search", 
      mapOf("fields" to fields, "limit" to limit, "offset" to offset, "sorts" to sorts, "filter_or" to filter_or, "id" to id, "name" to name, "external_group_id" to external_group_id, "externally_managed" to externally_managed, "externally_orphaned" to externally_orphaned))
  }

  /**
   * GET /homepages/search -> Array<Homepage>
   */
  @JvmOverloads fun search_homepages(
    /**
     * @param {String} title Matches homepage title.
     */
    title: String? = null,
    /**
     * @param {String} created_at Matches the timestamp for when the homepage was created.
     */
    created_at: String? = null,
    /**
     * @param {String} first_name The first name of the user who created this homepage.
     */
    first_name: String? = null,
    /**
     * @param {String} last_name The last name of the user who created this homepage.
     */
    last_name: String? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Boolean} favorited Return favorited homepages when true.
     */
    favorited: Boolean? = null,
    /**
     * @param {String} creator_id Filter on homepages created by a particular user.
     */
    creator_id: String? = null,
    /**
     * @param {String} sorts The fields to sort the results by
     */
    sorts: String? = null,
    /**
     * @param {Long} page The page to return.
     */
    page: Long? = null,
    /**
     * @param {Long} per_page The number of items in the returned page.
     */
    per_page: Long? = null,
    /**
     * @param {Long} offset The number of items to skip before returning any. (used with limit and takes priority over page and per_page)
     */
    offset: Long? = null,
    /**
     * @param {Long} limit The maximum number of items to return. (used with offset and takes priority over page and per_page)
     */
    limit: Long? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression
     */
    filter_or: Boolean? = null) : SDKResponse {
    return this.get<Array<Homepage>>("/homepages/search", 
      mapOf("title" to title, "created_at" to created_at, "first_name" to first_name, "last_name" to last_name, "fields" to fields, "favorited" to favorited, "creator_id" to creator_id, "sorts" to sorts, "page" to page, "per_page" to per_page, "offset" to offset, "limit" to limit, "filter_or" to filter_or))
  }

  /**
   * GET /looks/search -> Array<Look>
   */
  @JvmOverloads fun search_looks(
    /**
     * @param {String} title Match Look title.
     */
    title: String? = null,
    /**
     * @param {String} description Match Look description.
     */
    description: String? = null,
    /**
     * @param {Long} content_favorite_id Select looks with a particular content favorite id
     */
    content_favorite_id: Long? = null,
    /**
     * @param {String} space_id Select looks in a particular space.
     */
    space_id: String? = null,
    /**
     * @param {String} user_id Select looks created by a particular user.
     */
    user_id: String? = null,
    /**
     * @param {String} view_count Select looks with particular view_count value
     */
    view_count: String? = null,
    /**
     * @param {Boolean} deleted Select soft-deleted looks
     */
    deleted: Boolean? = null,
    /**
     * @param {Long} query_id Select looks that reference a particular query by query_id
     */
    query_id: Long? = null,
    /**
     * @param {Boolean} curate Exclude items that exist only in personal spaces other than the users
     */
    curate: Boolean? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} page Requested page.
     */
    page: Long? = null,
    /**
     * @param {Long} per_page Results per page.
     */
    per_page: Long? = null,
    /**
     * @param {Long} limit Number of results to return. (used with offset and takes priority over page and per_page)
     */
    limit: Long? = null,
    /**
     * @param {Long} offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
     */
    offset: Long? = null,
    /**
     * @param {String} sorts One or more fields to sort results by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :description, :updated_at, :last_updater_id, :view_count, :favorite_count, :content_favorite_id, :deleted, :deleted_at, :last_viewed_at, :query_id]
     */
    sorts: String? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression
     */
    filter_or: Boolean? = null) : SDKResponse {
    return this.get<Array<Look>>("/looks/search", 
      mapOf("title" to title, "description" to description, "content_favorite_id" to content_favorite_id, "space_id" to space_id, "user_id" to user_id, "view_count" to view_count, "deleted" to deleted, "query_id" to query_id, "curate" to curate, "fields" to fields, "page" to page, "per_page" to per_page, "limit" to limit, "offset" to offset, "sorts" to sorts, "filter_or" to filter_or))
  }

  /**
   * GET /model_sets/search -> Array<ModelSet>
   */
  @JvmOverloads fun search_model_sets(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} limit Number of results to return (used with `offset`).
     */
    limit: Long? = null,
    /**
     * @param {Long} offset Number of results to skip before returning any (used with `limit`).
     */
    offset: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {Long} id Match model set id.
     */
    id: Long? = null,
    /**
     * @param {String} name Match model set name.
     */
    name: String? = null,
    /**
     * @param {Boolean} all_access Match model sets by all_access status.
     */
    all_access: Boolean? = null,
    /**
     * @param {Boolean} built_in Match model sets by built_in status.
     */
    built_in: Boolean? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression.
     */
    filter_or: Boolean? = null) : SDKResponse {
    return this.get<Array<ModelSet>>("/model_sets/search", 
      mapOf("fields" to fields, "limit" to limit, "offset" to offset, "sorts" to sorts, "id" to id, "name" to name, "all_access" to all_access, "built_in" to built_in, "filter_or" to filter_or))
  }

  /**
   * GET /permission_sets/search -> Array<PermissionSet>
   */
  @JvmOverloads fun search_permission_sets(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} limit Number of results to return (used with `offset`).
     */
    limit: Long? = null,
    /**
     * @param {Long} offset Number of results to skip before returning any (used with `limit`).
     */
    offset: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {Long} id Match permission set id.
     */
    id: Long? = null,
    /**
     * @param {String} name Match permission set name.
     */
    name: String? = null,
    /**
     * @param {Boolean} all_access Match permission sets by all_access status.
     */
    all_access: Boolean? = null,
    /**
     * @param {Boolean} built_in Match permission sets by built_in status.
     */
    built_in: Boolean? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression.
     */
    filter_or: Boolean? = null) : SDKResponse {
    return this.get<Array<PermissionSet>>("/permission_sets/search", 
      mapOf("fields" to fields, "limit" to limit, "offset" to offset, "sorts" to sorts, "id" to id, "name" to name, "all_access" to all_access, "built_in" to built_in, "filter_or" to filter_or))
  }

  /**
   * GET /roles/search -> Array<Role>
   */
  @JvmOverloads fun search_roles(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} limit Number of results to return (used with `offset`).
     */
    limit: Long? = null,
    /**
     * @param {Long} offset Number of results to skip before returning any (used with `limit`).
     */
    offset: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {Long} id Match role id.
     */
    id: Long? = null,
    /**
     * @param {String} name Match role name.
     */
    name: String? = null,
    /**
     * @param {Boolean} built_in Match roles by built_in status.
     */
    built_in: Boolean? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression.
     */
    filter_or: Boolean? = null) : SDKResponse {
    return this.get<Array<Role>>("/roles/search", 
      mapOf("fields" to fields, "limit" to limit, "offset" to offset, "sorts" to sorts, "id" to id, "name" to name, "built_in" to built_in, "filter_or" to filter_or))
  }

  /**
   * GET /spaces/search -> Array<Space>
   */
  @JvmOverloads fun search_spaces(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} page Requested page.
     */
    page: Long? = null,
    /**
     * @param {Long} per_page Results per page.
     */
    per_page: Long? = null,
    /**
     * @param {Long} limit Number of results to return. (used with offset and takes priority over page and per_page)
     */
    limit: Long? = null,
    /**
     * @param {Long} offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
     */
    offset: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {String} name Match Space title.
     */
    name: String? = null,
    /**
     * @param {Long} id Match Space id
     */
    id: Long? = null,
    /**
     * @param {String} parent_id Filter on a children of a particular space.
     */
    parent_id: String? = null,
    /**
     * @param {String} creator_id Filter on spaces created by a particular user.
     */
    creator_id: String? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression
     */
    filter_or: Boolean? = null) : SDKResponse {
    return this.get<Array<Space>>("/spaces/search", 
      mapOf("fields" to fields, "page" to page, "per_page" to per_page, "limit" to limit, "offset" to offset, "sorts" to sorts, "name" to name, "id" to id, "parent_id" to parent_id, "creator_id" to creator_id, "filter_or" to filter_or))
  }

  /**
   * GET /themes/search -> Array<Theme>
   */
  @JvmOverloads fun search_themes(
    /**
     * @param {Long} id Match theme id.
     */
    id: Long? = null,
    /**
     * @param {String} name Match theme name.
     */
    name: String? = null,
    /**
     * @param {Date} begin_at Timestamp for activation.
     */
    begin_at: Date? = null,
    /**
     * @param {Date} end_at Timestamp for expiration.
     */
    end_at: Date? = null,
    /**
     * @param {Long} limit Number of results to return (used with `offset`).
     */
    limit: Long? = null,
    /**
     * @param {Long} offset Number of results to skip before returning any (used with `limit`).
     */
    offset: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression
     */
    filter_or: Boolean? = null) : SDKResponse {
    return this.get<Array<Theme>>("/themes/search", 
      mapOf("id" to id, "name" to name, "begin_at" to begin_at, "end_at" to end_at, "limit" to limit, "offset" to offset, "sorts" to sorts, "fields" to fields, "filter_or" to filter_or))
  }

  /**
   * GET /user_login_lockouts/search -> Array<UserLoginLockout>
   */
  @JvmOverloads fun search_user_login_lockouts(
    /**
     * @param {String} fields Include only these fields in the response
     */
    fields: String? = null,
    /**
     * @param {Long} page Return only page N of paginated results
     */
    page: Long? = null,
    /**
     * @param {Long} per_page Return N rows of data per page
     */
    per_page: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {String} auth_type Auth type user is locked out for (email, ldap, totp, api)
     */
    auth_type: String? = null,
    /**
     * @param {String} full_name Match name
     */
    full_name: String? = null,
    /**
     * @param {String} email Match email
     */
    email: String? = null,
    /**
     * @param {String} remote_id Match remote LDAP ID
     */
    remote_id: String? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression
     */
    filter_or: Boolean? = null) : SDKResponse {
    return this.get<Array<UserLoginLockout>>("/user_login_lockouts/search", 
      mapOf("fields" to fields, "page" to page, "per_page" to per_page, "sorts" to sorts, "auth_type" to auth_type, "full_name" to full_name, "email" to email, "remote_id" to remote_id, "filter_or" to filter_or))
  }

  /**
   * GET /users/search -> Array<User>
   */
  @JvmOverloads fun search_users(
    /**
     * @param {String} fields Include only these fields in the response
     */
    fields: String? = null,
    /**
     * @param {Long} page Return only page N of paginated results
     */
    page: Long? = null,
    /**
     * @param {Long} per_page Return N rows of data per page
     */
    per_page: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {Long} id Match User Id.
     */
    id: Long? = null,
    /**
     * @param {String} first_name Match First name.
     */
    first_name: String? = null,
    /**
     * @param {String} last_name Match Last name.
     */
    last_name: String? = null,
    /**
     * @param {Boolean} verified_looker_employee Search for user accounts associated with Looker employees
     */
    verified_looker_employee: Boolean? = null,
    /**
     * @param {String} email Search for the user with this email address
     */
    email: String? = null,
    /**
     * @param {Boolean} is_disabled Search for disabled user accounts
     */
    is_disabled: Boolean? = null,
    /**
     * @param {Boolean} filter_or Combine given search criteria in a boolean OR expression
     */
    filter_or: Boolean? = null,
    /**
     * @param {Long} content_metadata_id Search for users who have access to this content_metadata item
     */
    content_metadata_id: Long? = null,
    /**
     * @param {Long} group_id Search for users who are direct members of this group
     */
    group_id: Long? = null) : SDKResponse {
    return this.get<Array<User>>("/users/search", 
      mapOf("fields" to fields, "page" to page, "per_page" to per_page, "sorts" to sorts, "id" to id, "first_name" to first_name, "last_name" to last_name, "verified_looker_employee" to verified_looker_employee, "email" to email, "is_disabled" to is_disabled, "filter_or" to filter_or, "content_metadata_id" to content_metadata_id, "group_id" to group_id))
  }

  /**
   * GET /users/search/names/{pattern} -> Array<User>
   */
  @JvmOverloads fun search_users_names(
    /**
     * @param {String} pattern Pattern to match
     */
    pattern: String,
    /**
     * @param {String} fields Include only these fields in the response
     */
    fields: String? = null,
    /**
     * @param {Long} page Return only page N of paginated results
     */
    page: Long? = null,
    /**
     * @param {Long} per_page Return N rows of data per page
     */
    per_page: Long? = null,
    /**
     * @param {String} sorts Fields to sort by
     */
    sorts: String? = null,
    /**
     * @param {Long} id Match User Id
     */
    id: Long? = null,
    /**
     * @param {String} first_name Match First name
     */
    first_name: String? = null,
    /**
     * @param {String} last_name Match Last name
     */
    last_name: String? = null,
    /**
     * @param {Boolean} verified_looker_employee Match Verified Looker employee
     */
    verified_looker_employee: Boolean? = null,
    /**
     * @param {String} email Match Email Address
     */
    email: String? = null,
    /**
     * @param {Boolean} is_disabled Include or exclude disabled accounts in the results
     */
    is_disabled: Boolean? = null) : SDKResponse {
    return this.get<Array<User>>("/users/search/names/${pattern}", 
      mapOf("fields" to fields, "page" to page, "per_page" to per_page, "sorts" to sorts, "id" to id, "first_name" to first_name, "last_name" to last_name, "verified_looker_employee" to verified_looker_employee, "email" to email, "is_disabled" to is_disabled))
  }

  /**
   * GET /session -> ApiSession
   */
  fun session() : SDKResponse {
    return this.get<ApiSession>("/session", mapOf())
  }

  /**
   * GET /session_config -> SessionConfig
   */
  fun session_config() : SDKResponse {
    return this.get<SessionConfig>("/session_config", mapOf())
  }

  /**
   * PUT /color_collections/default -> ColorCollection
   */
  fun set_default_color_collection(
    /**
     * @param {String} collection_id ID of color collection to set as default
     */
    collection_id: String) : SDKResponse {
    return this.put<ColorCollection>("/color_collections/default", 
      mapOf("collection_id" to collection_id))
  }

  /**
   * PUT /themes/default -> Theme
   */
  fun set_default_theme(
    /**
     * @param {String} name Name of theme to set as default
     */
    name: String) : SDKResponse {
    return this.put<Theme>("/themes/default", 
      mapOf("name" to name))
  }

  /**
   * PUT /roles/{role_id}/groups -> Array<Group>
   */
  fun set_role_groups(
    /**
     * @param {Long} role_id Id of Role
     */
    role_id: Long,
    /**
     * @param {Array<Long>} body
     */
    body: Array<Long>) : SDKResponse {
    return this.put<Array<Group>>("/roles/${role_id}/groups", mapOf(), body)
  }

  /**
   * PUT /roles/{role_id}/users -> Array<User>
   */
  fun set_role_users(
    /**
     * @param {Long} role_id id of role
     */
    role_id: Long,
    /**
     * @param {Array<Long>} body
     */
    body: Array<Long>) : SDKResponse {
    return this.put<Array<User>>("/roles/${role_id}/users", mapOf(), body)
  }

  /**
   * POST /user_attributes/{user_attribute_id}/group_values -> Array<UserAttributeGroupValue>
   */
  fun set_user_attribute_group_values(
    /**
     * @param {Long} user_attribute_id Id of user attribute
     */
    user_attribute_id: Long,
    /**
     * @param {Array<UserAttributeGroupValue>} body
     */
    body: Array<UserAttributeGroupValue>) : SDKResponse {
    return this.post<Array<UserAttributeGroupValue>>("/user_attributes/${user_attribute_id}/group_values", mapOf(), body)
  }

  /**
   * PATCH /users/{user_id}/attribute_values/{user_attribute_id} -> UserAttributeWithValue
   */
  fun set_user_attribute_user_value(
    /**
     * @param {Long} user_id Id of user
     */
    user_id: Long,
    /**
     * @param {Long} user_attribute_id Id of user attribute
     */
    user_attribute_id: Long,
    /**
     * @param {WriteUserAttributeWithValue} body
     */
    body: WriteUserAttributeWithValue) : SDKResponse {
    return this.patch<UserAttributeWithValue>("/users/${user_id}/attribute_values/${user_attribute_id}", mapOf(), body)
  }

  /**
   * PUT /users/{user_id}/roles -> Array<Role>
   */
  @JvmOverloads fun set_user_roles(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {Array<Long>} body
     */
    body: Array<Long>,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.put<Array<Role>>("/users/${user_id}/roles", 
      mapOf("fields" to fields), body)
  }

  /**
   * GET /spaces/{space_id} -> Space
   */
  @JvmOverloads fun space(
    /**
     * @param {String} space_id Id of space
     */
    space_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Space>("/spaces/${space_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /spaces/{space_id}/ancestors -> Array<Space>
   */
  @JvmOverloads fun space_ancestors(
    /**
     * @param {String} space_id Id of space
     */
    space_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Space>>("/spaces/${space_id}/ancestors", 
      mapOf("fields" to fields))
  }

  /**
   * GET /spaces/{space_id}/children -> Array<Space>
   */
  @JvmOverloads fun space_children(
    /**
     * @param {String} space_id Id of space
     */
    space_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Long} page Requested page.
     */
    page: Long? = null,
    /**
     * @param {Long} per_page Results per page.
     */
    per_page: Long? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null) : SDKResponse {
    return this.get<Array<Space>>("/spaces/${space_id}/children", 
      mapOf("fields" to fields, "page" to page, "per_page" to per_page, "sorts" to sorts))
  }

  /**
   * GET /spaces/{space_id}/children/search -> Array<Space>
   */
  @JvmOverloads fun space_children_search(
    /**
     * @param {String} space_id Id of space
     */
    space_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {String} sorts Fields to sort by.
     */
    sorts: String? = null,
    /**
     * @param {String} name Match Space name.
     */
    name: String? = null) : SDKResponse {
    return this.get<Array<Space>>("/spaces/${space_id}/children/search", 
      mapOf("fields" to fields, "sorts" to sorts, "name" to name))
  }

  /**
   * GET /spaces/{space_id}/dashboards -> Array<Dashboard>
   */
  @JvmOverloads fun space_dashboards(
    /**
     * @param {String} space_id Id of space
     */
    space_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<Dashboard>>("/spaces/${space_id}/dashboards", 
      mapOf("fields" to fields))
  }

  /**
   * GET /spaces/{space_id}/looks -> Array<LookWithQuery>
   */
  @JvmOverloads fun space_looks(
    /**
     * @param {String} space_id Id of space
     */
    space_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Array<LookWithQuery>>("/spaces/${space_id}/looks", 
      mapOf("fields" to fields))
  }

  /**
   * GET /spaces/{space_id}/parent -> Space
   */
  @JvmOverloads fun space_parent(
    /**
     * @param {String} space_id Id of space
     */
    space_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Space>("/spaces/${space_id}/parent", 
      mapOf("fields" to fields))
  }

  /**
   * GET /sql_queries/{slug} -> SqlQuery
   */
  fun sql_query(
    /**
     * @param {String} slug slug of query
     */
    slug: String) : SDKResponse {
    return this.get<SqlQuery>("/sql_queries/${slug}", mapOf())
  }

  /**
   * PATCH /dashboards/{lookml_dashboard_id}/sync -> Array<Long>
   */
  @JvmOverloads fun sync_lookml_dashboard(
    /**
     * @param {String} lookml_dashboard_id Id of LookML dashboard, in the form 'model::dashboardname'
     */
    lookml_dashboard_id: String,
    /**
     * @param {WriteDashboard} body
     */
    body: WriteDashboard,
    /**
     * @param {Boolean} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
     */
    raw_locale: Boolean? = null) : SDKResponse {
    return this.patch<Array<Long>>("/dashboards/${lookml_dashboard_id}/sync", 
      mapOf("raw_locale" to raw_locale), body)
  }

  /**
   * PUT /connections/{connection_name}/test -> Array<DBConnectionTestResult>
   */
  @JvmOverloads fun test_connection(
    /**
     * @param {String} connection_name Name of connection
     */
    connection_name: String,
    /**
     * @param {DelimArray<String>} tests Array of names of tests to run
     */
    tests: DelimArray<String>? = null) : SDKResponse {
    return this.put<Array<DBConnectionTestResult>>("/connections/${connection_name}/test", 
      mapOf("tests" to tests))
  }

  /**
   * PUT /connections/test -> Array<DBConnectionTestResult>
   */
  @JvmOverloads fun test_connection_config(
    /**
     * @param {WriteDBConnection} body
     */
    body: WriteDBConnection,
    /**
     * @param {DelimArray<String>} tests Array of names of tests to run
     */
    tests: DelimArray<String>? = null) : SDKResponse {
    return this.put<Array<DBConnectionTestResult>>("/connections/test", 
      mapOf("tests" to tests), body)
  }

  /**
   * POST /integrations/{integration_id}/test -> IntegrationTestResult
   */
  fun test_integration(
    /**
     * @param {Long} integration_id Id of Integration
     */
    integration_id: Long) : SDKResponse {
    return this.post<IntegrationTestResult>("/integrations/${integration_id}/test", mapOf())
  }

  /**
   * PUT /ldap_config/test_auth -> LDAPConfigTestResult
   */
  fun test_ldap_config_auth(
    /**
     * @param {WriteLDAPConfig} body
     */
    body: WriteLDAPConfig) : SDKResponse {
    return this.put<LDAPConfigTestResult>("/ldap_config/test_auth", mapOf(), body)
  }

  /**
   * PUT /ldap_config/test_connection -> LDAPConfigTestResult
   */
  fun test_ldap_config_connection(
    /**
     * @param {WriteLDAPConfig} body
     */
    body: WriteLDAPConfig) : SDKResponse {
    return this.put<LDAPConfigTestResult>("/ldap_config/test_connection", mapOf(), body)
  }

  /**
   * PUT /ldap_config/test_user_auth -> LDAPConfigTestResult
   */
  fun test_ldap_config_user_auth(
    /**
     * @param {WriteLDAPConfig} body
     */
    body: WriteLDAPConfig) : SDKResponse {
    return this.put<LDAPConfigTestResult>("/ldap_config/test_user_auth", mapOf(), body)
  }

  /**
   * PUT /ldap_config/test_user_info -> LDAPConfigTestResult
   */
  fun test_ldap_config_user_info(
    /**
     * @param {WriteLDAPConfig} body
     */
    body: WriteLDAPConfig) : SDKResponse {
    return this.put<LDAPConfigTestResult>("/ldap_config/test_user_info", mapOf(), body)
  }

  /**
   * GET /themes/{theme_id} -> Theme
   */
  @JvmOverloads fun theme(
    /**
     * @param {String} theme_id Id of theme
     */
    theme_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Theme>("/themes/${theme_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /themes/theme_or_default -> Theme
   */
  @JvmOverloads fun theme_or_default(
    /**
     * @param {String} name Name of theme
     */
    name: String,
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts: Date? = null) : SDKResponse {
    return this.get<Theme>("/themes/theme_or_default", 
      mapOf("name" to name, "ts" to ts))
  }

  /**
   * PATCH /backup_configuration -> BackupConfiguration
   */
  fun update_backup_configuration(
    /**
     * @param {WriteBackupConfiguration} body
     */
    body: WriteBackupConfiguration) : SDKResponse {
    return this.patch<BackupConfiguration>("/backup_configuration", mapOf(), body)
  }

  /**
   * PATCH /color_collections/{collection_id} -> ColorCollection
   */
  fun update_color_collection(
    /**
     * @param {String} collection_id Id of Custom Color Collection
     */
    collection_id: String,
    /**
     * @param {WriteColorCollection} body
     */
    body: WriteColorCollection) : SDKResponse {
    return this.patch<ColorCollection>("/color_collections/${collection_id}", mapOf(), body)
  }

  /**
   * PATCH /connections/{connection_name} -> DBConnection
   */
  fun update_connection(
    /**
     * @param {String} connection_name Name of connection
     */
    connection_name: String,
    /**
     * @param {WriteDBConnection} body
     */
    body: WriteDBConnection) : SDKResponse {
    return this.patch<DBConnection>("/connections/${connection_name}", mapOf(), body)
  }

  /**
   * PATCH /content_metadata/{content_metadata_id} -> ContentMeta
   */
  fun update_content_metadata(
    /**
     * @param {Long} content_metadata_id Id of content metadata
     */
    content_metadata_id: Long,
    /**
     * @param {WriteContentMeta} body
     */
    body: WriteContentMeta) : SDKResponse {
    return this.patch<ContentMeta>("/content_metadata/${content_metadata_id}", mapOf(), body)
  }

  /**
   * PUT /content_metadata_access/{content_metadata_access_id} -> ContentMetaGroupUser
   */
  fun update_content_metadata_access(
    /**
     * @param {Long} content_metadata_access_id Id of content metadata access
     */
    content_metadata_access_id: Long,
    /**
     * @param {ContentMetaGroupUser} body
     */
    body: ContentMetaGroupUser) : SDKResponse {
    return this.put<ContentMetaGroupUser>("/content_metadata_access/${content_metadata_access_id}", mapOf(), body)
  }

  /**
   * PATCH /custom_welcome_email -> CustomWelcomeEmail
   */
  @JvmOverloads fun update_custom_welcome_email(
    /**
     * @param {WriteCustomWelcomeEmail} body
     */
    body: WriteCustomWelcomeEmail,
    /**
     * @param {Boolean} send_test_welcome_email If true a test email with the content from the request will be sent to the current user after saving
     */
    send_test_welcome_email: Boolean? = null) : SDKResponse {
    return this.patch<CustomWelcomeEmail>("/custom_welcome_email", 
      mapOf("send_test_welcome_email" to send_test_welcome_email), body)
  }

  /**
   * PUT /custom_welcome_email_test -> WelcomeEmailTest
   */
  fun update_custom_welcome_email_test(
    /**
     * @param {WriteWelcomeEmailTest} body
     */
    body: WriteWelcomeEmailTest) : SDKResponse {
    return this.put<WelcomeEmailTest>("/custom_welcome_email_test", mapOf(), body)
  }

  /**
   * PATCH /dashboards/{dashboard_id} -> Dashboard
   */
  fun update_dashboard(
    /**
     * @param {String} dashboard_id Id of dashboard
     */
    dashboard_id: String,
    /**
     * @param {WriteDashboard} body
     */
    body: WriteDashboard) : SDKResponse {
    return this.patch<Dashboard>("/dashboards/${dashboard_id}", mapOf(), body)
  }

  /**
   * PATCH /dashboard_elements/{dashboard_element_id} -> DashboardElement
   */
  @JvmOverloads fun update_dashboard_element(
    /**
     * @param {String} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id: String,
    /**
     * @param {WriteDashboardElement} body
     */
    body: WriteDashboardElement,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<DashboardElement>("/dashboard_elements/${dashboard_element_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /dashboard_filters/{dashboard_filter_id} -> DashboardFilter
   */
  @JvmOverloads fun update_dashboard_filter(
    /**
     * @param {String} dashboard_filter_id Id of dashboard filter
     */
    dashboard_filter_id: String,
    /**
     * @param {WriteDashboardFilter} body
     */
    body: WriteDashboardFilter,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<DashboardFilter>("/dashboard_filters/${dashboard_filter_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /dashboard_layouts/{dashboard_layout_id} -> DashboardLayout
   */
  @JvmOverloads fun update_dashboard_layout(
    /**
     * @param {String} dashboard_layout_id Id of dashboard layout
     */
    dashboard_layout_id: String,
    /**
     * @param {WriteDashboardLayout} body
     */
    body: WriteDashboardLayout,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<DashboardLayout>("/dashboard_layouts/${dashboard_layout_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /dashboard_layout_components/{dashboard_layout_component_id} -> DashboardLayoutComponent
   */
  @JvmOverloads fun update_dashboard_layout_component(
    /**
     * @param {String} dashboard_layout_component_id Id of dashboard layout component
     */
    dashboard_layout_component_id: String,
    /**
     * @param {WriteDashboardLayoutComponent} body
     */
    body: WriteDashboardLayoutComponent,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<DashboardLayoutComponent>("/dashboard_layout_components/${dashboard_layout_component_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /datagroups/{datagroup_id} -> Datagroup
   */
  fun update_datagroup(
    /**
     * @param {String} datagroup_id ID of datagroup.
     */
    datagroup_id: String,
    /**
     * @param {WriteDatagroup} body
     */
    body: WriteDatagroup) : SDKResponse {
    return this.patch<Datagroup>("/datagroups/${datagroup_id}", mapOf(), body)
  }

  /**
   * PATCH /folders/{folder_id} -> Folder
   */
  fun update_folder(
    /**
     * @param {String} folder_id Id of folder
     */
    folder_id: String,
    /**
     * @param {WriteUpdateFolder} body
     */
    body: WriteUpdateFolder) : SDKResponse {
    return this.patch<Folder>("/folders/${folder_id}", mapOf(), body)
  }

  /**
   * PUT /projects/{project_id}/git_branch -> GitBranch
   */
  fun update_git_branch(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {WriteGitBranch} body
     */
    body: WriteGitBranch) : SDKResponse {
    return this.put<GitBranch>("/projects/${project_id}/git_branch", mapOf(), body)
  }

  /**
   * PATCH /groups/{group_id} -> Group
   */
  @JvmOverloads fun update_group(
    /**
     * @param {Long} group_id Id of group
     */
    group_id: Long,
    /**
     * @param {WriteGroup} body
     */
    body: WriteGroup,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<Group>("/groups/${group_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /homepages/{homepage_id} -> Homepage
   */
  @JvmOverloads fun update_homepage(
    /**
     * @param {Long} homepage_id Id of homepage
     */
    homepage_id: Long,
    /**
     * @param {WriteHomepage} body
     */
    body: WriteHomepage,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<Homepage>("/homepages/${homepage_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /homepage_items/{homepage_item_id} -> HomepageItem
   */
  @JvmOverloads fun update_homepage_item(
    /**
     * @param {Long} homepage_item_id Id of homepage item
     */
    homepage_item_id: Long,
    /**
     * @param {WriteHomepageItem} body
     */
    body: WriteHomepageItem,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<HomepageItem>("/homepage_items/${homepage_item_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /homepage_sections/{homepage_section_id} -> HomepageSection
   */
  @JvmOverloads fun update_homepage_section(
    /**
     * @param {Long} homepage_section_id Id of homepage section
     */
    homepage_section_id: Long,
    /**
     * @param {WriteHomepageSection} body
     */
    body: WriteHomepageSection,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<HomepageSection>("/homepage_sections/${homepage_section_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /integrations/{integration_id} -> Integration
   */
  @JvmOverloads fun update_integration(
    /**
     * @param {Long} integration_id Id of Integration
     */
    integration_id: Long,
    /**
     * @param {WriteIntegration} body
     */
    body: WriteIntegration,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<Integration>("/integrations/${integration_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /integration_hubs/{integration_hub_id} -> IntegrationHub
   */
  @JvmOverloads fun update_integration_hub(
    /**
     * @param {Long} integration_hub_id Id of Integration Hub
     */
    integration_hub_id: Long,
    /**
     * @param {WriteIntegrationHub} body
     */
    body: WriteIntegrationHub,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<IntegrationHub>("/integration_hubs/${integration_hub_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /internal_help_resources -> InternalHelpResources
   */
  fun update_internal_help_resources(
    /**
     * @param {WriteInternalHelpResources} body
     */
    body: WriteInternalHelpResources) : SDKResponse {
    return this.patch<InternalHelpResources>("/internal_help_resources", mapOf(), body)
  }

  /**
   * PATCH /internal_help_resources_content -> InternalHelpResourcesContent
   */
  fun update_internal_help_resources_content(
    /**
     * @param {WriteInternalHelpResourcesContent} body
     */
    body: WriteInternalHelpResourcesContent) : SDKResponse {
    return this.patch<InternalHelpResourcesContent>("/internal_help_resources_content", mapOf(), body)
  }

  /**
   * PATCH /ldap_config -> LDAPConfig
   */
  fun update_ldap_config(
    /**
     * @param {WriteLDAPConfig} body
     */
    body: WriteLDAPConfig) : SDKResponse {
    return this.patch<LDAPConfig>("/ldap_config", mapOf(), body)
  }

  /**
   * PATCH /legacy_features/{legacy_feature_id} -> LegacyFeature
   */
  fun update_legacy_feature(
    /**
     * @param {Long} legacy_feature_id id of legacy feature
     */
    legacy_feature_id: Long,
    /**
     * @param {WriteLegacyFeature} body
     */
    body: WriteLegacyFeature) : SDKResponse {
    return this.patch<LegacyFeature>("/legacy_features/${legacy_feature_id}", mapOf(), body)
  }

  /**
   * PATCH /looks/{look_id} -> LookWithQuery
   */
  @JvmOverloads fun update_look(
    /**
     * @param {Long} look_id Id of look
     */
    look_id: Long,
    /**
     * @param {WriteLookWithQuery} body
     */
    body: WriteLookWithQuery,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<LookWithQuery>("/looks/${look_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /lookml_models/{lookml_model_name} -> LookmlModel
   */
  fun update_lookml_model(
    /**
     * @param {String} lookml_model_name Name of lookml model.
     */
    lookml_model_name: String,
    /**
     * @param {WriteLookmlModel} body
     */
    body: WriteLookmlModel) : SDKResponse {
    return this.patch<LookmlModel>("/lookml_models/${lookml_model_name}", mapOf(), body)
  }

  /**
   * PATCH /model_sets/{model_set_id} -> ModelSet
   */
  fun update_model_set(
    /**
     * @param {Long} model_set_id id of model set
     */
    model_set_id: Long,
    /**
     * @param {WriteModelSet} body
     */
    body: WriteModelSet) : SDKResponse {
    return this.patch<ModelSet>("/model_sets/${model_set_id}", mapOf(), body)
  }

  /**
   * PATCH /oidc_config -> OIDCConfig
   */
  fun update_oidc_config(
    /**
     * @param {WriteOIDCConfig} body
     */
    body: WriteOIDCConfig) : SDKResponse {
    return this.patch<OIDCConfig>("/oidc_config", mapOf(), body)
  }

  /**
   * PATCH /password_config -> PasswordConfig
   */
  fun update_password_config(
    /**
     * @param {WritePasswordConfig} body
     */
    body: WritePasswordConfig) : SDKResponse {
    return this.patch<PasswordConfig>("/password_config", mapOf(), body)
  }

  /**
   * PATCH /permission_sets/{permission_set_id} -> PermissionSet
   */
  fun update_permission_set(
    /**
     * @param {Long} permission_set_id id of permission set
     */
    permission_set_id: Long,
    /**
     * @param {WritePermissionSet} body
     */
    body: WritePermissionSet) : SDKResponse {
    return this.patch<PermissionSet>("/permission_sets/${permission_set_id}", mapOf(), body)
  }

  /**
   * PATCH /projects/{project_id} -> Project
   */
  @JvmOverloads fun update_project(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {WriteProject} body
     */
    body: WriteProject,
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null) : SDKResponse {
    return this.patch<Project>("/projects/${project_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PUT /projects/{root_project_id}/credential/{credential_id} -> RepositoryCredential
   */
  fun update_repository_credential(
    /**
     * @param {String} root_project_id Root Project Id
     */
    root_project_id: String,
    /**
     * @param {String} credential_id Credential Id
     */
    credential_id: String,
    /**
     * @param {WriteRepositoryCredential} body
     */
    body: WriteRepositoryCredential) : SDKResponse {
    return this.put<RepositoryCredential>("/projects/${root_project_id}/credential/${credential_id}", mapOf(), body)
  }

  /**
   * PATCH /roles/{role_id} -> Role
   */
  fun update_role(
    /**
     * @param {Long} role_id id of role
     */
    role_id: Long,
    /**
     * @param {WriteRole} body
     */
    body: WriteRole) : SDKResponse {
    return this.patch<Role>("/roles/${role_id}", mapOf(), body)
  }

  /**
   * PATCH /saml_config -> SamlConfig
   */
  fun update_saml_config(
    /**
     * @param {WriteSamlConfig} body
     */
    body: WriteSamlConfig) : SDKResponse {
    return this.patch<SamlConfig>("/saml_config", mapOf(), body)
  }

  /**
   * PATCH /scheduled_plans/{scheduled_plan_id} -> ScheduledPlan
   */
  fun update_scheduled_plan(
    /**
     * @param {Long} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id: Long,
    /**
     * @param {WriteScheduledPlan} body
     */
    body: WriteScheduledPlan) : SDKResponse {
    return this.patch<ScheduledPlan>("/scheduled_plans/${scheduled_plan_id}", mapOf(), body)
  }

  /**
   * PATCH /session -> ApiSession
   */
  fun update_session(
    /**
     * @param {WriteApiSession} body
     */
    body: WriteApiSession) : SDKResponse {
    return this.patch<ApiSession>("/session", mapOf(), body)
  }

  /**
   * PATCH /session_config -> SessionConfig
   */
  fun update_session_config(
    /**
     * @param {WriteSessionConfig} body
     */
    body: WriteSessionConfig) : SDKResponse {
    return this.patch<SessionConfig>("/session_config", mapOf(), body)
  }

  /**
   * PATCH /spaces/{space_id} -> Space
   */
  fun update_space(
    /**
     * @param {String} space_id Id of space
     */
    space_id: String,
    /**
     * @param {WriteUpdateSpace} body
     */
    body: WriteUpdateSpace) : SDKResponse {
    return this.patch<Space>("/spaces/${space_id}", mapOf(), body)
  }

  /**
   * PATCH /themes/{theme_id} -> Theme
   */
  fun update_theme(
    /**
     * @param {String} theme_id Id of theme
     */
    theme_id: String,
    /**
     * @param {WriteTheme} body
     */
    body: WriteTheme) : SDKResponse {
    return this.patch<Theme>("/themes/${theme_id}", mapOf(), body)
  }

  /**
   * PATCH /users/{user_id} -> User
   */
  @JvmOverloads fun update_user(
    /**
     * @param {Long} user_id Id of user
     */
    user_id: Long,
    /**
     * @param {WriteUser} body
     */
    body: WriteUser,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<User>("/users/${user_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /user_attributes/{user_attribute_id} -> UserAttribute
   */
  @JvmOverloads fun update_user_attribute(
    /**
     * @param {Long} user_attribute_id Id of user attribute
     */
    user_attribute_id: Long,
    /**
     * @param {WriteUserAttribute} body
     */
    body: WriteUserAttribute,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<UserAttribute>("/user_attributes/${user_attribute_id}", 
      mapOf("fields" to fields), body)
  }

  /**
   * PATCH /groups/{group_id}/attribute_values/{user_attribute_id} -> UserAttributeGroupValue
   */
  fun update_user_attribute_group_value(
    /**
     * @param {Long} group_id Id of group
     */
    group_id: Long,
    /**
     * @param {Long} user_attribute_id Id of user attribute
     */
    user_attribute_id: Long,
    /**
     * @param {UserAttributeGroupValue} body
     */
    body: UserAttributeGroupValue) : SDKResponse {
    return this.patch<UserAttributeGroupValue>("/groups/${group_id}/attribute_values/${user_attribute_id}", mapOf(), body)
  }

  /**
   * PATCH /users/{user_id}/credentials_email -> CredentialsEmail
   */
  @JvmOverloads fun update_user_credentials_email(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {WriteCredentialsEmail} body
     */
    body: WriteCredentialsEmail,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.patch<CredentialsEmail>("/users/${user_id}/credentials_email", 
      mapOf("fields" to fields), body)
  }

  /**
   * PUT /whitelabel_configuration -> WhitelabelConfiguration
   */
  fun update_whitelabel_configuration(
    /**
     * @param {WriteWhitelabelConfiguration} body
     */
    body: WriteWhitelabelConfiguration) : SDKResponse {
    return this.put<WhitelabelConfiguration>("/whitelabel_configuration", mapOf(), body)
  }

  /**
   * GET /users/{user_id} -> User
   */
  @JvmOverloads fun user(
    /**
     * @param {Long} user_id Id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<User>("/users/${user_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /user_attributes/{user_attribute_id} -> UserAttribute
   */
  @JvmOverloads fun user_attribute(
    /**
     * @param {Long} user_attribute_id Id of user attribute
     */
    user_attribute_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<UserAttribute>("/user_attributes/${user_attribute_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/{user_id}/attribute_values -> Array<UserAttributeWithValue>
   */
  @JvmOverloads fun user_attribute_user_values(
    /**
     * @param {Long} user_id Id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {DelimArray<Long>} user_attribute_ids Specific user attributes to request. Omit or leave blank to request all user attributes.
     */
    user_attribute_ids: DelimArray<Long>? = null,
    /**
     * @param {Boolean} all_values If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence.
     */
    all_values: Boolean? = null,
    /**
     * @param {Boolean} include_unset If true, returns an empty record for each requested attribute that has no user, group, or default value.
     */
    include_unset: Boolean? = null) : SDKResponse {
    return this.get<Array<UserAttributeWithValue>>("/users/${user_id}/attribute_values", 
      mapOf("fields" to fields, "user_attribute_ids" to user_attribute_ids, "all_values" to all_values, "include_unset" to include_unset))
  }

  /**
   * GET /users/{user_id}/credentials_api3/{credentials_api3_id} -> CredentialsApi3
   */
  @JvmOverloads fun user_credentials_api3(
    /**
     * @param {Long} user_id Id of user
     */
    user_id: Long,
    /**
     * @param {Long} credentials_api3_id Id of API 3 Credential
     */
    credentials_api3_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<CredentialsApi3>("/users/${user_id}/credentials_api3/${credentials_api3_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/{user_id}/credentials_email -> CredentialsEmail
   */
  @JvmOverloads fun user_credentials_email(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<CredentialsEmail>("/users/${user_id}/credentials_email", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/{user_id}/credentials_embed/{credentials_embed_id} -> CredentialsEmbed
   */
  @JvmOverloads fun user_credentials_embed(
    /**
     * @param {Long} user_id Id of user
     */
    user_id: Long,
    /**
     * @param {Long} credentials_embed_id Id of Embedding Credential
     */
    credentials_embed_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<CredentialsEmbed>("/users/${user_id}/credentials_embed/${credentials_embed_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/{user_id}/credentials_google -> CredentialsGoogle
   */
  @JvmOverloads fun user_credentials_google(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<CredentialsGoogle>("/users/${user_id}/credentials_google", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/{user_id}/credentials_ldap -> CredentialsLDAP
   */
  @JvmOverloads fun user_credentials_ldap(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<CredentialsLDAP>("/users/${user_id}/credentials_ldap", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/{user_id}/credentials_looker_openid -> CredentialsLookerOpenid
   */
  @JvmOverloads fun user_credentials_looker_openid(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<CredentialsLookerOpenid>("/users/${user_id}/credentials_looker_openid", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/{user_id}/credentials_oidc -> CredentialsOIDC
   */
  @JvmOverloads fun user_credentials_oidc(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<CredentialsOIDC>("/users/${user_id}/credentials_oidc", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/{user_id}/credentials_saml -> CredentialsSaml
   */
  @JvmOverloads fun user_credentials_saml(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<CredentialsSaml>("/users/${user_id}/credentials_saml", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/{user_id}/credentials_totp -> CredentialsTotp
   */
  @JvmOverloads fun user_credentials_totp(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<CredentialsTotp>("/users/${user_id}/credentials_totp", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/credential/{credential_type}/{credential_id} -> User
   */
  @JvmOverloads fun user_for_credential(
    /**
     * @param {String} credential_type Type name of credential
     */
    credential_type: String,
    /**
     * @param {String} credential_id Id of credential
     */
    credential_id: String,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<User>("/users/credential/${credential_type}/${credential_id}", 
      mapOf("fields" to fields))
  }

  /**
   * GET /users/{user_id}/roles -> Array<Role>
   */
  @JvmOverloads fun user_roles(
    /**
     * @param {Long} user_id id of user
     */
    user_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null,
    /**
     * @param {Boolean} direct_association_only Get only roles associated directly with the user: exclude those only associated through groups.
     */
    direct_association_only: Boolean? = null) : SDKResponse {
    return this.get<Array<Role>>("/users/${user_id}/roles", 
      mapOf("fields" to fields, "direct_association_only" to direct_association_only))
  }

  /**
   * GET /users/{user_id}/sessions/{session_id} -> Session
   */
  @JvmOverloads fun user_session(
    /**
     * @param {Long} user_id Id of user
     */
    user_id: Long,
    /**
     * @param {Long} session_id Id of Web Login Session
     */
    session_id: Long,
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<Session>("/users/${user_id}/sessions/${session_id}", 
      mapOf("fields" to fields))
  }

  /**
   * POST /projects/{project_id}/validate -> ProjectValidation
   */
  @JvmOverloads fun validate_project(
    /**
     * @param {String} project_id Project Id
     */
    project_id: String,
    /**
     * @param {String} fields Requested fields
     */
    fields: String? = null) : SDKResponse {
    return this.post<ProjectValidation>("/projects/${project_id}/validate", 
      mapOf("fields" to fields))
  }

  /**
   * POST /themes/validate -> ValidationError
   */
  fun validate_theme(
    /**
     * @param {WriteTheme} body
     */
    body: WriteTheme) : SDKResponse {
    return this.post<ValidationError>("/themes/validate", mapOf(), body)
  }

  /**
   * GET /versions -> ApiVersion
   */
  @JvmOverloads fun versions(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<ApiVersion>("/versions", 
      mapOf("fields" to fields))
  }

  /**
   * GET /whitelabel_configuration -> WhitelabelConfiguration
   */
  @JvmOverloads fun whitelabel_configuration(
    /**
     * @param {String} fields Requested fields.
     */
    fields: String? = null) : SDKResponse {
    return this.get<WhitelabelConfiguration>("/whitelabel_configuration", 
      mapOf("fields" to fields))
  }

  /**
   * GET /workspaces/{workspace_id} -> Workspace
   */
  fun workspace(
    /**
     * @param {String} workspace_id Id of the workspace
     */
    workspace_id: String) : SDKResponse {
    return this.get<Workspace>("/workspaces/${workspace_id}", mapOf())
  }

}