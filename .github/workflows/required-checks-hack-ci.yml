# The jobs in this workflow are necessary because they are configured as
# required checks on PRs. Github does not currently support configuring required
# checks per workflow. A PR that only triggers codegen-ci.yml jobs will only
# report back with the "Codegen Tests" check. But because there is only a global
# option for required PR checks, that PR would otherwise never satisfy the
# "Typescript/Python/APIX Tests" checks without these noop jobs.
#
# References:
# https://github.community/t/github-actions-and-required-checks-in-a-monorepo-using-paths-to-limit-execution/16586
# https://github.community/t/feature-request-conditional-required-checks/16761/6
#
# Each job actually has a corresponding "real" job
# definition in a different workflow file:
#
# codegen-ci.yml: Codegen Tests
# tssdk-ci.yml: Typescript Tests
# python-ci.yml: Python Tests
# apix-ci.yml: APIX Tests
#

name: Required Checks Hack
on:
  pull_request:

jobs:
  checkfiles:
    runs-on: ubuntu-latest
    outputs:
      filters: ${{ toJSON(steps.filter.outputs) }}
      apix: ${{ steps.filter.outputs.apix }}
      codegen: ${{ steps.filter.outputs.codegen }}
      hackathon: ${{ steps.filter.outputs.hackathon }}
      python: ${{ steps.filter.outputs.python }}
      resources: ${{ steps.filter.outputs.resources }}
      tssdk: ${{ steps.filter.outputs.tssdk }}

    steps:
      - name: Repo Checkout
        uses: actions/checkout@v2

      - uses: tony84727/changed-file-filter@v0.2.0
        id: filter
        with:
          filters: |
            apix:
              - packages/code-editor/**
              - packages/run-it/**
              - packages/api-explorer/**
              - packages/extension-api-explorer/**
              - packages/extension-utils/**
            codegen:
              - packages/sdk-codegen/**
              - packages/sdk-codegen-utils/**
              - packages/sdk-codegen-scripts/**
            hackathon:
              - packages/wholly-sheet/**
              - packages/hackathon/**
            python:
              - python/**
            resources:
              - bin/looker-resources-index/**
              - docs/resources/**
            tssdk:
              - packages/sdk/**
              - packages/sdk-rtl/**
              - packages/sdk-node/**
              - packages/extension-sdk/**
              - packages/extension-sdk-react/**
              - packages/extension-utils/**
      - run: |
          echo "${{ toJSON(steps.filter.outputs) }}"
          echo "apix: ${{ steps.filter.outputs.apix }}"
          echo "codegen: ${{ steps.filter.outputs.codegen }}"
          echo "hackathon: ${{ steps.filter.outputs.hackathon }}"
          echo "python: ${{ steps.filter.outputs.python }}"
          echo "resources: ${{ steps.filter.outputs.resources }}"
          echo "tssdk: ${{ steps.filter.outputs.tssdk }}"

  noop-codegen-results:
    name: Codegen Tests
    needs: checkfiles

    runs-on: ubuntu-latest
    steps:
      - run: echo "Codegen Tests not required"
        if: needs.checkfiles.outputs.codegen == 'false'

      - name: Wait for codegen-ci to succeed
        if: needs.checkfiles.outputs.codegen == 'true'
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-check
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Codegen Tests
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Do something with a passing build
        if: steps.wait-for-check.outputs.conclusion == 'success'
        run: exit 0

      - name: Do something with a failing build
        if: steps.wait-for-check.outputs.conclusion == 'failure'
        run: exit 1

  noop-typescript-results:
    name: Typescript Tests
    needs: checkfiles

    runs-on: ubuntu-latest
    steps:
      - run: echo "Typescript Tests not required"
        if: needs.checkfiles.outputs.tssdk == 'false'

      - name: Wait for codegen-ci to succeed
        if: needs.checkfiles.outputs.tssdk == 'true'
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-check
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Typescript Tests
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Do something with a passing build
        if: steps.wait-for-check.outputs.conclusion == 'success'
        run: exit 0

      - name: Do something with a failing build
        if: steps.wait-for-check.outputs.conclusion == 'failure'
        run: exit 1

  noop-python-results:
    name: Python Tests
    needs: checkfiles

    runs-on: ubuntu-latest
    steps:
      - run: echo "Python Tests not required"
        if: needs.checkfiles.outputs.python == 'false'

      - name: Wait for python-ci to succeed
        if: needs.checkfiles.outputs.python == 'true'
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-check
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Python Tests
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Do something with a passing build
        if: steps.wait-for-check.outputs.conclusion == 'success'
        run: exit 0

      - name: Do something with a failing build
        if: steps.wait-for-check.outputs.conclusion == 'failure'
        run: exit 1

  noop-apix-results:
    name: APIX Tests
    needs: checkfiles

    runs-on: ubuntu-latest
    steps:
      - run: echo "APIX Tests not required"
        if: needs.checkfiles.outputs.apix == 'false'

      - name: Wait for apix-ci to succeed
        if: needs.checkfiles.outputs.apix == 'true'
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-check
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: APIX Tests
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Do something with a passing build
        if: steps.wait-for-check.outputs.conclusion == 'success'
        run: exit 0

      - name: Do something with a failing build
        if: steps.wait-for-check.outputs.conclusion == 'failure'
        run: exit 1

  noop-hackathon-results:
    name: Hackathon Tests
    needs: checkfiles
    if: needs.checkfiles.outputs.hackathon == 'false'

    runs-on: ubuntu-latest
    steps:
      - run: echo "Codegen Tests not required"
        if: needs.checkfiles.outputs.hackathon == 'false'

      - name: Wait for hackathon-ci to succeed
        if: needs.checkfiles.outputs.hackathon == 'true'
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-check
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Hackathon Tests
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Do something with a passing build
        if: steps.wait-for-check.outputs.conclusion == 'success'
        run: exit 0

      - name: Do something with a failing build
        if: steps.wait-for-check.outputs.conclusion == 'failure'
        run: exit 1

  noop-resources-results:
    name: Resources Tests
    needs: checkfiles
    if: needs.checkfiles.outputs.resources == 'false'

    runs-on: ubuntu-latest
    steps:
      - run: echo "Resources Tests not required"
        if: needs.checkfiles.outputs.resources == 'false'

      - name: Wait for resources-ci to succeed
        if: needs.checkfiles.outputs.resources == 'true'
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-check
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Resources Tests
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Do something with a passing build
        if: steps.wait-for-check.outputs.conclusion == 'success'
        run: exit 0

      - name: Do something with a failing build
        if: steps.wait-for-check.outputs.conclusion == 'failure'
        run: exit 1
