// 337 API methods

// NOTE: Do not edit this file generated by Looker SDK Codegen for Looker 7.0 API 3.1
import { Readable } from 'readable-stream'
import { APIMethods } from '../rtl/apiMethods'
import { ITransportSettings } from '../rtl/transport'
/**
 * DelimArray is primarily used as a self-documenting format for csv-formatted array parameters
 */
import { DelimArray } from '../rtl/delimArray'
import {
  IDictionary,
  IAccessToken,
  IApiSession,
  IApiVersion,
  IBackupConfiguration,
  IColorCollection,
  IContentFavorite,
  IContentMeta,
  IContentMetaGroupUser,
  IContentValidation,
  IContentView,
  ICredentialsApi3,
  ICredentialsEmail,
  ICredentialsEmbed,
  ICredentialsGoogle,
  ICredentialsLDAP,
  ICredentialsLookerOpenid,
  ICredentialsOIDC,
  ICredentialsSaml,
  ICredentialsTotp,
  ICustomWelcomeEmail,
  IDashboard,
  IDashboardBase,
  IDashboardElement,
  IDashboardFilter,
  IDashboardLayout,
  IDashboardLayoutComponent,
  IDataActionForm,
  IDataActionResponse,
  IDatagroup,
  IDBConnection,
  IDBConnectionTestResult,
  IDialectInfo,
  IEmbedSsoUrl,
  IFolder,
  IGitBranch,
  IGitConnectionTest,
  IGitConnectionTestResult,
  IGroup,
  IGroupIdForGroupInclusion,
  IGroupIdForGroupUserInclusion,
  IHomepage,
  IHomepageItem,
  IHomepageSection,
  IIntegration,
  IIntegrationHub,
  IIntegrationTestResult,
  IInternalHelpResources,
  IInternalHelpResourcesContent,
  ILDAPConfig,
  ILDAPConfigTestResult,
  ILegacyFeature,
  ILocale,
  ILook,
  ILookmlModel,
  ILookmlModelExplore,
  ILookmlTest,
  ILookmlTestResult,
  ILookWithQuery,
  IManifest,
  IMergeQuery,
  IModelSet,
  IOIDCConfig,
  IPasswordConfig,
  IPermission,
  IPermissionSet,
  IProject,
  IProjectFile,
  IProjectValidation,
  IProjectValidationCache,
  IProjectWorkspace,
  IQuery,
  IQueryTask,
  IRenderTask,
  IRepositoryCredential,
  IRequestActiveThemes,
  IRequestAllGroups,
  IRequestAllGroupUsers,
  IRequestAllHomepageItems,
  IRequestAllHomepageSections,
  IRequestAllIntegrations,
  IRequestAllRoles,
  IRequestAllScheduledPlans,
  IRequestAllUsers,
  IRequestCreateDashboardRenderTask,
  IRequestCreateLookmlDashboardRenderTask,
  IRequestCreateQueryTask,
  IRequestCreateUserCredentialsEmailPasswordReset,
  IRequestFolderChildren,
  IRequestFolderChildrenSearch,
  IRequestLogin,
  IRequestRoleUsers,
  IRequestRunInlineQuery,
  IRequestRunLook,
  IRequestRunLookmlTest,
  IRequestRunQuery,
  IRequestScheduledPlansForDashboard,
  IRequestScheduledPlansForLook,
  IRequestScheduledPlansForLookmlDashboard,
  IRequestSearchContentFavorites,
  IRequestSearchContentViews,
  IRequestSearchDashboardElements,
  IRequestSearchDashboards,
  IRequestSearchFolders,
  IRequestSearchGroups,
  IRequestSearchHomepages,
  IRequestSearchLooks,
  IRequestSearchModelSets,
  IRequestSearchRoles,
  IRequestSearchThemes,
  IRequestSearchUserLoginLockouts,
  IRequestSearchUsers,
  IRequestSearchUsersNames,
  IRequestSpaceChildren,
  IRequestSpaceChildrenSearch,
  IRequestUserAttributeUserValues,
  IRequestUserRoles,
  IRole,
  IRunningQueries,
  ISamlConfig,
  ISamlMetadataParseResult,
  IScheduledPlan,
  ISession,
  ISessionConfig,
  ISpace,
  ISpaceBase,
  ISqlQuery,
  ITheme,
  ITimezone,
  IUser,
  IUserAttribute,
  IUserAttributeGroupValue,
  IUserAttributeWithValue,
  IUserLoginLockout,
  IValidationError,
  IWelcomeEmailTest,
  IWhitelabelConfiguration,
  IWorkspace,
  IWriteApiSession,
  IWriteBackupConfiguration,
  IWriteColorCollection,
  IWriteContentFavorite,
  IWriteContentMeta,
  IWriteCreateDashboardFilter,
  IWriteCreateFolder,
  IWriteCreateSpace,
  IWriteCredentialsEmail,
  IWriteCustomWelcomeEmail,
  IWriteDashboard,
  IWriteDashboardElement,
  IWriteDashboardFilter,
  IWriteDashboardLayout,
  IWriteDashboardLayoutComponent,
  IWriteDataActionRequest,
  IWriteDatagroup,
  IWriteDBConnection,
  IWriteEmbedSsoUrlParams,
  IWriteGitBranch,
  IWriteGroup,
  IWriteHomepage,
  IWriteHomepageItem,
  IWriteHomepageSection,
  IWriteIntegration,
  IWriteIntegrationHub,
  IWriteInternalHelpResources,
  IWriteInternalHelpResourcesContent,
  IWriteLDAPConfig,
  IWriteLegacyFeature,
  IWriteLookmlModel,
  IWriteLookWithQuery,
  IWriteMergeQuery,
  IWriteModelSet,
  IWriteOIDCConfig,
  IWritePasswordConfig,
  IWritePermissionSet,
  IWriteProject,
  IWriteQuery,
  IWriteRepositoryCredential,
  IWriteRole,
  IWriteSamlConfig,
  IWriteScheduledPlan,
  IWriteSessionConfig,
  IWriteSqlQueryCreate,
  IWriteTheme,
  IWriteUpdateFolder,
  IWriteUpdateSpace,
  IWriteUser,
  IWriteUserAttribute,
  IWriteUserAttributeWithValue,
  IWriteWelcomeEmailTest,
  IWriteWhitelabelConfiguration,
  IWriteWriteScheduledPlan,
} from './models'

export class LookerSDKStream extends APIMethods {
  /**
   * POST /integration_hubs/{integration_hub_id}/accept_legal_agreement -> IIntegrationHub
   */
  async accept_integration_hub_legal_agreement(
    callback: (readable: Readable) => Promise<IIntegrationHub>,
    /**
     * @param {number} integration_hub_id Id of integration_hub
     */
    integration_hub_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IIntegrationHub>(
      callback,
      'POST',
      encodeURI(
        `/integration_hubs/${integration_hub_id}/accept_legal_agreement`,
      ),
      null,
      null,
      options,
    )
  }

  /**
   * GET /themes/active -> ITheme[]
   */
  async active_themes(
    callback: (readable: Readable) => Promise<ITheme[]>,
    request: IRequestActiveThemes,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ITheme[]>(
      callback,
      'GET',
      '/themes/active',
      { name: request.name, ts: request.ts, fields: request.fields },
      null,
      options,
    )
  }

  /**
   * POST /groups/{group_id}/groups -> IGroup
   */
  async add_group_group(
    callback: (readable: Readable) => Promise<IGroup>,
    /**
     * @param {number} group_id Id of group
     */
    group_id: number,
    /**
     * @param {Partial<IGroupIdForGroupInclusion>} body
     */
    body: Partial<IGroupIdForGroupInclusion>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGroup>(
      callback,
      'POST',
      encodeURI(`/groups/${group_id}/groups`),
      null,
      body,
      options,
    )
  }

  /**
   * POST /groups/{group_id}/users -> IUser
   */
  async add_group_user(
    callback: (readable: Readable) => Promise<IUser>,
    /**
     * @param {number} group_id Id of group
     */
    group_id: number,
    /**
     * @param {Partial<IGroupIdForGroupUserInclusion>} body
     */
    body: Partial<IGroupIdForGroupUserInclusion>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUser>(
      callback,
      'POST',
      encodeURI(`/groups/${group_id}/users`),
      null,
      body,
      options,
    )
  }

  /**
   * GET /color_collections -> IColorCollection[]
   */
  async all_color_collections(
    callback: (readable: Readable) => Promise<IColorCollection[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IColorCollection[]>(
      callback,
      'GET',
      '/color_collections',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /connections -> IDBConnection[]
   */
  async all_connections(
    callback: (readable: Readable) => Promise<IDBConnection[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDBConnection[]>(
      callback,
      'GET',
      '/connections',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /content_metadata_access -> IContentMetaGroupUser[]
   */
  async all_content_metadata_accesses(
    callback: (readable: Readable) => Promise<IContentMetaGroupUser[]>,
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IContentMetaGroupUser[]>(
      callback,
      'GET',
      '/content_metadata_access',
      { content_metadata_id, fields },
      null,
      options,
    )
  }

  /**
   * GET /content_metadata -> IContentMeta[]
   */
  async all_content_metadatas(
    callback: (readable: Readable) => Promise<IContentMeta[]>,
    /**
     * @param {number} parent_id Parent space of content.
     */
    parent_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IContentMeta[]>(
      callback,
      'GET',
      '/content_metadata',
      { parent_id, fields },
      null,
      options,
    )
  }

  /**
   * GET /dashboards -> IDashboardBase[]
   */
  async all_dashboards(
    callback: (readable: Readable) => Promise<IDashboardBase[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardBase[]>(
      callback,
      'GET',
      '/dashboards',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /datagroups -> IDatagroup[]
   */
  async all_datagroups(
    callback: (readable: Readable) => Promise<IDatagroup[]>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDatagroup[]>(
      callback,
      'GET',
      '/datagroups',
      null,
      null,
      options,
    )
  }

  /**
   * GET /dialect_info -> IDialectInfo[]
   */
  async all_dialect_infos(
    callback: (readable: Readable) => Promise<IDialectInfo[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDialectInfo[]>(
      callback,
      'GET',
      '/dialect_info',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /folders -> IFolder[]
   */
  async all_folders(
    callback: (readable: Readable) => Promise<IFolder[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IFolder[]>(
      callback,
      'GET',
      '/folders',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/git_branches -> IGitBranch[]
   */
  async all_git_branches(
    callback: (readable: Readable) => Promise<IGitBranch[]>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGitBranch[]>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}/git_branches`),
      null,
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/git_connection_tests -> IGitConnectionTest[]
   */
  async all_git_connection_tests(
    callback: (readable: Readable) => Promise<IGitConnectionTest[]>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {string} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
     */
    remote_url?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGitConnectionTest[]>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}/git_connection_tests`),
      { remote_url },
      null,
      options,
    )
  }

  /**
   * GET /groups/{group_id}/groups -> IGroup[]
   */
  async all_group_groups(
    callback: (readable: Readable) => Promise<IGroup[]>,
    /**
     * @param {number} group_id Id of group
     */
    group_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGroup[]>(
      callback,
      'GET',
      encodeURI(`/groups/${group_id}/groups`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /groups/{group_id}/users -> IUser[]
   */
  async all_group_users(
    callback: (readable: Readable) => Promise<IUser[]>,
    request: IRequestAllGroupUsers,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUser[]>(
      callback,
      'GET',
      encodeURI(`/groups/${request.group_id}/users`),
      {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
      },
      null,
      options,
    )
  }

  /**
   * GET /groups -> IGroup[]
   */
  async all_groups(
    callback: (readable: Readable) => Promise<IGroup[]>,
    request: IRequestAllGroups,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGroup[]>(
      callback,
      'GET',
      '/groups',
      {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
        ids: request.ids,
        content_metadata_id: request.content_metadata_id,
        can_add_to_content_metadata: request.can_add_to_content_metadata,
      },
      null,
      options,
    )
  }

  /**
   * GET /homepage_items -> IHomepageItem[]
   */
  async all_homepage_items(
    callback: (readable: Readable) => Promise<IHomepageItem[]>,
    request: IRequestAllHomepageItems,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepageItem[]>(
      callback,
      'GET',
      '/homepage_items',
      {
        fields: request.fields,
        sorts: request.sorts,
        homepage_section_id: request.homepage_section_id,
      },
      null,
      options,
    )
  }

  /**
   * GET /homepage_sections -> IHomepageSection[]
   */
  async all_homepage_sections(
    callback: (readable: Readable) => Promise<IHomepageSection[]>,
    request: IRequestAllHomepageSections,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepageSection[]>(
      callback,
      'GET',
      '/homepage_sections',
      { fields: request.fields, sorts: request.sorts },
      null,
      options,
    )
  }

  /**
   * GET /homepages -> IHomepage[]
   */
  async all_homepages(
    callback: (readable: Readable) => Promise<IHomepage[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepage[]>(
      callback,
      'GET',
      '/homepages',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /integration_hubs -> IIntegrationHub[]
   */
  async all_integration_hubs(
    callback: (readable: Readable) => Promise<IIntegrationHub[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IIntegrationHub[]>(
      callback,
      'GET',
      '/integration_hubs',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /integrations -> IIntegration[]
   */
  async all_integrations(
    callback: (readable: Readable) => Promise<IIntegration[]>,
    request: IRequestAllIntegrations,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IIntegration[]>(
      callback,
      'GET',
      '/integrations',
      {
        fields: request.fields,
        integration_hub_id: request.integration_hub_id,
      },
      null,
      options,
    )
  }

  /**
   * GET /legacy_features -> ILegacyFeature[]
   */
  async all_legacy_features(
    callback: (readable: Readable) => Promise<ILegacyFeature[]>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILegacyFeature[]>(
      callback,
      'GET',
      '/legacy_features',
      null,
      null,
      options,
    )
  }

  /**
   * GET /locales -> ILocale[]
   */
  async all_locales(
    callback: (readable: Readable) => Promise<ILocale[]>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILocale[]>(
      callback,
      'GET',
      '/locales',
      null,
      null,
      options,
    )
  }

  /**
   * GET /lookml_models -> ILookmlModel[]
   */
  async all_lookml_models(
    callback: (readable: Readable) => Promise<ILookmlModel[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILookmlModel[]>(
      callback,
      'GET',
      '/lookml_models',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/lookml_tests -> ILookmlTest[]
   */
  async all_lookml_tests(
    callback: (readable: Readable) => Promise<ILookmlTest[]>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {string} file_id File Id
     */
    file_id?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILookmlTest[]>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}/lookml_tests`),
      { file_id },
      null,
      options,
    )
  }

  /**
   * GET /looks -> ILook[]
   */
  async all_looks(
    callback: (readable: Readable) => Promise<ILook[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILook[]>(
      callback,
      'GET',
      '/looks',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /model_sets -> IModelSet[]
   */
  async all_model_sets(
    callback: (readable: Readable) => Promise<IModelSet[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IModelSet[]>(
      callback,
      'GET',
      '/model_sets',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /permission_sets -> IPermissionSet[]
   */
  async all_permission_sets(
    callback: (readable: Readable) => Promise<IPermissionSet[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IPermissionSet[]>(
      callback,
      'GET',
      '/permission_sets',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /permissions -> IPermission[]
   */
  async all_permissions(
    callback: (readable: Readable) => Promise<IPermission[]>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IPermission[]>(
      callback,
      'GET',
      '/permissions',
      null,
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/files -> IProjectFile[]
   */
  async all_project_files(
    callback: (readable: Readable) => Promise<IProjectFile[]>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {string} fields Requested fields
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IProjectFile[]>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}/files`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /projects -> IProject[]
   */
  async all_projects(
    callback: (readable: Readable) => Promise<IProject[]>,
    /**
     * @param {string} fields Requested fields
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IProject[]>(
      callback,
      'GET',
      '/projects',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /roles -> IRole[]
   */
  async all_roles(
    callback: (readable: Readable) => Promise<IRole[]>,
    request: IRequestAllRoles,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRole[]>(
      callback,
      'GET',
      '/roles',
      { fields: request.fields, ids: request.ids },
      null,
      options,
    )
  }

  /**
   * GET /running_queries -> IRunningQueries[]
   */
  async all_running_queries(
    callback: (readable: Readable) => Promise<IRunningQueries[]>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRunningQueries[]>(
      callback,
      'GET',
      '/running_queries',
      null,
      null,
      options,
    )
  }

  /**
   * GET /scheduled_plans -> IScheduledPlan[]
   */
  async all_scheduled_plans(
    callback: (readable: Readable) => Promise<IScheduledPlan[]>,
    request: IRequestAllScheduledPlans,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IScheduledPlan[]>(
      callback,
      'GET',
      '/scheduled_plans',
      {
        user_id: request.user_id,
        fields: request.fields,
        all_users: request.all_users,
      },
      null,
      options,
    )
  }

  /**
   * GET /spaces -> ISpaceBase[]
   */
  async all_spaces(
    callback: (readable: Readable) => Promise<ISpaceBase[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISpaceBase[]>(
      callback,
      'GET',
      '/spaces',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /themes -> ITheme[]
   */
  async all_themes(
    callback: (readable: Readable) => Promise<ITheme[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ITheme[]>(
      callback,
      'GET',
      '/themes',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /timezones -> ITimezone[]
   */
  async all_timezones(
    callback: (readable: Readable) => Promise<ITimezone[]>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ITimezone[]>(
      callback,
      'GET',
      '/timezones',
      null,
      null,
      options,
    )
  }

  /**
   * GET /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]
   */
  async all_user_attribute_group_values(
    callback: (readable: Readable) => Promise<IUserAttributeGroupValue[]>,
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUserAttributeGroupValue[]>(
      callback,
      'GET',
      encodeURI(`/user_attributes/${user_attribute_id}/group_values`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /user_attributes -> IUserAttribute[]
   */
  async all_user_attributes(
    callback: (readable: Readable) => Promise<IUserAttribute[]>,
    request: IRequestAllHomepageSections,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUserAttribute[]>(
      callback,
      'GET',
      '/user_attributes',
      { fields: request.fields, sorts: request.sorts },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/credentials_api3 -> ICredentialsApi3[]
   */
  async all_user_credentials_api3s(
    callback: (readable: Readable) => Promise<ICredentialsApi3[]>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsApi3[]>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/credentials_api3`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/credentials_embed -> ICredentialsEmbed[]
   */
  async all_user_credentials_embeds(
    callback: (readable: Readable) => Promise<ICredentialsEmbed[]>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsEmbed[]>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/credentials_embed`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /user_login_lockouts -> IUserLoginLockout[]
   */
  async all_user_login_lockouts(
    callback: (readable: Readable) => Promise<IUserLoginLockout[]>,
    /**
     * @param {string} fields Include only these fields in the response
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUserLoginLockout[]>(
      callback,
      'GET',
      '/user_login_lockouts',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/sessions -> ISession[]
   */
  async all_user_sessions(
    callback: (readable: Readable) => Promise<ISession[]>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISession[]>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/sessions`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users -> IUser[]
   */
  async all_users(
    callback: (readable: Readable) => Promise<IUser[]>,
    request: IRequestAllUsers,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUser[]>(
      callback,
      'GET',
      '/users',
      {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
        ids: request.ids,
      },
      null,
      options,
    )
  }

  /**
   * GET /workspaces -> IWorkspace[]
   */
  async all_workspaces(
    callback: (readable: Readable) => Promise<IWorkspace[]>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IWorkspace[]>(
      callback,
      'GET',
      '/workspaces',
      null,
      null,
      options,
    )
  }

  /**
   * GET /backup_configuration -> IBackupConfiguration
   */
  async backup_configuration(
    callback: (readable: Readable) => Promise<IBackupConfiguration>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IBackupConfiguration>(
      callback,
      'GET',
      '/backup_configuration',
      null,
      null,
      options,
    )
  }

  /**
   * GET /color_collections/{collection_id} -> IColorCollection
   */
  async color_collection(
    callback: (readable: Readable) => Promise<IColorCollection>,
    /**
     * @param {string} collection_id Id of Color Collection
     */
    collection_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IColorCollection>(
      callback,
      'GET',
      encodeURI(`/color_collections/${collection_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /color_collections/custom -> IColorCollection[]
   */
  async color_collections_custom(
    callback: (readable: Readable) => Promise<IColorCollection[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IColorCollection[]>(
      callback,
      'GET',
      '/color_collections/custom',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /color_collections/standard -> IColorCollection[]
   */
  async color_collections_standard(
    callback: (readable: Readable) => Promise<IColorCollection[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IColorCollection[]>(
      callback,
      'GET',
      '/color_collections/standard',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /connections/{connection_name} -> IDBConnection
   */
  async connection(
    callback: (readable: Readable) => Promise<IDBConnection>,
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDBConnection>(
      callback,
      'GET',
      encodeURI(`/connections/${connection_name}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /content_favorite/{content_favorite_id} -> IContentFavorite
   */
  async content_favorite(
    callback: (readable: Readable) => Promise<IContentFavorite>,
    /**
     * @param {number} content_favorite_id Id of favorite content
     */
    content_favorite_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IContentFavorite>(
      callback,
      'GET',
      encodeURI(`/content_favorite/${content_favorite_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /content_metadata/{content_metadata_id} -> IContentMeta
   */
  async content_metadata(
    callback: (readable: Readable) => Promise<IContentMeta>,
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IContentMeta>(
      callback,
      'GET',
      encodeURI(`/content_metadata/${content_metadata_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /content_validation -> IContentValidation
   */
  async content_validation(
    callback: (readable: Readable) => Promise<IContentValidation>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IContentValidation>(
      callback,
      'GET',
      '/content_validation',
      { fields },
      null,
      options,
    )
  }

  /**
   * POST /color_collections -> IColorCollection
   */
  async create_color_collection(
    callback: (readable: Readable) => Promise<IColorCollection>,
    /**
     * @param {Partial<IWriteColorCollection>} body
     */
    body: Partial<IWriteColorCollection>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IColorCollection>(
      callback,
      'POST',
      '/color_collections',
      null,
      body,
      options,
    )
  }

  /**
   * POST /connections -> IDBConnection
   */
  async create_connection(
    callback: (readable: Readable) => Promise<IDBConnection>,
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body: Partial<IWriteDBConnection>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDBConnection>(
      callback,
      'POST',
      '/connections',
      null,
      body,
      options,
    )
  }

  /**
   * POST /content_favorite -> IContentFavorite
   */
  async create_content_favorite(
    callback: (readable: Readable) => Promise<IContentFavorite>,
    /**
     * @param {Partial<IWriteContentFavorite>} body
     */
    body: Partial<IWriteContentFavorite>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IContentFavorite>(
      callback,
      'POST',
      '/content_favorite',
      null,
      body,
      options,
    )
  }

  /**
   * POST /content_metadata_access -> IContentMetaGroupUser
   */
  async create_content_metadata_access(
    callback: (readable: Readable) => Promise<IContentMetaGroupUser>,
    /**
     * @param {Partial<IContentMetaGroupUser>} body
     */
    body: Partial<IContentMetaGroupUser>,
    /**
     * @param {boolean} send_boards_notification_email Optionally sends notification email when granting access to a board.
     */
    send_boards_notification_email?: boolean,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IContentMetaGroupUser>(
      callback,
      'POST',
      '/content_metadata_access',
      { send_boards_notification_email },
      body,
      options,
    )
  }

  /**
   * POST /dashboards -> IDashboard
   */
  async create_dashboard(
    callback: (readable: Readable) => Promise<IDashboard>,
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body: Partial<IWriteDashboard>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboard>(
      callback,
      'POST',
      '/dashboards',
      null,
      body,
      options,
    )
  }

  /**
   * POST /dashboard_elements -> IDashboardElement
   */
  async create_dashboard_element(
    callback: (readable: Readable) => Promise<IDashboardElement>,
    /**
     * @param {Partial<IWriteDashboardElement>} body
     */
    body: Partial<IWriteDashboardElement>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardElement>(
      callback,
      'POST',
      '/dashboard_elements',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /dashboard_filters -> IDashboardFilter
   */
  async create_dashboard_filter(
    callback: (readable: Readable) => Promise<IDashboardFilter>,
    /**
     * @param {Partial<IWriteCreateDashboardFilter>} body
     */
    body: Partial<IWriteCreateDashboardFilter>,
    /**
     * @param {string} fields Requested fields
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardFilter>(
      callback,
      'POST',
      '/dashboard_filters',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /dashboard_layouts -> IDashboardLayout
   */
  async create_dashboard_layout(
    callback: (readable: Readable) => Promise<IDashboardLayout>,
    /**
     * @param {Partial<IWriteDashboardLayout>} body
     */
    body: Partial<IWriteDashboardLayout>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardLayout>(
      callback,
      'POST',
      '/dashboard_layouts',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /render_tasks/dashboards/{dashboard_id}/{result_format} -> IRenderTask
   */
  async create_dashboard_render_task(
    callback: (readable: Readable) => Promise<IRenderTask>,
    request: IRequestCreateDashboardRenderTask,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRenderTask>(
      callback,
      'POST',
      encodeURI(
        `/render_tasks/dashboards/${request.dashboard_id}/${request.result_format}`,
      ),
      {
        width: request.width,
        height: request.height,
        fields: request.fields,
        pdf_paper_size: request.pdf_paper_size,
        pdf_landscape: request.pdf_landscape,
      },
      request.body,
      options,
    )
  }

  /**
   * POST /folders -> IFolder
   */
  async create_folder(
    callback: (readable: Readable) => Promise<IFolder>,
    /**
     * @param {Partial<IWriteCreateFolder>} body
     */
    body: Partial<IWriteCreateFolder>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IFolder>(
      callback,
      'POST',
      '/folders',
      null,
      body,
      options,
    )
  }

  /**
   * POST /projects/{project_id}/git_branch -> IGitBranch
   */
  async create_git_branch(
    callback: (readable: Readable) => Promise<IGitBranch>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {Partial<IWriteGitBranch>} body
     */
    body: Partial<IWriteGitBranch>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGitBranch>(
      callback,
      'POST',
      encodeURI(`/projects/${project_id}/git_branch`),
      null,
      body,
      options,
    )
  }

  /**
   * POST /projects/{project_id}/git/deploy_key -> string
   */
  async create_git_deploy_key(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'POST',
      encodeURI(`/projects/${project_id}/git/deploy_key`),
      null,
      null,
      options,
    )
  }

  /**
   * POST /groups -> IGroup
   */
  async create_group(
    callback: (readable: Readable) => Promise<IGroup>,
    /**
     * @param {Partial<IWriteGroup>} body
     */
    body: Partial<IWriteGroup>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGroup>(
      callback,
      'POST',
      '/groups',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /homepages -> IHomepage
   */
  async create_homepage(
    callback: (readable: Readable) => Promise<IHomepage>,
    /**
     * @param {Partial<IWriteHomepage>} body
     */
    body: Partial<IWriteHomepage>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepage>(
      callback,
      'POST',
      '/homepages',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /homepage_items -> IHomepageItem
   */
  async create_homepage_item(
    callback: (readable: Readable) => Promise<IHomepageItem>,
    /**
     * @param {Partial<IWriteHomepageItem>} body
     */
    body: Partial<IWriteHomepageItem>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepageItem>(
      callback,
      'POST',
      '/homepage_items',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /homepage_sections -> IHomepageSection
   */
  async create_homepage_section(
    callback: (readable: Readable) => Promise<IHomepageSection>,
    /**
     * @param {Partial<IWriteHomepageSection>} body
     */
    body: Partial<IWriteHomepageSection>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepageSection>(
      callback,
      'POST',
      '/homepage_sections',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /integration_hubs -> IIntegrationHub
   */
  async create_integration_hub(
    callback: (readable: Readable) => Promise<IIntegrationHub>,
    /**
     * @param {Partial<IWriteIntegrationHub>} body
     */
    body: Partial<IWriteIntegrationHub>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IIntegrationHub>(
      callback,
      'POST',
      '/integration_hubs',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /looks -> ILookWithQuery
   */
  async create_look(
    callback: (readable: Readable) => Promise<ILookWithQuery>,
    /**
     * @param {Partial<IWriteLookWithQuery>} body
     */
    body: Partial<IWriteLookWithQuery>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILookWithQuery>(
      callback,
      'POST',
      '/looks',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /render_tasks/looks/{look_id}/{result_format} -> IRenderTask
   */
  async create_look_render_task(
    callback: (readable: Readable) => Promise<IRenderTask>,
    /**
     * @param {number} look_id Id of look to render
     */
    look_id: number,
    /**
     * @param {string} result_format Output type: png, or jpg
     */
    result_format: string,
    /**
     * @param {number} width Output width in pixels
     */
    width: number,
    /**
     * @param {number} height Output height in pixels
     */
    height: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRenderTask>(
      callback,
      'POST',
      encodeURI(`/render_tasks/looks/${look_id}/${result_format}`),
      { width, height, fields },
      null,
      options,
    )
  }

  /**
   * POST /render_tasks/lookml_dashboards/{dashboard_id}/{result_format} -> IRenderTask
   */
  async create_lookml_dashboard_render_task(
    callback: (readable: Readable) => Promise<IRenderTask>,
    request: IRequestCreateLookmlDashboardRenderTask,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRenderTask>(
      callback,
      'POST',
      encodeURI(
        `/render_tasks/lookml_dashboards/${request.dashboard_id}/${request.result_format}`,
      ),
      {
        width: request.width,
        height: request.height,
        fields: request.fields,
        pdf_paper_size: request.pdf_paper_size,
        pdf_landscape: request.pdf_landscape,
      },
      request.body,
      options,
    )
  }

  /**
   * POST /lookml_models -> ILookmlModel
   */
  async create_lookml_model(
    callback: (readable: Readable) => Promise<ILookmlModel>,
    /**
     * @param {Partial<IWriteLookmlModel>} body
     */
    body: Partial<IWriteLookmlModel>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILookmlModel>(
      callback,
      'POST',
      '/lookml_models',
      null,
      body,
      options,
    )
  }

  /**
   * POST /merge_queries -> IMergeQuery
   */
  async create_merge_query(
    callback: (readable: Readable) => Promise<IMergeQuery>,
    /**
     * @param {Partial<IWriteMergeQuery>} body
     */
    body?: Partial<IWriteMergeQuery>,
    /**
     * @param {string} fields Requested fields
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IMergeQuery>(
      callback,
      'POST',
      '/merge_queries',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /model_sets -> IModelSet
   */
  async create_model_set(
    callback: (readable: Readable) => Promise<IModelSet>,
    /**
     * @param {Partial<IWriteModelSet>} body
     */
    body: Partial<IWriteModelSet>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IModelSet>(
      callback,
      'POST',
      '/model_sets',
      null,
      body,
      options,
    )
  }

  /**
   * POST /oidc_test_configs -> IOIDCConfig
   */
  async create_oidc_test_config(
    callback: (readable: Readable) => Promise<IOIDCConfig>,
    /**
     * @param {Partial<IWriteOIDCConfig>} body
     */
    body: Partial<IWriteOIDCConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IOIDCConfig>(
      callback,
      'POST',
      '/oidc_test_configs',
      null,
      body,
      options,
    )
  }

  /**
   * POST /permission_sets -> IPermissionSet
   */
  async create_permission_set(
    callback: (readable: Readable) => Promise<IPermissionSet>,
    /**
     * @param {Partial<IWritePermissionSet>} body
     */
    body: Partial<IWritePermissionSet>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IPermissionSet>(
      callback,
      'POST',
      '/permission_sets',
      null,
      body,
      options,
    )
  }

  /**
   * POST /projects -> IProject
   */
  async create_project(
    callback: (readable: Readable) => Promise<IProject>,
    /**
     * @param {Partial<IWriteProject>} body
     */
    body: Partial<IWriteProject>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IProject>(
      callback,
      'POST',
      '/projects',
      null,
      body,
      options,
    )
  }

  /**
   * POST /queries -> IQuery
   */
  async create_query(
    callback: (readable: Readable) => Promise<IQuery>,
    /**
     * @param {Partial<IWriteQuery>} body
     */
    body: Partial<IWriteQuery>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IQuery>(
      callback,
      'POST',
      '/queries',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /render_tasks/queries/{query_id}/{result_format} -> IRenderTask
   */
  async create_query_render_task(
    callback: (readable: Readable) => Promise<IRenderTask>,
    /**
     * @param {number} query_id Id of the query to render
     */
    query_id: number,
    /**
     * @param {string} result_format Output type: png or jpg
     */
    result_format: string,
    /**
     * @param {number} width Output width in pixels
     */
    width: number,
    /**
     * @param {number} height Output height in pixels
     */
    height: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRenderTask>(
      callback,
      'POST',
      encodeURI(`/render_tasks/queries/${query_id}/${result_format}`),
      { width, height, fields },
      null,
      options,
    )
  }

  /**
   * POST /query_tasks -> IQueryTask
   */
  async create_query_task(
    callback: (readable: Readable) => Promise<IQueryTask>,
    request: IRequestCreateQueryTask,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IQueryTask>(
      callback,
      'POST',
      '/query_tasks',
      {
        limit: request.limit,
        apply_formatting: request.apply_formatting,
        apply_vis: request.apply_vis,
        cache: request.cache,
        image_width: request.image_width,
        image_height: request.image_height,
        generate_drill_links: request.generate_drill_links,
        force_production: request.force_production,
        cache_only: request.cache_only,
        path_prefix: request.path_prefix,
        rebuild_pdts: request.rebuild_pdts,
        server_table_calcs: request.server_table_calcs,
        fields: request.fields,
      },
      request.body,
      options,
    )
  }

  /**
   * POST /roles -> IRole
   */
  async create_role(
    callback: (readable: Readable) => Promise<IRole>,
    /**
     * @param {Partial<IWriteRole>} body
     */
    body: Partial<IWriteRole>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRole>(
      callback,
      'POST',
      '/roles',
      null,
      body,
      options,
    )
  }

  /**
   * POST /saml_test_configs -> ISamlConfig
   */
  async create_saml_test_config(
    callback: (readable: Readable) => Promise<ISamlConfig>,
    /**
     * @param {Partial<IWriteSamlConfig>} body
     */
    body: Partial<IWriteSamlConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISamlConfig>(
      callback,
      'POST',
      '/saml_test_configs',
      null,
      body,
      options,
    )
  }

  /**
   * POST /scheduled_plans -> IScheduledPlan
   */
  async create_scheduled_plan(
    callback: (readable: Readable) => Promise<IScheduledPlan>,
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body: Partial<IWriteScheduledPlan>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IScheduledPlan>(
      callback,
      'POST',
      '/scheduled_plans',
      null,
      body,
      options,
    )
  }

  /**
   * POST /spaces -> ISpace
   */
  async create_space(
    callback: (readable: Readable) => Promise<ISpace>,
    /**
     * @param {Partial<IWriteCreateSpace>} body
     */
    body: Partial<IWriteCreateSpace>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISpace>(
      callback,
      'POST',
      '/spaces',
      null,
      body,
      options,
    )
  }

  /**
   * POST /sql_queries -> ISqlQuery
   */
  async create_sql_query(
    callback: (readable: Readable) => Promise<ISqlQuery>,
    /**
     * @param {Partial<IWriteSqlQueryCreate>} body
     */
    body: Partial<IWriteSqlQueryCreate>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISqlQuery>(
      callback,
      'POST',
      '/sql_queries',
      null,
      body,
      options,
    )
  }

  /**
   * POST /embed/sso_url -> IEmbedSsoUrl
   */
  async create_sso_embed_url(
    callback: (readable: Readable) => Promise<IEmbedSsoUrl>,
    /**
     * @param {Partial<IWriteEmbedSsoUrlParams>} body
     */
    body: Partial<IWriteEmbedSsoUrlParams>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IEmbedSsoUrl>(
      callback,
      'POST',
      '/embed/sso_url',
      null,
      body,
      options,
    )
  }

  /**
   * POST /themes -> ITheme
   */
  async create_theme(
    callback: (readable: Readable) => Promise<ITheme>,
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body: Partial<IWriteTheme>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ITheme>(
      callback,
      'POST',
      '/themes',
      null,
      body,
      options,
    )
  }

  /**
   * POST /users -> IUser
   */
  async create_user(
    callback: (readable: Readable) => Promise<IUser>,
    /**
     * @param {Partial<IWriteUser>} body
     */
    body?: Partial<IWriteUser>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUser>(
      callback,
      'POST',
      '/users',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /user_attributes -> IUserAttribute
   */
  async create_user_attribute(
    callback: (readable: Readable) => Promise<IUserAttribute>,
    /**
     * @param {Partial<IWriteUserAttribute>} body
     */
    body: Partial<IWriteUserAttribute>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUserAttribute>(
      callback,
      'POST',
      '/user_attributes',
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /users/{user_id}/credentials_api3 -> ICredentialsApi3
   */
  async create_user_credentials_api3(
    callback: (readable: Readable) => Promise<ICredentialsApi3>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {Partial<ICredentialsApi3>} body
     */
    body?: Partial<ICredentialsApi3>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsApi3>(
      callback,
      'POST',
      encodeURI(`/users/${user_id}/credentials_api3`),
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /users/{user_id}/credentials_email -> ICredentialsEmail
   */
  async create_user_credentials_email(
    callback: (readable: Readable) => Promise<ICredentialsEmail>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {Partial<IWriteCredentialsEmail>} body
     */
    body: Partial<IWriteCredentialsEmail>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsEmail>(
      callback,
      'POST',
      encodeURI(`/users/${user_id}/credentials_email`),
      { fields },
      body,
      options,
    )
  }

  /**
   * POST /users/{user_id}/credentials_email/password_reset -> ICredentialsEmail
   */
  async create_user_credentials_email_password_reset(
    callback: (readable: Readable) => Promise<ICredentialsEmail>,
    request: IRequestCreateUserCredentialsEmailPasswordReset,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsEmail>(
      callback,
      'POST',
      encodeURI(`/users/${request.user_id}/credentials_email/password_reset`),
      { expires: request.expires, fields: request.fields },
      null,
      options,
    )
  }

  /**
   * POST /users/{user_id}/credentials_totp -> ICredentialsTotp
   */
  async create_user_credentials_totp(
    callback: (readable: Readable) => Promise<ICredentialsTotp>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {Partial<ICredentialsTotp>} body
     */
    body?: Partial<ICredentialsTotp>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsTotp>(
      callback,
      'POST',
      encodeURI(`/users/${user_id}/credentials_totp`),
      { fields },
      body,
      options,
    )
  }

  /**
   * GET /custom_welcome_email -> ICustomWelcomeEmail
   */
  async custom_welcome_email(
    callback: (readable: Readable) => Promise<ICustomWelcomeEmail>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICustomWelcomeEmail>(
      callback,
      'GET',
      '/custom_welcome_email',
      null,
      null,
      options,
    )
  }

  /**
   * GET /dashboards/{dashboard_id} -> IDashboard
   */
  async dashboard(
    callback: (readable: Readable) => Promise<IDashboard>,
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboard>(
      callback,
      'GET',
      encodeURI(`/dashboards/${dashboard_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /dashboards/{dashboard_id}/dashboard_elements -> IDashboardElement[]
   */
  async dashboard_dashboard_elements(
    callback: (readable: Readable) => Promise<IDashboardElement[]>,
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardElement[]>(
      callback,
      'GET',
      encodeURI(`/dashboards/${dashboard_id}/dashboard_elements`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /dashboards/{dashboard_id}/dashboard_filters -> IDashboardFilter[]
   */
  async dashboard_dashboard_filters(
    callback: (readable: Readable) => Promise<IDashboardFilter[]>,
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardFilter[]>(
      callback,
      'GET',
      encodeURI(`/dashboards/${dashboard_id}/dashboard_filters`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /dashboards/{dashboard_id}/dashboard_layouts -> IDashboardLayout[]
   */
  async dashboard_dashboard_layouts(
    callback: (readable: Readable) => Promise<IDashboardLayout[]>,
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardLayout[]>(
      callback,
      'GET',
      encodeURI(`/dashboards/${dashboard_id}/dashboard_layouts`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /dashboard_elements/{dashboard_element_id} -> IDashboardElement
   */
  async dashboard_element(
    callback: (readable: Readable) => Promise<IDashboardElement>,
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardElement>(
      callback,
      'GET',
      encodeURI(`/dashboard_elements/${dashboard_element_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter
   */
  async dashboard_filter(
    callback: (readable: Readable) => Promise<IDashboardFilter>,
    /**
     * @param {string} dashboard_filter_id Id of dashboard filters
     */
    dashboard_filter_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardFilter>(
      callback,
      'GET',
      encodeURI(`/dashboard_filters/${dashboard_filter_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout
   */
  async dashboard_layout(
    callback: (readable: Readable) => Promise<IDashboardLayout>,
    /**
     * @param {string} dashboard_layout_id Id of dashboard layouts
     */
    dashboard_layout_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardLayout>(
      callback,
      'GET',
      encodeURI(`/dashboard_layouts/${dashboard_layout_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent
   */
  async dashboard_layout_component(
    callback: (readable: Readable) => Promise<IDashboardLayoutComponent>,
    /**
     * @param {string} dashboard_layout_component_id Id of dashboard layout component
     */
    dashboard_layout_component_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardLayoutComponent>(
      callback,
      'GET',
      encodeURI(
        `/dashboard_layout_components/${dashboard_layout_component_id}`,
      ),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components -> IDashboardLayoutComponent[]
   */
  async dashboard_layout_dashboard_layout_components(
    callback: (readable: Readable) => Promise<IDashboardLayoutComponent[]>,
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout component
     */
    dashboard_layout_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardLayoutComponent[]>(
      callback,
      'GET',
      encodeURI(
        `/dashboard_layouts/${dashboard_layout_id}/dashboard_layout_components`,
      ),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /datagroups/{datagroup_id} -> IDatagroup
   */
  async datagroup(
    callback: (readable: Readable) => Promise<IDatagroup>,
    /**
     * @param {string} datagroup_id ID of datagroup.
     */
    datagroup_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDatagroup>(
      callback,
      'GET',
      encodeURI(`/datagroups/${datagroup_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * GET /color_collections/default -> IColorCollection
   */
  async default_color_collection(
    callback: (readable: Readable) => Promise<IColorCollection>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IColorCollection>(
      callback,
      'GET',
      '/color_collections/default',
      null,
      null,
      options,
    )
  }

  /**
   * GET /themes/default -> ITheme
   */
  async default_theme(
    callback: (readable: Readable) => Promise<ITheme>,
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts?: Date,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ITheme>(
      callback,
      'GET',
      '/themes/default',
      { ts },
      null,
      options,
    )
  }

  /**
   * DELETE /color_collections/{collection_id} -> string
   */
  async delete_color_collection(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} collection_id Id of Color Collection
     */
    collection_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/color_collections/${collection_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /connections/{connection_name} -> string
   */
  async delete_connection(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/connections/${connection_name}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /connections/{connection_name}/connection_override/{override_context} -> string
   */
  async delete_connection_override(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name: string,
    /**
     * @param {string} override_context Context of connection override
     */
    override_context: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(
        `/connections/${connection_name}/connection_override/${override_context}`,
      ),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /content_favorite/{content_favorite_id} -> string
   */
  async delete_content_favorite(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} content_favorite_id Id of favorite content
     */
    content_favorite_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/content_favorite/${content_favorite_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /content_metadata_access/{content_metadata_access_id} -> string
   */
  async delete_content_metadata_access(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} content_metadata_access_id Id of content metadata access
     */
    content_metadata_access_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/content_metadata_access/${content_metadata_access_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /dashboards/{dashboard_id} -> string
   */
  async delete_dashboard(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/dashboards/${dashboard_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /dashboard_elements/{dashboard_element_id} -> string
   */
  async delete_dashboard_element(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/dashboard_elements/${dashboard_element_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /dashboard_filters/{dashboard_filter_id} -> string
   */
  async delete_dashboard_filter(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} dashboard_filter_id Id of dashboard filter
     */
    dashboard_filter_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/dashboard_filters/${dashboard_filter_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /dashboard_layouts/{dashboard_layout_id} -> string
   */
  async delete_dashboard_layout(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout
     */
    dashboard_layout_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/dashboard_layouts/${dashboard_layout_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /folders/{folder_id} -> string
   */
  async delete_folder(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/folders/${folder_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /projects/{project_id}/git_branch/{branch_name} -> string
   */
  async delete_git_branch(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {string} branch_name Branch Name
     */
    branch_name: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/projects/${project_id}/git_branch/${branch_name}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /groups/{group_id} -> string
   */
  async delete_group(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} group_id Id of group
     */
    group_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/groups/${group_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /groups/{group_id}/groups/{deleting_group_id} -> void
   */
  async delete_group_from_group(
    callback: (readable: Readable) => Promise<void>,
    /**
     * @param {number} group_id Id of group
     */
    group_id: number,
    /**
     * @param {number} deleting_group_id Id of group to delete
     */
    deleting_group_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<void>(
      callback,
      'DELETE',
      encodeURI(`/groups/${group_id}/groups/${deleting_group_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /groups/{group_id}/users/{user_id} -> void
   */
  async delete_group_user(
    callback: (readable: Readable) => Promise<void>,
    /**
     * @param {number} group_id Id of group
     */
    group_id: number,
    /**
     * @param {number} user_id Id of user to remove from group
     */
    user_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<void>(
      callback,
      'DELETE',
      encodeURI(`/groups/${group_id}/users/${user_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /homepages/{homepage_id} -> string
   */
  async delete_homepage(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/homepages/${homepage_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /homepage_items/{homepage_item_id} -> string
   */
  async delete_homepage_item(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} homepage_item_id Id of homepage_item
     */
    homepage_item_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/homepage_items/${homepage_item_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /homepage_sections/{homepage_section_id} -> string
   */
  async delete_homepage_section(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} homepage_section_id Id of homepage_section
     */
    homepage_section_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/homepage_sections/${homepage_section_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /integration_hubs/{integration_hub_id} -> string
   */
  async delete_integration_hub(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} integration_hub_id Id of integration_hub
     */
    integration_hub_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/integration_hubs/${integration_hub_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /looks/{look_id} -> string
   */
  async delete_look(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} look_id Id of look
     */
    look_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/looks/${look_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /lookml_models/{lookml_model_name} -> string
   */
  async delete_lookml_model(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/lookml_models/${lookml_model_name}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /model_sets/{model_set_id} -> string
   */
  async delete_model_set(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} model_set_id id of model set
     */
    model_set_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/model_sets/${model_set_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /oidc_test_configs/{test_slug} -> string
   */
  async delete_oidc_test_config(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/oidc_test_configs/${test_slug}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /permission_sets/{permission_set_id} -> string
   */
  async delete_permission_set(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} permission_set_id Id of permission set
     */
    permission_set_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/permission_sets/${permission_set_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /projects/{root_project_id}/credential/{credential_id} -> string
   */
  async delete_repository_credential(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id: string,
    /**
     * @param {string} credential_id Credential Id
     */
    credential_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/projects/${root_project_id}/credential/${credential_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /roles/{role_id} -> string
   */
  async delete_role(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} role_id id of role
     */
    role_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/roles/${role_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /saml_test_configs/{test_slug} -> string
   */
  async delete_saml_test_config(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/saml_test_configs/${test_slug}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /scheduled_plans/{scheduled_plan_id} -> string
   */
  async delete_scheduled_plan(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/scheduled_plans/${scheduled_plan_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /spaces/{space_id} -> string
   */
  async delete_space(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} space_id Id of space
     */
    space_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/spaces/${space_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /themes/{theme_id} -> string
   */
  async delete_theme(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/themes/${theme_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /users/{user_id} -> string
   */
  async delete_user(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} user_id Id of user
     */
    user_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/users/${user_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /user_attributes/{user_attribute_id} -> string
   */
  async delete_user_attribute(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} user_attribute_id Id of user_attribute
     */
    user_attribute_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/user_attributes/${user_attribute_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /groups/{group_id}/attribute_values/{user_attribute_id} -> void
   */
  async delete_user_attribute_group_value(
    callback: (readable: Readable) => Promise<void>,
    /**
     * @param {number} group_id Id of group
     */
    group_id: number,
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<void>(
      callback,
      'DELETE',
      encodeURI(`/groups/${group_id}/attribute_values/${user_attribute_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /users/{user_id}/attribute_values/{user_attribute_id} -> void
   */
  async delete_user_attribute_user_value(
    callback: (readable: Readable) => Promise<void>,
    /**
     * @param {number} user_id Id of user
     */
    user_id: number,
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<void>(
      callback,
      'DELETE',
      encodeURI(`/users/${user_id}/attribute_values/${user_attribute_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /users/{user_id}/credentials_api3/{credentials_api3_id} -> string
   */
  async delete_user_credentials_api3(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {number} credentials_api3_id id of API 3 Credential
     */
    credentials_api3_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/users/${user_id}/credentials_api3/${credentials_api3_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /users/{user_id}/credentials_email -> string
   */
  async delete_user_credentials_email(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/users/${user_id}/credentials_email`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /users/{user_id}/credentials_embed/{credentials_embed_id} -> string
   */
  async delete_user_credentials_embed(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {number} credentials_embed_id id of Embedding Credential
     */
    credentials_embed_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/users/${user_id}/credentials_embed/${credentials_embed_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /users/{user_id}/credentials_google -> string
   */
  async delete_user_credentials_google(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/users/${user_id}/credentials_google`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /users/{user_id}/credentials_ldap -> string
   */
  async delete_user_credentials_ldap(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/users/${user_id}/credentials_ldap`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /users/{user_id}/credentials_looker_openid -> string
   */
  async delete_user_credentials_looker_openid(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/users/${user_id}/credentials_looker_openid`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /users/{user_id}/credentials_oidc -> string
   */
  async delete_user_credentials_oidc(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/users/${user_id}/credentials_oidc`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /users/{user_id}/credentials_saml -> string
   */
  async delete_user_credentials_saml(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/users/${user_id}/credentials_saml`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /users/{user_id}/credentials_totp -> string
   */
  async delete_user_credentials_totp(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/users/${user_id}/credentials_totp`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /user_login_lockout/{key} -> string
   */
  async delete_user_login_lockout(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} key The key associated with the locked user
     */
    key: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/user_login_lockout/${key}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /users/{user_id}/sessions/{session_id} -> string
   */
  async delete_user_session(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {number} session_id id of Web Login Session
     */
    session_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/users/${user_id}/sessions/${session_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * POST /projects/{project_id}/deploy_to_production -> string
   */
  async deploy_to_production(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} project_id Id of project
     */
    project_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'POST',
      encodeURI(`/projects/${project_id}/deploy_to_production`),
      null,
      null,
      options,
    )
  }

  /**
   * POST /fetch_and_parse_saml_idp_metadata -> ISamlMetadataParseResult
   */
  async fetch_and_parse_saml_idp_metadata(
    callback: (readable: Readable) => Promise<ISamlMetadataParseResult>,
    /**
     * @param {Partial<string>} body
     */
    body: Partial<string>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISamlMetadataParseResult>(
      callback,
      'POST',
      '/fetch_and_parse_saml_idp_metadata',
      null,
      body,
      options,
    )
  }

  /**
   * POST /integrations/{integration_id}/form -> IDataActionForm
   */
  async fetch_integration_form(
    callback: (readable: Readable) => Promise<IDataActionForm>,
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDataActionForm>(
      callback,
      'POST',
      encodeURI(`/integrations/${integration_id}/form`),
      null,
      null,
      options,
    )
  }

  /**
   * POST /data_actions/form -> IDataActionForm
   */
  async fetch_remote_data_action_form(
    callback: (readable: Readable) => Promise<IDataActionForm>,
    /**
     * @param {Partial<IDictionary<string>>} body
     */
    body: Partial<IDictionary<string>>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDataActionForm>(
      callback,
      'POST',
      '/data_actions/form',
      null,
      body,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/git_branch/{branch_name} -> IGitBranch
   */
  async find_git_branch(
    callback: (readable: Readable) => Promise<IGitBranch>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {string} branch_name Branch Name
     */
    branch_name: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGitBranch>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}/git_branch/${branch_name}`),
      null,
      null,
      options,
    )
  }

  /**
   * GET /folders/{folder_id} -> IFolder
   */
  async folder(
    callback: (readable: Readable) => Promise<IFolder>,
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IFolder>(
      callback,
      'GET',
      encodeURI(`/folders/${folder_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /folders/{folder_id}/ancestors -> IFolder[]
   */
  async folder_ancestors(
    callback: (readable: Readable) => Promise<IFolder[]>,
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IFolder[]>(
      callback,
      'GET',
      encodeURI(`/folders/${folder_id}/ancestors`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /folders/{folder_id}/children -> IFolder[]
   */
  async folder_children(
    callback: (readable: Readable) => Promise<IFolder[]>,
    request: IRequestFolderChildren,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IFolder[]>(
      callback,
      'GET',
      encodeURI(`/folders/${request.folder_id}/children`),
      {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
      },
      null,
      options,
    )
  }

  /**
   * GET /folders/{folder_id}/children/search -> IFolder[]
   */
  async folder_children_search(
    callback: (readable: Readable) => Promise<IFolder[]>,
    request: IRequestFolderChildrenSearch,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IFolder[]>(
      callback,
      'GET',
      encodeURI(`/folders/${request.folder_id}/children/search`),
      { fields: request.fields, sorts: request.sorts, name: request.name },
      null,
      options,
    )
  }

  /**
   * GET /folders/{folder_id}/dashboards -> IDashboard[]
   */
  async folder_dashboards(
    callback: (readable: Readable) => Promise<IDashboard[]>,
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboard[]>(
      callback,
      'GET',
      encodeURI(`/folders/${folder_id}/dashboards`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /folders/{folder_id}/looks -> ILookWithQuery[]
   */
  async folder_looks(
    callback: (readable: Readable) => Promise<ILookWithQuery[]>,
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILookWithQuery[]>(
      callback,
      'GET',
      encodeURI(`/folders/${folder_id}/looks`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /folders/{folder_id}/parent -> IFolder
   */
  async folder_parent(
    callback: (readable: Readable) => Promise<IFolder>,
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IFolder>(
      callback,
      'GET',
      encodeURI(`/folders/${folder_id}/parent`),
      { fields },
      null,
      options,
    )
  }

  /**
   * PUT /password_config/force_password_reset_at_next_login_for_all_users -> string
   */
  async force_password_reset_at_next_login_for_all_users(
    callback: (readable: Readable) => Promise<string>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'PUT',
      '/password_config/force_password_reset_at_next_login_for_all_users',
      null,
      null,
      options,
    )
  }

  /**
   * GET /projects/{root_project_id}/credentials -> IRepositoryCredential[]
   */
  async get_all_repository_credentials(
    callback: (readable: Readable) => Promise<IRepositoryCredential[]>,
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRepositoryCredential[]>(
      callback,
      'GET',
      encodeURI(`/projects/${root_project_id}/credentials`),
      null,
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/git_branch -> IGitBranch
   */
  async git_branch(
    callback: (readable: Readable) => Promise<IGitBranch>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGitBranch>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}/git_branch`),
      null,
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/git/deploy_key -> string
   */
  async git_deploy_key(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}/git/deploy_key`),
      null,
      null,
      options,
    )
  }

  /**
   * GET /groups/{group_id} -> IGroup
   */
  async group(
    callback: (readable: Readable) => Promise<IGroup>,
    /**
     * @param {number} group_id Id of group
     */
    group_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGroup>(
      callback,
      'GET',
      encodeURI(`/groups/${group_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /homepages/{homepage_id} -> IHomepage
   */
  async homepage(
    callback: (readable: Readable) => Promise<IHomepage>,
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepage>(
      callback,
      'GET',
      encodeURI(`/homepages/${homepage_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /homepage_items/{homepage_item_id} -> IHomepageItem
   */
  async homepage_item(
    callback: (readable: Readable) => Promise<IHomepageItem>,
    /**
     * @param {number} homepage_item_id Id of homepage item
     */
    homepage_item_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepageItem>(
      callback,
      'GET',
      encodeURI(`/homepage_items/${homepage_item_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /homepage_sections/{homepage_section_id} -> IHomepageSection
   */
  async homepage_section(
    callback: (readable: Readable) => Promise<IHomepageSection>,
    /**
     * @param {number} homepage_section_id Id of homepage section
     */
    homepage_section_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepageSection>(
      callback,
      'GET',
      encodeURI(`/homepage_sections/${homepage_section_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * POST /dashboards/{lookml_dashboard_id}/import/{space_id} -> IDashboard
   */
  async import_lookml_dashboard(
    callback: (readable: Readable) => Promise<IDashboard>,
    /**
     * @param {string} lookml_dashboard_id Id of LookML dashboard
     */
    lookml_dashboard_id: string,
    /**
     * @param {string} space_id Id of space to import the dashboard to
     */
    space_id: string,
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body?: Partial<IWriteDashboard>,
    /**
     * @param {boolean} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
     */
    raw_locale?: boolean,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboard>(
      callback,
      'POST',
      encodeURI(`/dashboards/${lookml_dashboard_id}/import/${space_id}`),
      { raw_locale },
      body,
      options,
    )
  }

  /**
   * GET /integrations/{integration_id} -> IIntegration
   */
  async integration(
    callback: (readable: Readable) => Promise<IIntegration>,
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IIntegration>(
      callback,
      'GET',
      encodeURI(`/integrations/${integration_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /integration_hubs/{integration_hub_id} -> IIntegrationHub
   */
  async integration_hub(
    callback: (readable: Readable) => Promise<IIntegrationHub>,
    /**
     * @param {number} integration_hub_id Id of Integration Hub
     */
    integration_hub_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IIntegrationHub>(
      callback,
      'GET',
      encodeURI(`/integration_hubs/${integration_hub_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /internal_help_resources_enabled -> IInternalHelpResources
   */
  async internal_help_resources(
    callback: (readable: Readable) => Promise<IInternalHelpResources>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IInternalHelpResources>(
      callback,
      'GET',
      '/internal_help_resources_enabled',
      null,
      null,
      options,
    )
  }

  /**
   * GET /internal_help_resources_content -> IInternalHelpResourcesContent
   */
  async internal_help_resources_content(
    callback: (readable: Readable) => Promise<IInternalHelpResourcesContent>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IInternalHelpResourcesContent>(
      callback,
      'GET',
      '/internal_help_resources_content',
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /running_queries/{query_task_id} -> string
   */
  async kill_query(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} query_task_id Query task id.
     */
    query_task_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      encodeURI(`/running_queries/${query_task_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * GET /ldap_config -> ILDAPConfig
   */
  async ldap_config(
    callback: (readable: Readable) => Promise<ILDAPConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILDAPConfig>(
      callback,
      'GET',
      '/ldap_config',
      null,
      null,
      options,
    )
  }

  /**
   * GET /legacy_features/{legacy_feature_id} -> ILegacyFeature
   */
  async legacy_feature(
    callback: (readable: Readable) => Promise<ILegacyFeature>,
    /**
     * @param {number} legacy_feature_id id of legacy feature
     */
    legacy_feature_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILegacyFeature>(
      callback,
      'GET',
      encodeURI(`/legacy_features/${legacy_feature_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * POST /login -> IAccessToken
   */
  async login(
    callback: (readable: Readable) => Promise<IAccessToken>,
    request: IRequestLogin,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IAccessToken>(
      callback,
      'POST',
      '/login',
      { client_id: request.client_id, client_secret: request.client_secret },
      null,
      options,
    )
  }

  /**
   * POST /login/{user_id} -> IAccessToken
   */
  async login_user(
    callback: (readable: Readable) => Promise<IAccessToken>,
    /**
     * @param {number} user_id Id of user.
     */
    user_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IAccessToken>(
      callback,
      'POST',
      encodeURI(`/login/${user_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * DELETE /logout -> string
   */
  async logout(
    callback: (readable: Readable) => Promise<string>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'DELETE',
      '/logout',
      null,
      null,
      options,
    )
  }

  /**
   * GET /looks/{look_id} -> ILookWithQuery
   */
  async look(
    callback: (readable: Readable) => Promise<ILookWithQuery>,
    /**
     * @param {number} look_id Id of look
     */
    look_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILookWithQuery>(
      callback,
      'GET',
      encodeURI(`/looks/${look_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /lookml_models/{lookml_model_name} -> ILookmlModel
   */
  async lookml_model(
    callback: (readable: Readable) => Promise<ILookmlModel>,
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILookmlModel>(
      callback,
      'GET',
      encodeURI(`/lookml_models/${lookml_model_name}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /lookml_models/{lookml_model_name}/explores/{explore_name} -> ILookmlModelExplore
   */
  async lookml_model_explore(
    callback: (readable: Readable) => Promise<ILookmlModelExplore>,
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name: string,
    /**
     * @param {string} explore_name Name of explore.
     */
    explore_name: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILookmlModelExplore>(
      callback,
      'GET',
      encodeURI(`/lookml_models/${lookml_model_name}/explores/${explore_name}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/manifest -> IManifest
   */
  async manifest(
    callback: (readable: Readable) => Promise<IManifest>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IManifest>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}/manifest`),
      null,
      null,
      options,
    )
  }

  /**
   * GET /user -> IUser
   */
  async me(
    callback: (readable: Readable) => Promise<IUser>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUser>(
      callback,
      'GET',
      '/user',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /merge_queries/{merge_query_id} -> IMergeQuery
   */
  async merge_query(
    callback: (readable: Readable) => Promise<IMergeQuery>,
    /**
     * @param {string} merge_query_id Merge Query Id
     */
    merge_query_id: string,
    /**
     * @param {string} fields Requested fields
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IMergeQuery>(
      callback,
      'GET',
      encodeURI(`/merge_queries/${merge_query_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /model_sets/{model_set_id} -> IModelSet
   */
  async model_set(
    callback: (readable: Readable) => Promise<IModelSet>,
    /**
     * @param {number} model_set_id Id of model set
     */
    model_set_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IModelSet>(
      callback,
      'GET',
      encodeURI(`/model_sets/${model_set_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /oidc_config -> IOIDCConfig
   */
  async oidc_config(
    callback: (readable: Readable) => Promise<IOIDCConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IOIDCConfig>(
      callback,
      'GET',
      '/oidc_config',
      null,
      null,
      options,
    )
  }

  /**
   * GET /oidc_test_configs/{test_slug} -> IOIDCConfig
   */
  async oidc_test_config(
    callback: (readable: Readable) => Promise<IOIDCConfig>,
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IOIDCConfig>(
      callback,
      'GET',
      encodeURI(`/oidc_test_configs/${test_slug}`),
      null,
      null,
      options,
    )
  }

  /**
   * POST /parse_saml_idp_metadata -> ISamlMetadataParseResult
   */
  async parse_saml_idp_metadata(
    callback: (readable: Readable) => Promise<ISamlMetadataParseResult>,
    /**
     * @param {Partial<string>} body
     */
    body: Partial<string>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISamlMetadataParseResult>(
      callback,
      'POST',
      '/parse_saml_idp_metadata',
      null,
      body,
      options,
    )
  }

  /**
   * GET /password_config -> IPasswordConfig
   */
  async password_config(
    callback: (readable: Readable) => Promise<IPasswordConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IPasswordConfig>(
      callback,
      'GET',
      '/password_config',
      null,
      null,
      options,
    )
  }

  /**
   * POST /data_actions -> IDataActionResponse
   */
  async perform_data_action(
    callback: (readable: Readable) => Promise<IDataActionResponse>,
    /**
     * @param {Partial<IWriteDataActionRequest>} body
     */
    body: Partial<IWriteDataActionRequest>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDataActionResponse>(
      callback,
      'POST',
      '/data_actions',
      null,
      body,
      options,
    )
  }

  /**
   * GET /permission_sets/{permission_set_id} -> IPermissionSet
   */
  async permission_set(
    callback: (readable: Readable) => Promise<IPermissionSet>,
    /**
     * @param {number} permission_set_id Id of permission set
     */
    permission_set_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IPermissionSet>(
      callback,
      'GET',
      encodeURI(`/permission_sets/${permission_set_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id} -> IProject
   */
  async project(
    callback: (readable: Readable) => Promise<IProject>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {string} fields Requested fields
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IProject>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/files/file -> IProjectFile
   */
  async project_file(
    callback: (readable: Readable) => Promise<IProjectFile>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {string} file_id File Id
     */
    file_id: string,
    /**
     * @param {string} fields Requested fields
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IProjectFile>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}/files/file`),
      { file_id, fields },
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/validate -> IProjectValidationCache
   */
  async project_validation_results(
    callback: (readable: Readable) => Promise<IProjectValidationCache>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {string} fields Requested fields
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IProjectValidationCache>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}/validate`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/current_workspace -> IProjectWorkspace
   */
  async project_workspace(
    callback: (readable: Readable) => Promise<IProjectWorkspace>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {string} fields Requested fields
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IProjectWorkspace>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}/current_workspace`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /queries/{query_id} -> IQuery
   */
  async query(
    callback: (readable: Readable) => Promise<IQuery>,
    /**
     * @param {number} query_id Id of query
     */
    query_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IQuery>(
      callback,
      'GET',
      encodeURI(`/queries/${query_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /queries/slug/{slug} -> IQuery
   */
  async query_for_slug(
    callback: (readable: Readable) => Promise<IQuery>,
    /**
     * @param {string} slug Slug of query
     */
    slug: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IQuery>(
      callback,
      'GET',
      encodeURI(`/queries/slug/${slug}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /query_tasks/{query_task_id} -> IQueryTask
   */
  async query_task(
    callback: (readable: Readable) => Promise<IQueryTask>,
    /**
     * @param {string} query_task_id ID of the Query Task
     */
    query_task_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IQueryTask>(
      callback,
      'GET',
      encodeURI(`/query_tasks/${query_task_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /query_tasks/multi_results -> IDictionary<string>
   */
  async query_task_multi_results(
    callback: (readable: Readable) => Promise<IDictionary<string>>,
    /**
     * @param {DelimArray<string>} query_task_ids List of Query Task IDs
     */
    query_task_ids: DelimArray<string>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDictionary<string>>(
      callback,
      'GET',
      '/query_tasks/multi_results',
      { query_task_ids },
      null,
      options,
    )
  }

  /**
   * GET /query_tasks/{query_task_id}/results -> IDictionary<string>
   */
  async query_task_results(
    callback: (readable: Readable) => Promise<IDictionary<string>>,
    /**
     * @param {string} query_task_id ID of the Query Task
     */
    query_task_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDictionary<string>>(
      callback,
      'GET',
      encodeURI(`/query_tasks/${query_task_id}/results`),
      null,
      null,
      options,
    )
  }

  /**
   * GET /render_tasks/{render_task_id} -> IRenderTask
   */
  async render_task(
    callback: (readable: Readable) => Promise<IRenderTask>,
    /**
     * @param {string} render_task_id Id of render task
     */
    render_task_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRenderTask>(
      callback,
      'GET',
      encodeURI(`/render_tasks/${render_task_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /render_tasks/{render_task_id}/results -> string
   *
   * **Note**: Binary content is returned by this method.
   */
  async render_task_results(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} render_task_id Id of render task
     */
    render_task_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'GET',
      encodeURI(`/render_tasks/${render_task_id}/results`),
      null,
      null,
      options,
    )
  }

  /**
   * POST /projects/{project_id}/reset_to_production -> string
   */
  async reset_project_to_production(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} project_id Id of project
     */
    project_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'POST',
      encodeURI(`/projects/${project_id}/reset_to_production`),
      null,
      null,
      options,
    )
  }

  /**
   * POST /projects/{project_id}/reset_to_remote -> string
   */
  async reset_project_to_remote(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} project_id Id of project
     */
    project_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'POST',
      encodeURI(`/projects/${project_id}/reset_to_remote`),
      null,
      null,
      options,
    )
  }

  /**
   * GET /roles/{role_id} -> IRole
   */
  async role(
    callback: (readable: Readable) => Promise<IRole>,
    /**
     * @param {number} role_id id of role
     */
    role_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRole>(
      callback,
      'GET',
      encodeURI(`/roles/${role_id}`),
      null,
      null,
      options,
    )
  }

  /**
   * GET /roles/{role_id}/groups -> IGroup[]
   */
  async role_groups(
    callback: (readable: Readable) => Promise<IGroup[]>,
    /**
     * @param {number} role_id id of role
     */
    role_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGroup[]>(
      callback,
      'GET',
      encodeURI(`/roles/${role_id}/groups`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /roles/{role_id}/users -> IUser[]
   */
  async role_users(
    callback: (readable: Readable) => Promise<IUser[]>,
    request: IRequestRoleUsers,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUser[]>(
      callback,
      'GET',
      encodeURI(`/roles/${request.role_id}/users`),
      {
        fields: request.fields,
        direct_association_only: request.direct_association_only,
      },
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/git_connection_tests/{test_id} -> IGitConnectionTestResult
   */
  async run_git_connection_test(
    callback: (readable: Readable) => Promise<IGitConnectionTestResult>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {string} test_id Test Id
     */
    test_id: string,
    /**
     * @param {string} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
     */
    remote_url?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGitConnectionTestResult>(
      callback,
      'GET',
      encodeURI(`/projects/${project_id}/git_connection_tests/${test_id}`),
      { remote_url },
      null,
      options,
    )
  }

  /**
   * POST /queries/run/{result_format} -> string
   *
   * **Note**: Binary content may be returned by this method.
   */
  async run_inline_query(
    callback: (readable: Readable) => Promise<string>,
    request: IRequestRunInlineQuery,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'POST',
      encodeURI(`/queries/run/${request.result_format}`),
      {
        limit: request.limit,
        apply_formatting: request.apply_formatting,
        apply_vis: request.apply_vis,
        cache: request.cache,
        image_width: request.image_width,
        image_height: request.image_height,
        generate_drill_links: request.generate_drill_links,
        force_production: request.force_production,
        cache_only: request.cache_only,
        path_prefix: request.path_prefix,
        rebuild_pdts: request.rebuild_pdts,
        server_table_calcs: request.server_table_calcs,
      },
      request.body,
      options,
    )
  }

  /**
   * GET /looks/{look_id}/run/{result_format} -> string
   *
   * **Note**: Binary content may be returned by this method.
   */
  async run_look(
    callback: (readable: Readable) => Promise<string>,
    request: IRequestRunLook,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'GET',
      encodeURI(`/looks/${request.look_id}/run/${request.result_format}`),
      {
        limit: request.limit,
        apply_formatting: request.apply_formatting,
        apply_vis: request.apply_vis,
        cache: request.cache,
        image_width: request.image_width,
        image_height: request.image_height,
        generate_drill_links: request.generate_drill_links,
        force_production: request.force_production,
        cache_only: request.cache_only,
        path_prefix: request.path_prefix,
        rebuild_pdts: request.rebuild_pdts,
        server_table_calcs: request.server_table_calcs,
      },
      null,
      options,
    )
  }

  /**
   * GET /projects/{project_id}/lookml_tests/run -> ILookmlTestResult[]
   */
  async run_lookml_test(
    callback: (readable: Readable) => Promise<ILookmlTestResult[]>,
    request: IRequestRunLookmlTest,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILookmlTestResult[]>(
      callback,
      'GET',
      encodeURI(`/projects/${request.project_id}/lookml_tests/run`),
      { file_id: request.file_id, test: request.test, model: request.model },
      null,
      options,
    )
  }

  /**
   * GET /queries/{query_id}/run/{result_format} -> string
   *
   * **Note**: Binary content may be returned by this method.
   */
  async run_query(
    callback: (readable: Readable) => Promise<string>,
    request: IRequestRunQuery,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'GET',
      encodeURI(`/queries/${request.query_id}/run/${request.result_format}`),
      {
        limit: request.limit,
        apply_formatting: request.apply_formatting,
        apply_vis: request.apply_vis,
        cache: request.cache,
        image_width: request.image_width,
        image_height: request.image_height,
        generate_drill_links: request.generate_drill_links,
        force_production: request.force_production,
        cache_only: request.cache_only,
        path_prefix: request.path_prefix,
        rebuild_pdts: request.rebuild_pdts,
        server_table_calcs: request.server_table_calcs,
      },
      null,
      options,
    )
  }

  /**
   * POST /sql_queries/{slug}/run/{result_format} -> string
   *
   * **Note**: Binary content may be returned by this method.
   */
  async run_sql_query(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} slug slug of query
     */
    slug: string,
    /**
     * @param {string} result_format Format of result, options are: ["json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml", "json_label"]
     */
    result_format: string,
    /**
     * @param {string} download Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.
     */
    download?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'POST',
      encodeURI(`/sql_queries/${slug}/run/${result_format}`),
      { download },
      null,
      options,
    )
  }

  /**
   * GET /queries/models/{model_name}/views/{view_name}/run/{result_format} -> string
   *
   * **Note**: Binary content may be returned by this method.
   */
  async run_url_encoded_query(
    callback: (readable: Readable) => Promise<string>,
    /**
     * @param {string} model_name Model name
     */
    model_name: string,
    /**
     * @param {string} view_name View name
     */
    view_name: string,
    /**
     * @param {string} result_format Format of result
     */
    result_format: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<string>(
      callback,
      'GET',
      encodeURI(
        `/queries/models/${model_name}/views/${view_name}/run/${result_format}`,
      ),
      null,
      null,
      options,
    )
  }

  /**
   * GET /saml_config -> ISamlConfig
   */
  async saml_config(
    callback: (readable: Readable) => Promise<ISamlConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISamlConfig>(
      callback,
      'GET',
      '/saml_config',
      null,
      null,
      options,
    )
  }

  /**
   * GET /saml_test_configs/{test_slug} -> ISamlConfig
   */
  async saml_test_config(
    callback: (readable: Readable) => Promise<ISamlConfig>,
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISamlConfig>(
      callback,
      'GET',
      encodeURI(`/saml_test_configs/${test_slug}`),
      null,
      null,
      options,
    )
  }

  /**
   * GET /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan
   */
  async scheduled_plan(
    callback: (readable: Readable) => Promise<IScheduledPlan>,
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IScheduledPlan>(
      callback,
      'GET',
      encodeURI(`/scheduled_plans/${scheduled_plan_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * POST /scheduled_plans/run_once -> IScheduledPlan
   */
  async scheduled_plan_run_once(
    callback: (readable: Readable) => Promise<IScheduledPlan>,
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body: Partial<IWriteScheduledPlan>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IScheduledPlan>(
      callback,
      'POST',
      '/scheduled_plans/run_once',
      null,
      body,
      options,
    )
  }

  /**
   * POST /scheduled_plans/{scheduled_plan_id}/run_once -> IScheduledPlan
   */
  async scheduled_plan_run_once_by_id(
    callback: (readable: Readable) => Promise<IScheduledPlan>,
    /**
     * @param {number} scheduled_plan_id Id of schedule plan to copy and run
     */
    scheduled_plan_id: number,
    /**
     * @param {Partial<IWriteWriteScheduledPlan>} body
     */
    body?: Partial<IWriteWriteScheduledPlan>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IScheduledPlan>(
      callback,
      'POST',
      encodeURI(`/scheduled_plans/${scheduled_plan_id}/run_once`),
      null,
      body,
      options,
    )
  }

  /**
   * GET /scheduled_plans/dashboard/{dashboard_id} -> IScheduledPlan[]
   */
  async scheduled_plans_for_dashboard(
    callback: (readable: Readable) => Promise<IScheduledPlan[]>,
    request: IRequestScheduledPlansForDashboard,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IScheduledPlan[]>(
      callback,
      'GET',
      encodeURI(`/scheduled_plans/dashboard/${request.dashboard_id}`),
      {
        user_id: request.user_id,
        all_users: request.all_users,
        fields: request.fields,
      },
      null,
      options,
    )
  }

  /**
   * GET /scheduled_plans/look/{look_id} -> IScheduledPlan[]
   */
  async scheduled_plans_for_look(
    callback: (readable: Readable) => Promise<IScheduledPlan[]>,
    request: IRequestScheduledPlansForLook,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IScheduledPlan[]>(
      callback,
      'GET',
      encodeURI(`/scheduled_plans/look/${request.look_id}`),
      {
        user_id: request.user_id,
        fields: request.fields,
        all_users: request.all_users,
      },
      null,
      options,
    )
  }

  /**
   * GET /scheduled_plans/lookml_dashboard/{lookml_dashboard_id} -> IScheduledPlan[]
   */
  async scheduled_plans_for_lookml_dashboard(
    callback: (readable: Readable) => Promise<IScheduledPlan[]>,
    request: IRequestScheduledPlansForLookmlDashboard,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IScheduledPlan[]>(
      callback,
      'GET',
      encodeURI(
        `/scheduled_plans/lookml_dashboard/${request.lookml_dashboard_id}`,
      ),
      {
        user_id: request.user_id,
        fields: request.fields,
        all_users: request.all_users,
      },
      null,
      options,
    )
  }

  /**
   * GET /scheduled_plans/space/{space_id} -> IScheduledPlan[]
   */
  async scheduled_plans_for_space(
    callback: (readable: Readable) => Promise<IScheduledPlan[]>,
    /**
     * @param {number} space_id Space Id
     */
    space_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IScheduledPlan[]>(
      callback,
      'GET',
      encodeURI(`/scheduled_plans/space/${space_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /content_favorite/search -> IContentFavorite[]
   */
  async search_content_favorites(
    callback: (readable: Readable) => Promise<IContentFavorite[]>,
    request: IRequestSearchContentFavorites,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IContentFavorite[]>(
      callback,
      'GET',
      '/content_favorite/search',
      {
        id: request.id,
        user_id: request.user_id,
        content_metadata_id: request.content_metadata_id,
        dashboard_id: request.dashboard_id,
        look_id: request.look_id,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        fields: request.fields,
        filter_or: request.filter_or,
      },
      null,
      options,
    )
  }

  /**
   * GET /content_view/search -> IContentView[]
   */
  async search_content_views(
    callback: (readable: Readable) => Promise<IContentView[]>,
    request: IRequestSearchContentViews,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IContentView[]>(
      callback,
      'GET',
      '/content_view/search',
      {
        view_count: request.view_count,
        group_id: request.group_id,
        look_id: request.look_id,
        dashboard_id: request.dashboard_id,
        content_metadata_id: request.content_metadata_id,
        start_of_week_date: request.start_of_week_date,
        all_time: request.all_time,
        user_id: request.user_id,
        fields: request.fields,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        filter_or: request.filter_or,
      },
      null,
      options,
    )
  }

  /**
   * GET /dashboard_elements/search -> IDashboardElement[]
   */
  async search_dashboard_elements(
    callback: (readable: Readable) => Promise<IDashboardElement[]>,
    request: IRequestSearchDashboardElements,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardElement[]>(
      callback,
      'GET',
      '/dashboard_elements/search',
      {
        dashboard_id: request.dashboard_id,
        look_id: request.look_id,
        title: request.title,
        deleted: request.deleted,
        fields: request.fields,
        filter_or: request.filter_or,
        sorts: request.sorts,
      },
      null,
      options,
    )
  }

  /**
   * GET /dashboards/search -> IDashboard[]
   */
  async search_dashboards(
    callback: (readable: Readable) => Promise<IDashboard[]>,
    request: IRequestSearchDashboards,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboard[]>(
      callback,
      'GET',
      '/dashboards/search',
      {
        id: request.id,
        slug: request.slug,
        title: request.title,
        description: request.description,
        content_favorite_id: request.content_favorite_id,
        space_id: request.space_id,
        deleted: request.deleted,
        user_id: request.user_id,
        view_count: request.view_count,
        content_metadata_id: request.content_metadata_id,
        curate: request.curate,
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        filter_or: request.filter_or,
      },
      null,
      options,
    )
  }

  /**
   * GET /folders/search -> IFolder[]
   */
  async search_folders(
    callback: (readable: Readable) => Promise<IFolder[]>,
    request: IRequestSearchFolders,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IFolder[]>(
      callback,
      'GET',
      '/folders/search',
      {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        name: request.name,
        id: request.id,
        parent_id: request.parent_id,
        creator_id: request.creator_id,
        filter_or: request.filter_or,
      },
      null,
      options,
    )
  }

  /**
   * GET /groups/search -> IGroup[]
   */
  async search_groups(
    callback: (readable: Readable) => Promise<IGroup[]>,
    request: IRequestSearchGroups,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGroup[]>(
      callback,
      'GET',
      '/groups/search',
      {
        fields: request.fields,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        filter_or: request.filter_or,
        id: request.id,
        name: request.name,
        external_group_id: request.external_group_id,
        externally_managed: request.externally_managed,
        externally_orphaned: request.externally_orphaned,
      },
      null,
      options,
    )
  }

  /**
   * GET /homepages/search -> IHomepage[]
   */
  async search_homepages(
    callback: (readable: Readable) => Promise<IHomepage[]>,
    request: IRequestSearchHomepages,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepage[]>(
      callback,
      'GET',
      '/homepages/search',
      {
        title: request.title,
        created_at: request.created_at,
        first_name: request.first_name,
        last_name: request.last_name,
        fields: request.fields,
        favorited: request.favorited,
        creator_id: request.creator_id,
        sorts: request.sorts,
        page: request.page,
        per_page: request.per_page,
        offset: request.offset,
        limit: request.limit,
        filter_or: request.filter_or,
      },
      null,
      options,
    )
  }

  /**
   * GET /looks/search -> ILook[]
   */
  async search_looks(
    callback: (readable: Readable) => Promise<ILook[]>,
    request: IRequestSearchLooks,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILook[]>(
      callback,
      'GET',
      '/looks/search',
      {
        title: request.title,
        description: request.description,
        content_favorite_id: request.content_favorite_id,
        space_id: request.space_id,
        user_id: request.user_id,
        view_count: request.view_count,
        deleted: request.deleted,
        query_id: request.query_id,
        curate: request.curate,
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        filter_or: request.filter_or,
      },
      null,
      options,
    )
  }

  /**
   * GET /model_sets/search -> IModelSet[]
   */
  async search_model_sets(
    callback: (readable: Readable) => Promise<IModelSet[]>,
    request: IRequestSearchModelSets,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IModelSet[]>(
      callback,
      'GET',
      '/model_sets/search',
      {
        fields: request.fields,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        id: request.id,
        name: request.name,
        all_access: request.all_access,
        built_in: request.built_in,
        filter_or: request.filter_or,
      },
      null,
      options,
    )
  }

  /**
   * GET /permission_sets/search -> IPermissionSet[]
   */
  async search_permission_sets(
    callback: (readable: Readable) => Promise<IPermissionSet[]>,
    request: IRequestSearchModelSets,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IPermissionSet[]>(
      callback,
      'GET',
      '/permission_sets/search',
      {
        fields: request.fields,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        id: request.id,
        name: request.name,
        all_access: request.all_access,
        built_in: request.built_in,
        filter_or: request.filter_or,
      },
      null,
      options,
    )
  }

  /**
   * GET /roles/search -> IRole[]
   */
  async search_roles(
    callback: (readable: Readable) => Promise<IRole[]>,
    request: IRequestSearchRoles,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRole[]>(
      callback,
      'GET',
      '/roles/search',
      {
        fields: request.fields,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        id: request.id,
        name: request.name,
        built_in: request.built_in,
        filter_or: request.filter_or,
      },
      null,
      options,
    )
  }

  /**
   * GET /spaces/search -> ISpace[]
   */
  async search_spaces(
    callback: (readable: Readable) => Promise<ISpace[]>,
    request: IRequestSearchFolders,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISpace[]>(
      callback,
      'GET',
      '/spaces/search',
      {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        name: request.name,
        id: request.id,
        parent_id: request.parent_id,
        creator_id: request.creator_id,
        filter_or: request.filter_or,
      },
      null,
      options,
    )
  }

  /**
   * GET /themes/search -> ITheme[]
   */
  async search_themes(
    callback: (readable: Readable) => Promise<ITheme[]>,
    request: IRequestSearchThemes,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ITheme[]>(
      callback,
      'GET',
      '/themes/search',
      {
        id: request.id,
        name: request.name,
        begin_at: request.begin_at,
        end_at: request.end_at,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        fields: request.fields,
        filter_or: request.filter_or,
      },
      null,
      options,
    )
  }

  /**
   * GET /user_login_lockouts/search -> IUserLoginLockout[]
   */
  async search_user_login_lockouts(
    callback: (readable: Readable) => Promise<IUserLoginLockout[]>,
    request: IRequestSearchUserLoginLockouts,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUserLoginLockout[]>(
      callback,
      'GET',
      '/user_login_lockouts/search',
      {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
        auth_type: request.auth_type,
        full_name: request.full_name,
        email: request.email,
        remote_id: request.remote_id,
        filter_or: request.filter_or,
      },
      null,
      options,
    )
  }

  /**
   * GET /users/search -> IUser[]
   */
  async search_users(
    callback: (readable: Readable) => Promise<IUser[]>,
    request: IRequestSearchUsers,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUser[]>(
      callback,
      'GET',
      '/users/search',
      {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
        id: request.id,
        first_name: request.first_name,
        last_name: request.last_name,
        verified_looker_employee: request.verified_looker_employee,
        email: request.email,
        is_disabled: request.is_disabled,
        filter_or: request.filter_or,
        content_metadata_id: request.content_metadata_id,
        group_id: request.group_id,
      },
      null,
      options,
    )
  }

  /**
   * GET /users/search/names/{pattern} -> IUser[]
   */
  async search_users_names(
    callback: (readable: Readable) => Promise<IUser[]>,
    request: IRequestSearchUsersNames,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUser[]>(
      callback,
      'GET',
      encodeURI(`/users/search/names/${request.pattern}`),
      {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
        id: request.id,
        first_name: request.first_name,
        last_name: request.last_name,
        verified_looker_employee: request.verified_looker_employee,
        email: request.email,
        is_disabled: request.is_disabled,
      },
      null,
      options,
    )
  }

  /**
   * GET /session -> IApiSession
   */
  async session(
    callback: (readable: Readable) => Promise<IApiSession>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IApiSession>(
      callback,
      'GET',
      '/session',
      null,
      null,
      options,
    )
  }

  /**
   * GET /session_config -> ISessionConfig
   */
  async session_config(
    callback: (readable: Readable) => Promise<ISessionConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISessionConfig>(
      callback,
      'GET',
      '/session_config',
      null,
      null,
      options,
    )
  }

  /**
   * PUT /color_collections/default -> IColorCollection
   */
  async set_default_color_collection(
    callback: (readable: Readable) => Promise<IColorCollection>,
    /**
     * @param {string} collection_id ID of color collection to set as default
     */
    collection_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IColorCollection>(
      callback,
      'PUT',
      '/color_collections/default',
      { collection_id },
      null,
      options,
    )
  }

  /**
   * PUT /themes/default -> ITheme
   */
  async set_default_theme(
    callback: (readable: Readable) => Promise<ITheme>,
    /**
     * @param {string} name Name of theme to set as default
     */
    name: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ITheme>(
      callback,
      'PUT',
      '/themes/default',
      { name },
      null,
      options,
    )
  }

  /**
   * PUT /roles/{role_id}/groups -> IGroup[]
   */
  async set_role_groups(
    callback: (readable: Readable) => Promise<IGroup[]>,
    /**
     * @param {number} role_id Id of Role
     */
    role_id: number,
    /**
     * @param {Partial<number[]>} body
     */
    body: Partial<number[]>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGroup[]>(
      callback,
      'PUT',
      encodeURI(`/roles/${role_id}/groups`),
      null,
      body,
      options,
    )
  }

  /**
   * PUT /roles/{role_id}/users -> IUser[]
   */
  async set_role_users(
    callback: (readable: Readable) => Promise<IUser[]>,
    /**
     * @param {number} role_id id of role
     */
    role_id: number,
    /**
     * @param {Partial<number[]>} body
     */
    body: Partial<number[]>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUser[]>(
      callback,
      'PUT',
      encodeURI(`/roles/${role_id}/users`),
      null,
      body,
      options,
    )
  }

  /**
   * POST /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]
   */
  async set_user_attribute_group_values(
    callback: (readable: Readable) => Promise<IUserAttributeGroupValue[]>,
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number,
    /**
     * @param {Partial<IUserAttributeGroupValue[]>} body
     */
    body: Partial<IUserAttributeGroupValue[]>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUserAttributeGroupValue[]>(
      callback,
      'POST',
      encodeURI(`/user_attributes/${user_attribute_id}/group_values`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /users/{user_id}/attribute_values/{user_attribute_id} -> IUserAttributeWithValue
   */
  async set_user_attribute_user_value(
    callback: (readable: Readable) => Promise<IUserAttributeWithValue>,
    /**
     * @param {number} user_id Id of user
     */
    user_id: number,
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number,
    /**
     * @param {Partial<IWriteUserAttributeWithValue>} body
     */
    body: Partial<IWriteUserAttributeWithValue>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUserAttributeWithValue>(
      callback,
      'PATCH',
      encodeURI(`/users/${user_id}/attribute_values/${user_attribute_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PUT /users/{user_id}/roles -> IRole[]
   */
  async set_user_roles(
    callback: (readable: Readable) => Promise<IRole[]>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {Partial<number[]>} body
     */
    body: Partial<number[]>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRole[]>(
      callback,
      'PUT',
      encodeURI(`/users/${user_id}/roles`),
      { fields },
      body,
      options,
    )
  }

  /**
   * GET /spaces/{space_id} -> ISpace
   */
  async space(
    callback: (readable: Readable) => Promise<ISpace>,
    /**
     * @param {string} space_id Id of space
     */
    space_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISpace>(
      callback,
      'GET',
      encodeURI(`/spaces/${space_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /spaces/{space_id}/ancestors -> ISpace[]
   */
  async space_ancestors(
    callback: (readable: Readable) => Promise<ISpace[]>,
    /**
     * @param {string} space_id Id of space
     */
    space_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISpace[]>(
      callback,
      'GET',
      encodeURI(`/spaces/${space_id}/ancestors`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /spaces/{space_id}/children -> ISpace[]
   */
  async space_children(
    callback: (readable: Readable) => Promise<ISpace[]>,
    request: IRequestSpaceChildren,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISpace[]>(
      callback,
      'GET',
      encodeURI(`/spaces/${request.space_id}/children`),
      {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
      },
      null,
      options,
    )
  }

  /**
   * GET /spaces/{space_id}/children/search -> ISpace[]
   */
  async space_children_search(
    callback: (readable: Readable) => Promise<ISpace[]>,
    request: IRequestSpaceChildrenSearch,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISpace[]>(
      callback,
      'GET',
      encodeURI(`/spaces/${request.space_id}/children/search`),
      { fields: request.fields, sorts: request.sorts, name: request.name },
      null,
      options,
    )
  }

  /**
   * GET /spaces/{space_id}/dashboards -> IDashboard[]
   */
  async space_dashboards(
    callback: (readable: Readable) => Promise<IDashboard[]>,
    /**
     * @param {string} space_id Id of space
     */
    space_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboard[]>(
      callback,
      'GET',
      encodeURI(`/spaces/${space_id}/dashboards`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /spaces/{space_id}/looks -> ILookWithQuery[]
   */
  async space_looks(
    callback: (readable: Readable) => Promise<ILookWithQuery[]>,
    /**
     * @param {string} space_id Id of space
     */
    space_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILookWithQuery[]>(
      callback,
      'GET',
      encodeURI(`/spaces/${space_id}/looks`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /spaces/{space_id}/parent -> ISpace
   */
  async space_parent(
    callback: (readable: Readable) => Promise<ISpace>,
    /**
     * @param {string} space_id Id of space
     */
    space_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISpace>(
      callback,
      'GET',
      encodeURI(`/spaces/${space_id}/parent`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /sql_queries/{slug} -> ISqlQuery
   */
  async sql_query(
    callback: (readable: Readable) => Promise<ISqlQuery>,
    /**
     * @param {string} slug slug of query
     */
    slug: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISqlQuery>(
      callback,
      'GET',
      encodeURI(`/sql_queries/${slug}`),
      null,
      null,
      options,
    )
  }

  /**
   * PATCH /dashboards/{lookml_dashboard_id}/sync -> number[]
   */
  async sync_lookml_dashboard(
    callback: (readable: Readable) => Promise<number[]>,
    /**
     * @param {string} lookml_dashboard_id Id of LookML dashboard, in the form 'model::dashboardname'
     */
    lookml_dashboard_id: string,
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body: Partial<IWriteDashboard>,
    /**
     * @param {boolean} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
     */
    raw_locale?: boolean,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<number[]>(
      callback,
      'PATCH',
      encodeURI(`/dashboards/${lookml_dashboard_id}/sync`),
      { raw_locale },
      body,
      options,
    )
  }

  /**
   * PUT /connections/{connection_name}/test -> IDBConnectionTestResult[]
   */
  async test_connection(
    callback: (readable: Readable) => Promise<IDBConnectionTestResult[]>,
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name: string,
    /**
     * @param {DelimArray<string>} tests Array of names of tests to run
     */
    tests?: DelimArray<string>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDBConnectionTestResult[]>(
      callback,
      'PUT',
      encodeURI(`/connections/${connection_name}/test`),
      { tests },
      null,
      options,
    )
  }

  /**
   * PUT /connections/test -> IDBConnectionTestResult[]
   */
  async test_connection_config(
    callback: (readable: Readable) => Promise<IDBConnectionTestResult[]>,
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body: Partial<IWriteDBConnection>,
    /**
     * @param {DelimArray<string>} tests Array of names of tests to run
     */
    tests?: DelimArray<string>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDBConnectionTestResult[]>(
      callback,
      'PUT',
      '/connections/test',
      { tests },
      body,
      options,
    )
  }

  /**
   * POST /integrations/{integration_id}/test -> IIntegrationTestResult
   */
  async test_integration(
    callback: (readable: Readable) => Promise<IIntegrationTestResult>,
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id: number,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IIntegrationTestResult>(
      callback,
      'POST',
      encodeURI(`/integrations/${integration_id}/test`),
      null,
      null,
      options,
    )
  }

  /**
   * PUT /ldap_config/test_auth -> ILDAPConfigTestResult
   */
  async test_ldap_config_auth(
    callback: (readable: Readable) => Promise<ILDAPConfigTestResult>,
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body: Partial<IWriteLDAPConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILDAPConfigTestResult>(
      callback,
      'PUT',
      '/ldap_config/test_auth',
      null,
      body,
      options,
    )
  }

  /**
   * PUT /ldap_config/test_connection -> ILDAPConfigTestResult
   */
  async test_ldap_config_connection(
    callback: (readable: Readable) => Promise<ILDAPConfigTestResult>,
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body: Partial<IWriteLDAPConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILDAPConfigTestResult>(
      callback,
      'PUT',
      '/ldap_config/test_connection',
      null,
      body,
      options,
    )
  }

  /**
   * PUT /ldap_config/test_user_auth -> ILDAPConfigTestResult
   */
  async test_ldap_config_user_auth(
    callback: (readable: Readable) => Promise<ILDAPConfigTestResult>,
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body: Partial<IWriteLDAPConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILDAPConfigTestResult>(
      callback,
      'PUT',
      '/ldap_config/test_user_auth',
      null,
      body,
      options,
    )
  }

  /**
   * PUT /ldap_config/test_user_info -> ILDAPConfigTestResult
   */
  async test_ldap_config_user_info(
    callback: (readable: Readable) => Promise<ILDAPConfigTestResult>,
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body: Partial<IWriteLDAPConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILDAPConfigTestResult>(
      callback,
      'PUT',
      '/ldap_config/test_user_info',
      null,
      body,
      options,
    )
  }

  /**
   * GET /themes/{theme_id} -> ITheme
   */
  async theme(
    callback: (readable: Readable) => Promise<ITheme>,
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ITheme>(
      callback,
      'GET',
      encodeURI(`/themes/${theme_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /themes/theme_or_default -> ITheme
   */
  async theme_or_default(
    callback: (readable: Readable) => Promise<ITheme>,
    /**
     * @param {string} name Name of theme
     */
    name: string,
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts?: Date,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ITheme>(
      callback,
      'GET',
      '/themes/theme_or_default',
      { name, ts },
      null,
      options,
    )
  }

  /**
   * PATCH /backup_configuration -> IBackupConfiguration
   */
  async update_backup_configuration(
    callback: (readable: Readable) => Promise<IBackupConfiguration>,
    /**
     * @param {Partial<IWriteBackupConfiguration>} body
     */
    body: Partial<IWriteBackupConfiguration>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IBackupConfiguration>(
      callback,
      'PATCH',
      '/backup_configuration',
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /color_collections/{collection_id} -> IColorCollection
   */
  async update_color_collection(
    callback: (readable: Readable) => Promise<IColorCollection>,
    /**
     * @param {string} collection_id Id of Custom Color Collection
     */
    collection_id: string,
    /**
     * @param {Partial<IWriteColorCollection>} body
     */
    body: Partial<IWriteColorCollection>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IColorCollection>(
      callback,
      'PATCH',
      encodeURI(`/color_collections/${collection_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /connections/{connection_name} -> IDBConnection
   */
  async update_connection(
    callback: (readable: Readable) => Promise<IDBConnection>,
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name: string,
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body: Partial<IWriteDBConnection>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDBConnection>(
      callback,
      'PATCH',
      encodeURI(`/connections/${connection_name}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /content_metadata/{content_metadata_id} -> IContentMeta
   */
  async update_content_metadata(
    callback: (readable: Readable) => Promise<IContentMeta>,
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id: number,
    /**
     * @param {Partial<IWriteContentMeta>} body
     */
    body: Partial<IWriteContentMeta>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IContentMeta>(
      callback,
      'PATCH',
      encodeURI(`/content_metadata/${content_metadata_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PUT /content_metadata_access/{content_metadata_access_id} -> IContentMetaGroupUser
   */
  async update_content_metadata_access(
    callback: (readable: Readable) => Promise<IContentMetaGroupUser>,
    /**
     * @param {number} content_metadata_access_id Id of content metadata access
     */
    content_metadata_access_id: number,
    /**
     * @param {Partial<IContentMetaGroupUser>} body
     */
    body: Partial<IContentMetaGroupUser>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IContentMetaGroupUser>(
      callback,
      'PUT',
      encodeURI(`/content_metadata_access/${content_metadata_access_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /custom_welcome_email -> ICustomWelcomeEmail
   */
  async update_custom_welcome_email(
    callback: (readable: Readable) => Promise<ICustomWelcomeEmail>,
    /**
     * @param {Partial<IWriteCustomWelcomeEmail>} body
     */
    body: Partial<IWriteCustomWelcomeEmail>,
    /**
     * @param {boolean} send_test_welcome_email If true a test email with the content from the request will be sent to the current user after saving
     */
    send_test_welcome_email?: boolean,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICustomWelcomeEmail>(
      callback,
      'PATCH',
      '/custom_welcome_email',
      { send_test_welcome_email },
      body,
      options,
    )
  }

  /**
   * PUT /custom_welcome_email_test -> IWelcomeEmailTest
   */
  async update_custom_welcome_email_test(
    callback: (readable: Readable) => Promise<IWelcomeEmailTest>,
    /**
     * @param {Partial<IWriteWelcomeEmailTest>} body
     */
    body: Partial<IWriteWelcomeEmailTest>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IWelcomeEmailTest>(
      callback,
      'PUT',
      '/custom_welcome_email_test',
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /dashboards/{dashboard_id} -> IDashboard
   */
  async update_dashboard(
    callback: (readable: Readable) => Promise<IDashboard>,
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id: string,
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body: Partial<IWriteDashboard>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboard>(
      callback,
      'PATCH',
      encodeURI(`/dashboards/${dashboard_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /dashboard_elements/{dashboard_element_id} -> IDashboardElement
   */
  async update_dashboard_element(
    callback: (readable: Readable) => Promise<IDashboardElement>,
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id: string,
    /**
     * @param {Partial<IWriteDashboardElement>} body
     */
    body: Partial<IWriteDashboardElement>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardElement>(
      callback,
      'PATCH',
      encodeURI(`/dashboard_elements/${dashboard_element_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter
   */
  async update_dashboard_filter(
    callback: (readable: Readable) => Promise<IDashboardFilter>,
    /**
     * @param {string} dashboard_filter_id Id of dashboard filter
     */
    dashboard_filter_id: string,
    /**
     * @param {Partial<IWriteDashboardFilter>} body
     */
    body: Partial<IWriteDashboardFilter>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardFilter>(
      callback,
      'PATCH',
      encodeURI(`/dashboard_filters/${dashboard_filter_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout
   */
  async update_dashboard_layout(
    callback: (readable: Readable) => Promise<IDashboardLayout>,
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout
     */
    dashboard_layout_id: string,
    /**
     * @param {Partial<IWriteDashboardLayout>} body
     */
    body: Partial<IWriteDashboardLayout>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardLayout>(
      callback,
      'PATCH',
      encodeURI(`/dashboard_layouts/${dashboard_layout_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent
   */
  async update_dashboard_layout_component(
    callback: (readable: Readable) => Promise<IDashboardLayoutComponent>,
    /**
     * @param {string} dashboard_layout_component_id Id of dashboard layout component
     */
    dashboard_layout_component_id: string,
    /**
     * @param {Partial<IWriteDashboardLayoutComponent>} body
     */
    body: Partial<IWriteDashboardLayoutComponent>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDashboardLayoutComponent>(
      callback,
      'PATCH',
      encodeURI(
        `/dashboard_layout_components/${dashboard_layout_component_id}`,
      ),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /datagroups/{datagroup_id} -> IDatagroup
   */
  async update_datagroup(
    callback: (readable: Readable) => Promise<IDatagroup>,
    /**
     * @param {string} datagroup_id ID of datagroup.
     */
    datagroup_id: string,
    /**
     * @param {Partial<IWriteDatagroup>} body
     */
    body: Partial<IWriteDatagroup>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IDatagroup>(
      callback,
      'PATCH',
      encodeURI(`/datagroups/${datagroup_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /folders/{folder_id} -> IFolder
   */
  async update_folder(
    callback: (readable: Readable) => Promise<IFolder>,
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string,
    /**
     * @param {Partial<IWriteUpdateFolder>} body
     */
    body: Partial<IWriteUpdateFolder>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IFolder>(
      callback,
      'PATCH',
      encodeURI(`/folders/${folder_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PUT /projects/{project_id}/git_branch -> IGitBranch
   */
  async update_git_branch(
    callback: (readable: Readable) => Promise<IGitBranch>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {Partial<IWriteGitBranch>} body
     */
    body: Partial<IWriteGitBranch>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGitBranch>(
      callback,
      'PUT',
      encodeURI(`/projects/${project_id}/git_branch`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /groups/{group_id} -> IGroup
   */
  async update_group(
    callback: (readable: Readable) => Promise<IGroup>,
    /**
     * @param {number} group_id Id of group
     */
    group_id: number,
    /**
     * @param {Partial<IWriteGroup>} body
     */
    body: Partial<IWriteGroup>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IGroup>(
      callback,
      'PATCH',
      encodeURI(`/groups/${group_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /homepages/{homepage_id} -> IHomepage
   */
  async update_homepage(
    callback: (readable: Readable) => Promise<IHomepage>,
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id: number,
    /**
     * @param {Partial<IWriteHomepage>} body
     */
    body: Partial<IWriteHomepage>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepage>(
      callback,
      'PATCH',
      encodeURI(`/homepages/${homepage_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /homepage_items/{homepage_item_id} -> IHomepageItem
   */
  async update_homepage_item(
    callback: (readable: Readable) => Promise<IHomepageItem>,
    /**
     * @param {number} homepage_item_id Id of homepage item
     */
    homepage_item_id: number,
    /**
     * @param {Partial<IWriteHomepageItem>} body
     */
    body: Partial<IWriteHomepageItem>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepageItem>(
      callback,
      'PATCH',
      encodeURI(`/homepage_items/${homepage_item_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /homepage_sections/{homepage_section_id} -> IHomepageSection
   */
  async update_homepage_section(
    callback: (readable: Readable) => Promise<IHomepageSection>,
    /**
     * @param {number} homepage_section_id Id of homepage section
     */
    homepage_section_id: number,
    /**
     * @param {Partial<IWriteHomepageSection>} body
     */
    body: Partial<IWriteHomepageSection>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IHomepageSection>(
      callback,
      'PATCH',
      encodeURI(`/homepage_sections/${homepage_section_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /integrations/{integration_id} -> IIntegration
   */
  async update_integration(
    callback: (readable: Readable) => Promise<IIntegration>,
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id: number,
    /**
     * @param {Partial<IWriteIntegration>} body
     */
    body: Partial<IWriteIntegration>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IIntegration>(
      callback,
      'PATCH',
      encodeURI(`/integrations/${integration_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /integration_hubs/{integration_hub_id} -> IIntegrationHub
   */
  async update_integration_hub(
    callback: (readable: Readable) => Promise<IIntegrationHub>,
    /**
     * @param {number} integration_hub_id Id of Integration Hub
     */
    integration_hub_id: number,
    /**
     * @param {Partial<IWriteIntegrationHub>} body
     */
    body: Partial<IWriteIntegrationHub>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IIntegrationHub>(
      callback,
      'PATCH',
      encodeURI(`/integration_hubs/${integration_hub_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /internal_help_resources -> IInternalHelpResources
   */
  async update_internal_help_resources(
    callback: (readable: Readable) => Promise<IInternalHelpResources>,
    /**
     * @param {Partial<IWriteInternalHelpResources>} body
     */
    body: Partial<IWriteInternalHelpResources>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IInternalHelpResources>(
      callback,
      'PATCH',
      '/internal_help_resources',
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /internal_help_resources_content -> IInternalHelpResourcesContent
   */
  async update_internal_help_resources_content(
    callback: (readable: Readable) => Promise<IInternalHelpResourcesContent>,
    /**
     * @param {Partial<IWriteInternalHelpResourcesContent>} body
     */
    body: Partial<IWriteInternalHelpResourcesContent>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IInternalHelpResourcesContent>(
      callback,
      'PATCH',
      '/internal_help_resources_content',
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /ldap_config -> ILDAPConfig
   */
  async update_ldap_config(
    callback: (readable: Readable) => Promise<ILDAPConfig>,
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body: Partial<IWriteLDAPConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILDAPConfig>(
      callback,
      'PATCH',
      '/ldap_config',
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /legacy_features/{legacy_feature_id} -> ILegacyFeature
   */
  async update_legacy_feature(
    callback: (readable: Readable) => Promise<ILegacyFeature>,
    /**
     * @param {number} legacy_feature_id id of legacy feature
     */
    legacy_feature_id: number,
    /**
     * @param {Partial<IWriteLegacyFeature>} body
     */
    body: Partial<IWriteLegacyFeature>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILegacyFeature>(
      callback,
      'PATCH',
      encodeURI(`/legacy_features/${legacy_feature_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /looks/{look_id} -> ILookWithQuery
   */
  async update_look(
    callback: (readable: Readable) => Promise<ILookWithQuery>,
    /**
     * @param {number} look_id Id of look
     */
    look_id: number,
    /**
     * @param {Partial<IWriteLookWithQuery>} body
     */
    body: Partial<IWriteLookWithQuery>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILookWithQuery>(
      callback,
      'PATCH',
      encodeURI(`/looks/${look_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /lookml_models/{lookml_model_name} -> ILookmlModel
   */
  async update_lookml_model(
    callback: (readable: Readable) => Promise<ILookmlModel>,
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name: string,
    /**
     * @param {Partial<IWriteLookmlModel>} body
     */
    body: Partial<IWriteLookmlModel>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ILookmlModel>(
      callback,
      'PATCH',
      encodeURI(`/lookml_models/${lookml_model_name}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /model_sets/{model_set_id} -> IModelSet
   */
  async update_model_set(
    callback: (readable: Readable) => Promise<IModelSet>,
    /**
     * @param {number} model_set_id id of model set
     */
    model_set_id: number,
    /**
     * @param {Partial<IWriteModelSet>} body
     */
    body: Partial<IWriteModelSet>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IModelSet>(
      callback,
      'PATCH',
      encodeURI(`/model_sets/${model_set_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /oidc_config -> IOIDCConfig
   */
  async update_oidc_config(
    callback: (readable: Readable) => Promise<IOIDCConfig>,
    /**
     * @param {Partial<IWriteOIDCConfig>} body
     */
    body: Partial<IWriteOIDCConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IOIDCConfig>(
      callback,
      'PATCH',
      '/oidc_config',
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /password_config -> IPasswordConfig
   */
  async update_password_config(
    callback: (readable: Readable) => Promise<IPasswordConfig>,
    /**
     * @param {Partial<IWritePasswordConfig>} body
     */
    body: Partial<IWritePasswordConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IPasswordConfig>(
      callback,
      'PATCH',
      '/password_config',
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /permission_sets/{permission_set_id} -> IPermissionSet
   */
  async update_permission_set(
    callback: (readable: Readable) => Promise<IPermissionSet>,
    /**
     * @param {number} permission_set_id id of permission set
     */
    permission_set_id: number,
    /**
     * @param {Partial<IWritePermissionSet>} body
     */
    body: Partial<IWritePermissionSet>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IPermissionSet>(
      callback,
      'PATCH',
      encodeURI(`/permission_sets/${permission_set_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /projects/{project_id} -> IProject
   */
  async update_project(
    callback: (readable: Readable) => Promise<IProject>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {Partial<IWriteProject>} body
     */
    body: Partial<IWriteProject>,
    /**
     * @param {string} fields Requested fields
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IProject>(
      callback,
      'PATCH',
      encodeURI(`/projects/${project_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PUT /projects/{root_project_id}/credential/{credential_id} -> IRepositoryCredential
   */
  async update_repository_credential(
    callback: (readable: Readable) => Promise<IRepositoryCredential>,
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id: string,
    /**
     * @param {string} credential_id Credential Id
     */
    credential_id: string,
    /**
     * @param {Partial<IWriteRepositoryCredential>} body
     */
    body: Partial<IWriteRepositoryCredential>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRepositoryCredential>(
      callback,
      'PUT',
      encodeURI(`/projects/${root_project_id}/credential/${credential_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /roles/{role_id} -> IRole
   */
  async update_role(
    callback: (readable: Readable) => Promise<IRole>,
    /**
     * @param {number} role_id id of role
     */
    role_id: number,
    /**
     * @param {Partial<IWriteRole>} body
     */
    body: Partial<IWriteRole>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRole>(
      callback,
      'PATCH',
      encodeURI(`/roles/${role_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /saml_config -> ISamlConfig
   */
  async update_saml_config(
    callback: (readable: Readable) => Promise<ISamlConfig>,
    /**
     * @param {Partial<IWriteSamlConfig>} body
     */
    body: Partial<IWriteSamlConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISamlConfig>(
      callback,
      'PATCH',
      '/saml_config',
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan
   */
  async update_scheduled_plan(
    callback: (readable: Readable) => Promise<IScheduledPlan>,
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id: number,
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body: Partial<IWriteScheduledPlan>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IScheduledPlan>(
      callback,
      'PATCH',
      encodeURI(`/scheduled_plans/${scheduled_plan_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /session -> IApiSession
   */
  async update_session(
    callback: (readable: Readable) => Promise<IApiSession>,
    /**
     * @param {Partial<IWriteApiSession>} body
     */
    body: Partial<IWriteApiSession>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IApiSession>(
      callback,
      'PATCH',
      '/session',
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /session_config -> ISessionConfig
   */
  async update_session_config(
    callback: (readable: Readable) => Promise<ISessionConfig>,
    /**
     * @param {Partial<IWriteSessionConfig>} body
     */
    body: Partial<IWriteSessionConfig>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISessionConfig>(
      callback,
      'PATCH',
      '/session_config',
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /spaces/{space_id} -> ISpace
   */
  async update_space(
    callback: (readable: Readable) => Promise<ISpace>,
    /**
     * @param {string} space_id Id of space
     */
    space_id: string,
    /**
     * @param {Partial<IWriteUpdateSpace>} body
     */
    body: Partial<IWriteUpdateSpace>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISpace>(
      callback,
      'PATCH',
      encodeURI(`/spaces/${space_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /themes/{theme_id} -> ITheme
   */
  async update_theme(
    callback: (readable: Readable) => Promise<ITheme>,
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id: string,
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body: Partial<IWriteTheme>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ITheme>(
      callback,
      'PATCH',
      encodeURI(`/themes/${theme_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /users/{user_id} -> IUser
   */
  async update_user(
    callback: (readable: Readable) => Promise<IUser>,
    /**
     * @param {number} user_id Id of user
     */
    user_id: number,
    /**
     * @param {Partial<IWriteUser>} body
     */
    body: Partial<IWriteUser>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUser>(
      callback,
      'PATCH',
      encodeURI(`/users/${user_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /user_attributes/{user_attribute_id} -> IUserAttribute
   */
  async update_user_attribute(
    callback: (readable: Readable) => Promise<IUserAttribute>,
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number,
    /**
     * @param {Partial<IWriteUserAttribute>} body
     */
    body: Partial<IWriteUserAttribute>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUserAttribute>(
      callback,
      'PATCH',
      encodeURI(`/user_attributes/${user_attribute_id}`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PATCH /groups/{group_id}/attribute_values/{user_attribute_id} -> IUserAttributeGroupValue
   */
  async update_user_attribute_group_value(
    callback: (readable: Readable) => Promise<IUserAttributeGroupValue>,
    /**
     * @param {number} group_id Id of group
     */
    group_id: number,
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number,
    /**
     * @param {Partial<IUserAttributeGroupValue>} body
     */
    body: Partial<IUserAttributeGroupValue>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUserAttributeGroupValue>(
      callback,
      'PATCH',
      encodeURI(`/groups/${group_id}/attribute_values/${user_attribute_id}`),
      null,
      body,
      options,
    )
  }

  /**
   * PATCH /users/{user_id}/credentials_email -> ICredentialsEmail
   */
  async update_user_credentials_email(
    callback: (readable: Readable) => Promise<ICredentialsEmail>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {Partial<IWriteCredentialsEmail>} body
     */
    body: Partial<IWriteCredentialsEmail>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsEmail>(
      callback,
      'PATCH',
      encodeURI(`/users/${user_id}/credentials_email`),
      { fields },
      body,
      options,
    )
  }

  /**
   * PUT /whitelabel_configuration -> IWhitelabelConfiguration
   */
  async update_whitelabel_configuration(
    callback: (readable: Readable) => Promise<IWhitelabelConfiguration>,
    /**
     * @param {Partial<IWriteWhitelabelConfiguration>} body
     */
    body: Partial<IWriteWhitelabelConfiguration>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IWhitelabelConfiguration>(
      callback,
      'PUT',
      '/whitelabel_configuration',
      null,
      body,
      options,
    )
  }

  /**
   * GET /users/{user_id} -> IUser
   */
  async user(
    callback: (readable: Readable) => Promise<IUser>,
    /**
     * @param {number} user_id Id of user
     */
    user_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUser>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /user_attributes/{user_attribute_id} -> IUserAttribute
   */
  async user_attribute(
    callback: (readable: Readable) => Promise<IUserAttribute>,
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUserAttribute>(
      callback,
      'GET',
      encodeURI(`/user_attributes/${user_attribute_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/attribute_values -> IUserAttributeWithValue[]
   */
  async user_attribute_user_values(
    callback: (readable: Readable) => Promise<IUserAttributeWithValue[]>,
    request: IRequestUserAttributeUserValues,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUserAttributeWithValue[]>(
      callback,
      'GET',
      encodeURI(`/users/${request.user_id}/attribute_values`),
      {
        fields: request.fields,
        user_attribute_ids: request.user_attribute_ids,
        all_values: request.all_values,
        include_unset: request.include_unset,
      },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/credentials_api3/{credentials_api3_id} -> ICredentialsApi3
   */
  async user_credentials_api3(
    callback: (readable: Readable) => Promise<ICredentialsApi3>,
    /**
     * @param {number} user_id Id of user
     */
    user_id: number,
    /**
     * @param {number} credentials_api3_id Id of API 3 Credential
     */
    credentials_api3_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsApi3>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/credentials_api3/${credentials_api3_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/credentials_email -> ICredentialsEmail
   */
  async user_credentials_email(
    callback: (readable: Readable) => Promise<ICredentialsEmail>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsEmail>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/credentials_email`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/credentials_embed/{credentials_embed_id} -> ICredentialsEmbed
   */
  async user_credentials_embed(
    callback: (readable: Readable) => Promise<ICredentialsEmbed>,
    /**
     * @param {number} user_id Id of user
     */
    user_id: number,
    /**
     * @param {number} credentials_embed_id Id of Embedding Credential
     */
    credentials_embed_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsEmbed>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/credentials_embed/${credentials_embed_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/credentials_google -> ICredentialsGoogle
   */
  async user_credentials_google(
    callback: (readable: Readable) => Promise<ICredentialsGoogle>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsGoogle>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/credentials_google`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/credentials_ldap -> ICredentialsLDAP
   */
  async user_credentials_ldap(
    callback: (readable: Readable) => Promise<ICredentialsLDAP>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsLDAP>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/credentials_ldap`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/credentials_looker_openid -> ICredentialsLookerOpenid
   */
  async user_credentials_looker_openid(
    callback: (readable: Readable) => Promise<ICredentialsLookerOpenid>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsLookerOpenid>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/credentials_looker_openid`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/credentials_oidc -> ICredentialsOIDC
   */
  async user_credentials_oidc(
    callback: (readable: Readable) => Promise<ICredentialsOIDC>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsOIDC>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/credentials_oidc`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/credentials_saml -> ICredentialsSaml
   */
  async user_credentials_saml(
    callback: (readable: Readable) => Promise<ICredentialsSaml>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsSaml>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/credentials_saml`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/credentials_totp -> ICredentialsTotp
   */
  async user_credentials_totp(
    callback: (readable: Readable) => Promise<ICredentialsTotp>,
    /**
     * @param {number} user_id id of user
     */
    user_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ICredentialsTotp>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/credentials_totp`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/credential/{credential_type}/{credential_id} -> IUser
   */
  async user_for_credential(
    callback: (readable: Readable) => Promise<IUser>,
    /**
     * @param {string} credential_type Type name of credential
     */
    credential_type: string,
    /**
     * @param {string} credential_id Id of credential
     */
    credential_id: string,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IUser>(
      callback,
      'GET',
      encodeURI(`/users/credential/${credential_type}/${credential_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/roles -> IRole[]
   */
  async user_roles(
    callback: (readable: Readable) => Promise<IRole[]>,
    request: IRequestUserRoles,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IRole[]>(
      callback,
      'GET',
      encodeURI(`/users/${request.user_id}/roles`),
      {
        fields: request.fields,
        direct_association_only: request.direct_association_only,
      },
      null,
      options,
    )
  }

  /**
   * GET /users/{user_id}/sessions/{session_id} -> ISession
   */
  async user_session(
    callback: (readable: Readable) => Promise<ISession>,
    /**
     * @param {number} user_id Id of user
     */
    user_id: number,
    /**
     * @param {number} session_id Id of Web Login Session
     */
    session_id: number,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<ISession>(
      callback,
      'GET',
      encodeURI(`/users/${user_id}/sessions/${session_id}`),
      { fields },
      null,
      options,
    )
  }

  /**
   * POST /projects/{project_id}/validate -> IProjectValidation
   */
  async validate_project(
    callback: (readable: Readable) => Promise<IProjectValidation>,
    /**
     * @param {string} project_id Project Id
     */
    project_id: string,
    /**
     * @param {string} fields Requested fields
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IProjectValidation>(
      callback,
      'POST',
      encodeURI(`/projects/${project_id}/validate`),
      { fields },
      null,
      options,
    )
  }

  /**
   * POST /themes/validate -> IValidationError
   */
  async validate_theme(
    callback: (readable: Readable) => Promise<IValidationError>,
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body: Partial<IWriteTheme>,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IValidationError>(
      callback,
      'POST',
      '/themes/validate',
      null,
      body,
      options,
    )
  }

  /**
   * GET /versions -> IApiVersion
   */
  async versions(
    callback: (readable: Readable) => Promise<IApiVersion>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IApiVersion>(
      callback,
      'GET',
      '/versions',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /whitelabel_configuration -> IWhitelabelConfiguration
   */
  async whitelabel_configuration(
    callback: (readable: Readable) => Promise<IWhitelabelConfiguration>,
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IWhitelabelConfiguration>(
      callback,
      'GET',
      '/whitelabel_configuration',
      { fields },
      null,
      options,
    )
  }

  /**
   * GET /workspaces/{workspace_id} -> IWorkspace
   */
  async workspace(
    callback: (readable: Readable) => Promise<IWorkspace>,
    /**
     * @param {string} workspace_id Id of the workspace
     */
    workspace_id: string,
    options?: Partial<ITransportSettings>,
  ) {
    return this.authStream<IWorkspace>(
      callback,
      'GET',
      encodeURI(`/workspaces/${workspace_id}`),
      null,
      null,
      options,
    )
  }
}
