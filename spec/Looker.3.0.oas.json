{
  "openapi": "3.0.0",
  "info": {
    "version": "3.0.0",
    "x-looker-release-version": "7.17.0",
    "title": "Looker API 3.0 (Legacy) Reference",
    "description": "### 3.0 Legacy API\n\nLooker API 3.0 is stable and will continue to be supported for the foreseeable future.\nNo new features will be added to API 3.0; all new development (Looker features and\ndev tools) will appear in API 4.0 only.\n\n",
    "contact": { "name": "Looker Team", "url": "https://help.looker.com" },
    "license": { "name": "EULA", "url": "http://localhost:9999/eula" }
  },
  "tags": [
    { "name": "ApiAuth", "description": "API Authentication" },
    {
      "name": "Auth",
      "description": "Manage User Authentication Configuration"
    },
    { "name": "Config", "description": "Manage General Configuration" },
    { "name": "Connection", "description": "Manage Database Connections" },
    { "name": "Content", "description": "Manage Content" },
    { "name": "Dashboard", "description": "Manage Dashboards" },
    { "name": "DataAction", "description": "Run Data Actions" },
    { "name": "Datagroup", "description": "Manage Datagroups" },
    { "name": "Group", "description": "Manage Groups" },
    { "name": "Homepage", "description": "Manage Homepage" },
    { "name": "Integration", "description": "Manage Integrations" },
    { "name": "Look", "description": "Run and Manage Looks" },
    { "name": "LookmlModel", "description": "Manage LookML Models" },
    { "name": "Project", "description": "Manage Projects" },
    { "name": "Query", "description": "Run and Manage Queries" },
    { "name": "RenderTask", "description": "Manage Render Tasks" },
    { "name": "Role", "description": "Manage Roles" },
    { "name": "RunningQueries", "description": "Manage Running Queries" },
    { "name": "ScheduledPlan", "description": "Manage Scheduled Plans" },
    { "name": "Session", "description": "Session Information" },
    { "name": "Space", "description": "Manage Spaces" },
    { "name": "SqlQuery", "description": "Run and Manage SQL Runner Queries" },
    { "name": "User", "description": "Manage Users" },
    { "name": "UserAttribute", "description": "Manage User Attributes" },
    { "name": "Workspace", "description": "Manage Workspaces" }
  ],
  "paths": {
    "/query_tasks": {
      "post": {
        "tags": ["Query"],
        "operationId": "create_query_task",
        "summary": "Run Query Async",
        "description": "### Create an async query task\n\nCreates a query task (job) to run a previously created query asynchronously. Returns a Query Task ID.\n\nUse [query_task(query_task_id)](#!/Query/query_task) to check the execution status of the query task.\nAfter the query task status reaches \"Complete\", use [query_task_results(query_task_id)](#!/Query/query_task_results) to fetch the results of the query.\n",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Row limit (may override the limit in the saved query).",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "apply_formatting",
            "in": "query",
            "description": "Apply model-specified formatting to each result.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "apply_vis",
            "in": "query",
            "description": "Apply visualization options to results.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "cache",
            "in": "query",
            "description": "Get results from cache if available.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "image_width",
            "in": "query",
            "description": "Render width for image formats.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "image_height",
            "in": "query",
            "description": "Render height for image formats.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "generate_drill_links",
            "in": "query",
            "description": "Generate drill links (only applicable to 'json_detail' format.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "force_production",
            "in": "query",
            "description": "Force use of production models even if the user is in development mode.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "cache_only",
            "in": "query",
            "description": "Retrieve any results from cache even if the results have expired.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "path_prefix",
            "in": "query",
            "description": "Prefix to use for drill links (url encoded).",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "rebuild_pdts",
            "in": "query",
            "description": "Rebuild PDTS used in query.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "server_table_calcs",
            "in": "query",
            "description": "Perform table calculations on query results",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateQueryTask" }
            }
          },
          "description": "Query parameters",
          "required": true
        },
        "responses": {
          "200": {
            "description": "query_task",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QueryTask" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/query_tasks/multi_results": {
      "get": {
        "tags": ["Query"],
        "operationId": "query_task_multi_results",
        "summary": "Get Multiple Async Query Results",
        "description": "### Fetch results of multiple async queries\n\nReturns the results of multiple async queries in one request.\n\nFor Query Tasks that are not completed, the response will include the execution status of the Query Task but will not include query results.\nQuery Tasks whose results have expired will have a status of 'expired'.\nIf the user making the API request does not have sufficient privileges to view a Query Task result, the result will have a status of 'missing'\n",
        "parameters": [
          {
            "name": "query_task_ids",
            "in": "query",
            "description": "List of Query Task IDs",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Multiple query results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { "type": "string" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/query_tasks/{query_task_id}": {
      "get": {
        "tags": ["Query"],
        "operationId": "query_task",
        "summary": "Get Async Query Info",
        "description": "### Get Query Task details\n\nUse this function to check the status of an async query task. After the status\nreaches \"Complete\", you can call [query_task_results(query_task_id)](#!/Query/query_task_results) to\nretrieve the results of the query.\n\nUse [create_query_task()](#!/Query/create_query_task) to create an async query task.\n",
        "parameters": [
          {
            "name": "query_task_id",
            "in": "path",
            "description": "ID of the Query Task",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "query_task",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QueryTask" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/query_tasks/{query_task_id}/results": {
      "get": {
        "tags": ["Query"],
        "operationId": "query_task_results",
        "summary": "Get Async Query Results",
        "description": "### Get Async Query Results\n\nReturns the results of an async query task if the query has completed.\n\nIf the query task is still running or waiting to run, this function returns 204 No Content.\n\nIf the query task ID is invalid or the cached results of the query task have expired, this function returns 404 Not Found.\n\nUse [query_task(query_task_id)](#!/Query/query_task) to check the execution status of the query task\nCall query_task_results only after the query task status reaches \"Complete\".\n\nYou can also use [query_task_multi_results()](#!/Query/query_task_multi_results) retrieve the\nresults of multiple async query tasks at the same time.\n\n#### SQL Error Handling:\nIf the query fails due to a SQL db error, how this is communicated depends on the result_format you requested in `create_query_task()`.\n\nFor `json_detail` result_format: `query_task_results()` will respond with HTTP status '200 OK' and db SQL error info\nwill be in the `errors` property of the response object. The 'data' property will be empty.\n\nFor all other result formats: `query_task_results()` will respond with HTTP status `400 Bad Request` and some db SQL error info\nwill be in the message of the 400 error response, but not as detailed as expressed in `json_detail.errors`.\nThese data formats can only carry row data, and error info is not row data.\n",
        "parameters": [
          {
            "name": "query_task_id",
            "in": "path",
            "description": "ID of the Query Task",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The query results.",
            "content": {
              "text": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "204": {
            "description": "The query is not finished",
            "content": {
              "text": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "The Query Task Id was not found or the results have expired.",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/queries/{query_id}": {
      "get": {
        "tags": ["Query"],
        "operationId": "query",
        "summary": "Get Query",
        "description": "### Get a previously created query by id.\n\nA Looker query object includes the various parameters that define a database query that has been run or\ncould be run in the future. These parameters include: model, view, fields, filters, pivots, etc.\nQuery *results* are not part of the query object.\n\nQuery objects are unique and immutable. Query objects are created automatically in Looker as users explore data.\nLooker does not delete them; they become part of the query history. When asked to create a query for\nany given set of parameters, Looker will first try to find an existing query object with matching\nparameters and will only create a new object when an appropriate object can not be found.\n\nThis 'get' method is used to get the details about a query for a given id. See the other methods here\nto 'create' and 'run' queries.\n\nNote that some fields like 'filter_config' and 'vis_config' etc are specific to how the Looker UI\nbuilds queries and visualizations and are not generally useful for API use. They are not required when\ncreating new queries and can usually just be ignored.\n\n",
        "parameters": [
          {
            "name": "query_id",
            "in": "path",
            "description": "Id of query",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Query",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Query" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "db_query"
      }
    },
    "/queries/slug/{slug}": {
      "get": {
        "tags": ["Query"],
        "operationId": "query_for_slug",
        "summary": "Get Query for Slug",
        "description": "### Get the query for a given query slug.\n\nThis returns the query for the 'slug' in a query share URL.\n\nThe 'slug' is a randomly chosen short string that is used as an alternative to the query's id value\nfor use in URLs etc. This method exists as a convenience to help you use the API to 'find' queries that\nhave been created using the Looker UI.\n\nYou can use the Looker explore page to build a query and then choose the 'Share' option to\nshow the share url for the query. Share urls generally look something like 'https://looker.yourcompany/x/vwGSbfc'.\nThe trailing 'vwGSbfc' is the share slug. You can pass that string to this api method to get details about the query.\nThose details include the 'id' that you can use to run the query. Or, you can copy the query body\n(perhaps with your own modification) and use that as the basis to make/run new queries.\n\nThis will also work with slugs from Looker explore urls like\n'https://looker.yourcompany/explore/ecommerce/orders?qid=aogBgL6o3cKK1jN3RoZl5s'. In this case\n'aogBgL6o3cKK1jN3RoZl5s' is the slug.\n",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "Slug of query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Query",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Query" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "db_query"
      }
    },
    "/queries": {
      "post": {
        "tags": ["Query"],
        "operationId": "create_query",
        "summary": "Create Query",
        "description": "### Create a query.\n\nThis allows you to create a new query that you can later run. Looker queries are immutable once created\nand are not deleted. If you create a query that is exactly like an existing query then the existing query\nwill be returned and no new query will be created. Whether a new query is created or not, you can use\nthe 'id' in the returned query with the 'run' method.\n\nThe query parameters are passed as json in the body of the request.\n\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Query" }
            }
          },
          "description": "Query",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Query",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Query" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "db_query"
      }
    },
    "/queries/{query_id}/run/{result_format}": {
      "get": {
        "tags": ["Query"],
        "operationId": "run_query",
        "summary": "Run Query",
        "description": "### Run a saved query.\n\nThis runs a previously saved query. You can use this on a query that was generated in the Looker UI\nor one that you have explicitly created using the API. You can also use a query 'id' from a saved 'Look'.\n\nThe 'result_format' parameter specifies the desired structure and format of the response.\n\nSupported formats:\n\n| result_format | Description\n| :-----------: | :--- |\n| json | Plain json\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| md | Simple markdown\n| xlsx | MS Excel spreadsheet\n| sql | Returns the generated SQL rather than running the query\n| png | A PNG image of the visualization of the query\n| jpg | A JPG image of the visualization of the query\n\n\n",
        "parameters": [
          {
            "name": "query_id",
            "in": "path",
            "description": "Id of query",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "result_format",
            "in": "path",
            "description": "Format of result",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Row limit (may override the limit in the saved query).",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "apply_formatting",
            "in": "query",
            "description": "Apply model-specified formatting to each result.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "apply_vis",
            "in": "query",
            "description": "Apply visualization options to results.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "cache",
            "in": "query",
            "description": "Get results from cache if available.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "image_width",
            "in": "query",
            "description": "Render width for image formats.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "image_height",
            "in": "query",
            "description": "Render height for image formats.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "generate_drill_links",
            "in": "query",
            "description": "Generate drill links (only applicable to 'json_detail' format.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "force_production",
            "in": "query",
            "description": "Force use of production models even if the user is in development mode.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "cache_only",
            "in": "query",
            "description": "Retrieve any results from cache even if the results have expired.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "path_prefix",
            "in": "query",
            "description": "Prefix to use for drill links (url encoded).",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "rebuild_pdts",
            "in": "query",
            "description": "Rebuild PDTS used in query.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "server_table_calcs",
            "in": "query",
            "description": "Perform table calculations on query results",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Query",
            "content": {
              "text": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "image/png": { "schema": { "type": "string" } },
              "image/jpeg": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "text": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "db_query"
      }
    },
    "/queries/run/{result_format}": {
      "post": {
        "tags": ["Query"],
        "operationId": "run_inline_query",
        "summary": "Run Inline Query",
        "description": "### Run the query that is specified inline in the posted body.\n\nThis allows running a query as defined in json in the posted body. This combines\nthe two actions of posting & running a query into one step.\n\nHere is an example body in json:\n```\n{\n  \"model\":\"thelook\",\n  \"view\":\"inventory_items\",\n  \"fields\":[\"category.name\",\"inventory_items.days_in_inventory_tier\",\"products.count\"],\n  \"filters\":{\"category.name\":\"socks\"},\n  \"sorts\":[\"products.count desc 0\"],\n  \"limit\":\"500\",\n  \"query_timezone\":\"America/Los_Angeles\"\n}\n```\n\nWhen using the Ruby SDK this would be passed as a Ruby hash like:\n```\n{\n :model=>\"thelook\",\n :view=>\"inventory_items\",\n :fields=>\n  [\"category.name\",\n   \"inventory_items.days_in_inventory_tier\",\n   \"products.count\"],\n :filters=>{:\"category.name\"=>\"socks\"},\n :sorts=>[\"products.count desc 0\"],\n :limit=>\"500\",\n :query_timezone=>\"America/Los_Angeles\",\n}\n```\n\nThis will return the result of running the query in the format specified by the 'result_format' parameter.\n\nSupported formats:\n\n| result_format | Description\n| :-----------: | :--- |\n| json | Plain json\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| md | Simple markdown\n| xlsx | MS Excel spreadsheet\n| sql | Returns the generated SQL rather than running the query\n| png | A PNG image of the visualization of the query\n| jpg | A JPG image of the visualization of the query\n\n\n",
        "parameters": [
          {
            "name": "result_format",
            "in": "path",
            "description": "Format of result",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Row limit (may override the limit in the saved query).",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "apply_formatting",
            "in": "query",
            "description": "Apply model-specified formatting to each result.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "apply_vis",
            "in": "query",
            "description": "Apply visualization options to results.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "cache",
            "in": "query",
            "description": "Get results from cache if available.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "image_width",
            "in": "query",
            "description": "Render width for image formats.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "image_height",
            "in": "query",
            "description": "Render height for image formats.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "generate_drill_links",
            "in": "query",
            "description": "Generate drill links (only applicable to 'json_detail' format.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "force_production",
            "in": "query",
            "description": "Force use of production models even if the user is in development mode.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "cache_only",
            "in": "query",
            "description": "Retrieve any results from cache even if the results have expired.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "path_prefix",
            "in": "query",
            "description": "Prefix to use for drill links (url encoded).",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "rebuild_pdts",
            "in": "query",
            "description": "Rebuild PDTS used in query.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "server_table_calcs",
            "in": "query",
            "description": "Perform table calculations on query results",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Query" }
            }
          },
          "description": "inline query",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Query Result",
            "content": {
              "text": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "image/png": { "schema": { "type": "string" } },
              "image/jpeg": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "text": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "db_query"
      }
    },
    "/queries/models/{model_name}/views/{view_name}/run/{result_format}": {
      "get": {
        "tags": ["Query"],
        "operationId": "run_url_encoded_query",
        "summary": "Run Url Encoded Query",
        "description": "### Run an URL encoded query.\n\nThis requires the caller to encode the specifiers for the query into the URL query part using\nLooker-specific syntax as explained below.\n\nGenerally, you would want to use one of the methods that takes the parameters as json in the POST body\nfor creating and/or running queries. This method exists for cases where one really needs to encode the\nparameters into the URL of a single 'GET' request. This matches the way that the Looker UI formats\n'explore' URLs etc.\n\nThe parameters here are very similar to the json body formatting except that the filter syntax is\ntricky. Unfortunately, this format makes this method not currently callable via the 'Try it out!' button\nin this documentation page. But, this is callable when creating URLs manually or when using the Looker SDK.\n\nHere is an example inline query URL:\n\n```\nhttps://looker.mycompany.com:19999/api/3.0/queries/models/thelook/views/inventory_items/run/json?fields=category.name,inventory_items.days_in_inventory_tier,products.count&f[category.name]=socks&sorts=products.count+desc+0&limit=500&query_timezone=America/Los_Angeles\n```\n\nWhen invoking this endpoint with the Ruby SDK, pass the query parameter parts as a hash. The hash to match the above would look like:\n\n```ruby\nquery_params =\n{\n  :fields => \"category.name,inventory_items.days_in_inventory_tier,products.count\",\n  :\"f[category.name]\" => \"socks\",\n  :sorts => \"products.count desc 0\",\n  :limit => \"500\",\n  :query_timezone => \"America/Los_Angeles\"\n}\nresponse = ruby_sdk.run_url_encoded_query('thelook','inventory_items','json', query_params)\n\n```\n\nAgain, it is generally easier to use the variant of this method that passes the full query in the POST body.\nThis method is available for cases where other alternatives won't fit the need.\n\nSupported formats:\n\n| result_format | Description\n| :-----------: | :--- |\n| json | Plain json\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| md | Simple markdown\n| xlsx | MS Excel spreadsheet\n| sql | Returns the generated SQL rather than running the query\n| png | A PNG image of the visualization of the query\n| jpg | A JPG image of the visualization of the query\n\n\n",
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "description": "Model name",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "view_name",
            "in": "path",
            "description": "View name",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "result_format",
            "in": "path",
            "description": "Format of result",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Query",
            "content": {
              "text": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "image/png": { "schema": { "type": "string" } },
              "image/jpeg": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "text": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "db_query"
      }
    },
    "/login": {
      "post": {
        "tags": ["ApiAuth"],
        "operationId": "login",
        "summary": "Login",
        "description": "### Present client credentials to obtain an authorization token\n\nLooker API implements the OAuth2 [Resource Owner Password Credentials Grant](https://looker.com/docs/r/api/outh2_resource_owner_pc) pattern.\nThe client credentials required for this login must be obtained by creating an API3 key on a user account\nin the Looker Admin console. The API3 key consists of a public `client_id` and a private `client_secret`.\n\nThe access token returned by `login` must be used in the HTTP Authorization header of subsequent\nAPI requests, like this:\n```\nAuthorization: token 4QDkCyCtZzYgj4C2p2cj3csJH7zqS5RzKs2kTnG4\n```\nReplace \"4QDkCy...\" with the `access_token` value returned by `login`.\nThe word `token` is a string literal and must be included exactly as shown.\n\nThis function can accept `client_id` and `client_secret` parameters as URL query params or as www-form-urlencoded params in the body of the HTTP request. Since there is a small risk that URL parameters may be visible to intermediate nodes on the network route (proxies, routers, etc), passing credentials in the body of the request is considered more secure than URL params.\n\nExample of passing credentials in the HTTP request body:\n````\nPOST HTTP /login\nContent-Type: application/x-www-form-urlencoded\n\nclient_id=CGc9B7v7J48dQSJvxxx&client_secret=nNVS9cSS3xNpSC9JdsBvvvvv\n````\n\n### Best Practice:\nAlways pass credentials in body params. Pass credentials in URL query params **only** when you cannot pass body params due to application, tool, or other limitations.\n\nFor more information and detailed examples of Looker API authorization, see [How to Authenticate to Looker API3](https://github.com/looker/looker-sdk-ruby/blob/master/authentication.md).\n",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "client_id part of API3 Key.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "client_secret",
            "in": "query",
            "description": "client_secret part of API3 Key.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Access token with metadata.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessToken" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "none"
      }
    },
    "/login/{user_id}": {
      "post": {
        "tags": ["ApiAuth"],
        "operationId": "login_user",
        "summary": "Login user",
        "description": "### Create an access token that runs as a given user.\n\nThis can only be called by an authenticated admin user. It allows that admin to generate a new\nauthentication token for the user with the given user id. That token can then be used for subsequent\nAPI calls - which are then performed *as* that target user.\n\nThe target user does *not* need to have a pre-existing API client_id/client_secret pair. And, no such\ncredentials are created by this call.\n\nThis allows for building systems where api user authentication for an arbitrary number of users is done\noutside of Looker and funneled through a single 'service account' with admin permissions. Note that a\nnew access token is generated on each call. If target users are going to be making numerous API\ncalls in a short period then it is wise to cache this authentication token rather than call this before\neach of those API calls.\n\nSee 'login' for more detail on the access token and how to use it.\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user.",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "associative",
            "in": "query",
            "description": "When true (default), API calls using the returned access_token are attributed to the admin user who created the access_token. When false, API activity is attributed to the user the access_token runs as. False requires a looker license.",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Access token with metadata.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessToken" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "none"
      }
    },
    "/logout": {
      "delete": {
        "tags": ["ApiAuth"],
        "operationId": "logout",
        "summary": "Logout",
        "description": "### Logout of the API and invalidate the current access token.\n",
        "responses": {
          "204": {
            "description": "Logged out successfully.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "none"
      }
    },
    "/backup_configuration": {
      "get": {
        "tags": ["Config"],
        "operationId": "backup_configuration",
        "summary": "Get Backup Configuration",
        "description": "### WARNING: The Looker internal database backup function has been deprecated.\n",
        "responses": {
          "200": {
            "description": "Current Backup Configuration",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BackupConfiguration" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Config"],
        "operationId": "update_backup_configuration",
        "summary": "Update Backup Configuration",
        "description": "### WARNING: The Looker internal database backup function has been deprecated.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BackupConfiguration" }
            }
          },
          "description": "Options for Backup Configuration",
          "required": true
        },
        "responses": {
          "200": {
            "description": "New state for specified model set.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BackupConfiguration" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "non_query"
      }
    },
    "/content_favorite/search": {
      "get": {
        "tags": ["Content"],
        "operationId": "search_content_favorites",
        "summary": "Search Favorite Contents",
        "description": "### Search Favorite Content\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "Match user id(s)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return. (used with offset)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of results to skip before returning any. (used with limit)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to sort by.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite Content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ContentFavorite" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/content_favorite/{content_favorite_id}": {
      "get": {
        "tags": ["Content"],
        "operationId": "content_favorite",
        "summary": "Get Favorite Content",
        "description": "### Get favorite content by its id",
        "parameters": [
          {
            "name": "content_favorite_id",
            "in": "path",
            "description": "Id of favorite content",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentFavorite" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Content"],
        "operationId": "delete_content_favorite",
        "summary": "Delete Favorite Content",
        "description": "### Delete favorite content",
        "parameters": [
          {
            "name": "content_favorite_id",
            "in": "path",
            "description": "Id of favorite content",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/content_favorite": {
      "post": {
        "tags": ["Content"],
        "operationId": "create_content_favorite",
        "summary": "Create Favorite Content",
        "description": "### Create favorite content",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ContentFavorite" }
            }
          },
          "description": "Favorite Content",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Favorite Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentFavorite" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/content_metadata": {
      "get": {
        "tags": ["Content"],
        "operationId": "all_content_metadatas",
        "summary": "Get All Content Metadatas",
        "description": "### Get information about all content metadata in a space.\n",
        "parameters": [
          {
            "name": "parent_id",
            "in": "query",
            "description": "Parent space of content.",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Content Metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ContentMeta" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/content_metadata/{content_metadata_id}": {
      "patch": {
        "tags": ["Content"],
        "operationId": "update_content_metadata",
        "summary": "Update Content Metadata",
        "description": "### Move a piece of content.\n",
        "parameters": [
          {
            "name": "content_metadata_id",
            "in": "path",
            "description": "Id of content metadata",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ContentMeta" }
            }
          },
          "description": "Content Metadata",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Content Metadata",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentMeta" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "get": {
        "tags": ["Content"],
        "operationId": "content_metadata",
        "summary": "Get Content Metadata",
        "description": "### Get information about an individual content metadata record.\n",
        "parameters": [
          {
            "name": "content_metadata_id",
            "in": "path",
            "description": "Id of content metadata",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Content Metadata",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentMeta" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/content_metadata_access": {
      "post": {
        "tags": ["Content"],
        "operationId": "create_content_metadata_access",
        "summary": "Create Content Metadata Access",
        "description": "### Create content metadata access.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/ContentMetaGroupUser",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Content Metadata Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMetaGroupUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query",
        "x-looker-rate-limited": true
      },
      "get": {
        "tags": ["Content"],
        "operationId": "all_content_metadata_accesss",
        "summary": "Get All Content Metadata Accesss",
        "description": "### All content metadata access records for a content metadata item.\n",
        "parameters": [
          {
            "name": "content_metadata_id",
            "in": "query",
            "description": "Id of content metadata",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Content Metadata Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentMetaGroupUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/content_metadata_access/{content_metadata_access_id}": {
      "put": {
        "tags": ["Content"],
        "operationId": "update_content_metadata_access",
        "summary": "Update Content Metadata Access",
        "description": "### Update type of access for content metadata.\n",
        "parameters": [
          {
            "name": "content_metadata_access_id",
            "in": "path",
            "description": "Id of content metadata access",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ContentMetaGroupUser",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Content Metadata Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentMetaGroupUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Content"],
        "operationId": "delete_content_metadata_access",
        "summary": "Delete Content Metadata Access",
        "description": "### Remove content metadata access.\n",
        "parameters": [
          {
            "name": "content_metadata_access_id",
            "in": "path",
            "description": "Id of content metadata access",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/content_view/search": {
      "get": {
        "tags": ["Content"],
        "operationId": "search_content_views",
        "summary": "Search Content Views",
        "description": "### Search Content Views\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n",
        "parameters": [
          {
            "name": "view_count",
            "in": "query",
            "description": "Match view count",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "group_id",
            "in": "query",
            "description": "Match Group Id",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "look_id",
            "in": "query",
            "description": "Match look_id",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "dashboard_id",
            "in": "query",
            "description": "Match dashboard_id",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "content_metadata_id",
            "in": "query",
            "description": "Match content metadata id",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "start_of_week_date",
            "in": "query",
            "description": "Match start of week date",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "all_time",
            "in": "query",
            "description": "True if only all time view records should be returned",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Match user id",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return. Use with `offset` to manage pagination of results",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of results to skip before returning data",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to sort by",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Content View",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ContentView" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/dashboards": {
      "get": {
        "tags": ["Dashboard"],
        "operationId": "all_dashboards",
        "summary": "Get All Dashboards",
        "description": "### Get information about all active dashboards.\n\nReturns an array of **abbreviated dashboard objects**. Dashboards marked as deleted are excluded from this list.\n\nGet the **full details** of a specific dashboard by id with [dashboard()](#!/Dashboard/dashboard)\n\nFind **deleted dashboards** with [search_dashboards()](#!/Dashboard/search_dashboards)\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "dashboards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DashboardBase" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Dashboard"],
        "operationId": "create_dashboard",
        "summary": "Create Dashboard",
        "description": "### Create a new dashboard\n\nCreates a new dashboard object and returns the details of the newly created dashboard.\n\n`Title`, `user_id`, and `space_id` are all required fields.\n`Space_id` and `user_id` must contain the id of an existing space or user, respectively.\nA dashboard's `title` must be unique within the space in which it resides.\n\nIf you receive a 422 error response when creating a dashboard, be sure to look at the\nresponse body for information about exactly which fields are missing or contain invalid data.\n\nYou can **update** an existing dashboard with [update_dashboard()](#!/Dashboard/update_dashboard)\n\nYou can **permanently delete** an existing dashboard with [delete_dashboard()](#!/Dashboard/delete_dashboard)\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Dashboard",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dashboard",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Dashboard" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/dashboards/search": {
      "get": {
        "tags": ["Dashboard"],
        "operationId": "search_dashboards",
        "summary": "Search Dashboards",
        "description": "### Search Dashboards\n\nReturns an **array of dashboard objects** that match the specified search criteria.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n\nThe parameters `limit`, and `offset` are recommended for fetching results in page-size chunks.\n\nGet a **single dashboard** by id with [dashboard()](#!/Dashboard/dashboard)\n",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Match dashboard id.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Match dashboard slug.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Match Dashboard title.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Match Dashboard description.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "content_favorite_id",
            "in": "query",
            "description": "Filter on a content favorite id.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "space_id",
            "in": "query",
            "description": "Filter on a particular space.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "description": "Filter on a particular space.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter on dashboards deleted status.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter on dashboards created by a particular user.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "view_count",
            "in": "query",
            "description": "Filter on a particular value of view_count",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return. (used with offset and takes priority over page and per_page)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "One or more fields to sort by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :folder_id, :description, :view_count, :favorite_count, :slug, :content_favorite_id, :content_metadata_id, :deleted, :deleted_at, :last_viewed_at, :last_accessed_at]",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "dashboards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Dashboard" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/dashboards/{lookml_dashboard_id}/import/{space_id}": {
      "post": {
        "tags": ["Dashboard"],
        "operationId": "import_lookml_dashboard",
        "summary": "Import LookML Dashboard",
        "description": "### Import a LookML dashboard to a space as a UDD\nCreates a UDD (a dashboard which exists in the Looker database rather than as a LookML file) from the LookML dashboard\nand puts it in the space specified. The created UDD will have a lookml_link_id which links to the original LookML dashboard.\n\nTo give the imported dashboard specify a (e.g. title: \"my title\") in the body of your request, otherwise the imported\ndashboard will have the same title as the original LookML dashboard.\n\nFor this operation to succeed the user must have permission to see the LookML dashboard in question, and have permission to\ncreate content in the space the dashboard is being imported to.\n\n**Sync** a linked UDD with [sync_lookml_dashboard()](#!/Dashboard/sync_lookml_dashboard)\n**Unlink** a linked UDD by setting lookml_link_id to null with [update_dashboard()](#!/Dashboard/update_dashboard)\n",
        "parameters": [
          {
            "name": "lookml_dashboard_id",
            "in": "path",
            "description": "Id of LookML dashboard",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "space_id",
            "in": "path",
            "description": "Id of space to import the dashboard to",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "raw_locale",
            "in": "query",
            "description": "If true, and this dashboard is localized, export it with the raw keys, not localized.",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Dashboard" }
            }
          },
          "description": "Dashboard",
          "required": false
        },
        "responses": {
          "200": {
            "description": "Dashboard",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Dashboard" }
              }
            }
          },
          "201": {
            "description": "dashboard",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Dashboard" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/dashboards/{lookml_dashboard_id}/sync": {
      "patch": {
        "tags": ["Dashboard"],
        "operationId": "sync_lookml_dashboard",
        "summary": "Sync LookML Dashboard",
        "description": "### Update all linked dashboards to match the specified LookML dashboard.\n\nAny UDD (a dashboard which exists in the Looker database rather than as a LookML file) which has a `lookml_link_id`\nproperty value referring to a LookML dashboard's id (model::dashboardname) will be updated so that it matches the current state of the LookML dashboard.\n\nFor this operation to succeed the user must have permission to view the LookML dashboard, and only linked dashboards\nthat the user has permission to update will be synced.\n\nTo **link** or **unlink** a UDD set the `lookml_link_id` property with [update_dashboard()](#!/Dashboard/update_dashboard)\n",
        "parameters": [
          {
            "name": "lookml_dashboard_id",
            "in": "path",
            "description": "Id of LookML dashboard, in the form 'model::dashboardname'",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "raw_locale",
            "in": "query",
            "description": "If true, and this dashboard is localized, export it with the raw keys, not localized.",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Dashboard",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ids of all the dashboards that were updated by this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer", "format": "int64" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/dashboards/{dashboard_id}": {
      "delete": {
        "tags": ["Dashboard"],
        "operationId": "delete_dashboard",
        "summary": "Delete Dashboard",
        "description": "### Delete the dashboard with the specified id\n\nPermanently **deletes** a dashboard. (The dashboard cannot be recovered after this operation.)\n\n\"Soft\" delete or hide a dashboard by setting its `deleted` status to `True` with [update_dashboard()](#!/Dashboard/update_dashboard).\n\nNote: When a dashboard is deleted in the UI, it is soft deleted. Use this API call to permanently remove it, if desired.\n",
        "parameters": [
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "Id of dashboard",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "405": {
            "description": "Resource Can't Be Modified",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Dashboard"],
        "operationId": "update_dashboard",
        "summary": "Update Dashboard",
        "description": "### Update a dashboard\n\nYou can use this function to change the string and integer properties of\na dashboard. Nested objects such as filters, dashboard elements, or dashboard layout components\ncannot be modified by this function - use the update functions for the respective\nnested object types (like [update_dashboard_filter()](#!/3.1/Dashboard/update_dashboard_filter) to change a filter)\nto modify nested objects referenced by a dashboard.\n\nIf you receive a 422 error response when updating a dashboard, be sure to look at the\nresponse body for information about exactly which fields are missing or contain invalid data.\n",
        "parameters": [
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "Id of dashboard",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Dashboard",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dashboard",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Dashboard" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "405": {
            "description": "Resource Can't Be Modified",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "get": {
        "tags": ["Dashboard"],
        "operationId": "dashboard",
        "summary": "Get Dashboard",
        "description": "### Get information about a dashboard\n\nReturns the full details of the identified dashboard object\n\nGet a **summary list** of all active dashboards with [all_dashboards()](#!/Dashboard/all_dashboards)\n\nYou can **Search** for dashboards with [search_dashboards()](#!/Dashboard/search_dashboards)\n",
        "parameters": [
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "Id of dashboard",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Dashboard" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/dashboards/{dashboard_id}/prefetch": {
      "get": {
        "tags": ["Dashboard"],
        "operationId": "dashboard_prefetch",
        "summary": "Get Dashboard Prefetch",
        "description": "### Get a prefetch for a dashboard with the specified information.\n\n**Deprecated**\nUse [DataGroups](#!/3.1/Datagroup) to manage cache invalidation of groups of queries.\n",
        "parameters": [
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "Id of dashboard",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "dashboard_filters",
            "in": "query",
            "description": "JSON encoded string of Dashboard filters that were applied to prefetch",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PrefetchDashboardFilterValue"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prefetch",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Prefetch" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "db_query"
      },
      "post": {
        "tags": ["Dashboard"],
        "operationId": "create_dashboard_prefetch",
        "summary": "Create Dashboard Prefetch",
        "description": "### Create a prefetch for a dashboard with the specified information.\n\n**Deprecated**\nUse [DataGroups](#!/3.1/Datagroup) to manage cache invalidation of groups of queries.\n",
        "parameters": [
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "Id of dashboard",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrefetchDashboardRequest"
              }
            }
          },
          "description": "Parameters for prefetch request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created Prefetch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrefetchDashboardRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "db_query"
      }
    },
    "/data_actions": {
      "post": {
        "tags": ["DataAction"],
        "operationId": "perform_data_action",
        "summary": "Send a Data Action",
        "description": "Perform a data action. The data action object can be obtained from query results, and used to perform an arbitrary action.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DataActionRequest" }
            }
          },
          "description": "Data Action Request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Data Action Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DataActionResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/data_actions/form": {
      "post": {
        "tags": ["DataAction"],
        "operationId": "fetch_remote_data_action_form",
        "summary": "Fetch Remote Data Action Form",
        "description": "For some data actions, the remote server may supply a form requesting further user input. This endpoint takes a data action, asks the remote server to generate a form for it, and returns that form to you for presentation to the user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { "type": "string" }
              }
            }
          },
          "description": "Data Action Request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Data Action Form",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DataActionForm" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/datagroups": {
      "get": {
        "tags": ["Datagroup"],
        "operationId": "all_datagroups",
        "summary": "Get All Datagroups",
        "description": "### Get information about all datagroups.\n",
        "responses": {
          "200": {
            "description": "Datagroup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Datagroup" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/datagroups/{datagroup_id}": {
      "get": {
        "tags": ["Datagroup"],
        "operationId": "datagroup",
        "summary": "Get Datagroup",
        "description": "### Get information about a datagroup.\n",
        "parameters": [
          {
            "name": "datagroup_id",
            "in": "path",
            "description": "ID of datagroup.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Datagroup",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Datagroup" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Datagroup"],
        "operationId": "update_datagroup",
        "summary": "Update Datagroup",
        "description": "### Update a datagroup using the specified params.\n",
        "parameters": [
          {
            "name": "datagroup_id",
            "in": "path",
            "description": "ID of datagroup.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Datagroup" }
            }
          },
          "description": "Datagroup",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Datagroup",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Datagroup" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/connections": {
      "get": {
        "tags": ["Connection"],
        "operationId": "all_connections",
        "summary": "Get All Connections",
        "description": "### Get information about all connections.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Connection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DBConnection" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Connection"],
        "operationId": "create_connection",
        "summary": "Create Connection",
        "description": "### Create a connection using the specified configuration.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/DBConnection",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Connection",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DBConnection" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/connections/{connection_name}": {
      "get": {
        "tags": ["Connection"],
        "operationId": "connection",
        "summary": "Get Connection",
        "description": "### Get information about a connection.\n",
        "parameters": [
          {
            "name": "connection_name",
            "in": "path",
            "description": "Name of connection",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Connection",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DBConnection" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Connection"],
        "operationId": "update_connection",
        "summary": "Update Connection",
        "description": "### Update a connection using the specified configuration.\n",
        "parameters": [
          {
            "name": "connection_name",
            "in": "path",
            "description": "Name of connection",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DBConnection",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Connection",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DBConnection" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Connection"],
        "operationId": "delete_connection",
        "summary": "Delete Connection",
        "description": "### Delete a connection.\n",
        "parameters": [
          {
            "name": "connection_name",
            "in": "path",
            "description": "Name of connection",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/connections/{connection_name}/connection_override/{override_context}": {
      "delete": {
        "tags": ["Connection"],
        "operationId": "delete_connection_override",
        "summary": "Delete Connection Override",
        "description": "### Delete a connection override.\n",
        "parameters": [
          {
            "name": "connection_name",
            "in": "path",
            "description": "Name of connection",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "override_context",
            "in": "path",
            "description": "Context of connection override",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/connections/{connection_name}/test": {
      "put": {
        "tags": ["Connection"],
        "operationId": "test_connection",
        "summary": "Test Connection",
        "description": "### Test an existing connection.\n\nNote that a connection's 'dialect' property has a 'connection_tests' property that lists the\nspecific types of tests that the connection supports.\n\nThis API is rate limited.\n\nUnsupported tests in the request will be ignored.\n",
        "parameters": [
          {
            "name": "connection_name",
            "in": "path",
            "description": "Name of connection",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "tests",
            "in": "query",
            "description": "Array of names of tests to run",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Test results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DBConnectionTestResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query",
        "x-looker-rate-limited": true
      }
    },
    "/connections/test": {
      "put": {
        "tags": ["Connection"],
        "operationId": "test_connection_config",
        "summary": "Test Connection Configuration",
        "description": "### Test a connection configuration.\n\nNote that a connection's 'dialect' property has a 'connection_tests' property that lists the\nspecific types of tests that the connection supports.\n\nThis API is rate limited.\n\nUnsupported tests in the request will be ignored.\n",
        "parameters": [
          {
            "name": "tests",
            "in": "query",
            "description": "Array of names of tests to run",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DBConnection",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Test results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DBConnectionTestResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query",
        "x-looker-rate-limited": true
      }
    },
    "/dialect_info": {
      "get": {
        "tags": ["Connection"],
        "operationId": "all_dialect_infos",
        "summary": "Get All Dialect Infos",
        "description": "### Get information about all dialects.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Dialect Info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DialectInfo" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/git_branches": {
      "get": {
        "tags": ["Project"],
        "operationId": "all_git_branches",
        "summary": "Get All Git Branches",
        "description": "### Get All Git Branches\n\nReturns a list of git branches in the project repository\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Git Branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/GitBranch" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/git_branch": {
      "get": {
        "tags": ["Project"],
        "operationId": "git_branch",
        "summary": "Get Active Git Branch",
        "description": "### Get the Current Git Branch\n\nReturns the git branch currently checked out in the given project repository\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Git Branch",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GitBranch" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Project"],
        "operationId": "create_git_branch",
        "summary": "Checkout New Git Branch",
        "description": "### Create and Checkout a Git Branch\n\nCreates and checks out a new branch in the given project repository\nOnly allowed in development mode\n  - Call `update_session` to select the 'dev' workspace.\n\nOptionally specify a branch name, tag name or commit SHA as the start point in the ref field.\n  If no ref is specified, HEAD of the current branch will be used as the start point for the new branch.\n\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GitBranch",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Git Branch",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GitBranch" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "put": {
        "tags": ["Project"],
        "operationId": "update_git_branch",
        "summary": "Update Project Git Branch",
        "description": "### Checkout and/or reset --hard an existing Git Branch\n\nOnly allowed in development mode\n  - Call `update_session` to select the 'dev' workspace.\n\nCheckout an existing branch if name field is different from the name of the currently checked out branch.\n\nOptionally specify a branch name, tag name or commit SHA to which the branch should be reset.\n  **DANGER** hard reset will be force pushed to the remote. Unsaved changes and commits may be permanently lost.\n\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GitBranch",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Git Branch",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GitBranch" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/git_branch/{branch_name}": {
      "get": {
        "tags": ["Project"],
        "operationId": "find_git_branch",
        "summary": "Find a Git Branch",
        "description": "### Get the specified Git Branch\n\nReturns the git branch specified in branch_name path param if it exists in the given project repository\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "branch_name",
            "in": "path",
            "description": "Branch Name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Git Branch",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GitBranch" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Project"],
        "operationId": "delete_git_branch",
        "summary": "Delete a Git Branch",
        "description": "### Delete the specified Git Branch\n\nDelete git branch specified in branch_name path param from local and remote of specified project repository\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "branch_name",
            "in": "path",
            "description": "Branch Name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/groups": {
      "get": {
        "tags": ["Group"],
        "operationId": "all_groups",
        "summary": "Get All Groups",
        "description": "### Get information about all groups.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to sort by.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Optional of ids to get specific groups.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int64" }
            }
          },
          {
            "name": "content_metadata_id",
            "in": "query",
            "description": "Id of content metadata to which groups must have access.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "can_add_to_content_metadata",
            "in": "query",
            "description": "Select only groups that either can/cannot be given access to content.",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Group" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Group"],
        "operationId": "create_group",
        "summary": "Create Group",
        "description": "### Creates a new group (admin only).\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Group",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Group" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/groups/{group_id}": {
      "get": {
        "tags": ["Group"],
        "operationId": "group",
        "summary": "Get Group",
        "description": "### Get information about a group.\n",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "Id of group",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Group",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Group" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Group"],
        "operationId": "update_group",
        "summary": "Update Group",
        "description": "### Updates the a group (admin only).",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "Id of group",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Group",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Group" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Group"],
        "operationId": "delete_group",
        "summary": "Delete Group",
        "description": "### Deletes a group (admin only).\n",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "Id of group",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Permission Denied",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/groups/{group_id}/groups": {
      "get": {
        "tags": ["Group"],
        "operationId": "all_group_groups",
        "summary": "Get All Groups in Group",
        "description": "### Get information about all the groups in a group\n",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "Id of group",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "All groups in group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Group" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Group"],
        "operationId": "add_group_group",
        "summary": "Add a Group to Group",
        "description": "### Adds a new group to a group.\n",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "Id of group",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupIdForGroupInclusion"
              }
            }
          },
          "description": "Group id to add",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Added group.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Group" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Permission Denied",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/groups/{group_id}/users": {
      "get": {
        "tags": ["Group"],
        "operationId": "all_group_users",
        "summary": "Get All Users in Group",
        "description": "### Get information about all the users directly included in a group.\n",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "Id of group",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to sort by.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "All users in group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Group"],
        "operationId": "add_group_user",
        "summary": "Add a User to Group",
        "description": "### Adds a new user to a group.\n",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "Id of group",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupIdForGroupUserInclusion"
              }
            }
          },
          "description": "User id to add",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Added user.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Permission Denied",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/groups/{group_id}/users/{user_id}": {
      "delete": {
        "tags": ["Group"],
        "operationId": "delete_group_user",
        "summary": "Remove a User from Group",
        "description": "### Removes a user from a group.\n",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "Id of group",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user to remove from group",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": { "description": "User successfully removed from group" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Permission Denied",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/groups/{group_id}/groups/{deleting_group_id}": {
      "delete": {
        "tags": ["Group"],
        "operationId": "delete_group_from_group",
        "summary": "Deletes a Group from Group",
        "description": "### Removes a group from a group.\n",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "Id of group",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "deleting_group_id",
            "in": "path",
            "description": "Id of group to delete",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": { "description": "Group successfully deleted" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Permission Denied",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/groups/{group_id}/attribute_values/{user_attribute_id}": {
      "patch": {
        "tags": ["Group"],
        "operationId": "update_user_attribute_group_value",
        "summary": "Set User Attribute Group Value",
        "description": "### Set the value of a user attribute for a group.\n\nFor information about how user attribute values are calculated, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).\n",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "Id of group",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "user_attribute_id",
            "in": "path",
            "description": "Id of user attribute",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAttributeGroupValue"
              }
            }
          },
          "description": "New value for group.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group value object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAttributeGroupValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Group"],
        "operationId": "delete_user_attribute_group_value",
        "summary": "Delete User Attribute Group Value",
        "description": "### Remove a user attribute value from a group.\n",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "Id of group",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "user_attribute_id",
            "in": "path",
            "description": "Id of user attribute",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": { "description": "Value successfully unset" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/homepage_items": {
      "get": {
        "tags": ["Homepage"],
        "operationId": "all_homepage_items",
        "summary": "Get All Homepage Items",
        "description": "### Get information about all homepage items.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to sort by.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "homepage_section_id",
            "in": "query",
            "description": "Filter to a specific homepage section",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Homepage Item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/HomepageItem" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Homepage"],
        "operationId": "create_homepage_item",
        "summary": "Create Homepage Item",
        "description": "### Create a new homepage item.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/HomepageItem",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Homepage Item",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HomepageItem" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/homepage_items/{homepage_item_id}": {
      "get": {
        "tags": ["Homepage"],
        "operationId": "homepage_item",
        "summary": "Get Homepage Item",
        "description": "### Get information about a homepage item.\n",
        "parameters": [
          {
            "name": "homepage_item_id",
            "in": "path",
            "description": "Id of homepage item",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Homepage Item",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HomepageItem" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Homepage"],
        "operationId": "update_homepage_item",
        "summary": "Update Homepage Item",
        "description": "### Update a homepage item definition.\n",
        "parameters": [
          {
            "name": "homepage_item_id",
            "in": "path",
            "description": "Id of homepage item",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/HomepageItem",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Homepage Item",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HomepageItem" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Homepage"],
        "operationId": "delete_homepage_item",
        "summary": "Delete Homepage Item",
        "description": "### Delete a homepage item.\n",
        "parameters": [
          {
            "name": "homepage_item_id",
            "in": "path",
            "description": "Id of homepage_item",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/homepage_sections": {
      "get": {
        "tags": ["Homepage"],
        "operationId": "all_homepage_sections",
        "summary": "Get All Homepage sections",
        "description": "### Get information about all homepage sections.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to sort by.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Homepage section",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/HomepageSection" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Homepage"],
        "operationId": "create_homepage_section",
        "summary": "Create Homepage section",
        "description": "### Create a new homepage section.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/HomepageSection",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Homepage section",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HomepageSection" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/homepage_sections/{homepage_section_id}": {
      "get": {
        "tags": ["Homepage"],
        "operationId": "homepage_section",
        "summary": "Get Homepage section",
        "description": "### Get information about a homepage section.\n",
        "parameters": [
          {
            "name": "homepage_section_id",
            "in": "path",
            "description": "Id of homepage section",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Homepage section",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HomepageSection" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Homepage"],
        "operationId": "update_homepage_section",
        "summary": "Update Homepage section",
        "description": "### Update a homepage section definition.\n",
        "parameters": [
          {
            "name": "homepage_section_id",
            "in": "path",
            "description": "Id of homepage section",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/HomepageSection",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Homepage section",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HomepageSection" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Homepage"],
        "operationId": "delete_homepage_section",
        "summary": "Delete Homepage section",
        "description": "### Delete a homepage section.\n",
        "parameters": [
          {
            "name": "homepage_section_id",
            "in": "path",
            "description": "Id of homepage_section",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/integration_hubs": {
      "get": {
        "tags": ["Integration"],
        "operationId": "all_integration_hubs",
        "summary": "Get All Integration Hubs",
        "description": "### Get information about all Integration Hubs.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Integration Hub",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/IntegrationHub" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Integration"],
        "operationId": "create_integration_hub",
        "summary": "Create Integration Hub",
        "description": "### Create a new Integration Hub.\n\nThis API is rate limited to prevent it from being used for SSRF attacks\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/IntegrationHub",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Integration Hub",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IntegrationHub" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query",
        "x-looker-rate-limited": true
      }
    },
    "/integration_hubs/{integration_hub_id}": {
      "get": {
        "tags": ["Integration"],
        "operationId": "integration_hub",
        "summary": "Get Integration Hub",
        "description": "### Get information about a Integration Hub.\n",
        "parameters": [
          {
            "name": "integration_hub_id",
            "in": "path",
            "description": "Id of Integration Hub",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Integration Hub",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IntegrationHub" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Integration"],
        "operationId": "update_integration_hub",
        "summary": "Update Integration Hub",
        "description": "### Update a Integration Hub definition.\n\nThis API is rate limited to prevent it from being used for SSRF attacks\n",
        "parameters": [
          {
            "name": "integration_hub_id",
            "in": "path",
            "description": "Id of Integration Hub",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/IntegrationHub",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Integration Hub",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IntegrationHub" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query",
        "x-looker-rate-limited": true
      },
      "delete": {
        "tags": ["Integration"],
        "operationId": "delete_integration_hub",
        "summary": "Delete Integration Hub",
        "description": "### Delete a Integration Hub.\n",
        "parameters": [
          {
            "name": "integration_hub_id",
            "in": "path",
            "description": "Id of integration_hub",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/integration_hubs/{integration_hub_id}/accept_legal_agreement": {
      "post": {
        "tags": ["Integration"],
        "operationId": "accept_integration_hub_legal_agreement",
        "summary": "Accept Integration Hub Legal Agreement",
        "description": "Accepts the legal agreement for a given integration hub. This only works for integration hubs that have legal_agreement_required set to true and legal_agreement_signed set to false.",
        "parameters": [
          {
            "name": "integration_hub_id",
            "in": "path",
            "description": "Id of integration_hub",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "Integration hub",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IntegrationHub" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/integrations": {
      "get": {
        "tags": ["Integration"],
        "operationId": "all_integrations",
        "summary": "Get All Integrations",
        "description": "### Get information about all Integrations.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "integration_hub_id",
            "in": "query",
            "description": "Filter to a specific provider",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Integration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Integration" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/integrations/{integration_id}": {
      "get": {
        "tags": ["Integration"],
        "operationId": "integration",
        "summary": "Get Integration",
        "description": "### Get information about a Integration.\n",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "description": "Id of integration",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Integration",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Integration" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Integration"],
        "operationId": "update_integration",
        "summary": "Update Integration",
        "description": "### Update parameters on a Integration.\n",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "description": "Id of integration",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Integration" }
            }
          },
          "description": "Integration",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Integration",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Integration" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/integrations/{integration_id}/form": {
      "post": {
        "tags": ["Integration"],
        "operationId": "fetch_integration_form",
        "summary": "Fetch Remote Integration Form",
        "description": "Returns the Integration form for presentation to the user.",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "description": "Id of integration",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { "type": "string" }
              }
            }
          },
          "description": "Integration Form Request",
          "required": false
        },
        "responses": {
          "200": {
            "description": "Data Action Form",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DataActionForm" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/integrations/{integration_id}/test": {
      "post": {
        "tags": ["Integration"],
        "operationId": "test_integration",
        "summary": "Test integration",
        "description": "Tests the integration to make sure all the settings are working.",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "description": "Id of integration",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "Test Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationTestResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/ldap_config": {
      "get": {
        "tags": ["Auth"],
        "operationId": "ldap_config",
        "summary": "Get LDAP Configuration",
        "description": "### Get the LDAP configuration.\n\nLooker can be optionally configured to authenticate users against an Active Directory or other LDAP directory server.\nLDAP setup requires coordination with an administrator of that directory server.\n\nOnly Looker administrators can read and update the LDAP configuration.\n\nConfiguring LDAP impacts authentication for all users. This configuration should be done carefully.\n\nLooker maintains a single LDAP configuration. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\n\nLDAP is enabled or disabled for Looker using the **enabled** field.\n\nLooker will never return an **auth_password** field. That value can be set, but never retrieved.\n\nSee the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup) for additional information.\n",
        "responses": {
          "200": {
            "description": "LDAP Configuration.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LDAPConfig" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Auth"],
        "operationId": "update_ldap_config",
        "summary": "Update LDAP Configuration",
        "description": "### Update the LDAP configuration.\n\nConfiguring LDAP impacts authentication for all users. This configuration should be done carefully.\n\nOnly Looker administrators can read and update the LDAP configuration.\n\nLDAP is enabled or disabled for Looker using the **enabled** field.\n\nIt is **highly** recommended that any LDAP setting changes be tested using the APIs below before being set globally.\n\nSee the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup) for additional information.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/LDAPConfig",
          "required": true
        },
        "responses": {
          "200": {
            "description": "New state for LDAP Configuration.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LDAPConfig" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/ldap_config/test_connection": {
      "put": {
        "tags": ["Auth"],
        "operationId": "test_ldap_config_connection",
        "summary": "Test LDAP Connection",
        "description": "### Test the connection settings for an LDAP configuration.\n\nThis tests that the connection is possible given a connection_host and connection_port.\n\n**connection_host** and **connection_port** are required. **connection_tls** is optional.\n\nExample:\n```json\n{\n  \"connection_host\": \"ldap.example.com\",\n  \"connection_port\": \"636\",\n  \"connection_tls\": true\n}\n```\n\nNo authentication to the LDAP server is attempted.\n\nThe active LDAP settings are not modified.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/LDAPConfig",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result info.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPConfigTestResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/ldap_config/test_auth": {
      "put": {
        "tags": ["Auth"],
        "operationId": "test_ldap_config_auth",
        "summary": "Test LDAP Auth",
        "description": "### Test the connection authentication settings for an LDAP configuration.\n\nThis tests that the connection is possible and that a 'server' account to be used by Looker can       authenticate to the LDAP server given connection and authentication information.\n\n**connection_host**, **connection_port**, and **auth_username**, are required.       **connection_tls** and **auth_password** are optional.\n\nExample:\n```json\n{\n  \"connection_host\": \"ldap.example.com\",\n  \"connection_port\": \"636\",\n  \"connection_tls\": true,\n  \"auth_username\": \"cn=looker,dc=example,dc=com\",\n  \"auth_password\": \"secret\"\n}\n```\n\nLooker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.\n\nThe active LDAP settings are not modified.\n\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/LDAPConfig",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result info.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPConfigTestResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/ldap_config/test_user_info": {
      "put": {
        "tags": ["Auth"],
        "operationId": "test_ldap_config_user_info",
        "summary": "Test LDAP User Info",
        "description": "### Test the user authentication settings for an LDAP configuration without authenticating the user.\n\nThis test will let you easily test the mapping for user properties and roles for any user without      needing to authenticate as that user.\n\nThis test accepts a full LDAP configuration along with a username and attempts to find the full info      for the user from the LDAP server without actually authenticating the user. So, user password is not      required.The configuration is validated before attempting to contact the server.\n\n**test_ldap_user** is required.\n\nThe active LDAP settings are not modified.\n\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/LDAPConfig",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result info.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPConfigTestResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/ldap_config/test_user_auth": {
      "put": {
        "tags": ["Auth"],
        "operationId": "test_ldap_config_user_auth",
        "summary": "Test LDAP User Auth",
        "description": "### Test the user authentication settings for an LDAP configuration.\n\nThis test accepts a full LDAP configuration along with a username/password pair and attempts to       authenticate the user with the LDAP server. The configuration is validated before attempting the       authentication.\n\nLooker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.\n\n**test_ldap_user** and **test_ldap_password** are required.\n\nThe active LDAP settings are not modified.\n\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/LDAPConfig",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result info.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPConfigTestResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/legacy_features": {
      "get": {
        "tags": ["Config"],
        "operationId": "all_legacy_features",
        "summary": "Get All Legacy Features",
        "description": "### Get all legacy features.\n",
        "responses": {
          "200": {
            "description": "Legacy Feature",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LegacyFeature" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/legacy_features/{legacy_feature_id}": {
      "get": {
        "tags": ["Config"],
        "operationId": "legacy_feature",
        "summary": "Get Legacy Feature",
        "description": "### Get information about the legacy feature with a specific id.\n",
        "parameters": [
          {
            "name": "legacy_feature_id",
            "in": "path",
            "description": "id of legacy feature",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "Legacy Feature",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LegacyFeature" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Config"],
        "operationId": "update_legacy_feature",
        "summary": "Update Legacy Feature",
        "description": "### Update information about the legacy feature with a specific id.\n",
        "parameters": [
          {
            "name": "legacy_feature_id",
            "in": "path",
            "description": "id of legacy feature",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LegacyFeature" }
            }
          },
          "description": "Legacy Feature",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Legacy Feature",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LegacyFeature" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/looks": {
      "get": {
        "tags": ["Look"],
        "operationId": "all_looks",
        "summary": "Get All Looks",
        "description": "### Get all the looks.",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Look",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Look" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Look"],
        "operationId": "create_look",
        "summary": "Create Look",
        "description": "### Create a Look\n\nTo create a look to display query data, first create the query with [create_query()](#!/Query/create_query)\nthen assign the query's id to the `query_id` property in the call to `create_look()`.\n\nTo place the look into a particular space, assign the space's id to the `space_id` property\nin the call to `create_look()`.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LookWithQuery",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Look",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LookWithQuery" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/looks/search": {
      "get": {
        "tags": ["Look"],
        "operationId": "search_looks",
        "summary": "Search Looks",
        "description": "### Search Looks\n\nReturns an **array of Look objects** that match the specified search criteria.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n\nGet a **single look** by id with [look(id)](#!/Look/look)\n",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Match Look title.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Match Look description.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "content_favorite_id",
            "in": "query",
            "description": "Select looks with a particular content favorite id",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "space_id",
            "in": "query",
            "description": "Select looks in a particular space.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Select looks created by a particular user.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "view_count",
            "in": "query",
            "description": "Select looks with particular view_count value",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return. (used with offset and takes priority over page and per_page)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "One or more fields to sort results by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :folder_id, :description, :updated_at, :last_updater_id, :view_count, :favorite_count, :content_favorite_id, :deleted, :deleted_at, :last_viewed_at, :last_accessed_at, :query_id]",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "looks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Look" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/looks/{look_id}": {
      "get": {
        "tags": ["Look"],
        "operationId": "look",
        "summary": "Get Look",
        "description": "### Get a Look.\n\nReturns detailed information about a Look and its associated Query.\n\n",
        "parameters": [
          {
            "name": "look_id",
            "in": "path",
            "description": "Id of look",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Look",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LookWithQuery" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Look"],
        "operationId": "update_look",
        "summary": "Update Look",
        "description": "### Modify a Look\n\nUse this function to modify parts of a look. Property values given in a call to `update_look` are\napplied to the existing look, so there's no need to include properties whose values are not changing.\nIt's best to specify only the properties you want to change and leave everything else out\nof your `update_look` call. **Look properties marked 'read-only' will be ignored.**\n\nWhen a user deletes a look in the Looker UI, the look data remains in the database but is\nmarked with a deleted flag (\"soft-deleted\"). Soft-deleted looks can be undeleted (by an admin)\nif the delete was in error.\n\nTo soft-delete a look via the API, use [update_look()](#!/Look/update_look) to change the look's `deleted` property to `true`.\nYou can undelete a look by calling `update_look` to change the look's `deleted` property to `false`.\n\nSoft-deleted looks are excluded from the results of [all_looks()](#!/Look/all_looks) and [search_looks()](#!/Look/search_looks), so they\nessentially disappear from view even though they still reside in the db.\nIn API 3.1 and later, you can pass `deleted: true` as a parameter to [search_looks()](#!/3.1/Look/search_looks) to list soft-deleted looks.\n\nNOTE: [delete_look()](#!/Look/delete_look) performs a \"hard delete\" - the look data is removed from the Looker\ndatabase and destroyed. There is no \"undo\" for `delete_look()`.\n",
        "parameters": [
          {
            "name": "look_id",
            "in": "path",
            "description": "Id of look",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LookWithQuery",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Look",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LookWithQuery" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Look"],
        "operationId": "delete_look",
        "summary": "Delete Look",
        "description": "### Permanently Delete a Look\n\nThis operation **permanently** removes a look from the Looker database.\n\nNOTE: There is no \"undo\" for this kind of delete.\n\nFor information about soft-delete (which can be undone) see [update_look()](#!/Look/update_look).\n",
        "parameters": [
          {
            "name": "look_id",
            "in": "path",
            "description": "Id of look",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/looks/{look_id}/run/{result_format}": {
      "get": {
        "tags": ["Look"],
        "operationId": "run_look",
        "summary": "Run Look",
        "description": "### Run a Look\n\nRuns a given look's query and returns the results in the requested format.\n\nSupported formats:\n\n| result_format | Description\n| :-----------: | :--- |\n| json | Plain json\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| md | Simple markdown\n| xlsx | MS Excel spreadsheet\n| sql | Returns the generated SQL rather than running the query\n| png | A PNG image of the visualization of the query\n| jpg | A JPG image of the visualization of the query\n\n\n",
        "parameters": [
          {
            "name": "look_id",
            "in": "path",
            "description": "Id of look",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "result_format",
            "in": "path",
            "description": "Format of result",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Row limit (may override the limit in the saved query).",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "apply_formatting",
            "in": "query",
            "description": "Apply model-specified formatting to each result.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "apply_vis",
            "in": "query",
            "description": "Apply visualization options to results.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "cache",
            "in": "query",
            "description": "Get results from cache if available.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "image_width",
            "in": "query",
            "description": "Render width for image formats.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "image_height",
            "in": "query",
            "description": "Render height for image formats.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "generate_drill_links",
            "in": "query",
            "description": "Generate drill links (only applicable to 'json_detail' format.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "force_production",
            "in": "query",
            "description": "Force use of production models even if the user is in development mode.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "cache_only",
            "in": "query",
            "description": "Retrieve any results from cache even if the results have expired.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "path_prefix",
            "in": "query",
            "description": "Prefix to use for drill links (url encoded).",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "rebuild_pdts",
            "in": "query",
            "description": "Rebuild PDTS used in query.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "server_table_calcs",
            "in": "query",
            "description": "Perform table calculations on query results",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Look",
            "content": {
              "text": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "image/png": { "schema": { "type": "string" } },
              "image/jpeg": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "text": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "text": { "schema": { "$ref": "#/components/schemas/Error" } },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "db_query"
      }
    },
    "/lookml_models": {
      "get": {
        "tags": ["LookmlModel"],
        "operationId": "all_lookml_models",
        "summary": "Get All LookML Models",
        "description": "### Get information about all lookml models.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "LookML Model",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LookmlModel" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["LookmlModel"],
        "operationId": "create_lookml_model",
        "summary": "Create LookML Model",
        "description": "### Create a lookml model using the specified configuration.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/LookmlModel",
          "required": true
        },
        "responses": {
          "200": {
            "description": "LookML Model",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LookmlModel" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/lookml_models/{lookml_model_name}": {
      "get": {
        "tags": ["LookmlModel"],
        "operationId": "lookml_model",
        "summary": "Get LookML Model",
        "description": "### Get information about a lookml model.\n",
        "parameters": [
          {
            "name": "lookml_model_name",
            "in": "path",
            "description": "Name of lookml model.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "LookML Model",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LookmlModel" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["LookmlModel"],
        "operationId": "update_lookml_model",
        "summary": "Update LookML Model",
        "description": "### Update a lookml model using the specified configuration.\n",
        "parameters": [
          {
            "name": "lookml_model_name",
            "in": "path",
            "description": "Name of lookml model.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LookmlModel",
          "required": true
        },
        "responses": {
          "200": {
            "description": "LookML Model",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LookmlModel" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["LookmlModel"],
        "operationId": "delete_lookml_model",
        "summary": "Delete LookML Model",
        "description": "### Delete a lookml model.\n",
        "parameters": [
          {
            "name": "lookml_model_name",
            "in": "path",
            "description": "Name of lookml model.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/lookml_models/{lookml_model_name}/explores/{explore_name}": {
      "get": {
        "tags": ["LookmlModel"],
        "operationId": "lookml_model_explore",
        "summary": "Get LookML Model Explore",
        "description": "### Get information about a lookml model explore.\n",
        "parameters": [
          {
            "name": "lookml_model_name",
            "in": "path",
            "description": "Name of lookml model.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "explore_name",
            "in": "path",
            "description": "Name of explore.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "LookML Model Explore",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LookmlModelExplore" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/model_sets/{model_set_id}": {
      "get": {
        "tags": ["Role"],
        "operationId": "model_set",
        "summary": "Get Model Set",
        "description": "### Get information about the model set with a specific id.\n",
        "parameters": [
          {
            "name": "model_set_id",
            "in": "path",
            "description": "Id of model set",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Specified model set.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ModelSet" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Role"],
        "operationId": "delete_model_set",
        "summary": "Delete Model Set",
        "description": "### Delete the model set with a specific id.\n",
        "parameters": [
          {
            "name": "model_set_id",
            "in": "path",
            "description": "id of model set",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Model set succssfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "405": {
            "description": "Resource Can't Be Modified",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Role"],
        "operationId": "update_model_set",
        "summary": "Update Model Set",
        "description": "### Update information about the model set with a specific id.\n",
        "parameters": [
          {
            "name": "model_set_id",
            "in": "path",
            "description": "id of model set",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ModelSet",
          "required": true
        },
        "responses": {
          "200": {
            "description": "New state for specified model set.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ModelSet" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "405": {
            "description": "Resource Can't Be Modified",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/model_sets": {
      "get": {
        "tags": ["Role"],
        "operationId": "all_model_sets",
        "summary": "Get All Model Sets",
        "description": "### Get information about all model sets.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "All model sets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ModelSet" }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Role"],
        "operationId": "create_model_set",
        "summary": "Create Model Set",
        "description": "### Create a model set with the specified information. Model sets are used by Roles.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/ModelSet",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created ModelSet",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ModelSet" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/oidc_config": {
      "get": {
        "tags": ["Auth"],
        "operationId": "oidc_config",
        "summary": "Get OIDC Configuration",
        "description": "### Get the OIDC configuration.\n\nLooker can be optionally configured to authenticate users against an OpenID Connect (OIDC)\nauthentication server. OIDC setup requires coordination with an administrator of that server.\n\nOnly Looker administrators can read and update the OIDC configuration.\n\nConfiguring OIDC impacts authentication for all users. This configuration should be done carefully.\n\nLooker maintains a single OIDC configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\n\nOIDC is enabled or disabled for Looker using the **enabled** field.\n",
        "responses": {
          "200": {
            "description": "OIDC Configuration.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OIDCConfig" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Auth"],
        "operationId": "update_oidc_config",
        "summary": "Update OIDC Configuration",
        "description": "### Update the OIDC configuration.\n\nConfiguring OIDC impacts authentication for all users. This configuration should be done carefully.\n\nOnly Looker administrators can read and update the OIDC configuration.\n\nOIDC is enabled or disabled for Looker using the **enabled** field.\n\nIt is **highly** recommended that any OIDC setting changes be tested using the APIs below before being set globally.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OIDCConfig" }
            }
          },
          "description": "OIDC Config",
          "required": true
        },
        "responses": {
          "200": {
            "description": "New state for OIDC Configuration.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OIDCConfig" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/oidc_test_configs/{test_slug}": {
      "get": {
        "tags": ["Auth"],
        "operationId": "oidc_test_config",
        "summary": "Get OIDC Test Configuration",
        "description": "### Get a OIDC test configuration by test_slug.\n",
        "parameters": [
          {
            "name": "test_slug",
            "in": "path",
            "description": "Slug of test config",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OIDC test config.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OIDCConfig" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Auth"],
        "operationId": "delete_oidc_test_config",
        "summary": "Delete OIDC Test Configuration",
        "description": "### Delete a OIDC test configuration.\n",
        "parameters": [
          {
            "name": "test_slug",
            "in": "path",
            "description": "Slug of test config",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Test config succssfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/oidc_test_configs": {
      "post": {
        "tags": ["Auth"],
        "operationId": "create_oidc_test_config",
        "summary": "Create OIDC Test Configuration",
        "description": "### Create a OIDC test configuration.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OIDCConfig" }
            }
          },
          "description": "OIDC test config",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OIDC test config",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OIDCConfig" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/permissions": {
      "get": {
        "tags": ["Role"],
        "operationId": "all_permissions",
        "summary": "Get All Permissions",
        "description": "### Get all supported permissions.\n",
        "responses": {
          "200": {
            "description": "Permission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Permission" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/permission_sets/{permission_set_id}": {
      "get": {
        "tags": ["Role"],
        "operationId": "permission_set",
        "summary": "Get Permission Set",
        "description": "### Get information about the permission set with a specific id.\n",
        "parameters": [
          {
            "name": "permission_set_id",
            "in": "path",
            "description": "Id of permission set",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission Set",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PermissionSet" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Role"],
        "operationId": "delete_permission_set",
        "summary": "Delete Permission Set",
        "description": "### Delete the permission set with a specific id.\n",
        "parameters": [
          {
            "name": "permission_set_id",
            "in": "path",
            "description": "Id of permission set",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "405": {
            "description": "Resource Can't Be Modified",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Role"],
        "operationId": "update_permission_set",
        "summary": "Update Permission Set",
        "description": "### Update information about the permission set with a specific id.\n",
        "parameters": [
          {
            "name": "permission_set_id",
            "in": "path",
            "description": "id of permission set",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PermissionSet",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Permission Set",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PermissionSet" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "405": {
            "description": "Resource Can't Be Modified",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/permission_sets": {
      "get": {
        "tags": ["Role"],
        "operationId": "all_permission_sets",
        "summary": "Get All Permission Sets",
        "description": "### Get information about all permission sets.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission Set",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PermissionSet" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Role"],
        "operationId": "create_permission_set",
        "summary": "Create Permission Set",
        "description": "### Create a permission set with the specified information. Permission sets are used by Roles.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/PermissionSet",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Permission Set",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PermissionSet" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/deploy_to_production": {
      "post": {
        "tags": ["Project"],
        "operationId": "deploy_to_production",
        "summary": "Deploy To Production",
        "description": "### Deploy LookML from this Development Mode Project to Production\n\nGit must have been configured, must be in dev mode and deploy permission required\n\nDeploy is a two / three step process:\n\n1. Push commits in current branch of dev mode project to the production branch (origin/master).\n   Note a. This step is skipped in read-only projects.\n   Note b. If this step is unsuccessful for any reason (e.g. rejected non-fastforward because production branch has\n             commits not in current branch), subsequent steps will be skipped.\n2. If this is the first deploy of this project, create the production project with git repository.\n3. Pull the production branch into the production project.\n\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Id of project",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "204": {
            "description": "Returns 204 if project was successfully deployed to production, otherwise 400 with an error message"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/reset_to_production": {
      "post": {
        "tags": ["Project"],
        "operationId": "reset_project_to_production",
        "summary": "Reset To Production",
        "description": "### Reset a project to the revision of the project that is in production.\n\n**DANGER** this will delete any changes that have not been pushed to a remote repository.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Id of project",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "204": {
            "description": "Returns 204 if project was successfully reset, otherwise 400 with an error message"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/reset_to_remote": {
      "post": {
        "tags": ["Project"],
        "operationId": "reset_project_to_remote",
        "summary": "Reset To Remote",
        "description": "### Reset a project development branch to the revision of the project that is on the remote.\n\n**DANGER** this will delete any changes that have not been pushed to a remote repository.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Id of project",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "204": {
            "description": "Returns 204 if project was successfully reset, otherwise 400 with an error message"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects": {
      "get": {
        "tags": ["Project"],
        "operationId": "all_projects",
        "summary": "Get All Projects",
        "description": "### Get All Projects\n\nReturns all projects visible to the current user\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Project" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Project"],
        "operationId": "create_project",
        "summary": "Create Project",
        "description": "### Create A Project\n\ndev mode required.\n- Call `update_session` to select the 'dev' workspace.\n\n`name` is required.\n`git_remote_url` is not allowed. To configure Git for the newly created project, follow the instructions in `update_project`.\n\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Project",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}": {
      "get": {
        "tags": ["Project"],
        "operationId": "project",
        "summary": "Get Project",
        "description": "### Get A Project\n\nReturns the project with the given project id\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Project"],
        "operationId": "update_project",
        "summary": "Update Project",
        "description": "### Update Project Configuration\n\nApply changes to a project's configuration.\n\n\n#### Configuring Git for a Project\n\nTo set up a Looker project with a remote git repository, follow these steps:\n\n1. Call `update_session` to select the 'dev' workspace.\n1. Call `create_git_deploy_key` to create a new deploy key for the project\n1. Copy the deploy key text into the remote git repository's ssh key configuration\n1. Call `update_project` to set project's `git_remote_url` ()and `git_service_name`, if necessary).\n\nWhen you modify a project's `git_remote_url`, Looker connects to the remote repository to fetch\nmetadata. The remote git repository MUST be configured with the Looker-generated deploy\nkey for this project prior to setting the project's `git_remote_url`.\n\nTo set up a Looker project with a git repository residing on the Looker server (a 'bare' git repo):\n\n1. Call `update_session` to select the 'dev' workspace.\n1. Call `update_project` setting `git_remote_url` to null and `git_service_name` to \"bare\".\n\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Project",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/manifest": {
      "get": {
        "tags": ["Project"],
        "operationId": "manifest",
        "summary": "Get Manifest",
        "description": "### Get A Projects Manifest object\n\nReturns the project with the given project id\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Manifest",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Manifest" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/git/deploy_key": {
      "post": {
        "tags": ["Project"],
        "operationId": "create_git_deploy_key",
        "summary": "Create Deploy Key",
        "description": "### Create Git Deploy Key\n\nCreate a public/private key pair for authenticating ssh git requests from Looker to a remote git repository\nfor a particular Looker project.\n\nReturns the public key of the generated ssh key pair.\n\nCopy this public key to your remote git repository's ssh keys configuration so that the remote git service can\nvalidate and accept git requests from the Looker server.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": { "text/plain": { "schema": { "type": "string" } } }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "get": {
        "tags": ["Project"],
        "operationId": "git_deploy_key",
        "summary": "Git Deploy Key",
        "description": "### Git Deploy Key\n\nReturns the ssh public key previously created for a project's git repository.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The text of the public key portion of the deploy_key",
            "content": { "text/plain": { "schema": { "type": "string" } } }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/validate": {
      "post": {
        "tags": ["Project"],
        "operationId": "validate_project",
        "summary": "Validate Project",
        "description": "### Validate Project\n\nPerforms lint validation of all lookml files in the project.\nReturns a list of errors found, if any.\n\nValidating the content of all the files in a project can be computationally intensive\nfor large projects. For best performance, call `validate_project(project_id)` only\nwhen you really want to recompute project validation. To quickly display the results of\nthe most recent project validation (without recomputing), use `project_validation_results(project_id)`\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Project validation results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectValidation" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "get": {
        "tags": ["Project"],
        "operationId": "project_validation_results",
        "summary": "Cached Project Validation Results",
        "description": "### Get Cached Project Validation Results\n\nReturns the cached results of a previous project validation calculation, if any.\nReturns http status 204 No Content if no validation results exist.\n\nValidating the content of all the files in a project can be computationally intensive\nfor large projects. Use this API to simply fetch the results of the most recent\nproject validation rather than revalidating the entire project from scratch.\n\nA value of `\"stale\": true` in the response indicates that the project has changed since\nthe cached validation results were computed. The cached validation results may no longer\nreflect the current state of the project.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Project validation results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectValidationCache"
                }
              }
            }
          },
          "204": { "description": "Deleted" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/current_workspace": {
      "get": {
        "tags": ["Project"],
        "operationId": "project_workspace",
        "summary": "Get Project Workspace",
        "description": "### Get Project Workspace\n\nReturns information about the state of the project files in the currently selected workspace\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Project Workspace",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectWorkspace" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/files": {
      "get": {
        "tags": ["Project"],
        "operationId": "all_project_files",
        "summary": "Get All Project Files",
        "description": "### Get All Project Files\n\nReturns a list of the files in the project\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Project File",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ProjectFile" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/files/file": {
      "get": {
        "tags": ["Project"],
        "operationId": "project_file",
        "summary": "Get Project File",
        "description": "### Get Project File Info\n\nReturns information about a file in the project\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "file_id",
            "in": "query",
            "description": "File Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Project File",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectFile" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/git_connection_tests": {
      "get": {
        "tags": ["Project"],
        "operationId": "all_git_connection_tests",
        "summary": "Get All Git Connection Tests",
        "description": "### Get All Git Connection Tests\n\ndev mode required.\n  - Call `update_session` to select the 'dev' workspace.\n\nReturns a list of tests which can be run against a project's (or the dependency project for the provided remote_url) git connection. Call [Run Git Connection Test](#!/Project/run_git_connection_test) to execute each test in sequence.\n\nTests are ordered by increasing specificity. Tests should be run in the order returned because later tests require functionality tested by tests earlier in the test list.\n\nFor example, a late-stage test for write access is meaningless if connecting to the git server (an early test) is failing.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "remote_url",
            "in": "query",
            "description": "(Optional: leave blank for root project) The remote url for remote dependency to test.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Git Connection Test",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/GitConnectionTest" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/projects/{project_id}/git_connection_tests/{test_id}": {
      "get": {
        "tags": ["Project"],
        "operationId": "run_git_connection_test",
        "summary": "Run Git Connection Test",
        "description": "### Run a git connection test\n\nRun the named test on the git service used by this project (or the dependency project for the provided remote_url) and return the result. This\nis intended to help debug git connections when things do not work properly, to give\nmore helpful information about why a git url is not working with Looker.\n\nTests should be run in the order they are returned by [Get All Git Connection Tests](#!/Project/all_git_connection_tests).\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "test_id",
            "in": "path",
            "description": "Test Id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "remote_url",
            "in": "query",
            "description": "(Optional: leave blank for root project) The remote url for remote dependency to test.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Git Connection Test Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitConnectionTestResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/render_tasks/lookml_dashboards/{dashboard_id}/{result_format}": {
      "post": {
        "tags": ["RenderTask"],
        "operationId": "create_lookml_dashboard_render_task",
        "summary": "Create Lookml Dashboard Render Task",
        "description": "### Create a new task to render a lookml dashboard to a document or image.\n\n# DEPRECATED:  Use [create_dashboard_render_task()](#!/RenderTask/create_dashboard_render_task) in API 4.0+\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n",
        "parameters": [
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "Id of lookml dashboard to render",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "result_format",
            "in": "path",
            "description": "Output type: pdf, png, or jpg",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Output width in pixels",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Output height in pixels",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "pdf_paper_size",
            "in": "query",
            "description": "Paper size for pdf. Value can be one of: [\"letter\",\"legal\",\"tabloid\",\"a0\",\"a1\",\"a2\",\"a3\",\"a4\",\"a5\"]",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "pdf_landscape",
            "in": "query",
            "description": "Whether to render pdf in landscape",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateDashboardRenderTask",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Render Task",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RenderTask" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "db_query"
      }
    },
    "/render_tasks/looks/{look_id}/{result_format}": {
      "post": {
        "tags": ["RenderTask"],
        "operationId": "create_look_render_task",
        "summary": "Create Look Render Task",
        "description": "### Create a new task to render a look to an image.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n",
        "parameters": [
          {
            "name": "look_id",
            "in": "path",
            "description": "Id of look to render",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "result_format",
            "in": "path",
            "description": "Output type: png, or jpg",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Output width in pixels",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Output height in pixels",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Render Task",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RenderTask" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/render_tasks/queries/{query_id}/{result_format}": {
      "post": {
        "tags": ["RenderTask"],
        "operationId": "create_query_render_task",
        "summary": "Create Query Render Task",
        "description": "### Create a new task to render an existing query to an image.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n",
        "parameters": [
          {
            "name": "query_id",
            "in": "path",
            "description": "Id of the query to render",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "result_format",
            "in": "path",
            "description": "Output type: png or jpg",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Output width in pixels",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Output height in pixels",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Render Task",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RenderTask" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/render_tasks/dashboards/{dashboard_id}/{result_format}": {
      "post": {
        "tags": ["RenderTask"],
        "operationId": "create_dashboard_render_task",
        "summary": "Create Dashboard Render Task",
        "description": "### Create a new task to render a dashboard to a document or image.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n",
        "parameters": [
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "Id of dashboard to render",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "result_format",
            "in": "path",
            "description": "Output type: pdf, png, or jpg",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Output width in pixels",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Output height in pixels",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "pdf_paper_size",
            "in": "query",
            "description": "Paper size for pdf. Value can be one of: [\"letter\",\"legal\",\"tabloid\",\"a0\",\"a1\",\"a2\",\"a3\",\"a4\",\"a5\"]",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "pdf_landscape",
            "in": "query",
            "description": "Whether to render pdf in landscape paper orientation",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateDashboardRenderTask",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Render Task",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RenderTask" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/render_tasks/{render_task_id}": {
      "get": {
        "tags": ["RenderTask"],
        "operationId": "render_task",
        "summary": "Get Render Task",
        "description": "### Get information about a render task.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n",
        "parameters": [
          {
            "name": "render_task_id",
            "in": "path",
            "description": "Id of render task",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Render Task",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RenderTask" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/render_tasks/{render_task_id}/results": {
      "get": {
        "tags": ["RenderTask"],
        "operationId": "render_task_results",
        "summary": "Render Task Results",
        "description": "### Get the document or image produced by a completed render task.\n\nReturns `102 Processing` if the render task has not completed.\n",
        "parameters": [
          {
            "name": "render_task_id",
            "in": "path",
            "description": "Id of render task",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "102": { "description": "Processing" },
          "200": {
            "description": "Document or image",
            "content": {
              "image/jpeg": { "schema": { "type": "string" } },
              "image/png": { "schema": { "type": "string" } },
              "application/pdf": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/pdf": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "image/jpeg": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "image/png": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/pdf": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/roles": {
      "get": {
        "tags": ["Role"],
        "operationId": "all_roles",
        "summary": "Get All Roles",
        "description": "### Get information about all roles.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Optional list of ids to get specific roles.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int64" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Role" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Role"],
        "operationId": "create_role",
        "summary": "Create Role",
        "description": "### Create a role with the specified information.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Role",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Role" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/roles/{role_id}": {
      "get": {
        "tags": ["Role"],
        "operationId": "role",
        "summary": "Get Role",
        "description": "### Get information about the role with a specific id.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "id of role",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "Role",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Role" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Role"],
        "operationId": "delete_role",
        "summary": "Delete Role",
        "description": "### Delete the role with a specific id.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "id of role",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "405": {
            "description": "Resource Can't Be Modified",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Role"],
        "operationId": "update_role",
        "summary": "Update Role",
        "description": "### Update information about the role with a specific id.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "id of role",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Role",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Role" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "405": {
            "description": "Resource Can't Be Modified",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/roles/{role_id}/groups": {
      "get": {
        "tags": ["Role"],
        "operationId": "role_groups",
        "summary": "Get Role Groups",
        "description": "### Get information about all the groups with the role that has a specific id.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "id of role",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Groups with role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Group" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "put": {
        "tags": ["Role"],
        "operationId": "set_role_groups",
        "summary": "Update Role Groups",
        "description": "### Set all groups for a role, removing all existing group associations from that role.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "Id of Role",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "integer", "format": "int64" }
              }
            }
          },
          "description": "Array of Group Ids",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Groups with role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Group" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/roles/{role_id}/users": {
      "get": {
        "tags": ["Role"],
        "operationId": "role_users",
        "summary": "Get Role Users",
        "description": "### Get information about all the users with the role that has a specific id.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "direct_association_only",
            "in": "query",
            "description": "Get only users associated directly with the role: exclude those only associated through groups.",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Users with role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "put": {
        "tags": ["Role"],
        "operationId": "set_role_users",
        "summary": "Update Role Users",
        "description": "### Set all the users of the role with a specific id.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "id of role",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "integer", "format": "int64" }
              }
            }
          },
          "description": "array of user ids for role",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Users with role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Permission Denied",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "405": {
            "description": "Resource Can't Be Modified",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/running_queries": {
      "get": {
        "tags": ["RunningQueries"],
        "operationId": "all_running_queries",
        "summary": "Get All Running Queries",
        "description": "Get information about all running queries.\n",
        "responses": {
          "200": {
            "description": "Running Queries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/RunningQueries" }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "db_query"
      }
    },
    "/running_queries/{query_task_id}": {
      "delete": {
        "tags": ["RunningQueries"],
        "operationId": "kill_query",
        "summary": "Kill Running Query",
        "description": "Kill a query with a specific query_task_id.\n",
        "parameters": [
          {
            "name": "query_task_id",
            "in": "path",
            "description": "Query task id.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Query successfully killed.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "db_query"
      }
    },
    "/saml_config": {
      "get": {
        "tags": ["Auth"],
        "operationId": "saml_config",
        "summary": "Get SAML Configuration",
        "description": "### Get the SAML configuration.\n\nLooker can be optionally configured to authenticate users against a SAML authentication server.\nSAML setup requires coordination with an administrator of that server.\n\nOnly Looker administrators can read and update the SAML configuration.\n\nConfiguring SAML impacts authentication for all users. This configuration should be done carefully.\n\nLooker maintains a single SAML configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\n\nSAML is enabled or disabled for Looker using the **enabled** field.\n",
        "responses": {
          "200": {
            "description": "SAML Configuration.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SamlConfig" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Auth"],
        "operationId": "update_saml_config",
        "summary": "Update SAML Configuration",
        "description": "### Update the SAML configuration.\n\nConfiguring SAML impacts authentication for all users. This configuration should be done carefully.\n\nOnly Looker administrators can read and update the SAML configuration.\n\nSAML is enabled or disabled for Looker using the **enabled** field.\n\nIt is **highly** recommended that any SAML setting changes be tested using the APIs below before being set globally.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SamlConfig" }
            }
          },
          "description": "SAML Config",
          "required": true
        },
        "responses": {
          "200": {
            "description": "New state for SAML Configuration.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SamlConfig" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/saml_test_configs/{test_slug}": {
      "get": {
        "tags": ["Auth"],
        "operationId": "saml_test_config",
        "summary": "Get SAML Test Configuration",
        "description": "### Get a SAML test configuration by test_slug.\n",
        "parameters": [
          {
            "name": "test_slug",
            "in": "path",
            "description": "Slug of test config",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "SAML test config.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SamlConfig" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Auth"],
        "operationId": "delete_saml_test_config",
        "summary": "Delete SAML Test Configuration",
        "description": "### Delete a SAML test configuration.\n",
        "parameters": [
          {
            "name": "test_slug",
            "in": "path",
            "description": "Slug of test config",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Test config succssfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/saml_test_configs": {
      "post": {
        "tags": ["Auth"],
        "operationId": "create_saml_test_config",
        "summary": "Create SAML Test Configuration",
        "description": "### Create a SAML test configuration.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SamlConfig" }
            }
          },
          "description": "SAML test config",
          "required": true
        },
        "responses": {
          "200": {
            "description": "SAML test config",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SamlConfig" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/parse_saml_idp_metadata": {
      "post": {
        "tags": ["Auth"],
        "operationId": "parse_saml_idp_metadata",
        "summary": "Parse SAML IdP XML",
        "description": "### Parse the given xml as a SAML IdP metadata document and return the result.\n",
        "requestBody": {
          "content": { "text/plain": { "schema": { "type": "string" } } },
          "description": "SAML IdP metadata xml",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Parse result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SamlMetadataParseResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/fetch_and_parse_saml_idp_metadata": {
      "post": {
        "tags": ["Auth"],
        "operationId": "fetch_and_parse_saml_idp_metadata",
        "summary": "Parse SAML IdP Url",
        "description": "### Fetch the given url and parse it as a SAML IdP metadata document and return the result.\nNote that this requires that the url be public or at least at a location where the Looker instance\ncan fetch it without requiring any special authentication.\n",
        "requestBody": {
          "content": { "text/plain": { "schema": { "type": "string" } } },
          "description": "SAML IdP metadata public url",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Parse result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SamlMetadataParseResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/scheduled_plans/space/{space_id}": {
      "get": {
        "tags": ["ScheduledPlan"],
        "operationId": "scheduled_plans_for_space",
        "summary": "Scheduled Plans for Space",
        "description": "### Get Scheduled Plans for a Space\n\nReturns scheduled plans owned by the caller for a given space id.\n",
        "parameters": [
          {
            "name": "space_id",
            "in": "path",
            "description": "Space Id",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled Plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ScheduledPlan" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/scheduled_plans/{scheduled_plan_id}": {
      "delete": {
        "tags": ["ScheduledPlan"],
        "operationId": "delete_scheduled_plan",
        "summary": "Delete Scheduled Plan",
        "description": "### Delete a Scheduled Plan\n\nNormal users can only delete their own scheduled plans.\nAdmins can delete other users' scheduled plans.\nThis delete cannot be undone.\n",
        "parameters": [
          {
            "name": "scheduled_plan_id",
            "in": "path",
            "description": "Scheduled Plan Id",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      },
      "patch": {
        "tags": ["ScheduledPlan"],
        "operationId": "update_scheduled_plan",
        "summary": "Update Scheduled Plan",
        "description": "### Update a Scheduled Plan\n\nAdmins can update other users' Scheduled Plans.\n\nNote: Any scheduled plan destinations specified in an update will **replace** all scheduled plan destinations\ncurrently defined for the scheduled plan.\n\nFor Example: If a scheduled plan has destinations A, B, and C, and you call update on this scheduled plan\nspecifying only B in the destinations, then destinations A and C will be deleted by the update.\n\nUpdating a scheduled plan to assign null or an empty array to the scheduled_plan_destinations property is an error, as a scheduled plan must always have at least one destination.\n\nIf you omit the scheduled_plan_destinations property from the object passed to update, then the destinations\ndefined on the original scheduled plan will remain unchanged.\n\n#### Email Permissions:\n\nFor details about permissions required to schedule delivery to email and the safeguards\nLooker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).\n\n\n#### Scheduled Plan Destination Formats\n\nScheduled plan destinations must specify the data format to produce and send to the destination.\n\nFormats:\n\n| format | Description\n| :-----------: | :--- |\n| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| xlsx | MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n||\n\nValid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n\n\n",
        "parameters": [
          {
            "name": "scheduled_plan_id",
            "in": "path",
            "description": "Scheduled Plan Id",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ScheduledPlan",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Scheduled Plan",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScheduledPlan" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      },
      "get": {
        "tags": ["ScheduledPlan"],
        "operationId": "scheduled_plan",
        "summary": "Get Scheduled Plan",
        "description": "### Get Information About a Scheduled Plan\n\nAdmins can fetch information about other users' Scheduled Plans.\n",
        "parameters": [
          {
            "name": "scheduled_plan_id",
            "in": "path",
            "description": "Scheduled Plan Id",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled Plan",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScheduledPlan" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/scheduled_plans": {
      "post": {
        "tags": ["ScheduledPlan"],
        "operationId": "create_scheduled_plan",
        "summary": "Create Scheduled Plan",
        "description": "### Create a Scheduled Plan\n\nCreate a scheduled plan to render a Look or Dashboard on a recurring schedule.\n\nTo create a scheduled plan, you MUST provide values for the following fields:\n`name`\nand\n`look_id`, `dashboard_id`, `lookml_dashboard_id`, or `query_id`\nand\n`cron_tab` or `datagroup`\nand\nat least one scheduled_plan_destination\n\nA scheduled plan MUST have at least one scheduled_plan_destination defined.\n\nWhen `look_id` is set, `require_no_results`, `require_results`, and `require_change` are all required.\n\nIf `create_scheduled_plan` fails with a 422 error, be sure to look at the error messages in the response which will explain exactly what fields are missing or values that are incompatible.\n\nThe queries that provide the data for the look or dashboard are run in the context of user account that owns the scheduled plan.\n\nWhen `run_as_recipient` is `false` or not specified, the queries that provide the data for the\nlook or dashboard are run in the context of user account that owns the scheduled plan.\n\nWhen `run_as_recipient` is `true` and all the email recipients are Looker user accounts, the\nqueries are run in the context of each recipient, so different recipients may see different\ndata from the same scheduled render of a look or dashboard. For more details, see [Run As Recipient](https://looker.com/docs/r/admin/run-as-recipient).\n\nAdmins can create and modify scheduled plans on behalf of other users by specifying a user id.\nNon-admin users may not create or modify scheduled plans by or for other users.\n\n#### Email Permissions:\n\nFor details about permissions required to schedule delivery to email and the safeguards\nLooker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).\n\n\n#### Scheduled Plan Destination Formats\n\nScheduled plan destinations must specify the data format to produce and send to the destination.\n\nFormats:\n\n| format | Description\n| :-----------: | :--- |\n| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| xlsx | MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n||\n\nValid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n\n\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/ScheduledPlan",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Scheduled Plan",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScheduledPlan" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      },
      "get": {
        "tags": ["ScheduledPlan"],
        "operationId": "all_scheduled_plans",
        "summary": "Get All Scheduled Plans",
        "description": "### Get All Scheduled Plans\n\nReturns all scheduled plans owned by the caller or given user.\n\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\n\n\nThe caller must have `see_schedules` permission to see other users' scheduled plans.\n\n\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "User Id (default is requesting user if not specified)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled Plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ScheduledPlan" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/scheduled_plans/run_once": {
      "post": {
        "tags": ["ScheduledPlan"],
        "operationId": "scheduled_plan_run_once",
        "summary": "Run Scheduled Plan Once",
        "description": "### Run a Scheduled Plan Immediately\n\nCreate a scheduled plan that runs only once, and immediately.\n\nThis can be useful for testing a Scheduled Plan before committing to a production schedule.\n\nAdmins can create scheduled plans on behalf of other users by specifying a user id.\n\nThis API is rate limited to prevent it from being used for relay spam or DoS attacks\n\n#### Email Permissions:\n\nFor details about permissions required to schedule delivery to email and the safeguards\nLooker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).\n\n\n#### Scheduled Plan Destination Formats\n\nScheduled plan destinations must specify the data format to produce and send to the destination.\n\nFormats:\n\n| format | Description\n| :-----------: | :--- |\n| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| xlsx | MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n||\n\nValid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n\n\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/ScheduledPlan",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Scheduled Plan",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScheduledPlan" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query",
        "x-looker-rate-limited": true
      }
    },
    "/scheduled_plans/look/{look_id}": {
      "get": {
        "tags": ["ScheduledPlan"],
        "operationId": "scheduled_plans_for_look",
        "summary": "Scheduled Plans for Look",
        "description": "### Get Scheduled Plans for a Look\n\nReturns all scheduled plans owned by the caller or given user, for a given look.\n\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\n\n\nThe caller must have `see_schedules` permission to see other users' scheduled plans.\n\n\n",
        "parameters": [
          {
            "name": "look_id",
            "in": "path",
            "description": "Look Id",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User Id (default is requesting user if not specified)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled Plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ScheduledPlan" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/scheduled_plans/dashboard/{dashboard_id}": {
      "get": {
        "tags": ["ScheduledPlan"],
        "operationId": "scheduled_plans_for_dashboard",
        "summary": "Scheduled Plans for Dashboard",
        "description": "### Get Scheduled Plans for a Dashboard\n\nReturns all scheduled plans owned by the caller or given user, for a given dashboard.\n\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\n\n\nThe caller must have `see_schedules` permission to see other users' scheduled plans.\n\n\n",
        "parameters": [
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "Dashboard Id",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User Id (default is requesting user if not specified)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled Plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ScheduledPlan" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/scheduled_plans/lookml_dashboard/{lookml_dashboard_id}": {
      "get": {
        "tags": ["ScheduledPlan"],
        "operationId": "scheduled_plans_for_lookml_dashboard",
        "summary": "Scheduled Plans for LookML Dashboard",
        "description": "### Get Scheduled Plans for a LookML Dashboard\n\nReturns all scheduled plans owned by the caller or given user, for a given LookML dashboard.\n\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\n\n\nThe caller must have `see_schedules` permission to see other users' scheduled plans.\n\n\n",
        "parameters": [
          {
            "name": "lookml_dashboard_id",
            "in": "path",
            "description": "LookML Dashboard Id",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User Id (default is requesting user if not specified)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled Plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ScheduledPlan" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/session": {
      "get": {
        "tags": ["Session"],
        "operationId": "session",
        "summary": "Get Session",
        "description": "### Get API Session\n\nReturns information about the current API session, such as which workspace is selected for the session.\n",
        "responses": {
          "200": {
            "description": "Session",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiSession" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Session"],
        "operationId": "update_session",
        "summary": "Update Session",
        "description": "### Update API Session\n\n#### API Session Workspace\n\nYou can use this endpoint to change the active workspace for the current API session.\n\nOnly one workspace can be active in a session. The active workspace can be changed\nany number of times in a session.\n\nThe default workspace for API sessions is the \"production\" workspace.\n\nAll Looker APIs that use projects or lookml models (such as running queries) will\nuse the version of project and model files defined by this workspace for the lifetime of the\ncurrent API session or until the session workspace is changed again.\n\nAn API session has the same lifetime as the access_token used to authenticate API requests. Each successful\nAPI login generates a new access_token and a new API session.\n\nIf your Looker API client application needs to work in a dev workspace across multiple\nAPI sessions, be sure to select the dev workspace after each login.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ApiSession" }
            }
          },
          "description": "Session",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Session",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiSession" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/spaces/search": {
      "get": {
        "tags": ["Space"],
        "operationId": "search_spaces",
        "summary": "Search Spaces",
        "description": "### Search Spaces\n\n  Returns an **array of space objects** that match the given search criteria.\n\n  If multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n\n  The parameters `limit`, and `offset` are recommended for fetching results in page-size chunks.\n\n  Get a **single space** by id with [Space](#!/Space/space)\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return. (used with offset and takes priority over page and per_page)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to sort by.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Match Space title.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Match Space id",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "parent_id",
            "in": "query",
            "description": "Filter on a children of a particular space.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "creator_id",
            "in": "query",
            "description": "Filter on spaces created by a particular user.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "spaces",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Space" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/spaces/{space_id}": {
      "get": {
        "tags": ["Space"],
        "operationId": "space",
        "summary": "Get Space",
        "description": "### Get information about the space with a specific id.",
        "parameters": [
          {
            "name": "space_id",
            "in": "path",
            "description": "Id of space",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Space",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Space" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["Space"],
        "operationId": "delete_space",
        "summary": "Delete Space",
        "description": "### Delete the space with a specific id including any children spaces.\n**DANGER** this will delete all looks and dashboards in the space.\n",
        "parameters": [
          {
            "name": "space_id",
            "in": "path",
            "description": "Id of space",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["Space"],
        "operationId": "update_space",
        "summary": "Update Space",
        "description": "### Update the space with a specific id.",
        "parameters": [
          {
            "name": "space_id",
            "in": "path",
            "description": "Id of space",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateSpace" }
            }
          },
          "description": "Space parameters",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Space",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Space" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/spaces": {
      "get": {
        "tags": ["Space"],
        "operationId": "all_spaces",
        "summary": "Get All Spaces",
        "description": "### Get information about all spaces.",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Space",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpaceBase" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["Space"],
        "operationId": "create_space",
        "summary": "Create Space",
        "description": "### Create a space with specified information.\n\nCaller must have permission to edit the parent space and to create spaces, otherwise the request\nreturns 404 Not Found.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateSpace" }
            }
          },
          "description": "Create a new space",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Space",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Space" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/spaces/{space_id}/children": {
      "get": {
        "tags": ["Space"],
        "operationId": "space_children",
        "summary": "Get Space Children",
        "description": "### Get the children of a space.",
        "parameters": [
          {
            "name": "space_id",
            "in": "path",
            "description": "Id of space",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to sort by.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Spaces",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Space" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/spaces/{space_id}/children/search": {
      "get": {
        "tags": ["Space"],
        "operationId": "space_children_search",
        "summary": "Search Space Children",
        "description": "### Search the children of a space",
        "parameters": [
          {
            "name": "space_id",
            "in": "path",
            "description": "Id of space",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to sort by.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Match Space name.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Spaces",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Space" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/spaces/{space_id}/parent": {
      "get": {
        "tags": ["Space"],
        "operationId": "space_parent",
        "summary": "Get Space Parent",
        "description": "### Get the parent of a space",
        "parameters": [
          {
            "name": "space_id",
            "in": "path",
            "description": "Id of space",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Space",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Space" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/spaces/{space_id}/ancestors": {
      "get": {
        "tags": ["Space"],
        "operationId": "space_ancestors",
        "summary": "Get Space Ancestors",
        "description": "### Get the ancestors of a space",
        "parameters": [
          {
            "name": "space_id",
            "in": "path",
            "description": "Id of space",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Spaces",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Space" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/spaces/{space_id}/looks": {
      "get": {
        "tags": ["Space"],
        "operationId": "space_looks",
        "summary": "Get Space Looks",
        "description": "### Get the looks in a space",
        "parameters": [
          {
            "name": "space_id",
            "in": "path",
            "description": "Id of space",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Looks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LookWithQuery" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/spaces/{space_id}/dashboards": {
      "get": {
        "tags": ["Space"],
        "operationId": "space_dashboards",
        "summary": "Get Space Dashboards",
        "description": "### Get the dashboards in a space",
        "parameters": [
          {
            "name": "space_id",
            "in": "path",
            "description": "Id of space",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Dashboard" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/sql_queries/{slug}": {
      "get": {
        "tags": ["SqlQuery"],
        "operationId": "sql_query",
        "summary": "Get SQL Runner Query",
        "description": "Get a SQL Runner query.",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "slug of query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "SQL Runner Query",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SqlQuery" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/sql_queries": {
      "post": {
        "tags": ["SqlQuery"],
        "operationId": "create_sql_query",
        "summary": "Create SQL Runner Query",
        "description": "Create a SQL Runner query.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SqlQueryCreate" }
            }
          },
          "description": "SQL Runner Query",
          "required": true
        },
        "responses": {
          "200": {
            "description": "SQL Runner Query",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SqlQuery" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "db_query"
      }
    },
    "/timezones": {
      "get": {
        "tags": ["Config"],
        "operationId": "all_timezones",
        "summary": "Get All Timezones",
        "description": "### Get a list of timezones that Looker supports (e.g. useful for scheduling tasks).\n",
        "responses": {
          "200": {
            "description": "Timezone",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Timezone" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/user_attributes": {
      "get": {
        "tags": ["UserAttribute"],
        "operationId": "all_user_attributes",
        "summary": "Get All User Attributes",
        "description": "### Get information about all user attributes.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to order the results by. Sortable fields include: name, label",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "User Attribute",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserAttribute" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["UserAttribute"],
        "operationId": "create_user_attribute",
        "summary": "Create User Attribute",
        "description": "### Create a new user attribute\n\nPermission information for a user attribute is conveyed through the `can` and `user_can_edit` fields.\nThe `user_can_edit` field indicates whether an attribute is user-editable _anywhere_ in the application.\nThe `can` field gives more granular access information, with the `set_value` child field indicating whether\nan attribute's value can be set by [Setting the User Attribute User Value](#!/User/set_user_attribute_user_value).\n\nNote: `name` and `label` fields must be unique across all user attributes in the Looker instance.\nAttempting to create a new user attribute with a name or label that duplicates an existing\nuser attribute will fail with a 422 error.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserAttribute",
          "required": true
        },
        "responses": {
          "200": {
            "description": "User Attribute",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserAttribute" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/user_attributes/{user_attribute_id}": {
      "get": {
        "tags": ["UserAttribute"],
        "operationId": "user_attribute",
        "summary": "Get User Attribute",
        "description": "### Get information about a user attribute.\n",
        "parameters": [
          {
            "name": "user_attribute_id",
            "in": "path",
            "description": "Id of user attribute",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "User Attribute",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserAttribute" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["UserAttribute"],
        "operationId": "update_user_attribute",
        "summary": "Update User Attribute",
        "description": "### Update a user attribute definition.\n",
        "parameters": [
          {
            "name": "user_attribute_id",
            "in": "path",
            "description": "Id of user attribute",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserAttribute",
          "required": true
        },
        "responses": {
          "200": {
            "description": "User Attribute",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserAttribute" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["UserAttribute"],
        "operationId": "delete_user_attribute",
        "summary": "Delete User Attribute",
        "description": "### Delete a user attribute (admin only).\n",
        "parameters": [
          {
            "name": "user_attribute_id",
            "in": "path",
            "description": "Id of user_attribute",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/user_attributes/{user_attribute_id}/group_values": {
      "get": {
        "tags": ["UserAttribute"],
        "operationId": "all_user_attribute_group_values",
        "summary": "Get User Attribute Group Values",
        "description": "### Returns all values of a user attribute defined by user groups, in precedence order.\n\nA user may be a member of multiple groups which define different values for a given user attribute.\nThe order of group-values in the response determines precedence for selecting which group-value applies\nto a given user.  For more information, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).\n\nResults will only include groups that the caller's user account has permission to see.\n",
        "parameters": [
          {
            "name": "user_attribute_id",
            "in": "path",
            "description": "Id of user attribute",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "All group values for attribute.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAttributeGroupValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["UserAttribute"],
        "operationId": "set_user_attribute_group_values",
        "summary": "Set User Attribute Group Values",
        "description": "### Define values for a user attribute across a set of groups, in priority order.\n\nThis function defines all values for a user attribute defined by user groups. This is a global setting, potentially affecting\nall users in the system. This function replaces any existing group value definitions for the indicated user attribute.\n\nThe value of a user attribute for a given user is determined by searching the following locations, in this order:\n\n1. the user's account settings\n2. the groups that the user is a member of\n3. the default value of the user attribute, if any\n\nThe user may be a member of multiple groups which define different values for that user attribute. The order of items in the group_values parameter\ndetermines which group takes priority for that user. Lowest array index wins.\n\nAn alternate method to indicate the selection precedence of group-values is to assign numbers to the 'rank' property of each\ngroup-value object in the array. Lowest 'rank' value wins. If you use this technique, you must assign a\nrank value to every group-value object in the array.\n\n  To set a user attribute value for a single user, see [Set User Attribute User Value](#!/User/set_user_attribute_user_value).\nTo set a user attribute value for all members of a group, see [Set User Attribute Group Value](#!/Group/update_user_attribute_group_value).\n",
        "parameters": [
          {
            "name": "user_attribute_id",
            "in": "path",
            "description": "Id of user attribute",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserAttributeGroupValue"
                }
              }
            }
          },
          "description": "Array of group values.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Array of group values.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAttributeGroupValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/user": {
      "get": {
        "tags": ["User"],
        "operationId": "me",
        "summary": "Get Current User",
        "description": "### Get information about the current user; i.e. the user account currently calling the API.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Current user.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users": {
      "get": {
        "tags": ["User"],
        "operationId": "all_users",
        "summary": "Get All Users",
        "description": "### Get information about all users.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Requested page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to sort by.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Optional list of ids to get specific users.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int64" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["User"],
        "operationId": "create_user",
        "summary": "Create User",
        "description": "### Create a user with the specified information.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          },
          "description": "User",
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created User",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/search": {
      "get": {
        "tags": ["User"],
        "operationId": "search_users",
        "summary": "Search Users",
        "description": "### Search users\n\nReturns all<sup>*</sup> user records that match the given search criteria.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n\n(<sup>*</sup>) Results are always filtered to the level of information the caller is permitted to view.\nLooker admins can see all user details; normal users in an open system can see\nnames of other users but no details; normal users in a closed system can only see\nnames of other users who are members of the same group as the user.\n\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Include only these fields in the response",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Return only page N of paginated results",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Return N rows of data per page",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to sort by.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Match User Id.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "Match First name.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Match Last name.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "verified_looker_employee",
            "in": "query",
            "description": "Search for user accounts associated with Looker employees",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Search for the user with this email address",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "is_disabled",
            "in": "query",
            "description": "Search for disabled user accounts",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "filter_or",
            "in": "query",
            "description": "Combine given search criteria in a boolean OR expression",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "content_metadata_id",
            "in": "query",
            "description": "Search for users who have access to this content_metadata item",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "group_id",
            "in": "query",
            "description": "Search for users who are direct members of this group",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "Matching users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/search/names/{pattern}": {
      "get": {
        "tags": ["User"],
        "operationId": "search_users_names",
        "summary": "Search User Names",
        "description": "### Search for user accounts by name\n\nReturns all user accounts where `first_name` OR `last_name` OR `email` field values match a pattern.\nThe pattern can contain `%` and `_` wildcards as in SQL LIKE expressions.\n\nAny additional search params will be combined into a logical AND expression.\n",
        "parameters": [
          {
            "name": "pattern",
            "in": "path",
            "description": "Pattern to match",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Include only these fields in the response",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Return only page N of paginated results",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Return N rows of data per page",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "sorts",
            "in": "query",
            "description": "Fields to sort by",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Match User Id",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "Match First name",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Match Last name",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "verified_looker_employee",
            "in": "query",
            "description": "Match Verified Looker employee",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Match Email Address",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "is_disabled",
            "in": "query",
            "description": "Include or exclude disabled accounts in the results",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Matching users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": ["User"],
        "operationId": "user",
        "summary": "Get User by Id",
        "description": "### Get information about the user with a specific id.\n\nIf the caller is an admin or the caller is the user being specified, then full user information will\nbe returned. Otherwise, a minimal 'public' variant of the user information will be returned. This contains\nThe user name and avatar url, but no sensitive information.\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Specified user.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["User"],
        "operationId": "update_user",
        "summary": "Update User",
        "description": "### Update information about the user with a specific id.\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          },
          "description": "User",
          "required": true
        },
        "responses": {
          "200": {
            "description": "New state for specified user.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user",
        "summary": "Delete User",
        "description": "### Delete the user with a specific id.\n\n**DANGER** this will delete the user and all looks and other information owned by the user.\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Permission Denied",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/credential/{credential_type}/{credential_id}": {
      "get": {
        "tags": ["User"],
        "operationId": "user_for_credential",
        "summary": "Get User by Credential Id",
        "description": "### Get information about the user with a credential of given type with specific id.\n\nThis is used to do things like find users by their embed external_user_id. Or, find the user with\na given api3 client_id, etc. The 'credential_type' matchs the 'type' name of the various credential\ntypes. It must be one of the values listed in the table below. The 'credential_id' is your unique Id\nfor the user and is specific to each type of credential.\n\nAn example using the Ruby sdk might look like:\n\n`sdk.user_for_credential('embed', 'customer-4959425')`\n\nThis table shows the supported 'Credential Type' strings. The right column is for reference; it shows\nwhich field in the given credential type is actually searched when finding a user with the supplied\n'credential_id'.\n\n| Credential Types | Id Field Matched |\n| ---------------- | ---------------- |\n| email            | email            |\n| google           | google_user_id   |\n| saml             | saml_user_id     |\n| oidc             | oidc_user_id     |\n| ldap             | ldap_id          |\n| api              | token            |\n| api3             | client_id        |\n| embed            | external_user_id |\n| looker_openid    | email            |\n\nNOTE: The 'api' credential type was only used with the legacy Looker query API and is no longer supported. The credential type for API you are currently looking at is 'api3'.\n\n",
        "parameters": [
          {
            "name": "credential_type",
            "in": "path",
            "description": "Type name of credential",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "credential_id",
            "in": "path",
            "description": "Id of credential",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Specified user.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_email": {
      "get": {
        "tags": ["User"],
        "operationId": "user_credentials_email",
        "summary": "Get Email/Password Credential",
        "description": "### Email/password login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Email/Password Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsEmail" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["User"],
        "operationId": "create_user_credentials_email",
        "summary": "Create Email/Password Credential",
        "description": "### Email/password login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CredentialsEmail",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Email/Password Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsEmail" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["User"],
        "operationId": "update_user_credentials_email",
        "summary": "Update Email/Password Credential",
        "description": "### Email/password login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CredentialsEmail",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Email/Password Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsEmail" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_credentials_email",
        "summary": "Delete Email/Password Credential",
        "description": "### Email/password login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_totp": {
      "get": {
        "tags": ["User"],
        "operationId": "user_credentials_totp",
        "summary": "Get Two-Factor Credential",
        "description": "### Two-factor login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Two-Factor Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsTotp" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["User"],
        "operationId": "create_user_credentials_totp",
        "summary": "Create Two-Factor Credential",
        "description": "### Two-factor login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CredentialsTotp" }
            }
          },
          "description": "Two-Factor Credential",
          "required": false
        },
        "responses": {
          "200": {
            "description": "Two-Factor Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsTotp" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_credentials_totp",
        "summary": "Delete Two-Factor Credential",
        "description": "### Two-factor login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_api": {
      "get": {
        "tags": ["User"],
        "operationId": "user_credentials_api",
        "summary": "Get API Credential",
        "description": "### API login information for the specified user. This is for 'API Users' used for the 'old' query API. THIS FEATURE HAS BEEN REMOVED.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "API Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsApi" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_credentials_api",
        "summary": "Delete API Credential",
        "description": "### API login information for the specified user. This is for 'API Users' used for the 'old' query API. THIS FEATURE HAS BEEN REMOVED.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["User"],
        "operationId": "create_user_credentials_api",
        "summary": "Create API Credential",
        "description": "### Create API Credential.\nSUPPORT FOR THIS HAS BEEN REMOVED.\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CredentialsApi" }
            }
          },
          "description": "API Credential",
          "required": false
        },
        "responses": {
          "200": {
            "description": "API Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsApi" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_ldap": {
      "get": {
        "tags": ["User"],
        "operationId": "user_credentials_ldap",
        "summary": "Get LDAP Credential",
        "description": "### LDAP login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "LDAP Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsLDAP" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_credentials_ldap",
        "summary": "Delete LDAP Credential",
        "description": "### LDAP login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_google": {
      "get": {
        "tags": ["User"],
        "operationId": "user_credentials_google",
        "summary": "Get Google Auth Credential",
        "description": "### Google authentication login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Google Auth Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsGoogle" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_credentials_google",
        "summary": "Delete Google Auth Credential",
        "description": "### Google authentication login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_saml": {
      "get": {
        "tags": ["User"],
        "operationId": "user_credentials_saml",
        "summary": "Get Saml Auth Credential",
        "description": "### Saml authentication login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Saml Auth Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsSaml" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_credentials_saml",
        "summary": "Delete Saml Auth Credential",
        "description": "### Saml authentication login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_oidc": {
      "get": {
        "tags": ["User"],
        "operationId": "user_credentials_oidc",
        "summary": "Get OIDC Auth Credential",
        "description": "### OpenID Connect (OIDC) authentication login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OIDC Auth Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsOIDC" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_credentials_oidc",
        "summary": "Delete OIDC Auth Credential",
        "description": "### OpenID Connect (OIDC) authentication login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_api3/{credentials_api3_id}": {
      "get": {
        "tags": ["User"],
        "operationId": "user_credentials_api3",
        "summary": "Get API 3 Credential",
        "description": "### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "credentials_api3_id",
            "in": "path",
            "description": "Id of API 3 Credential",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "API 3 Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsApi3" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_credentials_api3",
        "summary": "Delete API 3 Credential",
        "description": "### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "credentials_api3_id",
            "in": "path",
            "description": "id of API 3 Credential",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_api3": {
      "get": {
        "tags": ["User"],
        "operationId": "all_user_credentials_api3s",
        "summary": "Get All API 3 Credentials",
        "description": "### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "API 3 Credential",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CredentialsApi3" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["User"],
        "operationId": "create_user_credentials_api3",
        "summary": "Create API 3 Credential",
        "description": "### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CredentialsApi3" }
            }
          },
          "description": "API 3 Credential",
          "required": false
        },
        "responses": {
          "200": {
            "description": "API 3 Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsApi3" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_embed/{credentials_embed_id}": {
      "get": {
        "tags": ["User"],
        "operationId": "user_credentials_embed",
        "summary": "Get Embedding Credential",
        "description": "### Embed login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "credentials_embed_id",
            "in": "path",
            "description": "Id of Embedding Credential",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Embedding Credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsEmbed" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_credentials_embed",
        "summary": "Delete Embedding Credential",
        "description": "### Embed login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "credentials_embed_id",
            "in": "path",
            "description": "id of Embedding Credential",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_embed": {
      "get": {
        "tags": ["User"],
        "operationId": "all_user_credentials_embeds",
        "summary": "Get All Embedding Credentials",
        "description": "### Embed login information for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Embedding Credential",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CredentialsEmbed" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_looker_openid": {
      "get": {
        "tags": ["User"],
        "operationId": "user_credentials_looker_openid",
        "summary": "Get Looker OpenId Credential",
        "description": "### Looker Openid login information for the specified user. Used by Looker Analysts.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Looker OpenId Credential",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsLookerOpenid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_credentials_looker_openid",
        "summary": "Delete Looker OpenId Credential",
        "description": "### Looker Openid login information for the specified user. Used by Looker Analysts.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/sessions/{session_id}": {
      "get": {
        "tags": ["User"],
        "operationId": "user_session",
        "summary": "Get Web Login Session",
        "description": "### Web login session for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "Id of Web Login Session",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Web Login Session",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Session" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_session",
        "summary": "Delete Web Login Session",
        "description": "### Web login session for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "id of Web Login Session",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/sessions": {
      "get": {
        "tags": ["User"],
        "operationId": "all_user_sessions",
        "summary": "Get All Web Login Sessions",
        "description": "### Web login session for the specified user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Web Login Session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Session" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/access_filters/{access_filter_id}": {
      "get": {
        "tags": ["User"],
        "operationId": "user_access_filter",
        "summary": "Get Access Filter",
        "description": "### NOTE: this feature is completely end of life and has been removed from the product.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "access_filter_id",
            "in": "path",
            "description": "Id of Access Filter",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Access Filter",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessFilter" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "non_query"
      },
      "patch": {
        "tags": ["User"],
        "operationId": "update_user_access_filter",
        "summary": "Update Access Filter",
        "description": "### NOTE: this feature is completely end of life and has been removed from the product.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "access_filter_id",
            "in": "path",
            "description": "id of Access Filter",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AccessFilter",
          "required": false
        },
        "responses": {
          "200": {
            "description": "Access Filter",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessFilter" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_access_filter",
        "summary": "Delete Access Filter",
        "description": "### NOTE: this feature is completely end of life and has been removed from the product.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "access_filter_id",
            "in": "path",
            "description": "id of Access Filter",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/access_filters": {
      "get": {
        "tags": ["User"],
        "operationId": "all_user_access_filters",
        "summary": "Get All Access Filters",
        "description": "### NOTE: this feature is completely end of life and has been removed from the product.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Access Filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AccessFilter" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "non_query"
      },
      "post": {
        "tags": ["User"],
        "operationId": "create_user_access_filter",
        "summary": "Create Access Filter",
        "description": "### NOTE: this feature is completely end of life and has been removed from the product.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AccessFilter",
          "required": false
        },
        "responses": {
          "200": {
            "description": "Access Filter",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessFilter" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "deprecated": true,
        "x-looker-status": "deprecated",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/credentials_email/password_reset": {
      "post": {
        "tags": ["User"],
        "operationId": "create_user_credentials_email_password_reset",
        "summary": "Create Password Reset Token",
        "description": "### Create a password reset token.\nThis will create a cryptographically secure random password reset token for the user.\nIf the user already has a password reset token then this invalidates the old token and creates a new one.\nThe token is expressed as the 'password_reset_url' of the user's email/password credential object.\nThis takes an optional 'expires' param to indicate if the new token should be an expiring token.\nTokens that expire are typically used for self-service password resets for existing users.\nInvitation emails for new users typically are not set to expire.\nThe expire period is always 60 minutes when expires is enabled.\nThis method can be called with an empty body.\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "expires",
            "in": "query",
            "description": "Expiring token.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "email/password credential",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CredentialsEmail" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/roles": {
      "get": {
        "tags": ["User"],
        "operationId": "user_roles",
        "summary": "Get User Roles",
        "description": "### Get information about roles of a given user\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "direct_association_only",
            "in": "query",
            "description": "Get only roles associated directly with the user: exclude those only associated through groups.",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Roles of user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Role" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "put": {
        "tags": ["User"],
        "operationId": "set_user_roles",
        "summary": "Set User Roles",
        "description": "### Set roles of the user with a specific id.\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "integer", "format": "int64" }
              }
            }
          },
          "description": "array of roles ids for user",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Roles of user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Role" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/attribute_values": {
      "get": {
        "tags": ["User"],
        "operationId": "user_attribute_user_values",
        "summary": "Get User Attribute Values",
        "description": "### Get user attribute values for a given user.\n\nReturns the values of specified user attributes (or all user attributes) for a certain user.\n\nA value for each user attribute is searched for in the following locations, in this order:\n\n1. in the user's account information\n1. in groups that the user is a member of\n1. the default value of the user attribute\n\nIf more than one group has a value defined for a user attribute, the group with the lowest rank wins.\n\nThe response will only include user attributes for which values were found. Use `include_unset=true` to include\nempty records for user attributes with no value.\n\nThe value of all hidden user attributes will be blank.\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "user_attribute_ids",
            "in": "query",
            "description": "Specific user attributes to request. Omit or leave blank to request all user attributes.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int64" }
            }
          },
          {
            "name": "all_values",
            "in": "query",
            "description": "If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "include_unset",
            "in": "query",
            "description": "If true, returns an empty record for each requested attribute that has no user, group, or default value.",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Value of user attribute.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAttributeWithValue"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/users/{user_id}/attribute_values/{user_attribute_id}": {
      "patch": {
        "tags": ["User"],
        "operationId": "set_user_attribute_user_value",
        "summary": "Set User Attribute User Value",
        "description": "### Store a custom value for a user attribute in a user's account settings.\n\nPer-user user attribute values take precedence over group or default values.\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "user_attribute_id",
            "in": "path",
            "description": "Id of user attribute",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAttributeWithValue"
              }
            }
          },
          "description": "New attribute value for user.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "User attribute value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAttributeWithValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      },
      "delete": {
        "tags": ["User"],
        "operationId": "delete_user_attribute_user_value",
        "summary": "Delete User Attribute User Value",
        "description": "### Delete a user attribute value from a user's account settings.\n\nAfter the user attribute value is deleted from the user's account settings, subsequent requests\nfor the user attribute value for this user will draw from the user's groups or the default\nvalue of the user attribute. See [Get User Attribute Values](#!/User/user_attribute_user_values) for more\ninformation about how user attribute values are resolved.\n",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "user_attribute_id",
            "in": "path",
            "description": "Id of user attribute",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": { "description": "Deleted" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "non_query"
      }
    },
    "/versions": {
      "get": {
        "tags": ["Config"],
        "operationId": "versions",
        "summary": "Get ApiVersion",
        "description": "### Get information about all API versions supported by this Looker instance.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "ApiVersion",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiVersion" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "stable",
        "x-looker-activity-type": "none"
      }
    },
    "/whitelabel_configuration": {
      "get": {
        "tags": ["Config"],
        "operationId": "whitelabel_configuration",
        "summary": "Get Whitelabel configuration",
        "description": "### This feature is enabled only by special license.\n### Gets the whitelabel configuration, which includes hiding documentation links, custom favicon uploading, etc.\n",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Requested fields.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Whitelabel configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhitelabelConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      },
      "put": {
        "tags": ["Config"],
        "operationId": "update_whitelabel_configuration",
        "summary": "Update Whitelabel configuration",
        "description": "### Update the whitelabel configuration\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WhitelabelConfiguration"
              }
            }
          },
          "description": "Whitelabel configuration",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Whitelabel configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhitelabelConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/workspaces": {
      "get": {
        "tags": ["Workspace"],
        "operationId": "all_workspaces",
        "summary": "Get All Workspaces",
        "description": "### Get All Workspaces\n\nReturns all workspaces available to the calling user.\n",
        "responses": {
          "200": {
            "description": "Workspace",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Workspace" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    },
    "/workspaces/{workspace_id}": {
      "get": {
        "tags": ["Workspace"],
        "operationId": "workspace",
        "summary": "Get Workspace",
        "description": "### Get A Workspace\n\nReturns information about a workspace such as the git status and selected branches\nof all projects available to the caller's user account.\n\nA workspace defines which versions of project files will be used to evaluate expressions\nand operations that use model definitions - operations such as running queries or rendering dashboards.\nEach project has its own git repository, and each project in a workspace may be configured to reference\nparticular branch or revision within their respective repositories.\n\nThere are two predefined workspaces available: \"production\" and \"dev\".\n\nThe production workspace is shared across all Looker users. Models in the production workspace are read-only.\nChanging files in production is accomplished by modifying files in a git branch and using Pull Requests\nto merge the changes from the dev branch into the production branch, and then telling\nLooker to sync with production.\n\nThe dev workspace is local to each Looker user. Changes made to project/model files in the dev workspace only affect\nthat user, and only when the dev workspace is selected as the active workspace for the API session.\n(See set_session_workspace()).\n\nThe dev workspace is NOT unique to an API session. Two applications accessing the Looker API using\nthe same user account will see the same files in the dev workspace. To avoid collisions between\nAPI clients it's best to have each client login with API3 credentials for a different user account.\n\nChanges made to files in a dev workspace are persistent across API sessions. It's a good\nidea to commit any changes you've made to the git repository, but not strictly required. Your modified files\nreside in a special user-specific directory on the Looker server and will still be there when you login in again\nlater and use update_session(workspace_id: \"dev\") to select the dev workspace for the new API session.\n",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Id of the workspace ",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Workspace" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "x-looker-status": "beta",
        "x-looker-activity-type": "non_query"
      }
    }
  },
  "servers": [{ "url": "http://kaster.c.googlers.com:19999/api/3.0" }],
  "components": {
    "requestBodies": {
      "LookmlModel": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/LookmlModel" }
          }
        },
        "description": "LookML Model",
        "required": true
      },
      "Project": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Project" }
          }
        },
        "description": "Project",
        "required": true
      },
      "HomepageItem": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/HomepageItem" }
          }
        },
        "description": "Homepage Item",
        "required": true
      },
      "Dashboard": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Dashboard" }
          }
        },
        "description": "Dashboard",
        "required": true
      },
      "ScheduledPlan": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ScheduledPlan" }
          }
        },
        "description": "Scheduled Plan",
        "required": true
      },
      "CredentialsEmail": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/CredentialsEmail" }
          }
        },
        "description": "Email/Password Credential",
        "required": true
      },
      "DBConnection": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/DBConnection" }
          }
        },
        "description": "Connection",
        "required": true
      },
      "UserAttribute": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/UserAttribute" }
          }
        },
        "description": "User Attribute",
        "required": true
      },
      "ContentMetaGroupUser": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ContentMetaGroupUser" }
          }
        },
        "description": "Content Metadata Access",
        "required": true
      },
      "GitBranch": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/GitBranch" }
          }
        },
        "description": "Git Branch",
        "required": true
      },
      "Group": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Group" }
          }
        },
        "description": "Group",
        "required": true
      },
      "HomepageSection": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/HomepageSection" }
          }
        },
        "description": "Homepage section",
        "required": true
      },
      "IntegrationHub": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/IntegrationHub" }
          }
        },
        "description": "Integration Hub",
        "required": true
      },
      "LDAPConfig": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/LDAPConfig" }
          }
        },
        "description": "LDAP Config",
        "required": true
      },
      "LookWithQuery": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/LookWithQuery" }
          }
        },
        "description": "Look",
        "required": true
      },
      "ModelSet": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ModelSet" }
          }
        },
        "description": "ModelSet",
        "required": true
      },
      "PermissionSet": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/PermissionSet" }
          }
        },
        "description": "Permission Set",
        "required": true
      },
      "CreateDashboardRenderTask": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateDashboardRenderTask"
            }
          }
        },
        "description": "Dashboard render task parameters",
        "required": true
      },
      "Role": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Role" }
          }
        },
        "description": "Role",
        "required": true
      },
      "AccessFilter": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/AccessFilter" }
          }
        },
        "description": "Access Filter"
      }
    },
    "schemas": {
      "Error": {
        "properties": {
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "Error details",
            "nullable": true
          },
          "documentation_url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Documentation link",
            "nullable": true
          }
        },
        "x-looker-status": "stable",
        "required": ["message", "documentation_url"]
      },
      "DashboardBase": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "content_favorite_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Content Favorite Id",
            "nullable": true
          },
          "content_metadata_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of content metadata",
            "nullable": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "Description",
            "nullable": true
          },
          "hidden": {
            "type": "boolean",
            "readOnly": true,
            "description": "Is Hidden",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "model": { "$ref": "#/components/schemas/LookModel" },
          "query_timezone": {
            "type": "string",
            "readOnly": true,
            "description": "Timezone in which the Dashboard will run by default.",
            "nullable": true
          },
          "readonly": {
            "type": "boolean",
            "readOnly": true,
            "description": "Is Read-only",
            "nullable": false
          },
          "refresh_interval": {
            "type": "string",
            "readOnly": true,
            "description": "Refresh Interval, as a time duration phrase like \"2 hours 30 minutes\". A number with no time units will be interpreted as whole seconds.",
            "nullable": true
          },
          "refresh_interval_to_i": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Refresh Interval in milliseconds",
            "nullable": true
          },
          "folder": { "$ref": "#/components/schemas/FolderBase" },
          "title": {
            "type": "string",
            "readOnly": true,
            "description": "Dashboard Title",
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of User",
            "nullable": true
          },
          "space": { "$ref": "#/components/schemas/SpaceBase" }
        },
        "x-looker-status": "beta"
      },
      "SpaceBase": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique Name",
            "nullable": false
          },
          "parent_id": {
            "type": "string",
            "description": "Id of Parent. If the parent id is null, this is a root-level entry",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "content_metadata_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of content metadata",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time the space was created",
            "nullable": true
          },
          "creator_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "User Id of Creator",
            "nullable": true
          },
          "child_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Children Count",
            "nullable": true
          },
          "external_id": {
            "type": "string",
            "readOnly": true,
            "description": "Embedder's Id if this space was autogenerated as an embedding shared space via 'external_group_id' in an SSO embed login",
            "nullable": true
          },
          "is_embed": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is an embed space",
            "nullable": false
          },
          "is_embed_shared_root": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is the root embed shared space",
            "nullable": false
          },
          "is_embed_users_root": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is the root embed users space",
            "nullable": false
          },
          "is_personal": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is a user's personal space",
            "nullable": false
          },
          "is_personal_descendant": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is descendant of a user's personal space",
            "nullable": false
          },
          "is_shared_root": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is the root shared space",
            "nullable": false
          },
          "is_users_root": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is the root user space",
            "nullable": false
          },
          "is_root": {
            "type": "boolean",
            "readOnly": true,
            "x-looker-deprecated": true,
            "description": "(DEPRECATED) Space is the root shared space (alias of is_shared_root)",
            "nullable": false
          },
          "is_user_root": {
            "type": "boolean",
            "readOnly": true,
            "x-looker-deprecated": true,
            "description": "(DEPRECATED) Space is the root user space (alias of is_users_root)",
            "nullable": false
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          }
        },
        "x-looker-status": "beta",
        "required": ["name", "parent_id"]
      },
      "CreateSpace": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique Name",
            "nullable": false
          },
          "parent_id": {
            "type": "string",
            "description": "Id of Parent. If the parent id is null, this is a root-level entry",
            "nullable": false
          }
        },
        "x-looker-status": "beta",
        "required": ["name", "parent_id"]
      },
      "UpdateSpace": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique Name",
            "nullable": false
          },
          "parent_id": {
            "type": "string",
            "description": "Id of Parent. If the parent id is null, this is a root-level entry",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "Space": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique Name",
            "nullable": false
          },
          "parent_id": {
            "type": "string",
            "description": "Id of Parent. If the parent id is null, this is a root-level entry",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "content_metadata_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of content metadata",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time the space was created",
            "nullable": true
          },
          "creator_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "User Id of Creator",
            "nullable": true
          },
          "child_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Children Count",
            "nullable": true
          },
          "external_id": {
            "type": "string",
            "readOnly": true,
            "description": "Embedder's Id if this space was autogenerated as an embedding shared space via 'external_group_id' in an SSO embed login",
            "nullable": true
          },
          "is_embed": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is an embed space",
            "nullable": false
          },
          "is_embed_shared_root": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is the root embed shared space",
            "nullable": false
          },
          "is_embed_users_root": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is the root embed users space",
            "nullable": false
          },
          "is_personal": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is a user's personal space",
            "nullable": false
          },
          "is_personal_descendant": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is descendant of a user's personal space",
            "nullable": false
          },
          "is_shared_root": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is the root shared space",
            "nullable": false
          },
          "is_users_root": {
            "type": "boolean",
            "readOnly": true,
            "description": "Space is the root user space",
            "nullable": false
          },
          "is_root": {
            "type": "boolean",
            "readOnly": true,
            "x-looker-deprecated": true,
            "description": "(DEPRECATED) Space is the root shared space (alias of is_shared_root)",
            "nullable": false
          },
          "is_user_root": {
            "type": "boolean",
            "readOnly": true,
            "x-looker-deprecated": true,
            "description": "(DEPRECATED) Space is the root user space (alias of is_users_root)",
            "nullable": false
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "dashboards": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DashboardBase" },
            "readOnly": true,
            "description": "Dashboards",
            "nullable": true
          },
          "looks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookWithDashboards" },
            "readOnly": true,
            "description": "Looks",
            "nullable": true
          }
        },
        "x-looker-status": "beta",
        "required": ["name", "parent_id"]
      },
      "HomepageSection": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time at which this section was created.",
            "nullable": true
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which this section was deleted.",
            "nullable": true
          },
          "detail_url": {
            "type": "string",
            "readOnly": true,
            "description": "A URL pointing to a page showing further information about the content in the section.",
            "nullable": true
          },
          "homepage_id": {
            "type": "integer",
            "format": "int64",
            "description": "Id reference to parent homepage",
            "nullable": true
          },
          "homepage_items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/HomepageItem" },
            "readOnly": true,
            "description": "Items in the homepage section",
            "nullable": true
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "is_header": {
            "type": "boolean",
            "readOnly": true,
            "description": "Is this a header section (has no items)",
            "nullable": false
          },
          "item_order": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "description": "ids of the homepage items in the order they should be displayed",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Name of row",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time at which this section was last updated.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "HomepageItem": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "content_created_by": {
            "type": "string",
            "readOnly": true,
            "description": "Name of user who created the content this item is based on",
            "nullable": true
          },
          "content_favorite_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Content favorite id associated with the item this content is based on",
            "nullable": true
          },
          "content_metadata_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Content metadata id associated with the item this content is based on",
            "nullable": true
          },
          "content_updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Last time the content that this item is based on was updated",
            "nullable": true
          },
          "custom_description": {
            "type": "string",
            "description": "Custom description entered by the user, if present",
            "nullable": true
          },
          "custom_image_data_base64": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) base64 encoded image data",
            "nullable": true
          },
          "custom_image_url": {
            "type": "string",
            "readOnly": true,
            "description": "Custom image_url entered by the user, if present",
            "nullable": true
          },
          "custom_title": {
            "type": "string",
            "description": "Custom title entered by the user, if present",
            "nullable": true
          },
          "custom_url": {
            "type": "string",
            "description": "Custom url entered by the user, if present",
            "nullable": true
          },
          "dashboard_id": {
            "type": "integer",
            "format": "int64",
            "description": "Dashboard to base this item on",
            "nullable": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "The actual description for display",
            "nullable": true
          },
          "favorite_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times content has been favorited, if present",
            "nullable": true
          },
          "homepage_section_id": {
            "type": "string",
            "description": "Associated Homepage Section",
            "nullable": true
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "image_url": {
            "type": "string",
            "readOnly": true,
            "description": "The actual image_url for display",
            "nullable": true
          },
          "location": {
            "type": "string",
            "readOnly": true,
            "description": "The container folder name of the content",
            "nullable": true
          },
          "look_id": {
            "type": "integer",
            "format": "int64",
            "description": "Look to base this item on",
            "nullable": true
          },
          "lookml_dashboard_id": {
            "type": "string",
            "description": "LookML Dashboard to base this item on",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int64",
            "description": "An arbitrary integer representing the sort order within the section",
            "nullable": true
          },
          "section_fetch_time": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Number of seconds it took to fetch the section this item is in",
            "nullable": true
          },
          "title": {
            "type": "string",
            "readOnly": true,
            "description": "The actual title for display",
            "nullable": true
          },
          "url": {
            "type": "string",
            "readOnly": true,
            "description": "The actual url for display",
            "nullable": true
          },
          "use_custom_description": {
            "type": "boolean",
            "description": "Whether the custom description should be used instead of the content description, if the item is associated with content",
            "nullable": false
          },
          "use_custom_image": {
            "type": "boolean",
            "description": "Whether the custom image should be used instead of the content image, if the item is associated with content",
            "nullable": false
          },
          "use_custom_title": {
            "type": "boolean",
            "description": "Whether the custom title should be used instead of the content title, if the item is associated with content",
            "nullable": false
          },
          "use_custom_url": {
            "type": "boolean",
            "description": "Whether the custom url should be used instead of the content url, if the item is associated with content",
            "nullable": false
          },
          "view_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times content has been viewed, if present",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "ValidationError": {
        "properties": {
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "Error details",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ValidationErrorDetail" },
            "readOnly": true,
            "description": "Error detail array",
            "nullable": true
          },
          "documentation_url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Documentation link",
            "nullable": true
          }
        },
        "x-looker-status": "stable",
        "required": ["message", "documentation_url"]
      },
      "ValidationErrorDetail": {
        "properties": {
          "field": {
            "type": "string",
            "readOnly": true,
            "description": "Field with error",
            "nullable": true
          },
          "code": {
            "type": "string",
            "readOnly": true,
            "description": "Error code",
            "nullable": true
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "Error info message",
            "nullable": true
          },
          "documentation_url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Documentation link",
            "nullable": true
          }
        },
        "x-looker-status": "stable",
        "required": ["documentation_url"]
      },
      "AccessFilter": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "ID of this AccessFilter",
            "nullable": false
          },
          "model": {
            "type": "string",
            "description": "Model to which this filter applies",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "Field to which this filter applies",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Value for this filter",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "AccessToken": {
        "properties": {
          "access_token": {
            "type": "string",
            "readOnly": true,
            "description": "Access Token used for API calls",
            "nullable": false
          },
          "token_type": {
            "type": "string",
            "readOnly": true,
            "description": "Type of Token",
            "nullable": false
          },
          "expires_in": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of seconds before the token expires",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "ApiSession": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "workspace_id": {
            "type": "string",
            "description": "The id of active workspace for this session",
            "nullable": true
          },
          "sudo_user_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The id of the actual user in the case when this session represents one user sudo'ing as another",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "BackupConfiguration": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "type": {
            "type": "string",
            "description": "Type of backup: looker-s3 or custom-s3",
            "nullable": true
          },
          "custom_s3_bucket": {
            "type": "string",
            "description": "Name of bucket for custom-s3 backups",
            "nullable": true
          },
          "custom_s3_bucket_region": {
            "type": "string",
            "description": "Name of region where the bucket is located",
            "nullable": true
          },
          "custom_s3_key": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) AWS S3 key used for custom-s3 backups",
            "nullable": true
          },
          "custom_s3_secret": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) AWS S3 secret used for custom-s3 backups",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "ContentFavorite": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "User Id which owns this ContentFavorite",
            "nullable": false
          },
          "content_metadata_id": {
            "type": "integer",
            "format": "int64",
            "description": "Content Metadata Id associated with this ContentFavorite",
            "nullable": false
          },
          "look_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of a look",
            "nullable": true
          },
          "dashboard_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of a dashboard",
            "nullable": true
          },
          "look": { "$ref": "#/components/schemas/LookBasic" },
          "dashboard": { "$ref": "#/components/schemas/DashboardBase" }
        },
        "x-looker-status": "beta"
      },
      "ContentMetaGroupUser": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "content_metadata_id": {
            "type": "string",
            "readOnly": true,
            "description": "Id of associated Content Metadata",
            "nullable": true
          },
          "permission_type": {
            "type": "string",
            "readOnly": true,
            "enum": ["view", "edit"],
            "description": "Type of permission: \"view\" or \"edit\" Valid values are: \"view\", \"edit\".",
            "nullable": true
          },
          "group_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "ID of associated group",
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "ID of associated user",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "ContentMeta": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name or title of underlying content",
            "nullable": true
          },
          "parent_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of Parent Content",
            "nullable": true
          },
          "dashboard_id": {
            "type": "string",
            "readOnly": true,
            "description": "Id of associated dashboard when content_type is \"dashboard\"",
            "nullable": true
          },
          "look_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of associated look when content_type is \"look\"",
            "nullable": true
          },
          "folder_id": {
            "type": "string",
            "readOnly": true,
            "description": "Id of associated folder when content_type is \"space\"",
            "nullable": true
          },
          "content_type": {
            "type": "string",
            "readOnly": true,
            "description": "Content Type (\"dashboard\", \"look\", or \"space\")",
            "nullable": true
          },
          "inherits": {
            "type": "boolean",
            "description": "Whether content inherits its access levels from parent",
            "nullable": false
          },
          "inheriting_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of Inherited Content",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "Content Slug",
            "nullable": true
          },
          "space_id": {
            "type": "string",
            "readOnly": true,
            "description": "Id of associated space when content_type is \"space\"",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "ContentView": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "look_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of viewed Look",
            "nullable": true
          },
          "dashboard_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of the viewed Dashboard",
            "nullable": true
          },
          "content_metadata_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Content metadata id of the Look or Dashboard",
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of user content was viewed by",
            "nullable": true
          },
          "group_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of group content was viewed by",
            "nullable": true
          },
          "view_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times piece of content was viewed",
            "nullable": true
          },
          "favorite_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times piece of content was favorited",
            "nullable": true
          },
          "last_viewed_at": {
            "type": "string",
            "readOnly": true,
            "description": "Date the piece of content was last viewed",
            "nullable": true
          },
          "start_of_week_date": {
            "type": "string",
            "readOnly": true,
            "description": "Week start date for the view and favorite count during that given week",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "CredentialsApi3": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "client_id": {
            "type": "string",
            "readOnly": true,
            "description": "API key client_id",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for the creation of this credential",
            "nullable": true
          },
          "is_disabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has this credential been disabled?",
            "nullable": false
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Short name for the type of this kind of credential",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "CredentialsApi": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "token": {
            "type": "string",
            "readOnly": true,
            "description": "API key token",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for the creation of this credential",
            "nullable": true
          },
          "is_disabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has this credential been disabled?",
            "nullable": false
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Short name for the type of this kind of credential",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "CredentialsEmail": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for the creation of this credential",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "EMail address used for user login",
            "nullable": true
          },
          "forced_password_reset_at_next_login": {
            "type": "boolean",
            "description": "Force the user to change their password upon their next login",
            "nullable": false
          },
          "is_disabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has this credential been disabled?",
            "nullable": false
          },
          "logged_in_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for most recent login using credential",
            "nullable": true
          },
          "password_reset_url": {
            "type": "string",
            "readOnly": true,
            "description": "Url with one-time use secret token that the user can use to reset password",
            "nullable": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Short name for the type of this kind of credential",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          },
          "user_url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this user",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "CredentialsEmbed": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for the creation of this credential",
            "nullable": true
          },
          "external_group_id": {
            "type": "string",
            "readOnly": true,
            "description": "Embedder's id for a group to which this user was added during the most recent login",
            "nullable": true
          },
          "external_user_id": {
            "type": "string",
            "readOnly": true,
            "description": "Embedder's unique id for the user",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "is_disabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has this credential been disabled?",
            "nullable": false
          },
          "logged_in_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for most recent login using credential",
            "nullable": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Short name for the type of this kind of credential",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "CredentialsGoogle": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for the creation of this credential",
            "nullable": true
          },
          "domain": {
            "type": "string",
            "readOnly": true,
            "description": "Google domain",
            "nullable": true
          },
          "email": {
            "type": "string",
            "readOnly": true,
            "description": "EMail address",
            "nullable": true
          },
          "google_user_id": {
            "type": "string",
            "readOnly": true,
            "description": "Google's Unique ID for this user",
            "nullable": true
          },
          "is_disabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has this credential been disabled?",
            "nullable": false
          },
          "logged_in_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for most recent login using credential",
            "nullable": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Short name for the type of this kind of credential",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "CredentialsLDAP": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for the creation of this credential",
            "nullable": true
          },
          "email": {
            "type": "string",
            "readOnly": true,
            "description": "EMail address",
            "nullable": true
          },
          "is_disabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has this credential been disabled?",
            "nullable": false
          },
          "ldap_dn": {
            "type": "string",
            "readOnly": true,
            "description": "LDAP Distinguished name for this user (as-of the last login)",
            "nullable": true
          },
          "ldap_id": {
            "type": "string",
            "readOnly": true,
            "description": "LDAP Unique ID for this user",
            "nullable": true
          },
          "logged_in_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for most recent login using credential",
            "nullable": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Short name for the type of this kind of credential",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "CredentialsLookerOpenid": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for the creation of this credential",
            "nullable": true
          },
          "email": {
            "type": "string",
            "readOnly": true,
            "description": "EMail address used for user login",
            "nullable": true
          },
          "is_disabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has this credential been disabled?",
            "nullable": false
          },
          "logged_in_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for most recent login using credential",
            "nullable": true
          },
          "logged_in_ip": {
            "type": "string",
            "readOnly": true,
            "description": "IP address of client for most recent login using credential",
            "nullable": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Short name for the type of this kind of credential",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          },
          "user_url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this user",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "CredentialsOIDC": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for the creation of this credential",
            "nullable": true
          },
          "email": {
            "type": "string",
            "readOnly": true,
            "description": "EMail address",
            "nullable": true
          },
          "is_disabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has this credential been disabled?",
            "nullable": false
          },
          "logged_in_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for most recent login using credential",
            "nullable": true
          },
          "oidc_user_id": {
            "type": "string",
            "readOnly": true,
            "description": "OIDC OP's Unique ID for this user",
            "nullable": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Short name for the type of this kind of credential",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "CredentialsSaml": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for the creation of this credential",
            "nullable": true
          },
          "email": {
            "type": "string",
            "readOnly": true,
            "description": "EMail address",
            "nullable": true
          },
          "is_disabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has this credential been disabled?",
            "nullable": false
          },
          "logged_in_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for most recent login using credential",
            "nullable": true
          },
          "saml_user_id": {
            "type": "string",
            "readOnly": true,
            "description": "Saml IdP's Unique ID for this user",
            "nullable": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Short name for the type of this kind of credential",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "CredentialsTotp": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for the creation of this credential",
            "nullable": true
          },
          "is_disabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has this credential been disabled?",
            "nullable": false
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Short name for the type of this kind of credential",
            "nullable": true
          },
          "verified": {
            "type": "boolean",
            "readOnly": true,
            "description": "User has verified",
            "nullable": false
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "DashboardElement": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "body_text": {
            "type": "string",
            "description": "Text tile body text",
            "nullable": true
          },
          "body_text_as_html": {
            "type": "string",
            "readOnly": true,
            "description": "Text tile body text as Html",
            "nullable": true
          },
          "dashboard_id": {
            "type": "string",
            "description": "Id of Dashboard",
            "nullable": true
          },
          "edit_uri": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Relative path of URI of LookML file to edit the dashboard element (LookML dashboard only).",
            "nullable": true
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "look": { "$ref": "#/components/schemas/LookWithQuery" },
          "look_id": {
            "type": "string",
            "description": "Id Of Look",
            "nullable": true
          },
          "lookml_link_id": {
            "type": "string",
            "readOnly": true,
            "description": "LookML link ID",
            "nullable": true
          },
          "merge_result_id": {
            "type": "string",
            "description": "ID of merge result",
            "nullable": true
          },
          "note_display": {
            "type": "string",
            "description": "Note Display",
            "nullable": true
          },
          "note_state": {
            "type": "string",
            "description": "Note State",
            "nullable": true
          },
          "note_text": {
            "type": "string",
            "description": "Note Text",
            "nullable": true
          },
          "note_text_as_html": {
            "type": "string",
            "readOnly": true,
            "description": "Note Text as Html",
            "nullable": true
          },
          "query": { "$ref": "#/components/schemas/Query" },
          "query_id": {
            "type": "integer",
            "format": "int64",
            "description": "Id Of Query",
            "nullable": true
          },
          "refresh_interval": {
            "type": "string",
            "description": "Refresh Interval",
            "nullable": true
          },
          "refresh_interval_to_i": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Refresh Interval as integer",
            "nullable": true
          },
          "result_maker": {
            "$ref": "#/components/schemas/ResultMakerWithIdVisConfigAndDynamicFields"
          },
          "result_maker_id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the ResultMakerLookup entry.",
            "nullable": true
          },
          "subtitle_text": {
            "type": "string",
            "description": "Text tile subtitle text",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Title of dashboard element",
            "nullable": true
          },
          "title_hidden": {
            "type": "boolean",
            "description": "Whether title is hidden",
            "nullable": false
          },
          "title_text": {
            "type": "string",
            "description": "Text tile title",
            "nullable": true
          },
          "type": { "type": "string", "description": "Type", "nullable": true },
          "alert_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Count of Alerts associated to a dashboard element",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "DashboardFilter": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "dashboard_id": {
            "type": "string",
            "readOnly": true,
            "description": "Id of Dashboard",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of filter",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Title of filter",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Type of filter: one of date, number, string, or field",
            "nullable": true
          },
          "default_value": {
            "type": "string",
            "description": "Default value of filter",
            "nullable": true
          },
          "model": {
            "type": "string",
            "description": "Model of filter (required if type = field)",
            "nullable": true
          },
          "explore": {
            "type": "string",
            "description": "Explore of filter (required if type = field)",
            "nullable": true
          },
          "dimension": {
            "type": "string",
            "description": "Dimension of filter (required if type = field)",
            "nullable": true
          },
          "field": {
            "type": "object",
            "additionalProperties": { "type": "string", "format": "any" },
            "readOnly": true,
            "description": "Field information",
            "nullable": true
          },
          "row": {
            "type": "integer",
            "format": "int64",
            "description": "Display order of this filter relative to other filters",
            "nullable": true
          },
          "listens_to_filters": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Array of listeners for faceted filters",
            "nullable": true
          },
          "allow_multiple_values": {
            "type": "boolean",
            "description": "Whether the filter allows multiple filter values",
            "nullable": false
          },
          "required": {
            "type": "boolean",
            "description": "Whether the filter requires a value to run the dashboard",
            "nullable": false
          },
          "ui_config": {
            "type": "object",
            "additionalProperties": { "type": "string", "format": "any" },
            "description": "The visual configuration for this filter. Used to set up how the UI for this filter should appear.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "DashboardLayoutComponent": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "dashboard_layout_id": {
            "type": "string",
            "description": "Id of Dashboard Layout",
            "nullable": true
          },
          "dashboard_element_id": {
            "type": "string",
            "description": "Id Of Dashboard Element",
            "nullable": true
          },
          "row": {
            "type": "integer",
            "format": "int64",
            "description": "Row",
            "nullable": true
          },
          "column": {
            "type": "integer",
            "format": "int64",
            "description": "Column",
            "nullable": true
          },
          "width": {
            "type": "integer",
            "format": "int64",
            "description": "Width",
            "nullable": true
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "description": "Height",
            "nullable": true
          },
          "deleted": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not the dashboard layout component is deleted",
            "nullable": false
          },
          "element_title": {
            "type": "string",
            "readOnly": true,
            "description": "Dashboard element title, extracted from the Dashboard Element.",
            "nullable": true
          },
          "element_title_hidden": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not the dashboard element title is displayed.",
            "nullable": false
          },
          "vis_type": {
            "type": "string",
            "readOnly": true,
            "description": "Visualization type, extracted from a query's vis_config",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "DashboardLayout": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "dashboard_id": {
            "type": "string",
            "description": "Id of Dashboard",
            "nullable": true
          },
          "type": { "type": "string", "description": "Type", "nullable": true },
          "active": {
            "type": "boolean",
            "description": "Is Active",
            "nullable": false
          },
          "column_width": {
            "type": "integer",
            "format": "int64",
            "description": "Column Width",
            "nullable": true
          },
          "width": {
            "type": "integer",
            "format": "int64",
            "description": "Width",
            "nullable": true
          },
          "deleted": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not the dashboard layout is deleted.",
            "nullable": false
          },
          "dashboard_title": {
            "type": "string",
            "readOnly": true,
            "description": "Title extracted from the dashboard this layout represents.",
            "nullable": true
          },
          "dashboard_layout_components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardLayoutComponent"
            },
            "readOnly": true,
            "description": "Components",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "Dashboard": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "content_favorite_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Content Favorite Id",
            "nullable": true
          },
          "content_metadata_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of content metadata",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "hidden": {
            "type": "boolean",
            "description": "Is Hidden",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "model": { "$ref": "#/components/schemas/LookModel" },
          "query_timezone": {
            "type": "string",
            "description": "Timezone in which the Dashboard will run by default.",
            "nullable": true
          },
          "readonly": {
            "type": "boolean",
            "readOnly": true,
            "description": "Is Read-only",
            "nullable": false
          },
          "refresh_interval": {
            "type": "string",
            "description": "Refresh Interval, as a time duration phrase like \"2 hours 30 minutes\". A number with no time units will be interpreted as whole seconds.",
            "nullable": true
          },
          "refresh_interval_to_i": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Refresh Interval in milliseconds",
            "nullable": true
          },
          "folder": { "$ref": "#/components/schemas/FolderBase" },
          "title": {
            "type": "string",
            "description": "Dashboard Title",
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of User",
            "nullable": true
          },
          "space": { "$ref": "#/components/schemas/SpaceBase" },
          "background_color": {
            "type": "string",
            "description": "Background color",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Dashboard was created.",
            "nullable": true
          },
          "crossfilter_enabled": {
            "type": "boolean",
            "description": "Enables crossfiltering in dashboards - only available in dashboards-next (beta)",
            "nullable": false
          },
          "dashboard_elements": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DashboardElement" },
            "readOnly": true,
            "description": "Elements",
            "nullable": true
          },
          "dashboard_filters": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DashboardFilter" },
            "readOnly": true,
            "description": "Filters",
            "nullable": true
          },
          "dashboard_layouts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DashboardLayout" },
            "readOnly": true,
            "description": "Layouts",
            "nullable": true
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether or not a dashboard is 'soft' deleted.",
            "nullable": false
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Dashboard was 'soft' deleted.",
            "nullable": true
          },
          "deleter_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of User that 'soft' deleted the dashboard.",
            "nullable": true
          },
          "edit_uri": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Relative path of URI of LookML file to edit the dashboard (LookML dashboard only).",
            "nullable": true
          },
          "favorite_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times favorited",
            "nullable": true
          },
          "last_accessed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time the dashboard was last accessed",
            "nullable": true
          },
          "last_viewed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time last viewed in the Looker web UI",
            "nullable": true
          },
          "load_configuration": {
            "type": "string",
            "description": "configuration option that governs how dashboard loading will happen.",
            "nullable": true
          },
          "lookml_link_id": {
            "type": "string",
            "description": "Links this dashboard to a particular LookML dashboard such that calling a **sync** operation on that LookML dashboard will update this dashboard to match.",
            "nullable": true
          },
          "show_filters_bar": {
            "type": "boolean",
            "description": "Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user's ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://looker.com/docs/r/api/control-access)",
            "nullable": false
          },
          "show_title": {
            "type": "boolean",
            "description": "Show title",
            "nullable": false
          },
          "slug": {
            "type": "string",
            "description": "Content Metadata Slug",
            "nullable": true
          },
          "space_id": {
            "type": "string",
            "description": "Id of Space",
            "nullable": true
          },
          "folder_id": {
            "type": "string",
            "description": "Id of folder",
            "nullable": true
          },
          "text_tile_text_color": {
            "type": "string",
            "description": "Color of text on text tiles",
            "nullable": true
          },
          "tile_background_color": {
            "type": "string",
            "description": "Tile background color",
            "nullable": true
          },
          "tile_text_color": {
            "type": "string",
            "description": "Tile text color",
            "nullable": true
          },
          "title_color": {
            "type": "string",
            "description": "Title color",
            "nullable": true
          },
          "view_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times viewed in the Looker web UI",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "DataActionFormField": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name",
            "nullable": true
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Human-readable label",
            "nullable": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "Description of field",
            "nullable": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Type of field.",
            "nullable": true
          },
          "default": {
            "type": "string",
            "readOnly": true,
            "description": "Default value of the field.",
            "nullable": true
          },
          "oauth_url": {
            "type": "string",
            "readOnly": true,
            "description": "The URL for an oauth link, if type is 'oauth_link'.",
            "nullable": true
          },
          "interactive": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not a field supports interactive forms.",
            "nullable": false
          },
          "required": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not the field is required. This is a user-interface hint. A user interface displaying this form should not submit it without a value for this field. The action server must also perform this validation.",
            "nullable": false
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataActionFormSelectOption"
            },
            "readOnly": true,
            "description": "If the form type is 'select', a list of options to be selected from.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "DataActionForm": {
        "properties": {
          "state": { "$ref": "#/components/schemas/DataActionUserState" },
          "fields": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DataActionFormField" },
            "readOnly": true,
            "description": "Array of form fields.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "DataActionFormSelectOption": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name",
            "nullable": true
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Human-readable label",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "DataActionRequest": {
        "properties": {
          "action": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "The JSON describing the data action. This JSON should be considered opaque and should be passed through unmodified from the query result it came from.",
            "nullable": true
          },
          "form_values": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "User input for any form values the data action might use.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "DataActionResponse": {
        "properties": {
          "webhook_id": {
            "type": "string",
            "readOnly": true,
            "description": "ID of the webhook event that sent this data action. In some error conditions, this may be null.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the data action was successful.",
            "nullable": false
          },
          "refresh_query": {
            "type": "boolean",
            "readOnly": true,
            "description": "When true, indicates that the client should refresh (rerun) the source query because the data may have been changed by the action.",
            "nullable": false
          },
          "validation_errors": {
            "$ref": "#/components/schemas/ValidationError"
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "Optional message returned by the data action server describing the state of the action that took place. This can be used to implement custom failure messages. If a failure is related to a particular form field, the server should send back a validation error instead. The Looker web UI does not currently display any message if the action indicates 'success', but may do so in the future.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "DataActionUserState": {
        "properties": {
          "data": {
            "type": "string",
            "readOnly": true,
            "description": "User state data",
            "nullable": true
          },
          "refresh_time": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Time in seconds until the state needs to be refreshed",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "Datagroup": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "UNIX timestamp at which this entry was created.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique ID of the datagroup",
            "nullable": false
          },
          "model_name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the model containing the datagroup. Unique when combined with name.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the datagroup. Unique when combined with model_name.",
            "nullable": true
          },
          "stale_before": {
            "type": "integer",
            "format": "int64",
            "description": "UNIX timestamp before which cache entries are considered stale. Cannot be in the future.",
            "nullable": true
          },
          "trigger_check_at": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "UNIX timestamp at which this entry trigger was last checked.",
            "nullable": true
          },
          "trigger_error": {
            "type": "string",
            "readOnly": true,
            "description": "The message returned with the error of the last trigger check.",
            "nullable": true
          },
          "trigger_value": {
            "type": "string",
            "readOnly": true,
            "description": "The value of the trigger when last checked.",
            "nullable": true
          },
          "triggered_at": {
            "type": "integer",
            "format": "int64",
            "description": "UNIX timestamp at which this entry became triggered. Cannot be in the future.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "DBConnectionBase": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the connection. Also used as the unique identifier",
            "nullable": false
          },
          "dialect": { "$ref": "#/components/schemas/Dialect" },
          "snippets": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Snippet" },
            "readOnly": true,
            "description": "SQL Runner snippets for this connection",
            "nullable": false
          },
          "pdts_enabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "True if PDTs are enabled on this connection",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "DBConnection": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "Name of the connection. Also used as the unique identifier",
            "nullable": false
          },
          "dialect": { "$ref": "#/components/schemas/Dialect" },
          "snippets": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Snippet" },
            "readOnly": true,
            "description": "SQL Runner snippets for this connection",
            "nullable": false
          },
          "pdts_enabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "True if PDTs are enabled on this connection",
            "nullable": false
          },
          "host": {
            "type": "string",
            "description": "Host name/address of server",
            "nullable": true
          },
          "port": {
            "type": "string",
            "description": "Port number on server",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "Username for server authentication",
            "nullable": true
          },
          "password": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) Password for server authentication",
            "nullable": true
          },
          "uses_oauth": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the connection uses OAuth for authentication.",
            "nullable": false
          },
          "certificate": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).",
            "nullable": true
          },
          "file_type": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) Certificate keyfile type - .json or .p12",
            "nullable": true
          },
          "database": {
            "type": "string",
            "description": "Database name",
            "nullable": true
          },
          "db_timezone": {
            "type": "string",
            "description": "Time zone of database",
            "nullable": true
          },
          "query_timezone": {
            "type": "string",
            "description": "Timezone to use in queries",
            "nullable": true
          },
          "schema": {
            "type": "string",
            "description": "Scheme name",
            "nullable": true
          },
          "max_connections": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of concurrent connection to use",
            "nullable": true
          },
          "max_billing_gigabytes": {
            "type": "string",
            "description": "Maximum size of query in GBs (BigQuery only, can be a user_attribute name)",
            "nullable": true
          },
          "ssl": {
            "type": "boolean",
            "description": "Use SSL/TLS when connecting to server",
            "nullable": false
          },
          "verify_ssl": {
            "type": "boolean",
            "description": "Verify the SSL",
            "nullable": false
          },
          "tmp_db_name": {
            "type": "string",
            "description": "Name of temporary database (if used)",
            "nullable": true
          },
          "jdbc_additional_params": {
            "type": "string",
            "description": "Additional params to add to JDBC connection string",
            "nullable": true
          },
          "pool_timeout": {
            "type": "integer",
            "format": "int64",
            "description": "Connection Pool Timeout, in seconds",
            "nullable": true
          },
          "dialect_name": {
            "type": "string",
            "description": "(Read/Write) SQL Dialect name",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date for this connection",
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "readOnly": true,
            "description": "Id of user who last modified this connection configuration",
            "nullable": true
          },
          "example": {
            "type": "boolean",
            "readOnly": true,
            "description": "Is this an example connection?",
            "nullable": false
          },
          "user_db_credentials": {
            "type": "boolean",
            "description": "(Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password",
            "nullable": true
          },
          "user_attribute_fields": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Fields whose values map to user attribute names",
            "nullable": true
          },
          "maintenance_cron": {
            "type": "string",
            "description": "Cron string specifying when maintenance such as PDT trigger checks and drops should be performed",
            "nullable": true
          },
          "last_regen_at": {
            "type": "string",
            "readOnly": true,
            "description": "Unix timestamp at start of last completed PDT trigger check process",
            "nullable": true
          },
          "last_reap_at": {
            "type": "string",
            "readOnly": true,
            "description": "Unix timestamp at start of last completed PDT reap process",
            "nullable": true
          },
          "sql_runner_precache_tables": {
            "type": "boolean",
            "description": "Precache tables in the SQL Runner",
            "nullable": false
          },
          "after_connect_statements": {
            "type": "string",
            "description": "SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature",
            "nullable": true
          },
          "pdt_context_override": {
            "$ref": "#/components/schemas/DBConnectionOverride"
          },
          "managed": {
            "type": "boolean",
            "readOnly": true,
            "description": "Is this connection created and managed by Looker",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "DBConnectionOverride": {
        "properties": {
          "context": {
            "type": "string",
            "description": "Context in which to override (`pdt` is the only allowed value)",
            "nullable": false
          },
          "host": {
            "type": "string",
            "description": "Host name/address of server",
            "nullable": true
          },
          "port": {
            "type": "string",
            "description": "Port number on server",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "Username for server authentication",
            "nullable": true
          },
          "password": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) Password for server authentication",
            "nullable": true
          },
          "has_password": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not the password is overridden in this context",
            "nullable": false
          },
          "certificate": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).",
            "nullable": true
          },
          "file_type": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) Certificate keyfile type - .json or .p12",
            "nullable": true
          },
          "database": {
            "type": "string",
            "description": "Database name",
            "nullable": true
          },
          "schema": {
            "type": "string",
            "description": "Scheme name",
            "nullable": true
          },
          "jdbc_additional_params": {
            "type": "string",
            "description": "Additional params to add to JDBC connection string",
            "nullable": true
          },
          "after_connect_statements": {
            "type": "string",
            "description": "SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "DBConnectionTestResult": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "connection_string": {
            "type": "string",
            "readOnly": true,
            "description": "JDBC connection string. (only populated in the 'connect' test)",
            "nullable": true
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "Result message of test",
            "nullable": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of test",
            "nullable": true
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "description": "Result code of test",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "DelegateOauthTest": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Delegate Oauth Connection Name",
            "nullable": false
          },
          "installation_target_id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the installation target. For Slack, this would be workspace id.",
            "nullable": false
          },
          "installation_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Installation ID",
            "nullable": false
          },
          "success": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not the test was successful",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "DialectInfo": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "default_max_connections": {
            "type": "string",
            "readOnly": true,
            "description": "Default number max connections",
            "nullable": true
          },
          "default_port": {
            "type": "string",
            "readOnly": true,
            "description": "Default port number",
            "nullable": true
          },
          "installed": {
            "type": "boolean",
            "readOnly": true,
            "description": "Is the supporting driver installed",
            "nullable": false
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "The human-readable label of the connection",
            "nullable": true
          },
          "label_for_database_equivalent": {
            "type": "string",
            "readOnly": true,
            "description": "What the dialect calls the equivalent of a normal SQL table",
            "nullable": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the dialect",
            "nullable": true
          },
          "supported_options": {
            "$ref": "#/components/schemas/DialectInfoOptions"
          }
        },
        "x-looker-status": "stable"
      },
      "DialectInfoOptions": {
        "properties": {
          "additional_params": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has additional params support",
            "nullable": false
          },
          "auth": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has auth support",
            "nullable": false
          },
          "host": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has host support",
            "nullable": false
          },
          "oauth_credentials": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has support for a service account",
            "nullable": false
          },
          "project_name": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has project name support",
            "nullable": false
          },
          "schema": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has schema support",
            "nullable": false
          },
          "ssl": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has SSL support",
            "nullable": false
          },
          "timezone": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has timezone support",
            "nullable": false
          },
          "tmp_table": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has tmp table support",
            "nullable": false
          },
          "username_required": {
            "type": "boolean",
            "readOnly": true,
            "description": "Username is required",
            "nullable": false
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "Dialect": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the dialect",
            "nullable": false
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "The human-readable label of the connection",
            "nullable": false
          },
          "supports_cost_estimate": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the dialect supports query cost estimates",
            "nullable": false
          },
          "persistent_table_indexes": {
            "type": "string",
            "readOnly": true,
            "description": "PDT index columns",
            "nullable": false
          },
          "persistent_table_sortkeys": {
            "type": "string",
            "readOnly": true,
            "description": "PDT sortkey columns",
            "nullable": false
          },
          "persistent_table_distkey": {
            "type": "string",
            "readOnly": true,
            "description": "PDT distkey column",
            "nullable": false
          },
          "supports_streaming": {
            "type": "boolean",
            "readOnly": true,
            "description": "Suports streaming results",
            "nullable": false
          },
          "automatically_run_sql_runner_snippets": {
            "type": "boolean",
            "readOnly": true,
            "description": "Should SQL Runner snippets automatically be run",
            "nullable": false
          },
          "connection_tests": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "Array of names of the tests that can be run on a connection using this dialect",
            "nullable": false
          },
          "supports_inducer": {
            "type": "boolean",
            "readOnly": true,
            "description": "Is supported with the inducer (i.e. generate from sql)",
            "nullable": false
          },
          "supports_multiple_databases": {
            "type": "boolean",
            "readOnly": true,
            "description": "Can multiple databases be accessed from a connection using this dialect",
            "nullable": false
          },
          "supports_persistent_derived_tables": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the dialect supports allowing Looker to build persistent derived tables",
            "nullable": false
          },
          "has_ssl_support": {
            "type": "boolean",
            "readOnly": true,
            "description": "Does the database have client SSL support settable through the JDBC string explicitly?",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "FolderBase": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique Name",
            "nullable": false
          },
          "parent_id": {
            "type": "string",
            "description": "Id of Parent. If the parent id is null, this is a root-level entry",
            "nullable": true
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "content_metadata_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of content metadata",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time the folder was created",
            "nullable": true
          },
          "creator_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "User Id of Creator",
            "nullable": true
          },
          "child_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Children Count",
            "nullable": true
          },
          "external_id": {
            "type": "string",
            "readOnly": true,
            "description": "Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login",
            "nullable": true
          },
          "is_embed": {
            "type": "boolean",
            "readOnly": true,
            "description": "Folder is an embed folder",
            "nullable": false
          },
          "is_embed_shared_root": {
            "type": "boolean",
            "readOnly": true,
            "description": "Folder is the root embed shared folder",
            "nullable": false
          },
          "is_embed_users_root": {
            "type": "boolean",
            "readOnly": true,
            "description": "Folder is the root embed users folder",
            "nullable": false
          },
          "is_personal": {
            "type": "boolean",
            "readOnly": true,
            "description": "Folder is a user's personal folder",
            "nullable": false
          },
          "is_personal_descendant": {
            "type": "boolean",
            "readOnly": true,
            "description": "Folder is descendant of a user's personal folder",
            "nullable": false
          },
          "is_shared_root": {
            "type": "boolean",
            "readOnly": true,
            "description": "Folder is the root shared folder",
            "nullable": false
          },
          "is_users_root": {
            "type": "boolean",
            "readOnly": true,
            "description": "Folder is the root user folder",
            "nullable": false
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          }
        },
        "x-looker-status": "beta",
        "required": ["name"]
      },
      "GitBranch": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "The short name on the local. Updating `name` results in `git checkout <new_name>`",
            "nullable": true
          },
          "remote": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the remote",
            "nullable": true
          },
          "remote_name": {
            "type": "string",
            "readOnly": true,
            "description": "The short name on the remote",
            "nullable": true
          },
          "error": {
            "type": "string",
            "readOnly": true,
            "description": "Name of error",
            "nullable": true
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "Message describing an error if present",
            "nullable": true
          },
          "owner_name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the owner of a personal branch",
            "nullable": true
          },
          "readonly": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not this branch is readonly",
            "nullable": false
          },
          "personal": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not this branch is a personal branch - readonly for all developers except the owner",
            "nullable": false
          },
          "is_local": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not a local ref exists for the branch",
            "nullable": false
          },
          "is_remote": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not a remote ref exists for the branch",
            "nullable": false
          },
          "is_production": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not this is the production branch",
            "nullable": false
          },
          "ahead_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of commits the local branch is ahead of the remote",
            "nullable": true
          },
          "behind_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of commits the local branch is behind the remote",
            "nullable": true
          },
          "commit_at": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "UNIX timestamp at which this branch was last committed.",
            "nullable": true
          },
          "ref": {
            "type": "string",
            "description": "The resolved ref of this branch. Updating `ref` results in `git reset --hard <new_ref>``.",
            "nullable": true
          },
          "remote_ref": {
            "type": "string",
            "readOnly": true,
            "description": "The resolved ref of this branch remote.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "GitConnectionTest": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "Human readable string describing the test",
            "nullable": true
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "A short string, uniquely naming this test",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "GitConnectionTestResult": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "A short string, uniquely naming this test",
            "nullable": false
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "Additional data from the test",
            "nullable": true
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "description": "Either 'pass' or 'fail'",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "GitStatus": {
        "properties": {
          "action": {
            "type": "string",
            "readOnly": true,
            "description": "Git action: add, delete, etc",
            "nullable": true
          },
          "conflict": {
            "type": "boolean",
            "readOnly": true,
            "description": "When true, changes to the local file conflict with the remote repository",
            "nullable": false
          },
          "revertable": {
            "type": "boolean",
            "readOnly": true,
            "description": "When true, the file can be reverted to an earlier state",
            "nullable": false
          },
          "text": {
            "type": "string",
            "readOnly": true,
            "description": "Git description of the action",
            "nullable": true
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "GroupIdForGroupInclusion": {
        "properties": {
          "group_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of group",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "Group": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "can_add_to_content_metadata": {
            "type": "boolean",
            "description": "Group can be used in content access controls",
            "nullable": false
          },
          "contains_current_user": {
            "type": "boolean",
            "readOnly": true,
            "description": "Currently logged in user is group member",
            "nullable": false
          },
          "external_group_id": {
            "type": "string",
            "readOnly": true,
            "description": "External Id group if embed group",
            "nullable": true
          },
          "externally_managed": {
            "type": "boolean",
            "readOnly": true,
            "description": "Group membership controlled outside of Looker",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "include_by_default": {
            "type": "boolean",
            "readOnly": true,
            "description": "New users are added to this group by default",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "Name of group",
            "nullable": true
          },
          "user_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of users included in this group",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "GroupIdForGroupUserInclusion": {
        "properties": {
          "user_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of user",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "ImportedProject": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Dependency name",
            "nullable": true
          },
          "url": {
            "type": "string",
            "readOnly": true,
            "description": "Url for a remote dependency",
            "nullable": true
          },
          "ref": {
            "type": "string",
            "readOnly": true,
            "description": "Ref for a remote dependency",
            "nullable": true
          },
          "is_remote": {
            "type": "boolean",
            "readOnly": true,
            "description": "Flag signifying if a dependency is remote or local",
            "nullable": false
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "IntegrationHub": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "ID of the hub.",
            "nullable": false
          },
          "url": {
            "type": "string",
            "description": "URL of the hub.",
            "nullable": false
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Label of the hub.",
            "nullable": false
          },
          "official": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this hub is a first-party integration hub operated by Looker.",
            "nullable": false
          },
          "fetch_error_message": {
            "type": "string",
            "readOnly": true,
            "description": "An error message, present if the integration hub metadata could not be fetched. If this is present, the integration hub is unusable.",
            "nullable": true
          },
          "authorization_token": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) An authorization key that will be sent to the integration hub on every request.",
            "nullable": true
          },
          "has_authorization_token": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the authorization_token is set for the hub.",
            "nullable": false
          },
          "legal_agreement_signed": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the legal agreement message has been signed by the user. This only matters if legal_agreement_required is true.",
            "nullable": false
          },
          "legal_agreement_required": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the legal terms for the integration hub are required before use.",
            "nullable": false
          },
          "legal_agreement_text": {
            "type": "string",
            "readOnly": true,
            "description": "The legal agreement text for this integration hub.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "Integration": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "ID of the integration.",
            "nullable": false
          },
          "integration_hub_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "ID of the integration hub.",
            "nullable": false
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Label for the integration.",
            "nullable": false
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "Description of the integration.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the integration is available to users.",
            "nullable": false
          },
          "params": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/IntegrationParam" },
            "description": "Array of params for the integration.",
            "nullable": false
          },
          "supported_formats": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "enum": [
              "txt",
              "csv",
              "inline_json",
              "json",
              "json_label",
              "json_detail",
              "json_detail_lite_stream",
              "xlsx",
              "html",
              "wysiwyg_pdf",
              "assembled_pdf",
              "wysiwyg_png",
              "csv_zip"
            ],
            "description": "A list of data formats the integration supports. If unspecified, the default is all data formats. Valid values are: \"txt\", \"csv\", \"inline_json\", \"json\", \"json_label\", \"json_detail\", \"json_detail_lite_stream\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\", \"csv_zip\".",
            "nullable": false
          },
          "supported_action_types": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "enum": ["cell", "query", "dashboard"],
            "description": "A list of action types the integration supports. Valid values are: \"cell\", \"query\", \"dashboard\".",
            "nullable": false
          },
          "supported_formattings": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "enum": ["formatted", "unformatted"],
            "description": "A list of formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: \"formatted\", \"unformatted\".",
            "nullable": false
          },
          "supported_visualization_formattings": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "enum": ["apply", "noapply"],
            "description": "A list of visualization formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: \"apply\", \"noapply\".",
            "nullable": false
          },
          "supported_download_settings": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "enum": ["push", "url"],
            "description": "A list of all the download mechanisms the integration supports. The order of values is not significant: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this defaults to all download setting values. Valid values are: \"push\", \"url\".",
            "nullable": false
          },
          "icon_url": {
            "type": "string",
            "readOnly": true,
            "description": "URL to an icon for the integration.",
            "nullable": true
          },
          "uses_oauth": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the integration uses oauth.",
            "nullable": true
          },
          "required_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationRequiredField"
            },
            "readOnly": true,
            "description": "A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required.",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "IntegrationParam": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the parameter.",
            "nullable": true
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Label of the parameter.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "Short description of the parameter.",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the parameter is required to be set to use the destination. If unspecified, this defaults to false.",
            "nullable": false
          },
          "has_value": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the parameter has a value set.",
            "nullable": false
          },
          "value": {
            "type": "string",
            "description": "The current value of the parameter. Always null if the value is sensitive. When writing, null values will be ignored. Set the value to an empty string to clear it.",
            "nullable": true
          },
          "user_attribute_name": {
            "type": "string",
            "description": "When present, the param's value comes from this user attribute instead of the 'value' parameter. Set to null to use the 'value'.",
            "nullable": true
          },
          "sensitive": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the parameter contains sensitive data like API credentials. If unspecified, this defaults to true.",
            "nullable": false
          },
          "per_user": {
            "type": "boolean",
            "readOnly": true,
            "description": "When true, this parameter must be assigned to a user attribute in the admin panel (instead of a constant value), and that value may be updated by the user as part of the integration flow.",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "IntegrationRequiredField": {
        "properties": {
          "tag": {
            "type": "string",
            "readOnly": true,
            "description": "Matches a field that has this tag.",
            "nullable": true
          },
          "any_tag": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "If present, supercedes 'tag' and matches a field that has any of the provided tags.",
            "nullable": true
          },
          "all_tags": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "If present, supercedes 'tag' and matches a field that has all of the provided tags.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "IntegrationTestResult": {
        "properties": {
          "success": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not the test was successful",
            "nullable": false
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "A message representing the results of the test.",
            "nullable": true
          },
          "delegate_oauth_result": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DelegateOauthTest" },
            "readOnly": true,
            "description": "An array of connection test result for delegate oauth actions.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "LDAPConfig": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "alternate_email_login_allowed": {
            "type": "boolean",
            "description": "Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.",
            "nullable": false
          },
          "auth_password": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only)  Password for the LDAP account used to access the LDAP server",
            "nullable": true
          },
          "auth_requires_role": {
            "type": "boolean",
            "description": "Users will not be allowed to login at all unless a role for them is found in LDAP if set to true",
            "nullable": false
          },
          "auth_username": {
            "type": "string",
            "description": "Distinguished name of LDAP account used to access the LDAP server",
            "nullable": true
          },
          "connection_host": {
            "type": "string",
            "description": "LDAP server hostname",
            "nullable": true
          },
          "connection_port": {
            "type": "string",
            "description": "LDAP host port",
            "nullable": true
          },
          "connection_tls": {
            "type": "boolean",
            "description": "Use Transport Layer Security",
            "nullable": false
          },
          "connection_tls_no_verify": {
            "type": "boolean",
            "description": "Do not verify peer when using TLS",
            "nullable": false
          },
          "default_new_user_group_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "x-looker-write-only": true,
            "description": "(Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP",
            "nullable": true
          },
          "default_new_user_groups": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Group" },
            "readOnly": true,
            "description": "(Read-only) Groups that will be applied to new users the first time they login via LDAP",
            "nullable": true
          },
          "default_new_user_role_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "x-looker-write-only": true,
            "description": "(Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP",
            "nullable": true
          },
          "default_new_user_roles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Role" },
            "readOnly": true,
            "description": "(Read-only) Roles that will be applied to new users the first time they login via LDAP",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable/Disable LDAP authentication for the server",
            "nullable": false
          },
          "force_no_page": {
            "type": "boolean",
            "description": "Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it.",
            "nullable": false
          },
          "groups": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LDAPGroupRead" },
            "readOnly": true,
            "description": "(Read-only) Array of mappings between LDAP Groups and Looker Roles",
            "nullable": true
          },
          "groups_base_dn": {
            "type": "string",
            "description": "Base dn for finding groups in LDAP searches",
            "nullable": true
          },
          "groups_finder_type": {
            "type": "string",
            "description": "Identifier for a strategy for how Looker will search for groups in the LDAP server",
            "nullable": true
          },
          "groups_member_attribute": {
            "type": "string",
            "description": "LDAP Group attribute that signifies the members of the groups. Most commonly 'member'",
            "nullable": true
          },
          "groups_objectclasses": {
            "type": "string",
            "description": "Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches",
            "nullable": true
          },
          "groups_user_attribute": {
            "type": "string",
            "description": "LDAP Group attribute that signifies the user in a group. Most commonly 'dn'",
            "nullable": true
          },
          "groups_with_role_ids": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LDAPGroupWrite" },
            "description": "(Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids",
            "nullable": true
          },
          "has_auth_password": {
            "type": "boolean",
            "readOnly": true,
            "description": "(Read-only) Has the password been set for the LDAP account used to access the LDAP server",
            "nullable": false
          },
          "merge_new_users_by_email": {
            "type": "boolean",
            "description": "Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user.",
            "nullable": false
          },
          "modified_at": {
            "type": "string",
            "readOnly": true,
            "description": "When this config was last modified",
            "nullable": true
          },
          "modified_by": {
            "type": "string",
            "readOnly": true,
            "description": "User id of user who last modified this config",
            "nullable": true
          },
          "set_roles_from_groups": {
            "type": "boolean",
            "description": "Set user roles in Looker based on groups from LDAP",
            "nullable": false
          },
          "test_ldap_password": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only)  Test LDAP user password. For ldap tests only.",
            "nullable": true
          },
          "test_ldap_user": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only)  Test LDAP user login id. For ldap tests only.",
            "nullable": true
          },
          "user_attribute_map_email": {
            "type": "string",
            "description": "Name of user record attributes used to indicate email address field",
            "nullable": true
          },
          "user_attribute_map_first_name": {
            "type": "string",
            "description": "Name of user record attributes used to indicate first name",
            "nullable": true
          },
          "user_attribute_map_last_name": {
            "type": "string",
            "description": "Name of user record attributes used to indicate last name",
            "nullable": true
          },
          "user_attribute_map_ldap_id": {
            "type": "string",
            "description": "Name of user record attributes used to indicate unique record id",
            "nullable": true
          },
          "user_attributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LDAPUserAttributeRead" },
            "readOnly": true,
            "description": "(Read-only) Array of mappings between LDAP User Attributes and Looker User Attributes",
            "nullable": true
          },
          "user_attributes_with_ids": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LDAPUserAttributeWrite" },
            "description": "(Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids",
            "nullable": true
          },
          "user_bind_base_dn": {
            "type": "string",
            "description": "Distinguished name of LDAP node used as the base for user searches",
            "nullable": true
          },
          "user_custom_filter": {
            "type": "string",
            "description": "(Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses.",
            "nullable": true
          },
          "user_id_attribute_names": {
            "type": "string",
            "description": "Name(s) of user record attributes used for matching user login id (comma separated list)",
            "nullable": true
          },
          "user_objectclass": {
            "type": "string",
            "description": "(Optional) Name of user record objectclass used for finding user during login id",
            "nullable": true
          },
          "allow_normal_group_membership": {
            "type": "boolean",
            "description": "Allow LDAP auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.",
            "nullable": false
          },
          "allow_roles_from_normal_groups": {
            "type": "boolean",
            "description": "LDAP auth'd users will be able to inherit roles from non-reflected Looker groups.",
            "nullable": false
          },
          "allow_direct_roles": {
            "type": "boolean",
            "description": "Allows roles to be directly assigned to LDAP auth'd users.",
            "nullable": false
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LDAPConfigTestResult": {
        "properties": {
          "details": {
            "type": "string",
            "readOnly": true,
            "description": "Additional details for error cases",
            "nullable": true
          },
          "issues": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LDAPConfigTestIssue" },
            "readOnly": true,
            "description": "Array of issues/considerations about the result",
            "nullable": true
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "Short human readable test about the result",
            "nullable": true
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "description": "Test status code: always 'success' or 'error'",
            "nullable": true
          },
          "trace": {
            "type": "string",
            "readOnly": true,
            "description": "A more detailed trace of incremental results during auth tests",
            "nullable": true
          },
          "user": { "$ref": "#/components/schemas/LDAPUser" },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to ldap config",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LDAPConfigTestIssue": {
        "properties": {
          "severity": {
            "type": "string",
            "readOnly": true,
            "description": "Severity of the issue. Error or Warning",
            "nullable": true
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "Message describing the issue",
            "nullable": true
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "LDAPGroupRead": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of group in LDAP",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Role" },
            "readOnly": true,
            "description": "Looker Roles",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to ldap config",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LDAPGroupWrite": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of group in LDAP",
            "nullable": true
          },
          "role_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "description": "Looker Role Ids",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to ldap config",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LDAPUserAttributeRead": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of User Attribute in LDAP",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "readOnly": true,
            "description": "Required to be in LDAP assertion for login to be allowed to succeed",
            "nullable": false
          },
          "user_attributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserAttribute" },
            "readOnly": true,
            "description": "Looker User Attributes",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to ldap config",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LDAPUserAttributeWrite": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of User Attribute in LDAP",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "description": "Required to be in LDAP assertion for login to be allowed to succeed",
            "nullable": false
          },
          "user_attribute_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "description": "Looker User Attribute Ids",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to ldap config",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LDAPUser": {
        "properties": {
          "all_emails": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "Array of user's email addresses and aliases for use in migration",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "readOnly": true,
            "description": "Dictionary of user's attributes (name/value)",
            "nullable": true
          },
          "email": {
            "type": "string",
            "readOnly": true,
            "description": "Primary email address",
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "readOnly": true,
            "description": "First name",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "Array of user's groups (group names only)",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "readOnly": true,
            "description": "Last Name",
            "nullable": true
          },
          "ldap_dn": {
            "type": "string",
            "readOnly": true,
            "description": "LDAP's distinguished name for the user record",
            "nullable": true
          },
          "ldap_id": {
            "type": "string",
            "readOnly": true,
            "description": "LDAP's Unique ID for the user",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "Array of user's roles (role names only)",
            "nullable": true
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to ldap config",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LegacyFeature": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "Description",
            "nullable": true
          },
          "enabled_locally": {
            "type": "boolean",
            "description": "Whether this feature has been enabled by a user",
            "nullable": false
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this feature is currently enabled",
            "nullable": false
          },
          "disallowed_as_of_version": {
            "type": "string",
            "readOnly": true,
            "description": "Looker version where this feature became a legacy feature",
            "nullable": true
          },
          "disable_on_upgrade_to_version": {
            "type": "string",
            "readOnly": true,
            "description": "Looker version where this feature will be automatically disabled",
            "nullable": true
          },
          "end_of_life_version": {
            "type": "string",
            "readOnly": true,
            "description": "Future Looker version where this feature will be removed",
            "nullable": true
          },
          "documentation_url": {
            "type": "string",
            "readOnly": true,
            "description": "URL for documentation about this feature",
            "nullable": true
          },
          "approximate_disable_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Approximate date that this feature will be automatically disabled.",
            "nullable": true
          },
          "approximate_end_of_life_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Approximate date that this feature will be removed.",
            "nullable": true
          },
          "has_disabled_on_upgrade": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this legacy feature may have been automatically disabled when upgrading to the current version.",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "LocalizationSettings": {
        "properties": {
          "default_locale": {
            "type": "string",
            "readOnly": true,
            "description": "Default locale for localization",
            "nullable": true
          },
          "localization_level": {
            "type": "string",
            "readOnly": true,
            "description": "Localization level - strict or permissive",
            "nullable": true
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "LookBasic": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "content_metadata_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of content metadata",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "title": {
            "type": "string",
            "readOnly": true,
            "description": "Look Title",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "Look": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "content_metadata_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of content metadata",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "Look Title",
            "nullable": true
          },
          "content_favorite_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Content Favorite Id",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Look was created.",
            "nullable": true
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether or not a look is 'soft' deleted.",
            "nullable": false
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Look was deleted.",
            "nullable": true
          },
          "deleter_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of User that deleted the look.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "embed_url": {
            "type": "string",
            "readOnly": true,
            "description": "Embed Url",
            "nullable": true
          },
          "excel_file_url": {
            "type": "string",
            "readOnly": true,
            "description": "Excel File Url",
            "nullable": true
          },
          "favorite_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times favorited",
            "nullable": true
          },
          "google_spreadsheet_formula": {
            "type": "string",
            "readOnly": true,
            "description": "Google Spreadsheet Formula",
            "nullable": true
          },
          "image_embed_url": {
            "type": "string",
            "readOnly": true,
            "description": "Image Embed Url",
            "nullable": true
          },
          "is_run_on_load": {
            "type": "boolean",
            "description": "auto-run query when Look viewed",
            "nullable": false
          },
          "last_accessed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Look was last accessed by any user",
            "nullable": true
          },
          "last_updater_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of User that last updated the look.",
            "nullable": true
          },
          "last_viewed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time last viewed in the Looker web UI",
            "nullable": true
          },
          "model": { "$ref": "#/components/schemas/LookModel" },
          "public": {
            "type": "boolean",
            "description": "Is Public",
            "nullable": true
          },
          "public_slug": {
            "type": "string",
            "readOnly": true,
            "description": "Public Slug",
            "nullable": true
          },
          "public_url": {
            "type": "string",
            "readOnly": true,
            "description": "Public Url",
            "nullable": true
          },
          "query_id": {
            "type": "integer",
            "format": "int64",
            "description": "Query Id",
            "nullable": true
          },
          "short_url": {
            "type": "string",
            "readOnly": true,
            "description": "Short Url",
            "nullable": true
          },
          "folder": { "$ref": "#/components/schemas/FolderBase" },
          "folder_id": {
            "type": "string",
            "description": "Folder Id",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Look was updated.",
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "User Id",
            "nullable": true
          },
          "view_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times viewed in the Looker web UI",
            "nullable": true
          },
          "user": { "$ref": "#/components/schemas/UserIdOnly" },
          "space_id": {
            "type": "string",
            "description": "Space Id",
            "nullable": true
          },
          "space": { "$ref": "#/components/schemas/SpaceBase" }
        },
        "x-looker-status": "stable"
      },
      "LookWithQuery": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "content_metadata_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of content metadata",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "Look Title",
            "nullable": true
          },
          "content_favorite_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Content Favorite Id",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Look was created.",
            "nullable": true
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether or not a look is 'soft' deleted.",
            "nullable": false
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Look was deleted.",
            "nullable": true
          },
          "deleter_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of User that deleted the look.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "embed_url": {
            "type": "string",
            "readOnly": true,
            "description": "Embed Url",
            "nullable": true
          },
          "excel_file_url": {
            "type": "string",
            "readOnly": true,
            "description": "Excel File Url",
            "nullable": true
          },
          "favorite_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times favorited",
            "nullable": true
          },
          "google_spreadsheet_formula": {
            "type": "string",
            "readOnly": true,
            "description": "Google Spreadsheet Formula",
            "nullable": true
          },
          "image_embed_url": {
            "type": "string",
            "readOnly": true,
            "description": "Image Embed Url",
            "nullable": true
          },
          "is_run_on_load": {
            "type": "boolean",
            "description": "auto-run query when Look viewed",
            "nullable": false
          },
          "last_accessed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Look was last accessed by any user",
            "nullable": true
          },
          "last_updater_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of User that last updated the look.",
            "nullable": true
          },
          "last_viewed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time last viewed in the Looker web UI",
            "nullable": true
          },
          "model": { "$ref": "#/components/schemas/LookModel" },
          "public": {
            "type": "boolean",
            "description": "Is Public",
            "nullable": true
          },
          "public_slug": {
            "type": "string",
            "readOnly": true,
            "description": "Public Slug",
            "nullable": true
          },
          "public_url": {
            "type": "string",
            "readOnly": true,
            "description": "Public Url",
            "nullable": true
          },
          "query_id": {
            "type": "integer",
            "format": "int64",
            "description": "Query Id",
            "nullable": true
          },
          "short_url": {
            "type": "string",
            "readOnly": true,
            "description": "Short Url",
            "nullable": true
          },
          "folder": { "$ref": "#/components/schemas/FolderBase" },
          "folder_id": {
            "type": "string",
            "description": "Folder Id",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Look was updated.",
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "User Id",
            "nullable": true
          },
          "view_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times viewed in the Looker web UI",
            "nullable": true
          },
          "user": { "$ref": "#/components/schemas/UserIdOnly" },
          "space_id": {
            "type": "string",
            "description": "Space Id",
            "nullable": true
          },
          "space": { "$ref": "#/components/schemas/SpaceBase" },
          "query": { "$ref": "#/components/schemas/Query" },
          "url": {
            "type": "string",
            "readOnly": true,
            "description": "Url",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookWithDashboards": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "content_metadata_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of content metadata",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "Look Title",
            "nullable": true
          },
          "content_favorite_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Content Favorite Id",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Look was created.",
            "nullable": true
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether or not a look is 'soft' deleted.",
            "nullable": false
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Look was deleted.",
            "nullable": true
          },
          "deleter_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of User that deleted the look.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "embed_url": {
            "type": "string",
            "readOnly": true,
            "description": "Embed Url",
            "nullable": true
          },
          "excel_file_url": {
            "type": "string",
            "readOnly": true,
            "description": "Excel File Url",
            "nullable": true
          },
          "favorite_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times favorited",
            "nullable": true
          },
          "google_spreadsheet_formula": {
            "type": "string",
            "readOnly": true,
            "description": "Google Spreadsheet Formula",
            "nullable": true
          },
          "image_embed_url": {
            "type": "string",
            "readOnly": true,
            "description": "Image Embed Url",
            "nullable": true
          },
          "is_run_on_load": {
            "type": "boolean",
            "description": "auto-run query when Look viewed",
            "nullable": false
          },
          "last_accessed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Look was last accessed by any user",
            "nullable": true
          },
          "last_updater_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of User that last updated the look.",
            "nullable": true
          },
          "last_viewed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time last viewed in the Looker web UI",
            "nullable": true
          },
          "model": { "$ref": "#/components/schemas/LookModel" },
          "public": {
            "type": "boolean",
            "description": "Is Public",
            "nullable": true
          },
          "public_slug": {
            "type": "string",
            "readOnly": true,
            "description": "Public Slug",
            "nullable": true
          },
          "public_url": {
            "type": "string",
            "readOnly": true,
            "description": "Public Url",
            "nullable": true
          },
          "query_id": {
            "type": "integer",
            "format": "int64",
            "description": "Query Id",
            "nullable": true
          },
          "short_url": {
            "type": "string",
            "readOnly": true,
            "description": "Short Url",
            "nullable": true
          },
          "folder": { "$ref": "#/components/schemas/FolderBase" },
          "folder_id": {
            "type": "string",
            "description": "Folder Id",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time that the Look was updated.",
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "User Id",
            "nullable": true
          },
          "view_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times viewed in the Looker web UI",
            "nullable": true
          },
          "user": { "$ref": "#/components/schemas/UserIdOnly" },
          "space_id": {
            "type": "string",
            "description": "Space Id",
            "nullable": true
          },
          "space": { "$ref": "#/components/schemas/SpaceBase" },
          "dashboards": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DashboardBase" },
            "readOnly": true,
            "description": "Dashboards",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookModel": {
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Model Id",
            "nullable": false
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Model Label",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "LookmlModelNavExplore": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the explore",
            "nullable": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "Description for the explore",
            "nullable": false
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Label for the explore",
            "nullable": true
          },
          "hidden": {
            "type": "boolean",
            "readOnly": true,
            "description": "Is this explore marked as hidden",
            "nullable": false
          },
          "group_label": {
            "type": "string",
            "readOnly": true,
            "description": "Label used to group explores in the navigation menus",
            "nullable": true
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExplore": {
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Fully qualified explore name (model name plus explore name)",
            "nullable": false
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Explore name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "Description",
            "nullable": false
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Label",
            "nullable": true
          },
          "scopes": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "Scopes",
            "nullable": true
          },
          "can_total": {
            "type": "boolean",
            "readOnly": true,
            "description": "Can Total",
            "nullable": false
          },
          "can_save": {
            "type": "boolean",
            "readOnly": true,
            "description": "Can Save",
            "nullable": false
          },
          "can_explain": {
            "type": "boolean",
            "readOnly": true,
            "description": "Can Explain",
            "nullable": false
          },
          "can_pivot_in_db": {
            "type": "boolean",
            "readOnly": true,
            "description": "Can pivot in the DB",
            "nullable": false
          },
          "can_subtotal": {
            "type": "boolean",
            "readOnly": true,
            "description": "Can use subtotals",
            "nullable": false
          },
          "has_timezone_support": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has timezone support",
            "nullable": false
          },
          "supports_cost_estimate": {
            "type": "boolean",
            "readOnly": true,
            "description": "Cost estimates supported",
            "nullable": false
          },
          "connection_name": {
            "type": "string",
            "readOnly": true,
            "description": "Connection name",
            "nullable": true
          },
          "null_sort_treatment": {
            "type": "string",
            "readOnly": true,
            "description": "How nulls are sorted, possible values are \"low\", \"high\", \"first\" and \"last\"",
            "nullable": true
          },
          "files": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "List of model source files",
            "nullable": true
          },
          "source_file": {
            "type": "string",
            "readOnly": true,
            "description": "Primary source_file file",
            "nullable": true
          },
          "project_name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of project",
            "nullable": true
          },
          "model_name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of model",
            "nullable": true
          },
          "view_name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of view",
            "nullable": true
          },
          "hidden": {
            "type": "boolean",
            "readOnly": true,
            "description": "Is hidden",
            "nullable": false
          },
          "sql_table_name": {
            "type": "string",
            "readOnly": true,
            "description": "A sql_table_name expression that defines what sql table the view/explore maps onto. Example: \"prod_orders2 AS orders\" in a view named orders.",
            "nullable": true
          },
          "access_filter_fields": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "x-looker-deprecated": true,
            "description": "(DEPRECATED) Array of access filter field names",
            "nullable": true
          },
          "access_filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LookmlModelExploreAccessFilter"
            },
            "readOnly": true,
            "description": "Access filters",
            "nullable": true
          },
          "aliases": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookmlModelExploreAlias" },
            "readOnly": true,
            "description": "Aliases",
            "nullable": true
          },
          "always_filter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LookmlModelExploreAlwaysFilter"
            },
            "readOnly": true,
            "description": "Always filter",
            "nullable": true
          },
          "conditionally_filter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LookmlModelExploreConditionallyFilter"
            },
            "readOnly": true,
            "description": "Conditionally filter",
            "nullable": true
          },
          "index_fields": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "Array of index fields",
            "nullable": true
          },
          "sets": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookmlModelExploreSet" },
            "readOnly": true,
            "description": "Sets",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "An array of arbitrary string tags provided in the model for this explore.",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookmlModelExploreError" },
            "readOnly": true,
            "description": "Errors",
            "nullable": true
          },
          "fields": {
            "$ref": "#/components/schemas/LookmlModelExploreFieldset"
          },
          "joins": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookmlModelExploreJoins" },
            "readOnly": true,
            "description": "Views joined into this explore",
            "nullable": true
          },
          "group_label": {
            "type": "string",
            "readOnly": true,
            "description": "Label used to group explores in the navigation menus",
            "nullable": true
          },
          "supported_measure_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LookmlModelExploreSupportedMeasureType"
            },
            "readOnly": true,
            "description": "An array of items describing which custom measure types are supported for creating a custom measure 'based_on' each possible dimension type.",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreSupportedMeasureType": {
        "properties": {
          "dimension_type": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "measure_types": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreAccessFilter": {
        "properties": {
          "field": {
            "type": "string",
            "readOnly": true,
            "description": "Field to be filtered",
            "nullable": true
          },
          "user_attribute": {
            "type": "string",
            "readOnly": true,
            "description": "User attribute name",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreConditionallyFilter": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name",
            "nullable": true
          },
          "value": {
            "type": "string",
            "readOnly": true,
            "description": "Value",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreAlwaysFilter": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name",
            "nullable": true
          },
          "value": {
            "type": "string",
            "readOnly": true,
            "description": "Value",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreAlias": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name",
            "nullable": true
          },
          "value": {
            "type": "string",
            "readOnly": true,
            "description": "Value",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreSet": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name",
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "Value set",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreError": {
        "properties": {
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "Error Message",
            "nullable": true
          },
          "details": {
            "type": "string",
            "format": "any",
            "readOnly": true,
            "description": "Details",
            "nullable": true
          },
          "error_pos": {
            "type": "string",
            "readOnly": true,
            "description": "Error source location",
            "nullable": true
          },
          "field_error": {
            "type": "boolean",
            "readOnly": true,
            "description": "Is this a field error",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreFieldset": {
        "properties": {
          "dimensions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookmlModelExploreField" },
            "readOnly": true,
            "description": "Array of dimensions",
            "nullable": true
          },
          "measures": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookmlModelExploreField" },
            "readOnly": true,
            "description": "Array of measures",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookmlModelExploreField" },
            "readOnly": true,
            "description": "Array of filters",
            "nullable": true
          },
          "parameters": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookmlModelExploreField" },
            "readOnly": true,
            "description": "Array of parameters",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreField": {
        "properties": {
          "align": {
            "type": "string",
            "readOnly": true,
            "enum": ["left", "right"],
            "description": "The appropriate horizontal text alignment the values of this field should be displayed in. Valid values are: \"left\", \"right\".",
            "nullable": false
          },
          "can_filter": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether it's possible to filter on this field.",
            "nullable": false
          },
          "category": {
            "type": "string",
            "readOnly": true,
            "enum": ["parameter", "filter", "measure", "dimension"],
            "description": "Field category Valid values are: \"parameter\", \"filter\", \"measure\", \"dimension\".",
            "nullable": true
          },
          "default_filter_value": {
            "type": "string",
            "readOnly": true,
            "description": "The default value that this field uses when filtering. Null if there is no default value.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "Description",
            "nullable": true
          },
          "enumerations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LookmlModelExploreFieldEnumeration"
            },
            "readOnly": true,
            "description": "An array enumerating all the possible values that this field can contain. When null, there is no limit to the set of possible values this field can contain.",
            "nullable": true
          },
          "error": {
            "type": "string",
            "readOnly": true,
            "description": "An error message indicating a problem with the definition of this field. If there are no errors, this will be null.",
            "nullable": true
          },
          "field_group_label": {
            "type": "string",
            "readOnly": true,
            "description": "A label creating a grouping of fields. All fields with this label should be presented together when displayed in a UI.",
            "nullable": true
          },
          "field_group_variant": {
            "type": "string",
            "readOnly": true,
            "description": "When presented in a field group via field_group_label, a shorter name of the field to be displayed in that context.",
            "nullable": true
          },
          "fill_style": {
            "type": "string",
            "readOnly": true,
            "enum": ["enumeration", "range"],
            "description": "The style of dimension fill that is possible for this field. Null if no dimension fill is possible. Valid values are: \"enumeration\", \"range\".",
            "nullable": true
          },
          "fiscal_month_offset": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "An offset (in months) from the calendar start month to the fiscal start month defined in the LookML model this field belongs to.",
            "nullable": false
          },
          "has_allowed_values": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this field has a set of allowed_values specified in LookML.",
            "nullable": false
          },
          "hidden": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this field should be hidden from the user interface.",
            "nullable": false
          },
          "is_filter": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this field is a filter.",
            "nullable": false
          },
          "is_fiscal": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this field represents a fiscal time value.",
            "nullable": false
          },
          "is_numeric": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this field is of a type that represents a numeric value.",
            "nullable": false
          },
          "is_timeframe": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this field is of a type that represents a time value.",
            "nullable": false
          },
          "can_time_filter": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this field can be time filtered.",
            "nullable": false
          },
          "time_interval": {
            "$ref": "#/components/schemas/LookmlModelExploreFieldTimeInterval"
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Fully-qualified human-readable label of the field.",
            "nullable": false
          },
          "label_from_parameter": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the parameter that will provide a parameterized label for this field, if available in the current context.",
            "nullable": true
          },
          "label_short": {
            "type": "string",
            "readOnly": true,
            "description": "The human-readable label of the field, without the view label.",
            "nullable": false
          },
          "lookml_link": {
            "type": "string",
            "readOnly": true,
            "description": "A URL linking to the definition of this field in the LookML IDE.",
            "nullable": true
          },
          "map_layer": {
            "$ref": "#/components/schemas/LookmlModelExploreFieldMapLayer"
          },
          "measure": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this field is a measure.",
            "nullable": false
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Fully-qualified name of the field.",
            "nullable": false
          },
          "strict_value_format": {
            "type": "boolean",
            "readOnly": true,
            "description": "If yes, the field will not be localized with the user attribute number_format. Defaults to no",
            "nullable": false
          },
          "parameter": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this field is a parameter.",
            "nullable": false
          },
          "permanent": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this field can be removed from a query.",
            "nullable": true
          },
          "primary_key": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not the field represents a primary key.",
            "nullable": false
          },
          "project_name": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the project this field is defined in.",
            "nullable": true
          },
          "requires_refresh_on_sort": {
            "type": "boolean",
            "readOnly": true,
            "description": "When true, it's not possible to re-sort this field's values without re-running the SQL query, due to database logic that affects the sort.",
            "nullable": false
          },
          "scope": {
            "type": "string",
            "readOnly": true,
            "description": "The LookML scope this field belongs to. The scope is typically the field's view.",
            "nullable": false
          },
          "sortable": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this field can be sorted.",
            "nullable": false
          },
          "source_file": {
            "type": "string",
            "readOnly": true,
            "description": "The path portion of source_file_path.",
            "nullable": false
          },
          "source_file_path": {
            "type": "string",
            "readOnly": true,
            "description": "The fully-qualified path of the project file this field is defined in.",
            "nullable": false
          },
          "sql": {
            "type": "string",
            "readOnly": true,
            "description": "SQL expression as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.",
            "nullable": true
          },
          "sql_case": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LookmlModelExploreFieldSqlCase"
            },
            "readOnly": true,
            "description": "An array of conditions and values that make up a SQL Case expression, as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LookmlModelExploreFieldMeasureFilters"
            },
            "readOnly": true,
            "description": "Array of filter conditions defined for the measure in LookML.",
            "nullable": true
          },
          "suggest_dimension": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the dimension to base suggest queries from.",
            "nullable": false
          },
          "suggest_explore": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the explore to base suggest queries from.",
            "nullable": false
          },
          "suggestable": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not suggestions are possible for this field.",
            "nullable": false
          },
          "suggestions": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "If available, a list of suggestions for this field. For most fields, a suggest query is a more appropriate way to get an up-to-date list of suggestions. Or use enumerations to list all the possible values.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "An array of arbitrary string tags provided in the model for this field.",
            "nullable": false
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The LookML type of the field.",
            "nullable": false
          },
          "user_attribute_filter_types": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "enum": [
              "advanced_filter_string",
              "advanced_filter_number",
              "advanced_filter_datetime",
              "string",
              "number",
              "datetime",
              "relative_url",
              "yesno",
              "zipcode"
            ],
            "description": "An array of user attribute types that are allowed to be used in filters on this field. Valid values are: \"advanced_filter_string\", \"advanced_filter_number\", \"advanced_filter_datetime\", \"string\", \"number\", \"datetime\", \"relative_url\", \"yesno\", \"zipcode\".",
            "nullable": false
          },
          "value_format": {
            "type": "string",
            "readOnly": true,
            "description": "If specified, the LookML value format string for formatting values of this field.",
            "nullable": true
          },
          "view": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the view this field belongs to.",
            "nullable": false
          },
          "view_label": {
            "type": "string",
            "readOnly": true,
            "description": "The human-readable label of the view the field belongs to.",
            "nullable": false
          },
          "dynamic": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this field was specified in \"dynamic_fields\" and is not part of the model.",
            "nullable": false
          },
          "week_start_day": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday",
              "sunday"
            ],
            "description": "The name of the starting day of the week. Valid values are: \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\".",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreFieldEnumeration": {
        "properties": {
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Label",
            "nullable": true
          },
          "value": {
            "type": "string",
            "format": "any",
            "x-looker-polymorphic-types": [
              { "type": "string" },
              { "type": "number", "format": "float" }
            ],
            "readOnly": true,
            "description": "Value",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreFieldTimeInterval": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "day",
              "hour",
              "minute",
              "second",
              "millisecond",
              "microsecond",
              "week",
              "month",
              "quarter",
              "year"
            ],
            "description": "The type of time interval this field represents a grouping of. Valid values are: \"day\", \"hour\", \"minute\", \"second\", \"millisecond\", \"microsecond\", \"week\", \"month\", \"quarter\", \"year\".",
            "nullable": false
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The number of intervals this field represents a grouping of.",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreFieldSqlCase": {
        "properties": {
          "value": {
            "type": "string",
            "readOnly": true,
            "description": "SQL Case label value",
            "nullable": true
          },
          "condition": {
            "type": "string",
            "readOnly": true,
            "description": "SQL Case condition expression",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreFieldMeasureFilters": {
        "properties": {
          "field": {
            "type": "string",
            "readOnly": true,
            "description": "Filter field name",
            "nullable": true
          },
          "condition": {
            "type": "string",
            "readOnly": true,
            "description": "Filter condition value",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreFieldMapLayer": {
        "properties": {
          "url": {
            "type": "string",
            "readOnly": true,
            "description": "URL to the map layer resource.",
            "nullable": false
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the map layer, as defined in LookML.",
            "nullable": false
          },
          "feature_key": {
            "type": "string",
            "readOnly": true,
            "description": "Specifies the name of the TopoJSON object that the map layer references. If not specified, use the first object..",
            "nullable": true
          },
          "property_key": {
            "type": "string",
            "readOnly": true,
            "description": "Selects which property from the TopoJSON data to plot against. TopoJSON supports arbitrary metadata for each region. When null, the first matching property should be used.",
            "nullable": true
          },
          "property_label_key": {
            "type": "string",
            "readOnly": true,
            "description": "Which property from the TopoJSON data to use to label the region. When null, property_key should be used.",
            "nullable": true
          },
          "projection": {
            "type": "string",
            "readOnly": true,
            "description": "The preferred geographic projection of the map layer when displayed in a visualization that supports multiple geographic projections.",
            "nullable": true
          },
          "format": {
            "type": "string",
            "readOnly": true,
            "enum": ["topojson", "vector_tile_region"],
            "description": "Specifies the data format of the region information. Valid values are: \"topojson\", \"vector_tile_region\".",
            "nullable": false
          },
          "extents_json_url": {
            "type": "string",
            "readOnly": true,
            "description": "Specifies the URL to a JSON file that defines the geographic extents of each region available in the map layer. This data is used to automatically center the map on the available data for visualization purposes. The JSON file must be a JSON object where the keys are the mapping value of the feature (as specified by property_key) and the values are arrays of four numbers representing the west longitude, south latitude, east longitude, and north latitude extents of the region. The object must include a key for every possible value of property_key.",
            "nullable": true
          },
          "max_zoom_level": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The minimum zoom level that the map layer may be displayed at, for visualizations that support zooming.",
            "nullable": true
          },
          "min_zoom_level": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The maximum zoom level that the map layer may be displayed at, for visualizations that support zooming.",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModelExploreJoins": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of this join (and name of the view to join)",
            "nullable": true
          },
          "dependent_fields": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "Fields referenced by the join",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "Fields of the joined view to pull into this explore",
            "nullable": false
          },
          "foreign_key": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the dimension in this explore whose value is in the primary key of the joined view",
            "nullable": false
          },
          "from": {
            "type": "string",
            "readOnly": true,
            "description": "Name of view to join",
            "nullable": false
          },
          "outer_only": {
            "type": "boolean",
            "readOnly": true,
            "description": "Specifies whether all queries must use an outer join",
            "nullable": true
          },
          "relationship": {
            "type": "string",
            "readOnly": true,
            "description": "many_to_one, one_to_one, one_to_many, many_to_many",
            "nullable": true
          },
          "required_joins": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "Names of joins that must always be included in SQL queries",
            "nullable": false
          },
          "sql_foreign_key": {
            "type": "string",
            "readOnly": true,
            "description": "SQL expression that produces a foreign key",
            "nullable": false
          },
          "sql_on": {
            "type": "string",
            "readOnly": true,
            "description": "SQL ON expression describing the join condition",
            "nullable": false
          },
          "sql_table_name": {
            "type": "string",
            "readOnly": true,
            "description": "SQL table name to join",
            "nullable": false
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The join type: left_outer, full_outer, inner, or cross",
            "nullable": false
          },
          "view_label": {
            "type": "string",
            "readOnly": true,
            "description": "Label to display in UI selectors",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "LookmlModel": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "allowed_db_connection_names": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Array of names of connections this model is allowed to use",
            "nullable": true
          },
          "explores": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookmlModelNavExplore" },
            "readOnly": true,
            "description": "Array of explores (if has_content)",
            "nullable": true
          },
          "has_content": {
            "type": "boolean",
            "readOnly": true,
            "description": "Does this model declaration have have lookml content?",
            "nullable": false
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "UI-friendly name for this model",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the model. Also used as the unique identifier",
            "nullable": true
          },
          "project_name": {
            "type": "string",
            "description": "Name of project containing the model",
            "nullable": true
          },
          "unlimited_db_connections": {
            "type": "boolean",
            "description": "Is this model allowed to use all current and future connections",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "Manifest": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Manifest project name",
            "nullable": true
          },
          "imports": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ImportedProject" },
            "readOnly": true,
            "description": "Imports for a project",
            "nullable": true
          },
          "localization_settings": {
            "$ref": "#/components/schemas/LocalizationSettings"
          }
        },
        "x-looker-status": "beta"
      },
      "ModelSet": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "all_access": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false
          },
          "built_in": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "models": {
            "type": "array",
            "items": { "type": "string" },
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of ModelSet",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "OIDCConfig": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "alternate_email_login_allowed": {
            "type": "boolean",
            "description": "Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.",
            "nullable": false
          },
          "audience": {
            "type": "string",
            "description": "OpenID Provider Audience",
            "nullable": true
          },
          "auth_requires_role": {
            "type": "boolean",
            "description": "Users will not be allowed to login at all unless a role for them is found in OIDC if set to true",
            "nullable": false
          },
          "authorization_endpoint": {
            "type": "string",
            "description": "OpenID Provider Authorization Url",
            "nullable": true
          },
          "default_new_user_group_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "x-looker-write-only": true,
            "description": "(Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC",
            "nullable": true
          },
          "default_new_user_groups": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Group" },
            "readOnly": true,
            "description": "(Read-only) Groups that will be applied to new users the first time they login via OIDC",
            "nullable": true
          },
          "default_new_user_role_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "x-looker-write-only": true,
            "description": "(Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC",
            "nullable": true
          },
          "default_new_user_roles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Role" },
            "readOnly": true,
            "description": "(Read-only) Roles that will be applied to new users the first time they login via OIDC",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable/Disable OIDC authentication for the server",
            "nullable": false
          },
          "groups": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/OIDCGroupRead" },
            "readOnly": true,
            "description": "(Read-only) Array of mappings between OIDC Groups and Looker Roles",
            "nullable": true
          },
          "groups_attribute": {
            "type": "string",
            "description": "Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'",
            "nullable": true
          },
          "groups_with_role_ids": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/OIDCGroupWrite" },
            "description": "(Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids",
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "description": "Relying Party Identifier (provided by OpenID Provider)",
            "nullable": true
          },
          "issuer": {
            "type": "string",
            "description": "OpenID Provider Issuer",
            "nullable": true
          },
          "modified_at": {
            "type": "string",
            "readOnly": true,
            "description": "When this config was last modified",
            "nullable": true
          },
          "modified_by": {
            "type": "string",
            "readOnly": true,
            "description": "User id of user who last modified this config",
            "nullable": true
          },
          "new_user_migration_types": {
            "type": "string",
            "description": "Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'",
            "nullable": true
          },
          "scopes": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Array of scopes to request.",
            "nullable": true
          },
          "secret": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) Relying Party Secret (provided by OpenID Provider)",
            "nullable": true
          },
          "set_roles_from_groups": {
            "type": "boolean",
            "description": "Set user roles in Looker based on groups from OIDC",
            "nullable": false
          },
          "test_slug": {
            "type": "string",
            "readOnly": true,
            "description": "Slug to identify configurations that are created in order to run a OIDC config test",
            "nullable": true
          },
          "token_endpoint": {
            "type": "string",
            "description": "OpenID Provider Token Url",
            "nullable": true
          },
          "user_attribute_map_email": {
            "type": "string",
            "description": "Name of user record attributes used to indicate email address field",
            "nullable": true
          },
          "user_attribute_map_first_name": {
            "type": "string",
            "description": "Name of user record attributes used to indicate first name",
            "nullable": true
          },
          "user_attribute_map_last_name": {
            "type": "string",
            "description": "Name of user record attributes used to indicate last name",
            "nullable": true
          },
          "user_attributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/OIDCUserAttributeRead" },
            "readOnly": true,
            "description": "(Read-only) Array of mappings between OIDC User Attributes and Looker User Attributes",
            "nullable": true
          },
          "user_attributes_with_ids": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/OIDCUserAttributeWrite" },
            "description": "(Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids",
            "nullable": true
          },
          "userinfo_endpoint": {
            "type": "string",
            "description": "OpenID Provider User Information Url",
            "nullable": true
          },
          "allow_normal_group_membership": {
            "type": "boolean",
            "description": "Allow OIDC auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.",
            "nullable": false
          },
          "allow_roles_from_normal_groups": {
            "type": "boolean",
            "description": "OIDC auth'd users will inherit roles from non-reflected Looker groups.",
            "nullable": false
          },
          "allow_direct_roles": {
            "type": "boolean",
            "description": "Allows roles to be directly assigned to OIDC auth'd users.",
            "nullable": false
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "OIDCGroupRead": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of group in OIDC",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Role" },
            "readOnly": true,
            "description": "Looker Roles",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "OIDCGroupWrite": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of group in OIDC",
            "nullable": true
          },
          "role_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "description": "Looker Role Ids",
            "nullable": true
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "OIDCUserAttributeRead": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of User Attribute in OIDC",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "readOnly": true,
            "description": "Required to be in OIDC assertion for login to be allowed to succeed",
            "nullable": false
          },
          "user_attributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserAttribute" },
            "readOnly": true,
            "description": "Looker User Attributes",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "OIDCUserAttributeWrite": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of User Attribute in OIDC",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "description": "Required to be in OIDC assertion for login to be allowed to succeed",
            "nullable": false
          },
          "user_attribute_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "description": "Looker User Attribute Ids",
            "nullable": true
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "Permission": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "permission": {
            "type": "string",
            "readOnly": true,
            "description": "Permission symbol",
            "nullable": true
          },
          "parent": {
            "type": "string",
            "readOnly": true,
            "description": "Dependency parent symbol",
            "nullable": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "Description",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "PermissionSet": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "all_access": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false
          },
          "built_in": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "Name of PermissionSet",
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "items": { "type": "string" },
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "PrefetchDashboardFilterValue": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Dashboard filter name.",
            "nullable": true
          },
          "value": {
            "type": "string",
            "readOnly": true,
            "description": "Dashboard filter value",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "PrefetchAccessFilterValue": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "field": {
            "type": "string",
            "readOnly": true,
            "description": "Access filter field name.",
            "nullable": true
          },
          "model": {
            "type": "string",
            "readOnly": true,
            "description": "Access filter model name.",
            "nullable": true
          },
          "value": {
            "type": "string",
            "readOnly": true,
            "description": "Access filter value",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "Prefetch": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "computation_time": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Number of seconds it took to compute results for prefetch.",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time when prefetch was created.",
            "nullable": true
          },
          "hit_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times prefetch has been accessed.",
            "nullable": true
          },
          "result_size_bytes": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Size of result.",
            "nullable": true
          },
          "touched_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time when prefetch was last accessed.",
            "nullable": true
          },
          "ttl": {
            "type": "integer",
            "format": "int64",
            "description": "Number of seconds prefetch will live for.",
            "nullable": true
          },
          "value": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "readOnly": true,
            "description": "Data associated with the queries stored by prefetching the data",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "PrefetchDashboardRequest": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "computation_time": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Number of seconds it took to compute results for prefetch.",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time when prefetch was created.",
            "nullable": true
          },
          "hit_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times prefetch has been accessed.",
            "nullable": true
          },
          "result_size_bytes": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Size of result.",
            "nullable": true
          },
          "touched_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time when prefetch was last accessed.",
            "nullable": true
          },
          "ttl": {
            "type": "integer",
            "format": "int64",
            "description": "Number of seconds prefetch will live for.",
            "nullable": true
          },
          "value": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "readOnly": true,
            "description": "Data associated with the queries stored by prefetching the data",
            "nullable": true
          },
          "access_filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrefetchAccessFilterValue"
            },
            "description": "Access filters to apply when running queries for prefetch.",
            "nullable": true
          },
          "dashboard_filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrefetchDashboardFilterValue"
            },
            "description": "Dashboard filters to apply when running queries for prefetch.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "ProjectFile": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "An opaque token uniquely identifying a file within a project. Avoid parsing or decomposing the text of this token. This token is stable within a Looker release but may change between Looker releases",
            "nullable": false
          },
          "path": {
            "type": "string",
            "readOnly": true,
            "description": "Path, file name, and extension of the file relative to the project root directory",
            "nullable": true
          },
          "title": {
            "type": "string",
            "readOnly": true,
            "description": "Display name",
            "nullable": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "File type: model, view, etc",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "readOnly": true,
            "description": "The extension of the file: .view.lkml, .model.lkml, etc",
            "nullable": true
          },
          "mime_type": {
            "type": "string",
            "readOnly": true,
            "description": "File mime type",
            "nullable": true
          },
          "editable": {
            "type": "boolean",
            "readOnly": true,
            "description": "State of editability for the file.",
            "nullable": false
          },
          "git_status": { "$ref": "#/components/schemas/GitStatus" }
        },
        "x-looker-status": "beta"
      },
      "Project": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Project Id",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "Project display name",
            "nullable": false
          },
          "uses_git": {
            "type": "boolean",
            "readOnly": true,
            "description": "If true the project is configured with a git repository",
            "nullable": false
          },
          "git_remote_url": {
            "type": "string",
            "description": "Git remote repository url",
            "nullable": true
          },
          "git_username": {
            "type": "string",
            "description": "Git username for HTTPS authentication. (For production only, if using user attributes.)",
            "nullable": true
          },
          "git_password": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)",
            "nullable": true
          },
          "git_username_user_attribute": {
            "type": "string",
            "description": "User attribute name for username in per-user HTTPS authentication.",
            "nullable": true
          },
          "git_password_user_attribute": {
            "type": "string",
            "description": "User attribute name for password in per-user HTTPS authentication.",
            "nullable": true
          },
          "git_service_name": {
            "type": "string",
            "description": "Name of the git service provider",
            "nullable": true
          },
          "git_application_server_http_port": {
            "type": "integer",
            "format": "int64",
            "description": "Port that HTTP(S) application server is running on (for PRs, file browsing, etc.)",
            "nullable": true
          },
          "git_application_server_http_scheme": {
            "type": "string",
            "enum": ["http", "https"],
            "description": "Scheme that is running on application server (for PRs, file browsing, etc.) Valid values are: \"http\", \"https\".",
            "nullable": true
          },
          "deploy_secret": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated.",
            "nullable": true
          },
          "unset_deploy_secret": {
            "type": "boolean",
            "x-looker-write-only": true,
            "description": "(Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint.",
            "nullable": false
          },
          "pull_request_mode": {
            "type": "string",
            "enum": ["off", "links", "recommended", "required"],
            "description": "The git pull request policy for this project. Valid values are: \"off\", \"links\", \"recommended\", \"required\".",
            "nullable": false
          },
          "validation_required": {
            "type": "boolean",
            "description": "Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository",
            "nullable": false
          },
          "git_release_mgmt_enabled": {
            "type": "boolean",
            "description": "If true, advanced git release management is enabled for this project",
            "nullable": false
          },
          "allow_warnings": {
            "type": "boolean",
            "description": "Validation policy: If true, the project can be committed with warnings when `validation_required` is true. (`allow_warnings` does nothing if `validation_required` is false).",
            "nullable": false
          },
          "is_example": {
            "type": "boolean",
            "readOnly": true,
            "description": "If true the project is an example project and cannot be modified",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "ProjectError": {
        "properties": {
          "code": {
            "type": "string",
            "readOnly": true,
            "description": "A stable token that uniquely identifies this class of error, ignoring parameter values. Error message text may vary due to parameters or localization, but error codes do not. For example, a \"File not found\" error will have the same error code regardless of the filename in question or the user's display language",
            "nullable": true
          },
          "severity": {
            "type": "string",
            "readOnly": true,
            "description": "Severity: fatal, error, warning, info, success",
            "nullable": true
          },
          "kind": {
            "type": "string",
            "readOnly": true,
            "description": "Error classification: syntax, deprecation, model_configuration, etc",
            "nullable": true
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "Error message which may contain information such as dashboard or model names that may be considered sensitive in some use cases. Avoid storing or sending this message outside of Looker",
            "nullable": true
          },
          "field_name": {
            "type": "string",
            "readOnly": true,
            "description": "The field associated with this error",
            "nullable": true
          },
          "file_path": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the file containing this error",
            "nullable": true
          },
          "line_number": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Line number in the file of this error",
            "nullable": true
          },
          "model_id": {
            "type": "string",
            "readOnly": true,
            "description": "The model associated with this error",
            "nullable": true
          },
          "explore": {
            "type": "string",
            "readOnly": true,
            "description": "The explore associated with this error",
            "nullable": true
          },
          "help_url": {
            "type": "string",
            "readOnly": true,
            "description": "A link to Looker documentation about this error",
            "nullable": true
          },
          "params": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "readOnly": true,
            "description": "Error parameters",
            "nullable": true
          },
          "sanitized_message": {
            "type": "string",
            "readOnly": true,
            "description": "A version of the error message that does not contain potentially sensitive information. Suitable for situations in which messages are stored or sent to consumers outside of Looker, such as external logs. Sanitized messages will display \"(?)\" where sensitive information would appear in the corresponding non-sanitized message",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "ModelsNotValidated": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Model name",
            "nullable": true
          },
          "project_file_id": {
            "type": "string",
            "readOnly": true,
            "description": "Project file",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "ProjectValidation": {
        "properties": {
          "errors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProjectError" },
            "readOnly": true,
            "description": "A list of project errors",
            "nullable": true
          },
          "project_digest": {
            "type": "string",
            "readOnly": true,
            "description": "A hash value computed from the project's current state",
            "nullable": true
          },
          "models_not_validated": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ModelsNotValidated" },
            "readOnly": true,
            "description": "A list of models which were not fully validated",
            "nullable": true
          },
          "computation_time": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Duration of project validation in seconds",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "ProjectValidationCache": {
        "properties": {
          "errors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProjectError" },
            "readOnly": true,
            "description": "A list of project errors",
            "nullable": true
          },
          "project_digest": {
            "type": "string",
            "readOnly": true,
            "description": "A hash value computed from the project's current state",
            "nullable": true
          },
          "models_not_validated": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ModelsNotValidated" },
            "readOnly": true,
            "description": "A list of models which were not fully validated",
            "nullable": true
          },
          "computation_time": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Duration of project validation in seconds",
            "nullable": true
          },
          "stale": {
            "type": "boolean",
            "readOnly": true,
            "description": "If true, the cached project validation results are no longer accurate because the project has changed since the cached results were calculated",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "ProjectWorkspace": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "project_id": {
            "type": "string",
            "readOnly": true,
            "description": "The id of the project",
            "nullable": true
          },
          "workspace_id": {
            "type": "string",
            "readOnly": true,
            "description": "The id of the local workspace containing the project files",
            "nullable": true
          },
          "git_status": {
            "type": "string",
            "readOnly": true,
            "description": "The status of the local git directory",
            "nullable": true
          },
          "git_head": {
            "type": "string",
            "readOnly": true,
            "description": "Git head revision name",
            "nullable": true
          },
          "dependency_status": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "lock_optional",
              "lock_required",
              "lock_error",
              "install_none"
            ],
            "description": "Status of the dependencies in your project. Valid values are: \"lock_optional\", \"lock_required\", \"lock_error\", \"install_none\".",
            "nullable": true
          },
          "git_branch": { "$ref": "#/components/schemas/GitBranch" },
          "lookml_type": {
            "type": "string",
            "readOnly": true,
            "description": "The lookml syntax used by all files in this project",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "Query": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "model": {
            "type": "string",
            "description": "Model",
            "nullable": false
          },
          "view": {
            "type": "string",
            "description": "Explore Name",
            "nullable": false
          },
          "fields": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Fields",
            "nullable": true
          },
          "pivots": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Pivots",
            "nullable": true
          },
          "fill_fields": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Fill Fields",
            "nullable": true
          },
          "filters": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Filters",
            "nullable": true
          },
          "filter_expression": {
            "type": "string",
            "description": "Filter Expression",
            "nullable": true
          },
          "sorts": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Sorting for the query results. Use the format `[\"view.field\", ...]` to sort on fields in ascending order. Use the format `[\"view.field desc\", ...]` to sort on fields in descending order. Use `[\"__UNSORTED__\"]` (2 underscores before and after) to disable sorting entirely. Empty sorts `[]` will trigger a default sort.",
            "nullable": true
          },
          "limit": {
            "type": "string",
            "description": "Limit",
            "nullable": true
          },
          "column_limit": {
            "type": "string",
            "description": "Column Limit",
            "nullable": true
          },
          "total": {
            "type": "boolean",
            "description": "Total",
            "nullable": true
          },
          "row_total": {
            "type": "string",
            "description": "Raw Total",
            "nullable": true
          },
          "subtotals": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Fields on which to run subtotals",
            "nullable": true
          },
          "vis_config": {
            "type": "object",
            "additionalProperties": { "type": "string", "format": "any" },
            "description": "Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \"type\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.",
            "nullable": true
          },
          "filter_config": {
            "type": "object",
            "additionalProperties": { "type": "string", "format": "any" },
            "description": "The filter_config represents the state of the filter UI on the explore page for a given query. When running a query via the Looker UI, this parameter takes precedence over \"filters\". When creating a query or modifying an existing query, \"filter_config\" should be set to null. Setting it to any other value could cause unexpected filtering behavior. The format should be considered opaque.",
            "nullable": true
          },
          "visible_ui_sections": {
            "type": "string",
            "description": "Visible UI Sections",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "Slug",
            "nullable": true
          },
          "dynamic_fields": {
            "type": "string",
            "description": "Dynamic Fields",
            "nullable": true
          },
          "client_id": {
            "type": "string",
            "description": "Client Id: used to generate shortened explore URLs. If set by client, must be a unique 22 character alphanumeric string. Otherwise one will be generated.",
            "nullable": true
          },
          "share_url": {
            "type": "string",
            "readOnly": true,
            "description": "Share Url",
            "nullable": true
          },
          "expanded_share_url": {
            "type": "string",
            "readOnly": true,
            "description": "Expanded Share Url",
            "nullable": true
          },
          "url": {
            "type": "string",
            "readOnly": true,
            "description": "Expanded Url",
            "nullable": true
          },
          "query_timezone": {
            "type": "string",
            "description": "Query Timezone",
            "nullable": true
          },
          "has_table_calculations": {
            "type": "boolean",
            "readOnly": true,
            "description": "Has Table Calculations",
            "nullable": false
          },
          "runtime": {
            "type": "number",
            "format": "double",
            "x-looker-deprecated": true,
            "description": "(DEPRECATED) Runtime (Deprecated)",
            "nullable": true
          }
        },
        "x-looker-status": "stable",
        "required": ["model", "view"]
      },
      "CreateQueryTask": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "query_id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of query to run",
            "nullable": true
          },
          "result_format": {
            "type": "string",
            "enum": [
              "inline_json",
              "json",
              "json_detail",
              "json_fe",
              "csv",
              "html",
              "md",
              "txt",
              "xlsx",
              "gsxml"
            ],
            "description": "Desired async query result format. Valid values are: \"inline_json\", \"json\", \"json_detail\", \"json_fe\", \"csv\", \"html\", \"md\", \"txt\", \"xlsx\", \"gsxml\".",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "Source of query task",
            "nullable": true
          },
          "deferred": {
            "type": "boolean",
            "description": "Create the task but defer execution",
            "nullable": false
          },
          "look_id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of look associated with query.",
            "nullable": true
          },
          "dashboard_id": {
            "type": "string",
            "description": "Id of dashboard associated with query.",
            "nullable": true
          }
        },
        "x-looker-status": "beta",
        "required": ["query_id", "result_format"]
      },
      "QueryTask": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "query_id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of query",
            "nullable": true
          },
          "query": { "$ref": "#/components/schemas/Query" },
          "generate_links": {
            "type": "boolean",
            "description": "whether or not to generate links in the query response.",
            "nullable": false
          },
          "force_production": {
            "type": "boolean",
            "description": "Use production models to run query (even is user is in dev mode).",
            "nullable": false
          },
          "path_prefix": {
            "type": "string",
            "description": "Prefix to use for drill links.",
            "nullable": true
          },
          "cache": {
            "type": "boolean",
            "description": "Whether or not to use the cache",
            "nullable": false
          },
          "server_table_calcs": {
            "type": "boolean",
            "description": "Whether or not to run table calculations on the server",
            "nullable": false
          },
          "cache_only": {
            "type": "boolean",
            "description": "Retrieve any results from cache even if the results have expired.",
            "nullable": false
          },
          "cache_key": {
            "type": "string",
            "readOnly": true,
            "description": "cache key used to cache query.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of query task.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "Source of query task.",
            "nullable": true
          },
          "runtime": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Runtime of prior queries.",
            "nullable": true
          },
          "rebuild_pdts": {
            "type": "boolean",
            "description": "Rebuild PDTS used in query.",
            "nullable": false
          },
          "result_source": {
            "type": "string",
            "readOnly": true,
            "description": "Source of the results of the query.",
            "nullable": true
          },
          "look_id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of look associated with query.",
            "nullable": true
          },
          "dashboard_id": {
            "type": "string",
            "description": "Id of dashboard associated with query.",
            "nullable": true
          },
          "result_format": {
            "type": "string",
            "readOnly": true,
            "description": "The data format of the query results.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "RenderTask": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Date/Time render task was created",
            "nullable": true
          },
          "dashboard_filters": {
            "type": "string",
            "readOnly": true,
            "description": "Filter values to apply to the dashboard queries, in URL query format",
            "nullable": true
          },
          "dashboard_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of dashboard to render",
            "nullable": true
          },
          "dashboard_style": {
            "type": "string",
            "readOnly": true,
            "description": "Dashboard layout style: single_column or tiled",
            "nullable": true
          },
          "finalized_at": {
            "type": "string",
            "readOnly": true,
            "description": "Date/Time render task was completed",
            "nullable": true
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Output height in pixels. Flowed layouts may ignore this value.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Id of this render task",
            "nullable": false
          },
          "look_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of look to render",
            "nullable": true
          },
          "lookml_dashboard_id": {
            "type": "string",
            "readOnly": true,
            "description": "Id of lookml dashboard to render",
            "nullable": true
          },
          "query_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of query to render",
            "nullable": true
          },
          "query_runtime": {
            "type": "number",
            "format": "double",
            "readOnly": true,
            "description": "Number of seconds elapsed running queries",
            "nullable": true
          },
          "render_runtime": {
            "type": "number",
            "format": "double",
            "readOnly": true,
            "description": "Number of seconds elapsed rendering data",
            "nullable": true
          },
          "result_format": {
            "type": "string",
            "readOnly": true,
            "description": "Output format: pdf, png, or jpg",
            "nullable": true
          },
          "runtime": {
            "type": "number",
            "format": "double",
            "readOnly": true,
            "description": "Total seconds elapsed for render task",
            "nullable": true
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "description": "Render task status: enqueued_for_query, querying, enqueued_for_render, rendering, success, failure",
            "nullable": true
          },
          "status_detail": {
            "type": "string",
            "readOnly": true,
            "description": "Additional information about the current status",
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The user account permissions in which the render task will execute",
            "nullable": true
          },
          "width": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Output width in pixels",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "CreateDashboardRenderTask": {
        "properties": {
          "dashboard_filters": {
            "type": "string",
            "description": "Filter values to apply to the dashboard queries, in URL query format",
            "nullable": true
          },
          "dashboard_style": {
            "type": "string",
            "description": "Dashboard layout style: single_column or tiled",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "ResultMakerFilterablesListen": {
        "properties": {
          "dashboard_filter_name": {
            "type": "string",
            "description": "The name of a dashboard filter to listen to.",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "The name of the field in the filterable to filter with the value of the dashboard filter.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "ResultMakerFilterables": {
        "properties": {
          "model": {
            "type": "string",
            "readOnly": true,
            "description": "The model this filterable comes from (used for field suggestions).",
            "nullable": true
          },
          "view": {
            "type": "string",
            "readOnly": true,
            "description": "The view this filterable comes from (used for field suggestions).",
            "nullable": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the filterable thing (Query or Merged Results).",
            "nullable": true
          },
          "listen": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultMakerFilterablesListen"
            },
            "readOnly": true,
            "description": "array of dashboard_filter_name: and field: objects.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "ResultMakerWithIdVisConfigAndDynamicFields": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id.",
            "nullable": false
          },
          "dynamic_fields": {
            "type": "string",
            "readOnly": true,
            "description": "JSON string of dynamic field information.",
            "nullable": true
          },
          "filterables": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ResultMakerFilterables" },
            "readOnly": true,
            "description": "array of items that can be filtered and information about them.",
            "nullable": true
          },
          "sorts": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "Sorts of the constituent Look, Query, or Merge Query",
            "nullable": true
          },
          "merge_result_id": {
            "type": "string",
            "readOnly": true,
            "description": "ID of merge result if this is a merge_result.",
            "nullable": true
          },
          "total": {
            "type": "boolean",
            "readOnly": true,
            "description": "Total of the constituent Look, Query, or Merge Query",
            "nullable": false
          },
          "query_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "ID of query if this is a query.",
            "nullable": true
          },
          "sql_query_id": {
            "type": "string",
            "readOnly": true,
            "description": "ID of SQL Query if this is a SQL Runner Query",
            "nullable": true
          },
          "query": { "$ref": "#/components/schemas/Query" },
          "vis_config": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "readOnly": true,
            "description": "Vis config of the constituent Query, or Merge Query.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "Role": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "Name of Role",
            "nullable": true
          },
          "permission_set": { "$ref": "#/components/schemas/PermissionSet" },
          "permission_set_id": {
            "type": "integer",
            "format": "int64",
            "x-looker-write-only": true,
            "description": "(Write-Only) Id of permission set",
            "nullable": true
          },
          "model_set": { "$ref": "#/components/schemas/ModelSet" },
          "model_set_id": {
            "type": "integer",
            "format": "int64",
            "x-looker-write-only": true,
            "description": "(Write-Only) Id of model set",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          },
          "users_url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get list of users with this role",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "RunningQueries": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "user": { "$ref": "#/components/schemas/UserPublic" },
          "query": { "$ref": "#/components/schemas/Query" },
          "sql_query": { "$ref": "#/components/schemas/SqlQuery" },
          "look": { "$ref": "#/components/schemas/LookBasic" },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Date/Time Query was initiated",
            "nullable": true
          },
          "completed_at": {
            "type": "string",
            "readOnly": true,
            "description": "Date/Time Query was completed",
            "nullable": true
          },
          "query_id": {
            "type": "string",
            "readOnly": true,
            "description": "Query Id",
            "nullable": true
          },
          "source": {
            "type": "string",
            "readOnly": true,
            "description": "Source (look, dashboard, queryrunner, explore, etc.)",
            "nullable": true
          },
          "node_id": {
            "type": "string",
            "readOnly": true,
            "description": "Node Id",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "Slug",
            "nullable": true
          },
          "query_task_id": {
            "type": "string",
            "readOnly": true,
            "description": "ID of a Query Task",
            "nullable": true
          },
          "cache_key": {
            "type": "string",
            "readOnly": true,
            "description": "Cache Key",
            "nullable": true
          },
          "connection_name": {
            "type": "string",
            "readOnly": true,
            "description": "Connection",
            "nullable": true
          },
          "dialect": {
            "type": "string",
            "readOnly": true,
            "description": "Dialect",
            "nullable": true
          },
          "connection_id": {
            "type": "string",
            "readOnly": true,
            "description": "Connection ID",
            "nullable": true
          },
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "Additional Information(Error message or verbose status)",
            "nullable": true
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "description": "Status description",
            "nullable": true
          },
          "runtime": {
            "type": "number",
            "format": "double",
            "readOnly": true,
            "description": "Number of seconds elapsed running the Query",
            "nullable": true
          },
          "sql": {
            "type": "string",
            "readOnly": true,
            "description": "SQL text of the query as run",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "SamlConfig": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable/Disable Saml authentication for the server",
            "nullable": false
          },
          "idp_cert": {
            "type": "string",
            "description": "Identity Provider Certificate (provided by IdP)",
            "nullable": true
          },
          "idp_url": {
            "type": "string",
            "description": "Identity Provider Url (provided by IdP)",
            "nullable": true
          },
          "idp_issuer": {
            "type": "string",
            "description": "Identity Provider Issuer (provided by IdP)",
            "nullable": true
          },
          "idp_audience": {
            "type": "string",
            "description": "Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.",
            "nullable": true
          },
          "allowed_clock_drift": {
            "type": "integer",
            "format": "int64",
            "description": "Count of seconds of clock drift to allow when validating timestamps of assertions.",
            "nullable": true
          },
          "user_attribute_map_email": {
            "type": "string",
            "description": "Name of user record attributes used to indicate email address field",
            "nullable": true
          },
          "user_attribute_map_first_name": {
            "type": "string",
            "description": "Name of user record attributes used to indicate first name",
            "nullable": true
          },
          "user_attribute_map_last_name": {
            "type": "string",
            "description": "Name of user record attributes used to indicate last name",
            "nullable": true
          },
          "new_user_migration_types": {
            "type": "string",
            "description": "Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'",
            "nullable": true
          },
          "alternate_email_login_allowed": {
            "type": "boolean",
            "description": "Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.",
            "nullable": false
          },
          "test_slug": {
            "type": "string",
            "readOnly": true,
            "description": "Slug to identify configurations that are created in order to run a Saml config test",
            "nullable": true
          },
          "modified_at": {
            "type": "string",
            "readOnly": true,
            "description": "When this config was last modified",
            "nullable": true
          },
          "modified_by": {
            "type": "string",
            "readOnly": true,
            "description": "User id of user who last modified this config",
            "nullable": true
          },
          "default_new_user_roles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Role" },
            "readOnly": true,
            "description": "(Read-only) Roles that will be applied to new users the first time they login via Saml",
            "nullable": true
          },
          "default_new_user_groups": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Group" },
            "readOnly": true,
            "description": "(Read-only) Groups that will be applied to new users the first time they login via Saml",
            "nullable": true
          },
          "default_new_user_role_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "x-looker-write-only": true,
            "description": "(Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml",
            "nullable": true
          },
          "default_new_user_group_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "x-looker-write-only": true,
            "description": "(Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml",
            "nullable": true
          },
          "set_roles_from_groups": {
            "type": "boolean",
            "description": "Set user roles in Looker based on groups from Saml",
            "nullable": false
          },
          "groups_attribute": {
            "type": "string",
            "description": "Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SamlGroupRead" },
            "readOnly": true,
            "description": "(Read-only) Array of mappings between Saml Groups and Looker Roles",
            "nullable": true
          },
          "groups_with_role_ids": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SamlGroupWrite" },
            "description": "(Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids",
            "nullable": true
          },
          "auth_requires_role": {
            "type": "boolean",
            "description": "Users will not be allowed to login at all unless a role for them is found in Saml if set to true",
            "nullable": false
          },
          "user_attributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SamlUserAttributeRead" },
            "readOnly": true,
            "description": "(Read-only) Array of mappings between Saml User Attributes and Looker User Attributes",
            "nullable": true
          },
          "user_attributes_with_ids": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SamlUserAttributeWrite" },
            "description": "(Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids",
            "nullable": true
          },
          "groups_finder_type": {
            "type": "string",
            "description": "Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']",
            "nullable": true
          },
          "groups_member_value": {
            "type": "string",
            "description": "Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'",
            "nullable": true
          },
          "bypass_login_page": {
            "type": "boolean",
            "description": "Bypass the login page when user authentication is required. Redirect to IdP immediately instead.",
            "nullable": false
          },
          "allow_normal_group_membership": {
            "type": "boolean",
            "description": "Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.",
            "nullable": false
          },
          "allow_roles_from_normal_groups": {
            "type": "boolean",
            "description": "SAML auth'd users will inherit roles from non-reflected Looker groups.",
            "nullable": false
          },
          "allow_direct_roles": {
            "type": "boolean",
            "description": "Allows roles to be directly assigned to SAML auth'd users.",
            "nullable": false
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "SamlGroupRead": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of group in Saml",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Role" },
            "readOnly": true,
            "description": "Looker Roles",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to saml config",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "SamlGroupWrite": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of group in Saml",
            "nullable": true
          },
          "role_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "description": "Looker Role Ids",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to saml config",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "SamlMetadataParseResult": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "idp_issuer": {
            "type": "string",
            "readOnly": true,
            "description": "Identify Provider Issuer",
            "nullable": true
          },
          "idp_url": {
            "type": "string",
            "readOnly": true,
            "description": "Identify Provider Url",
            "nullable": true
          },
          "idp_cert": {
            "type": "string",
            "readOnly": true,
            "description": "Identify Provider Certificate",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "SamlUserAttributeRead": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of User Attribute in Saml",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "readOnly": true,
            "description": "Required to be in Saml assertion for login to be allowed to succeed",
            "nullable": false
          },
          "user_attributes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserAttribute" },
            "readOnly": true,
            "description": "Looker User Attributes",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to saml config",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "SamlUserAttributeWrite": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of User Attribute in Saml",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "description": "Required to be in Saml assertion for login to be allowed to succeed",
            "nullable": false
          },
          "user_attribute_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "description": "Looker User Attribute Ids",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to saml config",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "ScheduledPlanDestination": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "scheduled_plan_id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of a scheduled plan you own",
            "nullable": true
          },
          "format": {
            "type": "string",
            "description": "The data format to send to the given destination. Supported formats vary by destination, but include: \"txt\", \"csv\", \"inline_json\", \"json\", \"json_detail\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\"",
            "nullable": true
          },
          "apply_formatting": {
            "type": "boolean",
            "description": "Are values formatted? (containing currency symbols, digit separators, etc.",
            "nullable": false
          },
          "apply_vis": {
            "type": "boolean",
            "description": "Whether visualization options are applied to the results.",
            "nullable": false
          },
          "address": {
            "type": "string",
            "description": "Address for recipient. For email e.g. 'user@example.com'. For webhooks e.g. 'https://domain/path'. For Amazon S3 e.g. 's3://bucket-name/path/'. For SFTP e.g. 'sftp://host-name/path/'. ",
            "nullable": true
          },
          "looker_recipient": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the recipient is a Looker user on the current instance (only applicable for email recipients)",
            "nullable": false
          },
          "type": {
            "type": "string",
            "description": "Type of the address ('email', 'webhook', 's3', or 'sftp')",
            "nullable": true
          },
          "parameters": {
            "type": "string",
            "description": "JSON object containing parameters for external scheduling. For Amazon S3, this requires keys and values for access_key_id and region. For SFTP, this requires a key and value for username.",
            "nullable": true
          },
          "secret_parameters": {
            "type": "string",
            "x-looker-write-only": true,
            "description": "(Write-Only) JSON object containing secret parameters for external scheduling. For Amazon S3, this requires a key and value for secret_access_key. For SFTP, this requires a key and value for password.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Optional message to be included in scheduled emails",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "ScheduledPlan": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of this scheduled plan",
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "User Id which owns this scheduled plan",
            "nullable": true
          },
          "run_as_recipient": {
            "type": "boolean",
            "description": "Whether schedule is run as recipient (only applicable for email recipients)",
            "nullable": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the ScheduledPlan is enabled",
            "nullable": false
          },
          "look_id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of a look",
            "nullable": true
          },
          "dashboard_id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of a dashboard",
            "nullable": true
          },
          "lookml_dashboard_id": {
            "type": "string",
            "description": "Id of a LookML dashboard",
            "nullable": true
          },
          "filters_string": {
            "type": "string",
            "description": "Query string to run look or dashboard with",
            "nullable": true
          },
          "dashboard_filters": {
            "type": "string",
            "x-looker-deprecated": true,
            "description": "(DEPRECATED) Alias for filters_string field",
            "nullable": true
          },
          "require_results": {
            "type": "boolean",
            "description": "Delivery should occur if running the dashboard or look returns results",
            "nullable": false
          },
          "require_no_results": {
            "type": "boolean",
            "description": "Delivery should occur if the dashboard look does not return results",
            "nullable": false
          },
          "require_change": {
            "type": "boolean",
            "description": "Delivery should occur if data have changed since the last run",
            "nullable": false
          },
          "send_all_results": {
            "type": "boolean",
            "description": "Will run an unlimited query and send all results.",
            "nullable": false
          },
          "crontab": {
            "type": "string",
            "description": "Vixie-Style crontab specification when to run",
            "nullable": true
          },
          "datagroup": {
            "type": "string",
            "description": "Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "description": "Timezone for interpreting the specified crontab (default is Looker instance timezone)",
            "nullable": true
          },
          "query_id": {
            "type": "string",
            "description": "Query id",
            "nullable": true
          },
          "scheduled_plan_destination": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledPlanDestination"
            },
            "description": "Scheduled plan destinations",
            "nullable": true
          },
          "run_once": {
            "type": "boolean",
            "description": "Whether the plan in question should only be run once (usually for testing)",
            "nullable": false
          },
          "include_links": {
            "type": "boolean",
            "description": "Whether links back to Looker should be included in this ScheduledPlan",
            "nullable": false
          },
          "pdf_paper_size": {
            "type": "string",
            "description": "The size of paper the PDF should be formatted to fit. Valid values are: \"letter\", \"legal\", \"tabloid\", \"a0\", \"a1\", \"a2\", \"a3\", \"a4\", \"a5\".",
            "nullable": true
          },
          "pdf_landscape": {
            "type": "boolean",
            "description": "Whether the PDF should be formatted for landscape orientation",
            "nullable": false
          },
          "embed": {
            "type": "boolean",
            "description": "Whether this schedule is in an embed context or not",
            "nullable": false
          },
          "color_theme": {
            "type": "string",
            "description": "Color scheme of the dashboard if applicable",
            "nullable": true
          },
          "long_tables": {
            "type": "boolean",
            "description": "Whether or not to expand table vis to full length",
            "nullable": false
          },
          "prewarm_only": {
            "type": "boolean",
            "description": "Whether this plan is meant to be used solely to warmup the cache with data",
            "x-looker-undocumented": false,
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Date and time when ScheduledPlan was created",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Date and time when ScheduledPlan was last updated",
            "nullable": true
          },
          "title": {
            "type": "string",
            "readOnly": true,
            "description": "Title",
            "nullable": true
          },
          "user": { "$ref": "#/components/schemas/UserPublic" },
          "next_run_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "When the ScheduledPlan will next run (null if running once)",
            "nullable": true
          },
          "last_run_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "When the ScheduledPlan was last run",
            "nullable": true
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "Session": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "ip_address": {
            "type": "string",
            "readOnly": true,
            "description": "IP address of user when this session was initiated",
            "nullable": true
          },
          "browser": {
            "type": "string",
            "readOnly": true,
            "description": "User's browser type",
            "nullable": true
          },
          "operating_system": {
            "type": "string",
            "readOnly": true,
            "description": "User's Operating System",
            "nullable": true
          },
          "city": {
            "type": "string",
            "readOnly": true,
            "description": "City component of user location (derived from IP address)",
            "nullable": true
          },
          "state": {
            "type": "string",
            "readOnly": true,
            "description": "State component of user location (derived from IP address)",
            "nullable": true
          },
          "country": {
            "type": "string",
            "readOnly": true,
            "description": "Country component of user location (derived from IP address)",
            "nullable": true
          },
          "credentials_type": {
            "type": "string",
            "readOnly": true,
            "description": "Type of credentials used for logging in this session",
            "nullable": true
          },
          "extended_at": {
            "type": "string",
            "readOnly": true,
            "description": "Time when this session was last extended by the user",
            "nullable": true
          },
          "extended_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times this session was extended",
            "nullable": true
          },
          "sudo_user_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Actual user in the case when this session represents one user sudo'ing as another",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Time when this session was initiated",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "readOnly": true,
            "description": "Time when this session will expire",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "Snippet": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the snippet",
            "nullable": false
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Label of the snippet",
            "nullable": false
          },
          "sql": {
            "type": "string",
            "readOnly": true,
            "description": "SQL text of the snippet",
            "nullable": false
          },
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          }
        },
        "x-looker-status": "stable"
      },
      "SqlQueryCreate": {
        "properties": {
          "connection_name": {
            "type": "string",
            "description": "Name of the db connection on which to run this query",
            "nullable": true
          },
          "connection_id": {
            "type": "string",
            "x-looker-deprecated": true,
            "description": "(DEPRECATED) Use `connection_name` instead",
            "nullable": true
          },
          "model_name": {
            "type": "string",
            "description": "Name of LookML Model (this or `connection_id` required)",
            "nullable": true
          },
          "sql": {
            "type": "string",
            "description": "SQL query",
            "nullable": true
          },
          "vis_config": {
            "type": "object",
            "additionalProperties": { "type": "string", "format": "any" },
            "description": "Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \"type\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      },
      "SqlQuery": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "The identifier of the SQL query",
            "nullable": false
          },
          "last_runtime": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Number of seconds this query took to run the most recent time it was run",
            "nullable": true
          },
          "run_count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of times this query has been run",
            "nullable": false
          },
          "browser_limit": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Maximum number of rows this query will display on the SQL Runner page",
            "nullable": false
          },
          "sql": {
            "type": "string",
            "readOnly": true,
            "description": "SQL query text",
            "nullable": false
          },
          "last_run_at": {
            "type": "string",
            "readOnly": true,
            "description": "The most recent time this query was run",
            "nullable": true
          },
          "connection": { "$ref": "#/components/schemas/DBConnectionBase" },
          "model_name": {
            "type": "string",
            "readOnly": true,
            "description": "Model name this query uses",
            "nullable": true
          },
          "creator": { "$ref": "#/components/schemas/UserPublic" },
          "explore_url": {
            "type": "string",
            "readOnly": true,
            "description": "Explore page URL for this SQL query",
            "nullable": true
          },
          "plaintext": {
            "type": "boolean",
            "readOnly": true,
            "description": "Should this query be rendered as plain text",
            "nullable": false
          },
          "vis_config": {
            "type": "object",
            "additionalProperties": { "type": "string", "format": "any" },
            "description": "Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \"type\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "Timezone": {
        "properties": {
          "value": {
            "type": "string",
            "readOnly": true,
            "description": "Timezone",
            "nullable": true
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Description of timezone",
            "nullable": true
          },
          "group": {
            "type": "string",
            "readOnly": true,
            "description": "Timezone group (e.g Common, Other, etc.)",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "UserAttribute": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "Name of user attribute",
            "nullable": true
          },
          "label": {
            "type": "string",
            "description": "Human-friendly label for user attribute",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Type of user attribute (\"string\", \"number\", \"datetime\", \"yesno\", \"zipcode\")",
            "nullable": true
          },
          "default_value": {
            "type": "string",
            "description": "Default value for when no value is set on the user",
            "nullable": true
          },
          "is_system": {
            "type": "boolean",
            "readOnly": true,
            "description": "Attribute is a system default",
            "nullable": false
          },
          "is_permanent": {
            "type": "boolean",
            "readOnly": true,
            "description": "Attribute is permanent and cannot be deleted",
            "nullable": false
          },
          "value_is_hidden": {
            "type": "boolean",
            "description": "If true, users will not be able to view values of this attribute",
            "nullable": false
          },
          "user_can_view": {
            "type": "boolean",
            "description": "Non-admin users can see the values of their attributes and use them in filters",
            "nullable": false
          },
          "user_can_edit": {
            "type": "boolean",
            "description": "Users can change the value of this attribute for themselves",
            "nullable": false
          },
          "hidden_value_domain_whitelist": {
            "type": "string",
            "description": "Destinations to which a hidden attribute may be sent. Once set, cannot be edited.",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "UserAttributeGroupValue": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id of this group-attribute relation",
            "nullable": false
          },
          "group_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of group",
            "nullable": true
          },
          "user_attribute_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of user attribute",
            "nullable": true
          },
          "value_is_hidden": {
            "type": "boolean",
            "readOnly": true,
            "description": "If true, the \"value\" field will be null, because the attribute settings block access to this value",
            "nullable": false
          },
          "rank": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Precedence for resolving value for user",
            "nullable": true
          },
          "value": {
            "type": "string",
            "readOnly": true,
            "description": "Value of user attribute for group",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "UserAttributeWithValue": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Name of user attribute",
            "nullable": true
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Human-friendly label for user attribute",
            "nullable": true
          },
          "rank": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Precedence for setting value on user (lowest wins)",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Value of attribute for user",
            "nullable": true
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of User",
            "nullable": true
          },
          "user_can_edit": {
            "type": "boolean",
            "readOnly": true,
            "description": "Can the user set this value",
            "nullable": false
          },
          "value_is_hidden": {
            "type": "boolean",
            "readOnly": true,
            "description": "If true, the \"value\" field will be null, because the attribute settings block access to this value",
            "nullable": false
          },
          "user_attribute_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Id of User Attribute",
            "nullable": true
          },
          "source": {
            "type": "string",
            "readOnly": true,
            "description": "How user got this value for this attribute",
            "nullable": true
          },
          "hidden_value_domain_whitelist": {
            "type": "string",
            "readOnly": true,
            "description": "If this user attribute is hidden, whitelist of destinations to which it may be sent.",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "UserIdOnly": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "User": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "URL for the avatar image (may be generic)",
            "nullable": true
          },
          "avatar_url_without_sizing": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "URL for the avatar image (may be generic), does not specify size",
            "nullable": true
          },
          "credentials_api3": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CredentialsApi3" },
            "readOnly": true,
            "description": "API 3 credentials",
            "nullable": true
          },
          "credentials_email": {
            "$ref": "#/components/schemas/CredentialsEmail"
          },
          "credentials_embed": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CredentialsEmbed" },
            "readOnly": true,
            "description": "Embed credentials",
            "nullable": true
          },
          "credentials_google": {
            "$ref": "#/components/schemas/CredentialsGoogle"
          },
          "credentials_ldap": {
            "$ref": "#/components/schemas/CredentialsLDAP"
          },
          "credentials_looker_openid": {
            "$ref": "#/components/schemas/CredentialsLookerOpenid"
          },
          "credentials_oidc": {
            "$ref": "#/components/schemas/CredentialsOIDC"
          },
          "credentials_saml": {
            "$ref": "#/components/schemas/CredentialsSaml"
          },
          "credentials_totp": {
            "$ref": "#/components/schemas/CredentialsTotp"
          },
          "display_name": {
            "type": "string",
            "readOnly": true,
            "description": "Full name for display (available only if both first_name and last_name are set)",
            "nullable": true
          },
          "email": {
            "type": "string",
            "readOnly": true,
            "description": "EMail address",
            "nullable": true
          },
          "embed_group_space_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "(Embed only) ID of user's group space based on the external_group_id optionally specified during embed user login",
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "group_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "readOnly": true,
            "description": "Array of ids of the groups for this user",
            "nullable": true
          },
          "home_space_id": {
            "type": "string",
            "description": "ID string for user's home space",
            "nullable": true
          },
          "home_folder_id": {
            "type": "string",
            "description": "ID string for user's home folder",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "is_disabled": {
            "type": "boolean",
            "description": "Account has been disabled",
            "nullable": false
          },
          "last_name": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "locale": {
            "type": "string",
            "description": "User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example.",
            "nullable": true
          },
          "looker_versions": {
            "type": "array",
            "items": { "type": "string" },
            "readOnly": true,
            "description": "Array of strings representing the Looker versions that this user has used (this only goes back as far as '3.54.0')",
            "nullable": true
          },
          "models_dir_validated": {
            "type": "boolean",
            "description": "User's dev workspace has been checked for presence of applicable production projects",
            "nullable": true
          },
          "personal_space_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "ID of user's personal space",
            "nullable": true
          },
          "personal_folder_id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "ID of user's personal folder",
            "nullable": true
          },
          "presumed_looker_employee": {
            "type": "boolean",
            "readOnly": true,
            "description": "User is identified as an employee of Looker",
            "nullable": false
          },
          "role_ids": {
            "type": "array",
            "items": { "type": "integer", "format": "int64" },
            "readOnly": true,
            "description": "Array of ids of the roles for this user",
            "nullable": true
          },
          "sessions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Session" },
            "readOnly": true,
            "description": "Active sessions",
            "nullable": true
          },
          "ui_state": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Per user dictionary of undocumented state information owned by the Looker UI.",
            "nullable": true
          },
          "verified_looker_employee": {
            "type": "boolean",
            "readOnly": true,
            "description": "User is identified as an employee of Looker who has been verified via Looker corporate authentication",
            "nullable": false
          },
          "roles_externally_managed": {
            "type": "boolean",
            "readOnly": true,
            "description": "User's roles are managed by an external directory like SAML or LDAP and can not be changed directly.",
            "nullable": false
          },
          "credentials_api": { "$ref": "#/components/schemas/CredentialsApi" },
          "access_filters": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AccessFilter" },
            "readOnly": true,
            "description": "Model access filters. NOTE: this feature is completely end of life and has been removed from the product.",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "UserPublic": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "first_name": {
            "type": "string",
            "readOnly": true,
            "description": "First Name",
            "nullable": false
          },
          "last_name": {
            "type": "string",
            "readOnly": true,
            "description": "Last Name",
            "nullable": false
          },
          "display_name": {
            "type": "string",
            "readOnly": true,
            "description": "Full name for display (available only if both first_name and last_name are set)",
            "nullable": true
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "URL for the avatar image (may be generic)",
            "nullable": false
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to get this item",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "ApiVersionElement": {
        "properties": {
          "version": {
            "type": "string",
            "readOnly": true,
            "description": "Version number as it appears in '/api/xxx/' urls",
            "nullable": true
          },
          "full_version": {
            "type": "string",
            "readOnly": true,
            "description": "Full version number including minor version",
            "nullable": true
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "description": "Status of this version",
            "nullable": true
          },
          "swagger_url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Url for swagger.json for this version",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "ApiVersion": {
        "properties": {
          "looker_release_version": {
            "type": "string",
            "readOnly": true,
            "description": "Current Looker release version number",
            "nullable": true
          },
          "current_version": {
            "$ref": "#/components/schemas/ApiVersionElement"
          },
          "supported_versions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ApiVersionElement" },
            "readOnly": true,
            "description": "Array of versions supported by this Looker instance",
            "nullable": true
          }
        },
        "x-looker-status": "stable"
      },
      "WhitelabelConfiguration": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Unique Id",
            "nullable": false
          },
          "logo_file": {
            "type": "string",
            "description": "Customer logo image. Expected base64 encoded data (write-only)",
            "nullable": true
          },
          "logo_url": {
            "type": "string",
            "readOnly": true,
            "description": "Logo image url (read-only)",
            "nullable": true
          },
          "favicon_file": {
            "type": "string",
            "description": "Custom favicon image. Expected base64 encoded data (write-only)",
            "nullable": true
          },
          "favicon_url": {
            "type": "string",
            "readOnly": true,
            "description": "Favicon image url (read-only)",
            "nullable": true
          },
          "default_title": {
            "type": "string",
            "description": "Default page title",
            "nullable": true
          },
          "show_help_menu": {
            "type": "boolean",
            "description": "Boolean to toggle showing help menus",
            "nullable": false
          },
          "show_docs": {
            "type": "boolean",
            "description": "Boolean to toggle showing docs",
            "nullable": false
          },
          "show_email_sub_options": {
            "type": "boolean",
            "description": "Boolean to toggle showing email subscription options.",
            "nullable": false
          },
          "allow_looker_mentions": {
            "type": "boolean",
            "description": "Boolean to toggle mentions of Looker in emails",
            "nullable": false
          },
          "allow_looker_links": {
            "type": "boolean",
            "description": "Boolean to toggle links to Looker in emails",
            "nullable": false
          },
          "custom_welcome_email_advanced": {
            "type": "boolean",
            "description": "Allow subject line and email heading customization in customized emails”",
            "nullable": false
          },
          "setup_mentions": {
            "type": "boolean",
            "description": "Remove the word Looker from appearing in the account setup page",
            "nullable": false
          },
          "alerts_logo": {
            "type": "boolean",
            "description": "Remove Looker logo from Alerts",
            "nullable": false
          },
          "alerts_links": {
            "type": "boolean",
            "description": "Remove Looker links from Alerts",
            "nullable": false
          },
          "folders_mentions": {
            "type": "boolean",
            "description": "Remove Looker mentions in home folder page when you don’t have any items saved",
            "nullable": false
          }
        },
        "x-looker-status": "beta"
      },
      "Workspace": {
        "properties": {
          "can": {
            "type": "object",
            "additionalProperties": { "type": "boolean" },
            "readOnly": true,
            "description": "Operations the current user is able to perform on this object",
            "nullable": false
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "The unique id of this user workspace. Predefined workspace ids include \"production\" and \"dev\"",
            "nullable": false
          },
          "projects": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Project" },
            "readOnly": true,
            "description": "The local state of each project in the workspace",
            "nullable": true
          }
        },
        "x-looker-status": "beta"
      }
    }
  }
}
